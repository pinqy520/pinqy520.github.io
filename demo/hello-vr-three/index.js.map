{"version":3,"sources":["webpack:///index.js","webpack:///webpack/bootstrap cf3e795a3d2909605009","webpack:///./src/index.coffee","webpack:///./src/style.css","webpack:///./~/css-loader/lib/css-base.js","webpack:///./~/style-loader/addStyles.js","webpack:///./src/style.css?2ad8","webpack:///./~/three/three.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","THREE","animate","box","camera","light","light2","render","renderer","scene","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","setSize","document","body","appendChild","domElement","DirectionalLight","position","set","add","Mesh","BoxGeometry","MeshPhongMaterial","color","specular","shininess","morphTargets","vertexColors","FaceColors","shading","FlatShading","rotation","x","y","z","requestAnimationFrame","timer","Date","now","Math","sin","push","list","toString","result","i","this","length","item","join","mediaQuery","alreadyImportedModules","addStylesToDom","styles","options","domStyle","stylesInDom","refs","j","parts","addStyle","listToStyles","newStyles","css","media","sourceMap","part","insertStyleElement","styleElement","head","getHeadElement","lastStyleElementInsertedAtTop","styleElementsInsertedAtTop","insertAt","nextSibling","insertBefore","firstChild","Error","removeStyleElement","parentNode","removeChild","idx","indexOf","splice","createStyleElement","createElement","type","createLinkElement","linkElement","rel","obj","update","remove","singleton","styleIndex","singletonCounter","singletonElement","applyToSingletonTag","bind","URL","createObjectURL","revokeObjectURL","Blob","btoa","updateLink","href","applyToTag","newObj","index","styleSheet","cssText","replaceText","cssNode","createTextNode","childNodes","setAttribute","unescape","encodeURIComponent","JSON","stringify","blob","oldSrc","memoize","fn","memo","apply","arguments","isOldIE","test","navigator","userAgent","toLowerCase","getElementsByTagName","newList","mayRemove","textStore","replacement","filter","Boolean","content","locals","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","REVISION","undefined","Number","EPSILON","pow","sign","Function","prototype","name","Object","defineProperty","get","match","assign","writable","configurable","value","target","TypeError","to","n","nextSource","keysArray","keys","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","enumerable","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","SmoothShading","NoColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","Color","fromArray","constructor","r","g","b","copy","setHex","setStyle","setScalar","scalar","hex","floor","setRGB","setHSL","hue2rgb","q","t","h","s","l","euclideanModulo","clamp","style","handleAlpha","string","parseFloat","console","warn","exec","components","min","parseInt","size","charAt","ColorKeywords","clone","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","sqrt","getHex","getHexString","slice","getHSL","optionalTarget","hue","saturation","hsl","max","lightness","delta","getStyle","offsetHSL","addColors","color1","color2","addScalar","multiply","multiplyScalar","lerp","alpha","equals","array","offset","toArray","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Quaternion","w","_x","_y","_z","_w","onChangeCallback","quaternion","setFromEuler","euler","Euler","c1","cos","c2","c3","s1","s2","s3","order","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","v1","EPS","vFrom","vTo","Vector3","dot","abs","crossVectors","normalize","inverse","conjugate","v","lengthSq","multiplyQuaternions","a","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","slerp","qb","cosHalfTheta","sinHalfTheta","halfTheta","atan2","ratioA","ratioB","onChange","callback","qa","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","tDir","f","Vector2","width","height","setX","setY","setComponent","getComponent","addVectors","addScaledVector","sub","subVectors","subScalar","isFinite","divide","divideScalar","clampScalar","minVal","maxVal","clampLength","ceil","round","roundToZero","negate","lengthManhattan","PI","distanceTo","distanceToSquared","dx","dy","setLength","lerpVectors","v2","fromAttribute","attribute","itemSize","rotateAround","center","setZ","multiplyVectors","applyEuler","error","applyQuaternion","applyAxisAngle","applyMatrix3","e","applyMatrix4","applyProjection","d","qx","qy","qz","qw","ix","iy","iz","iw","project","matrix","Matrix4","multiplyMatrices","projectionMatrix","getInverse","matrixWorld","unproject","transformDirection","cross","ax","ay","az","bx","by","bz","projectOnVector","vector","projectOnPlane","planeNormal","reflect","normal","angleTo","theta","acos","dz","setFromSpherical","sinPhiRadius","phi","radius","setFromMatrixPosition","setFromMatrixColumn","setFromMatrixScale","sx","sy","sz","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","epsilon","epsilon2","xx","yy","zz","xy","xz","yz","_order","DefaultOrder","RotationOrders","asin","setFromQuaternion","makeRotationFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","Line3","start","end","line","distanceSq","distance","at","closestPointToPointParameter","startP","startEnd","point","clampToLine","startEnd2","startEnd_startP","closestPointToPoint","Box2","Infinity","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","halfSize","isEmpty","expandByVector","expandByScalar","containsPoint","containsBox","getParameter","intersectsBox","clampPoint","distanceToPoint","clampedPoint","intersect","union","translate","Box3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromObject","object","scope","updateMatrixWorld","traverse","node","geometry","boundingBox","computeBoundingBox","intersectsSphere","closestPoint","sphere","intersectsPlane","plane","constant","getBoundingSphere","Sphere","Matrix3","Float32Array","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","me","setFromMatrix4","applyToVector3Array","applyToBuffer","buffer","getX","getY","getZ","setXYZ","determinant","throwOnDegenerate","t11","t12","t13","det","msg","transpose","tmp","flattenToArrayOffset","getNormalMatrix","matrix4","transposeIntoArray","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","x2","y2","z2","wx","wy","wz","lookAt","eye","up","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","getPosition","setPosition","t14","scale","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","compose","decompose","invSX","invSY","invSZ","makeFrustum","left","right","bottom","top","near","far","makePerspective","fov","aspect","ymax","degToRad","ymin","xmin","xmax","makeOrthographic","Ray","origin","direction","ray","recast","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","diff","v0","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","b1","invDet","intersectSphere","tca","d2","radius2","thc","t0","t1","distanceToPlane","denominator","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","Frustum","p0","p1","p2","p3","p4","p5","planes","Plane","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","intersectsObject","boundingSphere","computeBoundingSphere","negRadius","d1","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","intersectsLine","startSign","endSign","coplanarPoint","m1","optionalNormalMatrix","normalMatrix","newNormal","newCoplanarPoint","Spherical","other","makeSafe","vec3","generateUUID","chars","split","uuid","Array","rnd","random","mapLinear","a1","a2","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degreeToRadiansFactor","degrees","radToDeg","radianToDegreesFactor","radians","isPowerOfTwo","nearestPowerOfTwo","log","LN2","nextPowerOfTwo","Spline","interpolate","t2","t3","intPoint","weight","w2","w3","pa","pb","pc","pd","v3","initFromArray","getPoint","k","getControlPointsArray","coords","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","chunks","total","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","Triangle","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","setFromPointsAndIndices","i0","i1","i2","triangle","area","midpoint","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","values","stride","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","create","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","DiscreteInterpolant","LinearInterpolant","offset1","offset0","weight1","weight0","QuaternionLinearInterpolant","Clock","autoStart","startTime","oldTime","elapsedTime","running","performance","stop","getElapsedTime","getDelta","newTime","EventDispatcher","addEventListener","hasEventListener","removeEventListener","dispatchEvent","listener","_listeners","listeners","listenerArray","event","Layers","mask","channel","enable","toggle","disable","layers","ascSort","intersectObject","raycaster","intersects","recursive","visible","raycast","children","Raycaster","params","Line","LOD","Points","threshold","Sprite","defineProperties","PointCloud","linePrecision","setFromCamera","OrthographicCamera","sort","intersectObjects","objects","isArray","Object3D","onRotationChange","onQuaternionChange","Object3DIdCount","parent","DefaultUp","modelViewMatrix","rotationAutoUpdate","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","castShadow","receiveShadow","frustumCulled","renderOrder","userData","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","q1","rotateX","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","getObjectById","getObjectByProperty","getObjectByName","child","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","updateMatrix","force","toJSON","meta","extractFromCache","cache","key","data","metadata","isRootObject","output","geometries","materials","textures","images","version","generator","material","source","parse","Face3","materialIndex","vertexNormals","BufferAttribute","dynamic","updateRange","count","needsUpdate","setDynamic","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyIndicesArray","indices","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXY","setXYZW","Int8Attribute","Int8Array","Uint8Attribute","Uint8Array","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Uint16Array","Int32Attribute","Int32Array","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","InstancedBufferAttribute","meshPerAttribute","InterleavedBuffer","InstancedInterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","Geometry","GeometryIdCount","vertices","faces","faceVertexUvs","morphNormals","skinWeights","skinIndices","lineDistances","verticesNeedUpdate","elementsNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","vertex","face","jl","fromBufferGeometry","addFace","normals","tempNormals","uvs","tempUVs","uvs2","tempUVs2","attributes","positions","uv","uv2","groups","group","computeFaceNormals","cb","ab","fl","vA","vB","vC","computeVertexNormals","areaWeighted","vl","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","faceNormal","dstNormalsFace","dstNormalsVertex","computeTangents","computeLineDistances","merge","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","precisionPoints","precision","faceIndicesToRemove","dupIndex","sortFacesByMaterialIndex","materialIndexSort","_id","newUvs1","newUvs2","setBit","enabled","getNormalIndex","hash","normalsHash","getColorIndex","colorsHash","getUvIndex","uvsHash","parameters","hasMaterial","hasFaceUv","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","uvsCopy","kl","dispose","DirectGeometry","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","BufferGeometry","morphAttributes","drawRange","getIndex","setIndex","addAttribute","getAttribute","removeAttribute","addGroup","clearGroups","setDrawRange","updateFromObject","direct","__directGeometry","lineDistance","fromDirectGeometry","TypeArray","isNaN","pA","pB","pC","normalizeNormals","attribute1","attributeArray1","attribute2","attributeArray2","attributeSize","toNonIndexed","geometry2","array2","MaxIndex","InstancedBufferGeometry","maxInstancedCount","instances","Uniform","onUpdate","onUpdateCallback","AnimationClip","duration","tracks","resetDuration","trim","optimize","track","times","json","jsonTracks","frameTime","fps","KeyframeTrack","clip","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","numMorphTargets","AnimationUtils","getKeyframeOrder","sortedArray","NumberKeyframeTrack","findByName","clipArray","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","animationMorphTargets","clips","parseAnimation","animation","bones","nodeName","addNonemptyTrack","trackType","trackName","animationKeys","propertyName","destTracks","flattenJSON","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","animationKey","time","boneName","VectorKeyframeTrack","QuaternionKeyframeTrack","AnimationMixer","root","_root","_initMemoryManager","_accuIndex","timeScale","clipAction","optionalRoot","prototypeAction","rootUuid","clipObject","actionsForClip","_actionsByClip","existingAction","actionByRoot","knownActions","_clip","newAction","_Action","_bindAction","_addInactiveAction","stopAllAction","actions","_actions","nActions","_nActiveActions","bindings","_bindings","nBindings","_nActiveBindings","reset","useCount","deltaTime","timeDirection","accuIndex","action","_update","getRoot","uncacheClip","actionsByClip","actionsToRemove","_deactivateAction","cacheIndex","_cacheIndex","lastInactiveAction","_byClipCacheIndex","pop","_removeInactiveBindingsForAction","uncacheRoot","_removeInactiveAction","bindingsByRoot","_bindingsByRootAndName","bindingByName","binding","restoreOriginalState","_removeInactiveBinding","uncacheAction","mixer","localRoot","_mixer","_localRoot","nTracks","interpolants","interpolantSettings","interpolant","createInterpolant","_interpolantSettings","_interpolants","_propertyBindings","_timeScaleInterpolant","_weightInterpolant","loop","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","play","_activateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setLoop","mode","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","halt","_currentTimeScale","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","accumulate","interpolantValue","pause","loopCount","pingPong","_setEndings","loopDelta","pending","atStart","atEnd","weightNow","weightThen","bindingsByName","referenceCount","_addInactiveBinding","path","parsedPath","PropertyMixer","PropertyBinding","ValueTypeName","getValueSize","_lendBinding","saveOriginalState","_lendAction","_takeBackBinding","_takeBackAction","_controlInterpolants","_nActiveControlInterpolants","stats","inUse","controlInterpolants","knownActionsForClip","lastKnownAction","byClipCacheIndex","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","propBinding","rootNode","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","AnimationObjectGroup","var_args","_objects","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","bindingsPerObject","nObjects","nCachedObjects","indicesByUUID","paths","parsedPaths","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastIndex","lastObject","last","subscribe_","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","lastBindingsPath","arraySlice","from","isTypedArray","subarray","convertArray","forceClone","BYTES_PER_ELEMENT","ArrayBuffer","isView","DataView","compareTime","nValues","srcOffset","jsonKeys","valuePropertyName","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","validate","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","getInterpolation","shift","timeOffset","endTime","nKeys","valid","prevTime","currTime","writeIndex","keep","timeNext","offsetP","offsetN","readOffset","writeOffset","_getTrackTypeForValueTypeName","typeName","ColorKeyframeTrack","BooleanKeyframeTrack","StringKeyframeTrack","parseTrackName","findNode","getValue","targetArray","setValue","sourceArray","targetObject","objectName","propertyIndex","_getValue_unavailable","_setValue_unavailable","objectIndex","skeleton","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","resolvedProperty","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","_getValue_unbound","_setValue_unbound","dest","Composite","targetGroup","optionalParsedPath","_targetGroup","firstValidIndex","re","matches","results","searchSkeleton","bone","searchNodeSubtree","childNode","subTreeNode","mixFunction","bufferType","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","currentWeight","mix","originalValueOffset","IntepolateDiscrete","Audio","context","createBufferSource","onended","onEnded","gain","createGain","connect","getInput","autoplay","playbackRate","isPlaying","hasPlaybackControl","sourceType","getOutput","load","file","AudioBuffer","setBuffer","setNodeSource","audioNode","audioBuffer","onReady","currentTime","disconnect","getFilter","setFilter","setPlaybackRate","getPlaybackRate","getLoop","setVolume","getVolume","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getData","getByteFrequencyData","ready","readyCallbacks","request","XMLHttpRequest","open","responseType","onload","decodeAudioData","response","send","PositionalAudio","panner","createPanner","setRefDistance","refDistance","getRefDistance","setRolloffFactor","rolloffFactor","getRolloffFactor","setDistanceModel","distanceModel","getDistanceModel","setMaxDistance","maxDistance","getMaxDistance","AudioListener","AudioContext","webkitAudioContext","destination","removeFilter","setMasterVolume","getMasterVolume","orientation","setOrientation","Camera","matrixWorldInverse","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","format","magFilter","minFilter","renderTarget","WebGLRenderTargetCube","updateCubeMap","generateMipmaps","texture","activeCubeFace","setRenderTarget","zoom","updateProjectionMatrix","cx","cy","focalLength","setLens","frameHeight","atan","setViewOffset","fullWidth","fullHeight","StereoCamera","cameraL","cameraR","eyeRight","eyeLeft","eyeSep","eyeSepOnProjection","Light","intensity","groundColor","decay","penumbra","LightShadow","bias","mapSize","map","AmbientLight","shadow","HemisphereLight","skyColor","PointLight","power","SpotLight","Cache","files","clear","Loader","onLoadStart","onLoadProgress","onLoadComplete","crossOrigin","extractUrlBase","url","initMaterials","texturePath","createMaterial","textureLoader","materialLoader","loadTexture","repeat","wrap","anisotropy","fullPath","loader","Handlers","setCrossOrigin","wrapS","wrapT","TextureLoader","MaterialLoader","blending","emissive","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","lightMap","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","aoMap","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","bumpMap","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","bumpScale","normalMap","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","normalScale","specularMap","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","alphaMap","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","side","opacity","transparent","setTextures","handlers","regex","XHRLoader","manager","DefaultLoadingManager","onLoad","onProgress","onError","cached","setTimeout","overrideMimeType","status","itemEnd","itemError","withCredentials","itemStart","setPath","setResponseType","setWithCredentials","FontLoader","text","Font","substring","ImageLoader","image","src","JSONLoader","statusDomElement","_statusDomElement","setTexturePath","parseModel","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","faceA","faceB","uvLayer","nUvLayers","parseSkin","influencesPerVertex","parseMorphing","dstVertices","srcVertices","morphColors","parseAnimations","outputAnimations","animations","concat","morphAnimationClips","LoadingManager","isLoading","itemsLoaded","itemsTotal","onStart","BufferGeometryLoader","TYPED_ARRAYS","typedArray","drawcalls","offsets","getTexture","roughness","metalness","uniforms","vertexShader","fragmentShader","alphaTest","depthTest","depthWrite","colorWrite","wireframe","wireframeLinewidth","sizeAttenuation","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","emissiveIntensity","envMap","combine","reflectivity","lightMapIntensity","aoMapIntensity","ObjectLoader","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","widthSegments","heightSegments","depth","depthSegments","segments","thetaStart","thetaLength","radiusTop","radiusBottom","radialSegments","openEnded","phiStart","phiLength","DodecahedronGeometry","detail","IcosahedronGeometry","OctahedronGeometry","TetrahedronGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","tube","tubularSegments","arc","LatheGeometry","loadImage","parseConstant","Texture","mapping","getGeometry","getMaterial","SkinnedMesh","Group","levels","level","addLevel","CubeTextureLoader","urls","CubeTexture","DataTextureLoader","BinaryTextureLoader","_parser","DataTexture","texData","mipmaps","mipmapCount","CompressedTextureLoader","texDatas","CompressedTexture","isCubemap","Material","MaterialIdCount","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","overdraw","_needsUpdate","setValues","newValue","currentValue","isRoot","LineBasicMaterial","linewidth","linecap","linejoin","fog","LineDashedMaterial","dashSize","gapSize","MeshBasicMaterial","refractionRatio","wireframeLinecap","wireframeLinejoin","skinning","MeshLambertMaterial","MeshStandardMaterial","envMapIntensity","MeshDepthMaterial","MeshNormalMaterial","MultiMaterial","PointsMaterial","ShaderMaterial","defines","lights","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","UniformsUtils","RawShaderMaterial","SpriteMaterial","TextureIdCount","sourceFile","DEFAULT_IMAGE","DEFAULT_MAPPING","premultiplyAlpha","flipY","unpackAlignment","encoding","getDataURL","canvas","toDataURL","getContext","drawImage","transformUv","CanvasTexture","VideoTexture","video","readyState","HAVE_ENOUGH_DATA","inverseMatrix","testPoint","rayPointDistanceSq","localThresholdSq","intersectPoint","distanceToRay","localThreshold","LineSegments","precisionSq","vStart","vEnd","interSegment","interRay","step","distSq","faceIndex","nbVertices","LineStrip","LinePieces","drawMode","updateMorphTargets","setDrawMode","morphTargetBase","morphTargetInfluences","morphTargetDictionary","ml","getMorphTargetIndexByName","uvIntersection","uv1","uv3","barycoord","checkIntersection","intersectionPointWorld","checkBufferGeometryIntersection","intersection","intersectionPoint","uvA","uvB","uvC","tempA","tempB","tempC","fvA","fvB","fvC","isFaceMaterial","faceMaterial","morphInfluences","tl","influence","targets","uvs_f","Bone","skin","Skeleton","boneInverses","useVertexTexture","identityMatrix","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","pose","offsetMatrix","bindMode","bindMatrix","bindMatrixInverse","gbone","pos","rotq","scl","normalizeSkinWeights","sw","vec","skinWeight","getObjectForDistance","matrixPosition","guessSizeSq","Particle","LensFlare","lensFlares","positionScreen","customUpdateCallback","updateLensFlares","flare","vecX","vecY","wantedRotation","overrideMaterial","autoUpdate","Fog","FogExp2","density","ShaderChunk","merged","uniforms_src","uniforms_dst","parameter_src","UniformsLib","common","diffuse","offsetRepeat","flipEnvMap","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","directionalLights","properties","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","spotShadowMap","spotShadowMatrix","pointLights","pointShadowMap","pointShadowMatrix","hemisphereLights","ShaderLib","basic","lambert","phong","standard","dashed","totalSize","mNear","mFar","cube","tCube","tFlip","equirect","tEquirect","depthRGBA","distanceRGBA","lightPos","getTargetPixelRatio","_currentRenderTarget","_pixelRatio","glClearColor","_premultipliedAlpha","state","clearColor","setDefaultGLState","init","scissor","_currentScissor","_scissor","viewport","_currentViewport","_viewport","_clearColor","_clearAlpha","resetGLState","_currentProgram","_currentCamera","_currentGeometryProgram","_currentMaterialId","onContextLost","preventDefault","onTextureDispose","deallocateTexture","_infoMemory","onRenderTargetDispose","deallocateRenderTarget","onMaterialDispose","deallocateMaterial","textureProperties","__image__webglTextureCube","_gl","deleteTexture","__webglInit","__webglTexture","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","deleteRenderbuffer","__webglDepthbuffer","releaseMaterialProgramReference","programInfo","program","programCache","releaseProgram","setupVertexAttributes","startIndex","extension","initAttributes","geometryAttributes","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","getAttributeBuffer","enableAttributeAndDivisor","enableAttribute","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","disableUnusedAttributes","absNumericalSort","painterSortStable","reversePainterSortStable","pushRenderItem","transparentObjects","transparentObjectsLastIndex","opaqueObjects","opaqueObjectsLastIndex","renderItem","_vector3","projectObject","_frustum","sprites","ImmediateRenderObject","_this","sortObjects","_projScreenMatrix","groupMaterial","renderObjects","renderList","setMaterial","setProgram","renderBufferImmediate","renderBufferDirect","initMaterial","materialProperties","getParameters","_lights","code","getProgramCode","programChange","shaderID","shader","__webglShader","acquireProgram","numSupportedMorphTargets","maxMorphTargets","numSupportedMorphNormals","maxMorphNormals","uniformsList","uniformLocations","getUniforms","location","lightsHash","ambient","directional","spot","hemi","hasDynamicUniforms","uniform","setMaterialFaces","setBlending","setDepthFunc","setDepthTest","setDepthWrite","setColorWrite","setPolygonOffset","CULL_FACE","setFlipSided","_usedTextureUnits","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","useProgram","uniformMatrix4fv","capabilities","logarithmicDepthBuffer","uniform1f","logDepthBufFC","cameraPosition","uniform3f","viewMatrix","toneMappingExposure","toneMappingWhitePoint","floatVertexTextures","textureUnit","getTextureUnit","uniform1i","setTexture","boneGlobalMatrices","markUniformsLightsNeedsUpdate","refreshUniformsFog","refreshUniformsCommon","refreshUniformsLine","refreshUniformsDash","refreshUniformsPoints","refreshUniformsLambert","refreshUniformsPhong","refreshUniformsStandard","loadUniformsGeneric","loadUniformsMatrices","modelMatrix","updateDynamicUniforms","dynamicUniforms","uvScaleMap","WebGLRenderTarget","_canvas","clientHeight","uniformMatrix3fv","maxTextures","loadUniform","uniform2f","uniform4f","uniform1iv","uniform3iv","uniform1fv","uniform2fv","uniform3fv","uniform4fv","uniformMatrix2fv","property","locationProperty","valueProperty","_array","i3","i4","setCubeTexture","setCubeTextureDynamic","setupLights","ll","directionalLength","pointLength","spotLength","hemiLength","shadowsLength","shadowsPointLight","lightCache","shadows","setTextureParameters","textureType","isPowerOfTwoImage","texParameteri","TEXTURE_WRAP_S","paramThreeToGL","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","CLAMP_TO_EDGE","filterFallback","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","uploadTexture","slot","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","clampToMaxSize","maxTextureSize","textureNeedsPowerOfTwo","makePowerOfTwo","glFormat","glType","mipmap","texImage2D","getCompressedTextureFormats","compressedTexImage2D","generateMipmap","__version","maxSize","HTMLImageElement","HTMLCanvasElement","TEXTURE_CUBE_MAP","isCompressed","isDataTexture","cubeImage","autoScaleCubemaps","maxCubemapSize","TEXTURE_CUBE_MAP_POSITIVE_X","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthRenderbuffer","isCube","createRenderbuffer","setupRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","updateRenderTargetMipmap","NEAREST","LINEAR","REPEAT","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_BYTE","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","HALF_FLOAT_OES","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN_EXT","MAX_EXT","_context","_alpha","_depth","_stencil","stencil","_antialias","antialias","_preserveDrawingBuffer","preserveDrawingBuffer","autoClear","autoClearColor","autoClearDepth","autoClearStencil","gammaInput","gammaOutput","physicallyCorrectLights","toneMapping","_currentFramebuffer","_currentScissorTest","_width","_height","_scissorTest","_infoRender","calls","info","memory","programs","getShaderPrecisionFormat","rangeMin","rangeMax","WebGLExtensions","WebGLCapabilities","WebGLState","WebGLProperties","WebGLObjects","WebGLPrograms","WebGLLights","bufferRenderer","WebGLBufferRenderer","indexedBufferRenderer","WebGLIndexedBufferRenderer","shadowMap","WebGLShadowMap","spritePlugin","SpritePlugin","lensFlarePlugin","LensFlarePlugin","getContextAttributes","forceContextLoss","loseContext","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getPrecision","getPixelRatio","setPixelRatio","getSize","updateStyle","setViewport","setScissor","setScissorTest","boolean","getClearColor","setClearColor","getClearAlpha","setClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearDepth","clearStencil","clearTarget","buffers","hasPositions","createBuffer","hasNormals","hasUvs","hasColors","bufferData","positionArray","DYNAMIC_DRAW","normalArray","nx","ny","nz","uvArray","colorArray","drawArrays","TRIANGLES","updateBuffers","geometryProgram","activeInfluences","getWireframeAttribute","ELEMENT_ARRAY_BUFFER","dataStart","dataCount","rangeStart","rangeCount","groupStart","groupCount","drawStart","drawEnd","drawCount","setLineWidth","setMode","LINES","TRIANGLE_STRIP","TRIANGLE_FAN","lineWidth","LINE_STRIP","POINTS","renderInstances","forceClear","setFaceCulling","cullFace","frontFaceDirection","frontFace","CW","CCW","BACK","FRONT","FRONT_AND_BACK","complete","getCurrentRenderTarget","scissorTest","activeMipMapLevel","readRenderTargetPixels","restore","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","drawArraysInstancedANGLE","drawElements","drawElementsInstancedANGLE","gl","getExtension","getMaxPrecision","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","_maxPrecision","WebGLGeometries","onGeometryDispose","buffergeometry","_bufferGeometry","deleteAttribute","deleteAttributes","bufferproperty","__webglBuffer","deleteBuffer","removeAttributeBuffer","updateAttribute","attributeProperties","updateBuffer","usage","STATIC_DRAW","bufferSubData","edges","checkEdge","WebGLProgram","getEncodingComponents","getTexelDecodingFunction","functionName","getTexelEncodingFunction","getToneMappingFunction","toneMappingName","generateExtensions","rendererExtensions","envMapCubeUV","flatShading","filterEmptyLine","generateDefines","fetchUniformLocations","identifiers","getProgramParameter","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","structRe","structName","structProperty","uniformsStruct","arrayStructRe","arrayName","arrayIndex","arrayProperty","uniformsArray","uniformsArrayIndex","arrayRe","fetchAttributeLocations","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","replaceLightNums","replace","numDirLights","numSpotLights","numPointLights","numHemiLights","parseIncludes","include","unrollLoops","snippet","unroll","programIdCount","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","prefixVertex","prefixFragment","gammaFactorDefine","customExtensions","customDefines","createProgram","supportsVertexTextures","maxBones","doubleSided","flipSided","shadowMapEnabled","pointLightShadows","useFog","fogExp","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","programLog","getProgramInfoLog","vertexLog","getShaderInfoLog","fragmentLog","runnable","haveDiagnostics","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","prefix","deleteShader","cachedUniforms","cachedAttributes","destroy","deleteProgram","usedTimes","allocateBones","nVertexUniforms","nVertexMatrices","getTextureEncodingFromMap","gammaOverrideLinear","shaderIDs","parameterNames","envMapMode","parameterName","pl","addLineNumbers","lines","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","_renderer","getDepthMaterial","isPointLight","lightPositionWorld","newMaterial","materialVariants","_depthMaterials","customMaterial","customDepthMaterial","_distanceMaterials","customDistanceMaterial","useMorphing","useSkinning","variantIndex","_MorphingFlag","_SkinningFlag","shadowCamera","_renderList","_state","_shadowMapSize","_lookTarget","_lightPositionWorld","_NumberOfMaterialVariants","cubeDirections","cubeUps","cube2DViewPorts","depthShader","depthUniforms","distanceShader","distanceUniforms","depthMaterial","distanceMaterial","USE_SHADOWMAP","faceCount","BLEND","vpWidth","vpHeight","pars","shadowMatrix","vpDimensions","clearAlpha","newAttributes","enabledAttributes","attributeDivisors","compressedTextureFormats","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentDepthFunc","currentDepthWrite","currentColorWrite","currentStencilWrite","currentStencilFunc","currentStencilRef","currentStencilMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentFlipSided","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","currentScissorTest","currentTextureSlot","currentBoundTextures","currentClearColor","currentClearDepth","currentClearStencil","currentScissor","currentViewport","emptyTexture","DEPTH_TEST","LEQUAL","blendFunc","enableVertexAttribArray","vertexAttribDivisorANGLE","disableVertexAttribArray","formats","COMPRESSED_TEXTURE_FORMATS","blendEquationSeparate","blendFuncSeparate","NEVER","ALWAYS","LESS","EQUAL","GEQUAL","GREATER","NOTEQUAL","depthMask","colorMask","setStencilFunc","stencilFunc","stencilRef","stencilMask","setStencilOp","stencilFail","stencilZFail","stencilZPass","stencilOp","setStencilTest","stencilTest","STENCIL_TEST","setStencilWrite","stencilWrite","factor","units","POLYGON_OFFSET_FILL","getScissorTest","SCISSOR_TEST","webglSlot","webglType","webglTexture","boundTexture","flares","vertexBuffer","elementBuffer","tempTexture","occlusionTexture","hasVertexTexture","renderType","occlusionMap","screenPosition","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","TEXTURE1","copyTexImage2D","sprite","uvOffset","uvScale","fogType","fillStyle","fillRect","spritePosition","spriteRotation","spriteScale","oldFogType","sceneFogType","isIntersectionBox","isIntersectionSphere","multiplyVector3","multiplyVector3Array","extractPosition","multiplyVector4","rotateAxis","crossVector","rotateByAxis","isIntersectionLine","isIntersectionPlane","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","Face4","Vertex","eulerOrder","getChildByName","renderDepth","useQuaternion","ParticleSystem","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","addIndex","addDrawCall","indexOffset","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","metal","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","GeometryUtils","geometry1","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","Projector","projectVector","unprojectVector","pickingRay","CanvasRenderer","MeshFaceMaterial","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","h00","h10","h01","h11","SceneUtils","createMultiMaterialObject","detach","attach","ShapeUtils","contour","triangulate","snip","verts","px","py","aX","aY","bX","bY","cX","cY","apx","apy","bpx","bpy","cpx","cpy","cCROSSap","bCROSScp","aCROSSbp","vertIndices","nv","triangulateShape","holes","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1Pt","seg2Pt","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","removeHoles","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","shape","prevShapeIdx","nextShapeIdx","insideAngle","hole","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","intersectsHoleEdge","ihIdx","chkHole","hIdx","indepHoles","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","failedCuts","hl","minShapeIndex","counter","h2","allPointsMap","allpoints","shapeWithoutHoles","triangles","isClockWise","pts","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","Curve","getPointAt","getUtoTmapping","getPoints","divisions","getSpacedPoints","lengths","getLengths","cacheArcLengths","current","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","lengthAfter","segmentLength","segmentFraction","getTangent","pt1","pt2","getTangentAt","getPointFunc","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","LineCurve","curveLengths","getCurveLengths","lens","cacheLengths","sums","createPointsGeometry","createGeometry","createSpacedPointsGeometry","generateShapes","createPaths","String","resolution","ret","createPath","glyph","glyphs","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","Path","o","outline","_cachedOutline","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha","shapes","toShapes","fromPoints","args","lastargs","aCPx","aCPy","QuadraticBezierCurve","aCP1x","aCP1y","aCP2x","aCP2y","CubicBezierCurve","splineThru","npts","SplineCurve","aRadius","aStartAngle","aEndAngle","aClockwise","absarc","absellipse","ellipse","xRadius","yRadius","aRotation","EllipseCurve","lastPoint","spts","spline","deltaAngle","tdivisions","isCCW","noHoles","extractSubpaths","inActions","subPaths","lastPath","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","Shape","isPointInsidePolygon","inPt","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","tmpHoles","extrude","ExtrudeGeometry","makeGeometry","ShapeGeometry","getPointsHoles","holesPts","extractAllPoints","extractPoints","tangent","point0","point1","point2","point3","ArcCurve","LineCurve3","QuadraticBezierCurve3","CubicBezierCurve3","SplineCurve3","CatmullRomCurve3","CubicPoly","pz","c0","initNonuniformCatmullRom","x3","dt0","dt1","dt2","initCatmullRom","tension","calc","closed","ClosedSplineCurve3","BoxBufferGeometry","CubeGeometry","calculateVertexCount","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","vertexBufferOffset","uvBufferOffset","numberOfVertices","indexBufferOffset","vertexCount","indexCount","CircleGeometry","CircleBufferGeometry","ii","segment","CylinderBufferGeometry","calculateIndexCount","generateTorso","tanTheta","indexRow","halfHeight","indexArray","generateCap","centerIndexStart","centerIndexEnd","CylinderGeometry","EdgesGeometry","thresholdAngle","sortFunction","thresholdDot","edge","vert1","vert2","face1","face2","addShapeList","addShape","scalePt2","pt","getBevelVec","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","ptNextShift_x","ptNextShift_y","sf","v_trans_lensq","direction_eq","buildLidFaces","bevelEnabled","layer","vlen","flen","f3","steps","bevelSegments","buildSideFaces","layeroffset","sidewalls","ahole","slen1","slen2","f4","shapesOffset","uvgen","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","extrudePts","splineTube","binormal","position2","amount","bevelThickness","bevelSize","curveSegments","extrudePath","extrudeByPath","UVGenerator","WorldUVGenerator","frames","TubeGeometry","FrenetFrames","shapePoints","reverse","bs","vert","contourMovements","oneHoleMovements","holesMovements","verticesMovements","binormals","indexA","indexB","indexC","indexD","LatheBufferGeometry","base","inverseSegments","n1","n2","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","offset2","RingBufferGeometry","radiusStep","thetaSegmentLevel","RingGeometry","SphereGeometry","SphereBufferGeometry","thetaEnd","verticesRow","v4","TextGeometry","font","TorusBufferGeometry","TorusGeometry","TorusKnotBufferGeometry","calculatePositionOnCurve","cu","su","quOverP","cs","P1","P2","B","T","N","TorusKnotGeometry","heightScale","taper","NoTaper","ip","jp","uva","uvb","uvc","uvd","grid","numpoints","pos2","tangents","SinusoidalTaper","initialNormal3","smallest","MAX_VALUE","tz","mat","PolyhedronGeometry","prepare","that","azimuth","inclination","make","centroid","azi","correctUV","subdivide","cols","aj","bj","rows","ParametricGeometry","func","slices","stacks","sliceCount","WireframeGeometry","numEdges","ol","numTris","AxisHelper","ArrowHelper","lineGeometry","coneGeometry","headLength","headWidth","cone","setDirection","setColor","BoxHelper","BoundingBoxHelper","CameraHelper","addLine","addPoint","pointMap","hexFrustum","hexCone","hexUp","hexTarget","hexCross","setPoint","DirectionalLightHelper","lightPlane","targetLine","EdgesHelper","FaceNormalsHelper","nNormals","objGeometry","GridHelper","setColors","colorCenterLine","colorGrid","HemisphereLightHelper","sphereSize","lightSphere","PointLightHelper","SkeletonHelper","getBoneList","boneList","matrixWorldInv","boneMatrix","SpotLightHelper","vector2","coneLength","coneWidth","VertexNormalsHelper","objPos","objNorm","WireframeHelper","renderCallback","MorphBlendMesh","animationsMap","animationsList","numFrames","startFrame","endFrame","createAnimation","setAnimationWeight","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","morph","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe"],"mappings":"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","file":"index.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar THREE, animate, box, camera, light, light2, render, renderer, scene;\n\t\n\t__webpack_require__(5);\n\t\n\tTHREE = __webpack_require__(6);\n\t\n\tscene = new THREE.Scene();\n\t\n\tcamera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\t\n\trenderer = new THREE.WebGLRenderer();\n\t\n\trenderer.setSize(window.innerWidth, window.innerHeight);\n\t\n\tdocument.body.appendChild(renderer.domElement);\n\t\n\tlight = new THREE.DirectionalLight(0xffffff, 1.0, 0);\n\t\n\tlight.position.set(100, 100, 100);\n\t\n\tscene.add(light);\n\t\n\tlight2 = new THREE.DirectionalLight(0xffffff, 1.0, 0);\n\t\n\tlight2.position.set(-100, 100, -100);\n\t\n\tscene.add(light2);\n\t\n\tbox = new THREE.Mesh(new THREE.BoxGeometry(1, 1, 1), new THREE.MeshPhongMaterial({\n\t  color: 0xffffff,\n\t  specular: 0xffffff,\n\t  shininess: 20,\n\t  morphTargets: true,\n\t  vertexColors: THREE.FaceColors,\n\t  shading: THREE.FlatShading\n\t}));\n\t\n\tscene.add(box);\n\t\n\tbox.rotation.x = 0.5;\n\t\n\tbox.rotation.y = 0.5;\n\t\n\tbox.position.z = -5;\n\t\n\tanimate = function() {\n\t  requestAnimationFrame(animate);\n\t  return render();\n\t};\n\t\n\trender = function() {\n\t  var timer;\n\t  timer = 0.002 * Date.now();\n\t  box.position.y = 0.5 + 0.5 * Math.sin(timer);\n\t  return renderer.render(scene, camera);\n\t};\n\t\n\tanimate();\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports = module.exports = __webpack_require__(3)();\n\t// imports\n\t\n\t\n\t// module\n\texports.push([module.id, \"body,html{margin:0;padding:0}\", \"\"]);\n\t\n\t// exports\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\t// css base code, injected by the css-loader\r\n\tmodule.exports = function() {\r\n\t\tvar list = [];\r\n\t\r\n\t\t// return the list of modules as css string\r\n\t\tlist.toString = function toString() {\r\n\t\t\tvar result = [];\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar item = this[i];\r\n\t\t\t\tif(item[2]) {\r\n\t\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresult.push(item[1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result.join(\"\");\r\n\t\t};\r\n\t\r\n\t\t// import a list of modules into the list\r\n\t\tlist.i = function(modules, mediaQuery) {\r\n\t\t\tif(typeof modules === \"string\")\r\n\t\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\t\tvar alreadyImportedModules = {};\r\n\t\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\t\tvar id = this[i][0];\r\n\t\t\t\tif(typeof id === \"number\")\r\n\t\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\t\tvar item = modules[i];\r\n\t\t\t\t// skip already imported module\r\n\t\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlist.push(item);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\treturn list;\r\n\t};\r\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\r\n\t\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\t\tAuthor Tobias Koppers @sokra\r\n\t*/\r\n\tvar stylesInDom = {},\r\n\t\tmemoize = function(fn) {\r\n\t\t\tvar memo;\r\n\t\t\treturn function () {\r\n\t\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\t\treturn memo;\r\n\t\t\t};\r\n\t\t},\r\n\t\tisOldIE = memoize(function() {\r\n\t\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t\t}),\r\n\t\tgetHeadElement = memoize(function () {\r\n\t\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t\t}),\r\n\t\tsingletonElement = null,\r\n\t\tsingletonCounter = 0,\r\n\t\tstyleElementsInsertedAtTop = [];\r\n\t\r\n\tmodule.exports = function(list, options) {\r\n\t\tif(false) {\r\n\t\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t\t}\r\n\t\r\n\t\toptions = options || {};\r\n\t\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t\t// tags it will allow on a page\r\n\t\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\t\r\n\t\t// By default, add <style> tags to the bottom of <head>.\r\n\t\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\t\r\n\t\tvar styles = listToStyles(list);\r\n\t\taddStylesToDom(styles, options);\r\n\t\r\n\t\treturn function update(newList) {\r\n\t\t\tvar mayRemove = [];\r\n\t\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\t\tvar item = styles[i];\r\n\t\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\t\tdomStyle.refs--;\r\n\t\t\t\tmayRemove.push(domStyle);\r\n\t\t\t}\r\n\t\t\tif(newList) {\r\n\t\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\t\taddStylesToDom(newStyles, options);\r\n\t\t\t}\r\n\t\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tfunction addStylesToDom(styles, options) {\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tif(domStyle) {\r\n\t\t\t\tdomStyle.refs++;\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t\t}\r\n\t\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar parts = [];\r\n\t\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t\t}\r\n\t\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction listToStyles(list) {\r\n\t\tvar styles = [];\r\n\t\tvar newStyles = {};\r\n\t\tfor(var i = 0; i < list.length; i++) {\r\n\t\t\tvar item = list[i];\r\n\t\t\tvar id = item[0];\r\n\t\t\tvar css = item[1];\r\n\t\t\tvar media = item[2];\r\n\t\t\tvar sourceMap = item[3];\r\n\t\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\t\tif(!newStyles[id])\r\n\t\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\t\telse\r\n\t\t\t\tnewStyles[id].parts.push(part);\r\n\t\t}\r\n\t\treturn styles;\r\n\t}\r\n\t\r\n\tfunction insertStyleElement(options, styleElement) {\r\n\t\tvar head = getHeadElement();\r\n\t\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\t\tif (options.insertAt === \"top\") {\r\n\t\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t\t} else {\r\n\t\t\t\thead.appendChild(styleElement);\r\n\t\t\t}\r\n\t\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t\t} else if (options.insertAt === \"bottom\") {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction removeStyleElement(styleElement) {\r\n\t\tstyleElement.parentNode.removeChild(styleElement);\r\n\t\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\t\tif(idx >= 0) {\r\n\t\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction createStyleElement(options) {\r\n\t\tvar styleElement = document.createElement(\"style\");\r\n\t\tstyleElement.type = \"text/css\";\r\n\t\tinsertStyleElement(options, styleElement);\r\n\t\treturn styleElement;\r\n\t}\r\n\t\r\n\tfunction createLinkElement(options) {\r\n\t\tvar linkElement = document.createElement(\"link\");\r\n\t\tlinkElement.rel = \"stylesheet\";\r\n\t\tinsertStyleElement(options, linkElement);\r\n\t\treturn linkElement;\r\n\t}\r\n\t\r\n\tfunction addStyle(obj, options) {\r\n\t\tvar styleElement, update, remove;\r\n\t\r\n\t\tif (options.singleton) {\r\n\t\t\tvar styleIndex = singletonCounter++;\r\n\t\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t\t} else if(obj.sourceMap &&\r\n\t\t\ttypeof URL === \"function\" &&\r\n\t\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\t\ttypeof Blob === \"function\" &&\r\n\t\t\ttypeof btoa === \"function\") {\r\n\t\t\tstyleElement = createLinkElement(options);\r\n\t\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t\tif(styleElement.href)\r\n\t\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t\t};\r\n\t\t} else {\r\n\t\t\tstyleElement = createStyleElement(options);\r\n\t\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\t\tremove = function() {\r\n\t\t\t\tremoveStyleElement(styleElement);\r\n\t\t\t};\r\n\t\t}\r\n\t\r\n\t\tupdate(obj);\r\n\t\r\n\t\treturn function updateStyle(newObj) {\r\n\t\t\tif(newObj) {\r\n\t\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\t\treturn;\r\n\t\t\t\tupdate(obj = newObj);\r\n\t\t\t} else {\r\n\t\t\t\tremove();\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\t\r\n\tvar replaceText = (function () {\r\n\t\tvar textStore = [];\r\n\t\r\n\t\treturn function (index, replacement) {\r\n\t\t\ttextStore[index] = replacement;\r\n\t\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t\t};\r\n\t})();\r\n\t\r\n\tfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\t\tvar css = remove ? \"\" : obj.css;\r\n\t\r\n\t\tif (styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t\t} else {\r\n\t\t\tvar cssNode = document.createTextNode(css);\r\n\t\t\tvar childNodes = styleElement.childNodes;\r\n\t\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\t\tif (childNodes.length) {\r\n\t\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t\t} else {\r\n\t\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction applyToTag(styleElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar media = obj.media;\r\n\t\r\n\t\tif(media) {\r\n\t\t\tstyleElement.setAttribute(\"media\", media)\r\n\t\t}\r\n\t\r\n\t\tif(styleElement.styleSheet) {\r\n\t\t\tstyleElement.styleSheet.cssText = css;\r\n\t\t} else {\r\n\t\t\twhile(styleElement.firstChild) {\r\n\t\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t\t}\r\n\t\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction updateLink(linkElement, obj) {\r\n\t\tvar css = obj.css;\r\n\t\tvar sourceMap = obj.sourceMap;\r\n\t\r\n\t\tif(sourceMap) {\r\n\t\t\t// http://stackoverflow.com/a/26603875\r\n\t\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t\t}\r\n\t\r\n\t\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\t\r\n\t\tvar oldSrc = linkElement.href;\r\n\t\r\n\t\tlinkElement.href = URL.createObjectURL(blob);\r\n\t\r\n\t\tif(oldSrc)\r\n\t\t\tURL.revokeObjectURL(oldSrc);\r\n\t}\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// style-loader: Adds some css to the DOM by adding a <style> tag\n\t\n\t// load the styles\n\tvar content = __webpack_require__(2);\n\tif(typeof content === 'string') content = [[module.id, content, '']];\n\t// add the styles to the DOM\n\tvar update = __webpack_require__(4)(content, {});\n\tif(content.locals) module.exports = content.locals;\n\t// Hot Module Replacement\n\tif(false) {\n\t\t// When the styles change, update the <style> tags\n\t\tif(!content.locals) {\n\t\t\tmodule.hot.accept(\"!!./../node_modules/css-loader/index.js!./style.css\", function() {\n\t\t\t\tvar newContent = require(\"!!./../node_modules/css-loader/index.js!./style.css\");\n\t\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\t\tupdate(newContent);\n\t\t\t});\n\t\t}\n\t\t// When the module is disposed, remove the <style> tags\n\t\tmodule.hot.dispose(function() { update(); });\n\t}\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var self = self || {};// File:src/Three.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tvar THREE = { REVISION: '75' };\r\n\t\r\n\t//\r\n\t\r\n\tif ( true ) {\r\n\t\r\n\t\t!(__WEBPACK_AMD_DEFINE_FACTORY__ = (THREE), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t\r\n\t} else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {\r\n\t\r\n\t\tmodule.exports = THREE;\r\n\t\r\n\t}\r\n\t\r\n\t//\r\n\t\r\n\tif ( Number.EPSILON === undefined ) {\r\n\t\r\n\t\tNumber.EPSILON = Math.pow( 2, - 52 );\r\n\t\r\n\t}\r\n\t\r\n\t//\r\n\t\r\n\tif ( Math.sign === undefined ) {\r\n\t\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\r\n\t\r\n\t\tMath.sign = function ( x ) {\r\n\t\r\n\t\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\r\n\t\r\n\t\t};\r\n\t\r\n\t}\r\n\t\r\n\tif ( Function.prototype.name === undefined && Object.defineProperty !== undefined ) {\r\n\t\r\n\t\t// Missing in IE9-11.\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\r\n\t\r\n\t\tObject.defineProperty( Function.prototype, 'name', {\r\n\t\r\n\t\t\tget: function () {\r\n\t\r\n\t\t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t} );\r\n\t\r\n\t}\r\n\t\r\n\tif ( Object.assign === undefined ) {\r\n\t\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n\t\r\n\t\tObject.defineProperty( Object, 'assign', {\r\n\t\r\n\t\t\twritable: true,\r\n\t\t\tconfigurable: true,\r\n\t\r\n\t\t\tvalue: function ( target ) {\r\n\t\r\n\t\t\t\t'use strict';\r\n\t\r\n\t\t\t\tif ( target === undefined || target === null ) {\r\n\t\r\n\t\t\t\t\tthrow new TypeError( \"Cannot convert first argument to object\" );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar to = Object( target );\r\n\t\r\n\t\t\t\tfor ( var i = 1, n = arguments.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\t\tvar nextSource = arguments[ i ];\r\n\t\r\n\t\t\t\t\tif ( nextSource === undefined || nextSource === null ) continue;\r\n\t\r\n\t\t\t\t\tnextSource = Object( nextSource );\r\n\t\r\n\t\t\t\t\tvar keysArray = Object.keys( nextSource );\r\n\t\r\n\t\t\t\t\tfor ( var nextIndex = 0, len = keysArray.length; nextIndex !== len; ++ nextIndex ) {\r\n\t\r\n\t\t\t\t\t\tvar nextKey = keysArray[ nextIndex ];\r\n\t\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor( nextSource, nextKey );\r\n\t\r\n\t\t\t\t\t\tif ( desc !== undefined && desc.enumerable ) {\r\n\t\r\n\t\t\t\t\t\t\tto[ nextKey ] = nextSource[ nextKey ];\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn to;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t} );\r\n\t\r\n\t}\r\n\t\r\n\t// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\r\n\t\r\n\tTHREE.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\r\n\t\r\n\t// GL STATE CONSTANTS\r\n\t\r\n\tTHREE.CullFaceNone = 0;\r\n\tTHREE.CullFaceBack = 1;\r\n\tTHREE.CullFaceFront = 2;\r\n\tTHREE.CullFaceFrontBack = 3;\r\n\t\r\n\tTHREE.FrontFaceDirectionCW = 0;\r\n\tTHREE.FrontFaceDirectionCCW = 1;\r\n\t\r\n\t// SHADOWING TYPES\r\n\t\r\n\tTHREE.BasicShadowMap = 0;\r\n\tTHREE.PCFShadowMap = 1;\r\n\tTHREE.PCFSoftShadowMap = 2;\r\n\t\r\n\t// MATERIAL CONSTANTS\r\n\t\r\n\t// side\r\n\t\r\n\tTHREE.FrontSide = 0;\r\n\tTHREE.BackSide = 1;\r\n\tTHREE.DoubleSide = 2;\r\n\t\r\n\t// shading\r\n\t\r\n\tTHREE.FlatShading = 1;\r\n\tTHREE.SmoothShading = 2;\r\n\t\r\n\t// colors\r\n\t\r\n\tTHREE.NoColors = 0;\r\n\tTHREE.FaceColors = 1;\r\n\tTHREE.VertexColors = 2;\r\n\t\r\n\t// blending modes\r\n\t\r\n\tTHREE.NoBlending = 0;\r\n\tTHREE.NormalBlending = 1;\r\n\tTHREE.AdditiveBlending = 2;\r\n\tTHREE.SubtractiveBlending = 3;\r\n\tTHREE.MultiplyBlending = 4;\r\n\tTHREE.CustomBlending = 5;\r\n\t\r\n\t// custom blending equations\r\n\t// (numbers start from 100 not to clash with other\r\n\t// mappings to OpenGL constants defined in Texture.js)\r\n\t\r\n\tTHREE.AddEquation = 100;\r\n\tTHREE.SubtractEquation = 101;\r\n\tTHREE.ReverseSubtractEquation = 102;\r\n\tTHREE.MinEquation = 103;\r\n\tTHREE.MaxEquation = 104;\r\n\t\r\n\t// custom blending destination factors\r\n\t\r\n\tTHREE.ZeroFactor = 200;\r\n\tTHREE.OneFactor = 201;\r\n\tTHREE.SrcColorFactor = 202;\r\n\tTHREE.OneMinusSrcColorFactor = 203;\r\n\tTHREE.SrcAlphaFactor = 204;\r\n\tTHREE.OneMinusSrcAlphaFactor = 205;\r\n\tTHREE.DstAlphaFactor = 206;\r\n\tTHREE.OneMinusDstAlphaFactor = 207;\r\n\t\r\n\t// custom blending source factors\r\n\t\r\n\t//THREE.ZeroFactor = 200;\r\n\t//THREE.OneFactor = 201;\r\n\t//THREE.SrcAlphaFactor = 204;\r\n\t//THREE.OneMinusSrcAlphaFactor = 205;\r\n\t//THREE.DstAlphaFactor = 206;\r\n\t//THREE.OneMinusDstAlphaFactor = 207;\r\n\tTHREE.DstColorFactor = 208;\r\n\tTHREE.OneMinusDstColorFactor = 209;\r\n\tTHREE.SrcAlphaSaturateFactor = 210;\r\n\t\r\n\t// depth modes\r\n\t\r\n\tTHREE.NeverDepth = 0;\r\n\tTHREE.AlwaysDepth = 1;\r\n\tTHREE.LessDepth = 2;\r\n\tTHREE.LessEqualDepth = 3;\r\n\tTHREE.EqualDepth = 4;\r\n\tTHREE.GreaterEqualDepth = 5;\r\n\tTHREE.GreaterDepth = 6;\r\n\tTHREE.NotEqualDepth = 7;\r\n\t\r\n\t\r\n\t// TEXTURE CONSTANTS\r\n\t\r\n\tTHREE.MultiplyOperation = 0;\r\n\tTHREE.MixOperation = 1;\r\n\tTHREE.AddOperation = 2;\r\n\t\r\n\t// Tone Mapping modes\r\n\t\r\n\tTHREE.NoToneMapping = 0; // do not do any tone mapping, not even exposure (required for special purpose passes.)\r\n\tTHREE.LinearToneMapping = 1; // only apply exposure.\r\n\tTHREE.ReinhardToneMapping = 2;\r\n\tTHREE.Uncharted2ToneMapping = 3; // John Hable\r\n\tTHREE.CineonToneMapping = 4;  // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\r\n\t\r\n\t// Mapping modes\r\n\t\r\n\tTHREE.UVMapping = 300;\r\n\t\r\n\tTHREE.CubeReflectionMapping = 301;\r\n\tTHREE.CubeRefractionMapping = 302;\r\n\t\r\n\tTHREE.EquirectangularReflectionMapping = 303;\r\n\tTHREE.EquirectangularRefractionMapping = 304;\r\n\t\r\n\tTHREE.SphericalReflectionMapping = 305;\r\n\tTHREE.CubeUVReflectionMapping = 306;\r\n\tTHREE.CubeUVRefractionMapping = 307;\r\n\t\r\n\t// Wrapping modes\r\n\t\r\n\tTHREE.RepeatWrapping = 1000;\r\n\tTHREE.ClampToEdgeWrapping = 1001;\r\n\tTHREE.MirroredRepeatWrapping = 1002;\r\n\t\r\n\t// Filters\r\n\t\r\n\tTHREE.NearestFilter = 1003;\r\n\tTHREE.NearestMipMapNearestFilter = 1004;\r\n\tTHREE.NearestMipMapLinearFilter = 1005;\r\n\tTHREE.LinearFilter = 1006;\r\n\tTHREE.LinearMipMapNearestFilter = 1007;\r\n\tTHREE.LinearMipMapLinearFilter = 1008;\r\n\t\r\n\t// Data types\r\n\t\r\n\tTHREE.UnsignedByteType = 1009;\r\n\tTHREE.ByteType = 1010;\r\n\tTHREE.ShortType = 1011;\r\n\tTHREE.UnsignedShortType = 1012;\r\n\tTHREE.IntType = 1013;\r\n\tTHREE.UnsignedIntType = 1014;\r\n\tTHREE.FloatType = 1015;\r\n\tTHREE.HalfFloatType = 1025;\r\n\t\r\n\t// Pixel types\r\n\t\r\n\t//THREE.UnsignedByteType = 1009;\r\n\tTHREE.UnsignedShort4444Type = 1016;\r\n\tTHREE.UnsignedShort5551Type = 1017;\r\n\tTHREE.UnsignedShort565Type = 1018;\r\n\t\r\n\t// Pixel formats\r\n\t\r\n\tTHREE.AlphaFormat = 1019;\r\n\tTHREE.RGBFormat = 1020;\r\n\tTHREE.RGBAFormat = 1021;\r\n\tTHREE.LuminanceFormat = 1022;\r\n\tTHREE.LuminanceAlphaFormat = 1023;\r\n\t// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders\r\n\tTHREE.RGBEFormat = THREE.RGBAFormat; //1024;\r\n\t\r\n\t// DDS / ST3C Compressed texture formats\r\n\t\r\n\tTHREE.RGB_S3TC_DXT1_Format = 2001;\r\n\tTHREE.RGBA_S3TC_DXT1_Format = 2002;\r\n\tTHREE.RGBA_S3TC_DXT3_Format = 2003;\r\n\tTHREE.RGBA_S3TC_DXT5_Format = 2004;\r\n\t\r\n\t\r\n\t// PVRTC compressed texture formats\r\n\t\r\n\tTHREE.RGB_PVRTC_4BPPV1_Format = 2100;\r\n\tTHREE.RGB_PVRTC_2BPPV1_Format = 2101;\r\n\tTHREE.RGBA_PVRTC_4BPPV1_Format = 2102;\r\n\tTHREE.RGBA_PVRTC_2BPPV1_Format = 2103;\r\n\t\r\n\t// ETC compressed texture formats\r\n\t\r\n\tTHREE.RGB_ETC1_Format = 2151;\r\n\t\r\n\t// Loop styles for AnimationAction\r\n\t\r\n\tTHREE.LoopOnce = 2200;\r\n\tTHREE.LoopRepeat = 2201;\r\n\tTHREE.LoopPingPong = 2202;\r\n\t\r\n\t// Interpolation\r\n\t\r\n\tTHREE.InterpolateDiscrete = 2300;\r\n\tTHREE.InterpolateLinear = 2301;\r\n\tTHREE.InterpolateSmooth = 2302;\r\n\t\r\n\t// Interpolant ending modes\r\n\t\r\n\tTHREE.ZeroCurvatureEnding = 2400;\r\n\tTHREE.ZeroSlopeEnding = 2401;\r\n\tTHREE.WrapAroundEnding = 2402;\r\n\t\r\n\t// Triangle Draw modes\r\n\t\r\n\tTHREE.TrianglesDrawMode = 0;\r\n\tTHREE.TriangleStripDrawMode = 1;\r\n\tTHREE.TriangleFanDrawMode = 2;\r\n\t\r\n\t// Texture Encodings\r\n\t\r\n\tTHREE.LinearEncoding = 3000; // No encoding at all.\r\n\tTHREE.sRGBEncoding = 3001;\r\n\tTHREE.GammaEncoding = 3007; // uses GAMMA_FACTOR, for backwards compatibility with WebGLRenderer.gammaInput/gammaOutput\r\n\t\r\n\t// The following Texture Encodings are for RGB-only (no alpha) HDR light emission sources.\r\n\t// These encodings should not specified as output encodings except in rare situations.\r\n\tTHREE.RGBEEncoding = 3002; // AKA Radiance.\r\n\tTHREE.LogLuvEncoding = 3003;\r\n\tTHREE.RGBM7Encoding = 3004;\r\n\tTHREE.RGBM16Encoding = 3005;\r\n\tTHREE.RGBDEncoding = 3006; // MaxRange is 256.\r\n\t\r\n\t// File:src/math/Color.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Color = function ( color ) {\r\n\t\r\n\t\tif ( arguments.length === 3 ) {\r\n\t\r\n\t\t\treturn this.fromArray( arguments );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn this.set( color );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Color.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Color,\r\n\t\r\n\t\tr: 1, g: 1, b: 1,\r\n\t\r\n\t\tset: function ( value ) {\r\n\t\r\n\t\t\tif ( value instanceof THREE.Color ) {\r\n\t\r\n\t\t\t\tthis.copy( value );\r\n\t\r\n\t\t\t} else if ( typeof value === 'number' ) {\r\n\t\r\n\t\t\t\tthis.setHex( value );\r\n\t\r\n\t\t\t} else if ( typeof value === 'string' ) {\r\n\t\r\n\t\t\t\tthis.setStyle( value );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetScalar: function ( scalar ) {\r\n\t\r\n\t\t\tthis.r = scalar;\r\n\t\t\tthis.g = scalar;\r\n\t\t\tthis.b = scalar;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetHex: function ( hex ) {\r\n\t\r\n\t\t\thex = Math.floor( hex );\r\n\t\r\n\t\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\t\tthis.b = ( hex & 255 ) / 255;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetRGB: function ( r, g, b ) {\r\n\t\r\n\t\t\tthis.r = r;\r\n\t\t\tthis.g = g;\r\n\t\t\tthis.b = b;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetHSL: function () {\r\n\t\r\n\t\t\tfunction hue2rgb( p, q, t ) {\r\n\t\r\n\t\t\t\tif ( t < 0 ) t += 1;\r\n\t\t\t\tif ( t > 1 ) t -= 1;\r\n\t\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\r\n\t\t\t\tif ( t < 1 / 2 ) return q;\r\n\t\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\r\n\t\t\t\treturn p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn function ( h, s, l ) {\r\n\t\r\n\t\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\t\t\th = THREE.Math.euclideanModulo( h, 1 );\r\n\t\t\t\ts = THREE.Math.clamp( s, 0, 1 );\r\n\t\t\t\tl = THREE.Math.clamp( l, 0, 1 );\r\n\t\r\n\t\t\t\tif ( s === 0 ) {\r\n\t\r\n\t\t\t\t\tthis.r = this.g = this.b = l;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\r\n\t\t\t\t\tvar q = ( 2 * l ) - p;\r\n\t\r\n\t\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\r\n\t\t\t\t\tthis.g = hue2rgb( q, p, h );\r\n\t\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tsetStyle: function ( style ) {\r\n\t\r\n\t\t\tfunction handleAlpha( string ) {\r\n\t\r\n\t\t\t\tif ( string === undefined ) return;\r\n\t\r\n\t\t\t\tif ( parseFloat( string ) < 1 ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\r\n\t\t\tvar m;\r\n\t\r\n\t\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\r\n\t\r\n\t\t\t\t// rgb / hsl\r\n\t\r\n\t\t\t\tvar color;\r\n\t\t\t\tvar name = m[ 1 ];\r\n\t\t\t\tvar components = m[ 2 ];\r\n\t\r\n\t\t\t\tswitch ( name ) {\r\n\t\r\n\t\t\t\t\tcase 'rgb':\r\n\t\t\t\t\tcase 'rgba':\r\n\t\r\n\t\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\t\r\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\r\n\t\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\r\n\t\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\r\n\t\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\r\n\t\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\t\r\n\t\t\t\t\t\t\treturn this;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\t\r\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n\t\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\r\n\t\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\r\n\t\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\r\n\t\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\t\r\n\t\t\t\t\t\t\treturn this;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'hsl':\r\n\t\t\t\t\tcase 'hsla':\r\n\t\r\n\t\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\t\r\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n\t\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\r\n\t\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\r\n\t\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\r\n\t\r\n\t\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\t\r\n\t\t\t\t\t\t\treturn this.setHSL( h, s, l );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\r\n\t\r\n\t\t\t\t// hex color\r\n\t\r\n\t\t\t\tvar hex = m[ 1 ];\r\n\t\t\t\tvar size = hex.length;\r\n\t\r\n\t\t\t\tif ( size === 3 ) {\r\n\t\r\n\t\t\t\t\t// #ff0\r\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\r\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\r\n\t\r\n\t\t\t\t\treturn this;\r\n\t\r\n\t\t\t\t} else if ( size === 6 ) {\r\n\t\r\n\t\t\t\t\t// #ff0000\r\n\t\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\r\n\t\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\r\n\t\r\n\t\t\t\t\treturn this;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( style && style.length > 0 ) {\r\n\t\r\n\t\t\t\t// color keywords\r\n\t\t\t\tvar hex = THREE.ColorKeywords[ style ];\r\n\t\r\n\t\t\t\tif ( hex !== undefined ) {\r\n\t\r\n\t\t\t\t\t// red\r\n\t\t\t\t\tthis.setHex( hex );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// unknown color\r\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor( this.r, this.g, this.b );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( color ) {\r\n\t\r\n\t\t\tthis.r = color.r;\r\n\t\t\tthis.g = color.g;\r\n\t\t\tthis.b = color.b;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyGammaToLinear: function ( color, gammaFactor ) {\r\n\t\r\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\t\r\n\t\t\tthis.r = Math.pow( color.r, gammaFactor );\r\n\t\t\tthis.g = Math.pow( color.g, gammaFactor );\r\n\t\t\tthis.b = Math.pow( color.b, gammaFactor );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyLinearToGamma: function ( color, gammaFactor ) {\r\n\t\r\n\t\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\t\r\n\t\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\r\n\t\r\n\t\t\tthis.r = Math.pow( color.r, safeInverse );\r\n\t\t\tthis.g = Math.pow( color.g, safeInverse );\r\n\t\t\tthis.b = Math.pow( color.b, safeInverse );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tconvertGammaToLinear: function () {\r\n\t\r\n\t\t\tvar r = this.r, g = this.g, b = this.b;\r\n\t\r\n\t\t\tthis.r = r * r;\r\n\t\t\tthis.g = g * g;\r\n\t\t\tthis.b = b * b;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tconvertLinearToGamma: function () {\r\n\t\r\n\t\t\tthis.r = Math.sqrt( this.r );\r\n\t\t\tthis.g = Math.sqrt( this.g );\r\n\t\t\tthis.b = Math.sqrt( this.b );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetHex: function () {\r\n\t\r\n\t\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetHexString: function () {\r\n\t\r\n\t\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetHSL: function ( optionalTarget ) {\r\n\t\r\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\r\n\t\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\r\n\t\r\n\t\t\tvar r = this.r, g = this.g, b = this.b;\r\n\t\r\n\t\t\tvar max = Math.max( r, g, b );\r\n\t\t\tvar min = Math.min( r, g, b );\r\n\t\r\n\t\t\tvar hue, saturation;\r\n\t\t\tvar lightness = ( min + max ) / 2.0;\r\n\t\r\n\t\t\tif ( min === max ) {\r\n\t\r\n\t\t\t\thue = 0;\r\n\t\t\t\tsaturation = 0;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tvar delta = max - min;\r\n\t\r\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\r\n\t\r\n\t\t\t\tswitch ( max ) {\r\n\t\r\n\t\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\r\n\t\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\r\n\t\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\thue /= 6;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\thsl.h = hue;\r\n\t\t\thsl.s = saturation;\r\n\t\t\thsl.l = lightness;\r\n\t\r\n\t\t\treturn hsl;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetStyle: function () {\r\n\t\r\n\t\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\r\n\t\r\n\t\t},\r\n\t\r\n\t\toffsetHSL: function ( h, s, l ) {\r\n\t\r\n\t\t\tvar hsl = this.getHSL();\r\n\t\r\n\t\t\thsl.h += h; hsl.s += s; hsl.l += l;\r\n\t\r\n\t\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tadd: function ( color ) {\r\n\t\r\n\t\t\tthis.r += color.r;\r\n\t\t\tthis.g += color.g;\r\n\t\t\tthis.b += color.b;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddColors: function ( color1, color2 ) {\r\n\t\r\n\t\t\tthis.r = color1.r + color2.r;\r\n\t\t\tthis.g = color1.g + color2.g;\r\n\t\t\tthis.b = color1.b + color2.b;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.r += s;\r\n\t\t\tthis.g += s;\r\n\t\t\tthis.b += s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiply: function ( color ) {\r\n\t\r\n\t\t\tthis.r *= color.r;\r\n\t\t\tthis.g *= color.g;\r\n\t\t\tthis.b *= color.b;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.r *= s;\r\n\t\t\tthis.g *= s;\r\n\t\t\tthis.b *= s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerp: function ( color, alpha ) {\r\n\t\r\n\t\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( c ) {\r\n\t\r\n\t\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tthis.r = array[ offset ];\r\n\t\t\tthis.g = array[ offset + 1 ];\r\n\t\t\tthis.b = array[ offset + 2 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tarray[ offset ] = this.r;\r\n\t\t\tarray[ offset + 1 ] = this.g;\r\n\t\t\tarray[ offset + 2 ] = this.b;\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\r\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\r\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\r\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\r\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\r\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\r\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\r\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\r\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\r\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\r\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\r\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\r\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\r\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\r\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\r\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\r\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\r\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\r\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\r\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\r\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\r\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\r\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\r\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\r\n\t\r\n\t// File:src/math/Quaternion.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Quaternion = function ( x, y, z, w ) {\r\n\t\r\n\t\tthis._x = x || 0;\r\n\t\tthis._y = y || 0;\r\n\t\tthis._z = z || 0;\r\n\t\tthis._w = ( w !== undefined ) ? w : 1;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Quaternion.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Quaternion,\r\n\t\r\n\t\tget x () {\r\n\t\r\n\t\t\treturn this._x;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset x ( value ) {\r\n\t\r\n\t\t\tthis._x = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget y () {\r\n\t\r\n\t\t\treturn this._y;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset y ( value ) {\r\n\t\r\n\t\t\tthis._y = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget z () {\r\n\t\r\n\t\t\treturn this._z;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset z ( value ) {\r\n\t\r\n\t\t\tthis._z = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget w () {\r\n\t\r\n\t\t\treturn this._w;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset w ( value ) {\r\n\t\r\n\t\t\tthis._w = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset: function ( x, y, z, w ) {\r\n\t\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\t\t\tthis._w = w;\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( quaternion ) {\r\n\t\r\n\t\t\tthis._x = quaternion.x;\r\n\t\t\tthis._y = quaternion.y;\r\n\t\t\tthis._z = quaternion.z;\r\n\t\t\tthis._w = quaternion.w;\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromEuler: function ( euler, update ) {\r\n\t\r\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\t\r\n\t\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t\t//\tcontent/SpinCalc.m\r\n\t\r\n\t\t\tvar c1 = Math.cos( euler._x / 2 );\r\n\t\t\tvar c2 = Math.cos( euler._y / 2 );\r\n\t\t\tvar c3 = Math.cos( euler._z / 2 );\r\n\t\t\tvar s1 = Math.sin( euler._x / 2 );\r\n\t\t\tvar s2 = Math.sin( euler._y / 2 );\r\n\t\t\tvar s3 = Math.sin( euler._z / 2 );\r\n\t\r\n\t\t\tvar order = euler.order;\r\n\t\r\n\t\t\tif ( order === 'XYZ' ) {\r\n\t\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\r\n\t\t\t} else if ( order === 'YXZ' ) {\r\n\t\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\r\n\t\t\t} else if ( order === 'ZXY' ) {\r\n\t\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\r\n\t\t\t} else if ( order === 'ZYX' ) {\r\n\t\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\r\n\t\t\t} else if ( order === 'YZX' ) {\r\n\t\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\r\n\t\t\t} else if ( order === 'XZY' ) {\r\n\t\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( update !== false ) this.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromAxisAngle: function ( axis, angle ) {\r\n\t\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\t\r\n\t\t\t// assumes axis is normalized\r\n\t\r\n\t\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\t\r\n\t\t\tthis._x = axis.x * s;\r\n\t\t\tthis._y = axis.y * s;\r\n\t\t\tthis._z = axis.z * s;\r\n\t\t\tthis._w = Math.cos( halfAngle );\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromRotationMatrix: function ( m ) {\r\n\t\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\t\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\t\r\n\t\t\tvar te = m.elements,\r\n\t\r\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\t\r\n\t\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\t\ts;\r\n\t\r\n\t\t\tif ( trace > 0 ) {\r\n\t\r\n\t\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\t\r\n\t\t\t\tthis._w = 0.25 / s;\r\n\t\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\t\r\n\t\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\t\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\t\r\n\t\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\t\tthis._x = 0.25 * s;\r\n\t\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\t\r\n\t\t\t} else if ( m22 > m33 ) {\r\n\t\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\t\r\n\t\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\t\tthis._y = 0.25 * s;\r\n\t\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\t\r\n\t\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\t\tthis._z = 0.25 * s;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromUnitVectors: function () {\r\n\t\r\n\t\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\r\n\t\r\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\t\r\n\t\t\tvar v1, r;\r\n\t\r\n\t\t\tvar EPS = 0.000001;\r\n\t\r\n\t\t\treturn function ( vFrom, vTo ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\r\n\t\t\t\tr = vFrom.dot( vTo ) + 1;\r\n\t\r\n\t\t\t\tif ( r < EPS ) {\r\n\t\r\n\t\t\t\t\tr = 0;\r\n\t\r\n\t\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\t\r\n\t\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tv1.crossVectors( vFrom, vTo );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis._x = v1.x;\r\n\t\t\t\tthis._y = v1.y;\r\n\t\t\t\tthis._z = v1.z;\r\n\t\t\t\tthis._w = r;\r\n\t\r\n\t\t\t\tthis.normalize();\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tinverse: function () {\r\n\t\r\n\t\t\tthis.conjugate().normalize();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tconjugate: function () {\r\n\t\r\n\t\t\tthis._x *= - 1;\r\n\t\t\tthis._y *= - 1;\r\n\t\t\tthis._z *= - 1;\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdot: function ( v ) {\r\n\t\r\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlengthSq: function () {\r\n\t\r\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlength: function () {\r\n\t\r\n\t\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalize: function () {\r\n\t\r\n\t\t\tvar l = this.length();\r\n\t\r\n\t\t\tif ( l === 0 ) {\r\n\t\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = 0;\r\n\t\t\t\tthis._z = 0;\r\n\t\t\t\tthis._w = 1;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tl = 1 / l;\r\n\t\r\n\t\t\t\tthis._x = this._x * l;\r\n\t\t\t\tthis._y = this._y * l;\r\n\t\t\t\tthis._z = this._z * l;\r\n\t\t\t\tthis._w = this._w * l;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiply: function ( q, p ) {\r\n\t\r\n\t\t\tif ( p !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyQuaternions( q, p );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this.multiplyQuaternions( this, q );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyQuaternions: function ( a, b ) {\r\n\t\r\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\t\r\n\t\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\t\r\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tslerp: function ( qb, t ) {\r\n\t\r\n\t\t\tif ( t === 0 ) return this;\r\n\t\t\tif ( t === 1 ) return this.copy( qb );\r\n\t\r\n\t\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\r\n\t\r\n\t\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\t\r\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\t\r\n\t\t\tif ( cosHalfTheta < 0 ) {\r\n\t\r\n\t\t\t\tthis._w = - qb._w;\r\n\t\t\t\tthis._x = - qb._x;\r\n\t\t\t\tthis._y = - qb._y;\r\n\t\t\t\tthis._z = - qb._z;\r\n\t\r\n\t\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.copy( qb );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\t\r\n\t\t\t\tthis._w = w;\r\n\t\t\t\tthis._x = x;\r\n\t\t\t\tthis._y = y;\r\n\t\t\t\tthis._z = z;\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\r\n\t\r\n\t\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\r\n\t\r\n\t\t\t\tthis._w = 0.5 * ( w + this._w );\r\n\t\t\t\tthis._x = 0.5 * ( x + this._x );\r\n\t\t\t\tthis._y = 0.5 * ( y + this._y );\r\n\t\t\t\tthis._z = 0.5 * ( z + this._z );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\t\r\n\t\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( quaternion ) {\r\n\t\r\n\t\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tthis._x = array[ offset ];\r\n\t\t\tthis._y = array[ offset + 1 ];\r\n\t\t\tthis._z = array[ offset + 2 ];\r\n\t\t\tthis._w = array[ offset + 3 ];\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tarray[ offset ] = this._x;\r\n\t\t\tarray[ offset + 1 ] = this._y;\r\n\t\t\tarray[ offset + 2 ] = this._z;\r\n\t\t\tarray[ offset + 3 ] = this._w;\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tonChange: function ( callback ) {\r\n\t\r\n\t\t\tthis.onChangeCallback = callback;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tonChangeCallback: function () {}\r\n\t\r\n\t};\r\n\t\r\n\tObject.assign( THREE.Quaternion, {\r\n\t\r\n\t\tslerp: function( qa, qb, qm, t ) {\r\n\t\r\n\t\t\treturn qm.copy( qa ).slerp( qb, t );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tslerpFlat: function(\r\n\t\t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\t\r\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\t\r\n\t\t\tvar x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\t\tw0 = src0[ srcOffset0 + 3 ],\r\n\t\r\n\t\t\t\tx1 = src1[ srcOffset1 + 0 ],\r\n\t\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\t\r\n\t\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\t\r\n\t\t\t\tvar s = 1 - t,\r\n\t\r\n\t\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\t\r\n\t\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\t\tsqrSin = 1 - cos * cos;\r\n\t\r\n\t\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\t\r\n\t\t\t\t\tvar sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\t\r\n\t\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar tDir = t * dir;\r\n\t\r\n\t\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\t\tw0 = w0 * s + w1 * tDir;\r\n\t\r\n\t\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\t\tif ( s === 1 - t ) {\r\n\t\r\n\t\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\t\r\n\t\t\t\t\tx0 *= f;\r\n\t\t\t\t\ty0 *= f;\r\n\t\t\t\t\tz0 *= f;\r\n\t\t\t\t\tw0 *= f;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tdst[ dstOffset ] = x0;\r\n\t\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\t\tdst[ dstOffset + 3 ] = w0;\r\n\t\r\n\t\t}\r\n\t\r\n\t} );\r\n\t\r\n\t// File:src/math/Vector2.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\t\r\n\tTHREE.Vector2 = function ( x, y ) {\r\n\t\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Vector2.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Vector2,\r\n\t\r\n\t\tget width() {\r\n\t\r\n\t\t\treturn this.x;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset width( value ) {\r\n\t\r\n\t\t\tthis.x = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget height() {\r\n\t\r\n\t\t\treturn this.y;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset height( value ) {\r\n\t\r\n\t\t\tthis.y = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t//\r\n\t\r\n\t\tset: function ( x, y ) {\r\n\t\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetScalar: function ( scalar ) {\r\n\t\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetX: function ( x ) {\r\n\t\r\n\t\t\tthis.x = x;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetY: function ( y ) {\r\n\t\r\n\t\t\tthis.y = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetComponent: function ( index, value ) {\r\n\t\r\n\t\t\tswitch ( index ) {\r\n\t\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetComponent: function ( index ) {\r\n\t\r\n\t\t\tswitch ( index ) {\r\n\t\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor( this.x, this.y );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( v ) {\r\n\t\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tadd: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddVectors: function ( a, b ) {\r\n\t\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddScaledVector: function ( v, s ) {\r\n\t\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsub: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsubScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsubVectors: function ( a, b ) {\r\n\t\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiply: function ( v ) {\r\n\t\r\n\t\t\tthis.x *= v.x;\r\n\t\t\tthis.y *= v.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\t\r\n\t\t\tif ( isFinite( scalar ) ) {\r\n\t\r\n\t\t\t\tthis.x *= scalar;\r\n\t\t\t\tthis.y *= scalar;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.x = 0;\r\n\t\t\t\tthis.y = 0;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdivide: function ( v ) {\r\n\t\r\n\t\t\tthis.x /= v.x;\r\n\t\t\tthis.y /= v.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdivideScalar: function ( scalar ) {\r\n\t\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmin: function ( v ) {\r\n\t\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmax: function ( v ) {\r\n\t\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclamp: function ( min, max ) {\r\n\t\r\n\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\t\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclampScalar: function () {\r\n\t\r\n\t\t\tvar min, max;\r\n\t\r\n\t\t\treturn function clampScalar( minVal, maxVal ) {\r\n\t\r\n\t\t\t\tif ( min === undefined ) {\r\n\t\r\n\t\t\t\t\tmin = new THREE.Vector2();\r\n\t\t\t\t\tmax = new THREE.Vector2();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tmin.set( minVal, minVal );\r\n\t\t\t\tmax.set( maxVal, maxVal );\r\n\t\r\n\t\t\t\treturn this.clamp( min, max );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclampLength: function ( min, max ) {\r\n\t\r\n\t\t\tvar length = this.length();\r\n\t\r\n\t\t\tthis.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfloor: function () {\r\n\t\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tceil: function () {\r\n\t\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tround: function () {\r\n\t\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\troundToZero: function () {\r\n\t\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnegate: function () {\r\n\t\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdot: function ( v ) {\r\n\t\r\n\t\t\treturn this.x * v.x + this.y * v.y;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlengthSq: function () {\r\n\t\r\n\t\t\treturn this.x * this.x + this.y * this.y;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlength: function () {\r\n\t\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlengthManhattan: function() {\r\n\t\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalize: function () {\r\n\t\r\n\t\t\treturn this.divideScalar( this.length() );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tangle: function () {\r\n\t\r\n\t\t\t// computes the angle in radians with respect to the positive x-axis\r\n\t\r\n\t\t\tvar angle = Math.atan2( this.y, this.x );\r\n\t\r\n\t\t\tif ( angle < 0 ) angle += 2 * Math.PI;\r\n\t\r\n\t\t\treturn angle;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceTo: function ( v ) {\r\n\t\r\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToSquared: function ( v ) {\r\n\t\r\n\t\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\t\treturn dx * dx + dy * dy;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetLength: function ( length ) {\r\n\t\r\n\t\t\treturn this.multiplyScalar( length / this.length() );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerp: function ( v, alpha ) {\r\n\t\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\t\r\n\t\t\tthis.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( v ) {\r\n\t\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tindex = index * attribute.itemSize + offset;\r\n\t\r\n\t\t\tthis.x = attribute.array[ index ];\r\n\t\t\tthis.y = attribute.array[ index + 1 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\trotateAround: function ( center, angle ) {\r\n\t\r\n\t\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\r\n\t\r\n\t\t\tvar x = this.x - center.x;\r\n\t\t\tvar y = this.y - center.y;\r\n\t\r\n\t\t\tthis.x = x * c - y * s + center.x;\r\n\t\t\tthis.y = x * s + y * c + center.y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Vector3.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author *kile / http://kile.stravaganza.org/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\t\r\n\tTHREE.Vector3 = function ( x, y, z ) {\r\n\t\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\tthis.z = z || 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Vector3.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Vector3,\r\n\t\r\n\t\tset: function ( x, y, z ) {\r\n\t\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetScalar: function ( scalar ) {\r\n\t\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\t\t\tthis.z = scalar;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetX: function ( x ) {\r\n\t\r\n\t\t\tthis.x = x;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetY: function ( y ) {\r\n\t\r\n\t\t\tthis.y = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetZ: function ( z ) {\r\n\t\r\n\t\t\tthis.z = z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetComponent: function ( index, value ) {\r\n\t\r\n\t\t\tswitch ( index ) {\r\n\t\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tcase 2: this.z = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetComponent: function ( index ) {\r\n\t\r\n\t\t\tswitch ( index ) {\r\n\t\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tcase 2: return this.z;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( v ) {\r\n\t\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\t\tthis.z = v.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tadd: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\t\tthis.z += v.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\t\tthis.z += s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddVectors: function ( a, b ) {\r\n\t\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\t\tthis.z = a.z + b.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddScaledVector: function ( v, s ) {\r\n\t\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\t\tthis.z += v.z * s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsub: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\t\tthis.z -= v.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsubScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\t\tthis.z -= s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsubVectors: function ( a, b ) {\r\n\t\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\t\tthis.z = a.z - b.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiply: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.x *= v.x;\r\n\t\t\tthis.y *= v.y;\r\n\t\t\tthis.z *= v.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\t\r\n\t\t\tif ( isFinite( scalar ) ) {\r\n\t\r\n\t\t\t\tthis.x *= scalar;\r\n\t\t\t\tthis.y *= scalar;\r\n\t\t\t\tthis.z *= scalar;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.x = 0;\r\n\t\t\t\tthis.y = 0;\r\n\t\t\t\tthis.z = 0;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyVectors: function ( a, b ) {\r\n\t\r\n\t\t\tthis.x = a.x * b.x;\r\n\t\t\tthis.y = a.y * b.y;\r\n\t\t\tthis.z = a.z * b.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyEuler: function () {\r\n\t\r\n\t\t\tvar quaternion;\r\n\t\r\n\t\t\treturn function applyEuler( euler ) {\r\n\t\r\n\t\t\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\t\r\n\t\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\r\n\t\r\n\t\t\t\tthis.applyQuaternion( quaternion.setFromEuler( euler ) );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tapplyAxisAngle: function () {\r\n\t\r\n\t\t\tvar quaternion;\r\n\t\r\n\t\t\treturn function applyAxisAngle( axis, angle ) {\r\n\t\r\n\t\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\r\n\t\r\n\t\t\t\tthis.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tapplyMatrix3: function ( m ) {\r\n\t\r\n\t\t\tvar x = this.x;\r\n\t\t\tvar y = this.y;\r\n\t\t\tvar z = this.z;\r\n\t\r\n\t\t\tvar e = m.elements;\r\n\t\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyMatrix4: function ( m ) {\r\n\t\r\n\t\t\t// input: THREE.Matrix4 affine matrix\r\n\t\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\r\n\t\t\tvar e = m.elements;\r\n\t\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyProjection: function ( m ) {\r\n\t\r\n\t\t\t// input: THREE.Matrix4 projection matrix\r\n\t\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\r\n\t\t\tvar e = m.elements;\r\n\t\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\r\n\t\r\n\t\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\r\n\t\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\r\n\t\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyQuaternion: function ( q ) {\r\n\t\r\n\t\t\tvar x = this.x;\r\n\t\t\tvar y = this.y;\r\n\t\t\tvar z = this.z;\r\n\t\r\n\t\t\tvar qx = q.x;\r\n\t\t\tvar qy = q.y;\r\n\t\t\tvar qz = q.z;\r\n\t\t\tvar qw = q.w;\r\n\t\r\n\t\t\t// calculate quat * vector\r\n\t\r\n\t\t\tvar ix =  qw * x + qy * z - qz * y;\r\n\t\t\tvar iy =  qw * y + qz * x - qx * z;\r\n\t\t\tvar iz =  qw * z + qx * y - qy * x;\r\n\t\t\tvar iw = - qx * x - qy * y - qz * z;\r\n\t\r\n\t\t\t// calculate result * inverse quat\r\n\t\r\n\t\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n\t\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n\t\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tproject: function () {\r\n\t\r\n\t\t\tvar matrix;\r\n\t\r\n\t\t\treturn function project( camera ) {\r\n\t\r\n\t\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\r\n\t\t\t\treturn this.applyProjection( matrix );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tunproject: function () {\r\n\t\r\n\t\t\tvar matrix;\r\n\t\r\n\t\t\treturn function unproject( camera ) {\r\n\t\r\n\t\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\r\n\t\t\t\treturn this.applyProjection( matrix );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttransformDirection: function ( m ) {\r\n\t\r\n\t\t\t// input: THREE.Matrix4 affine matrix\r\n\t\t\t// vector interpreted as a direction\r\n\t\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\r\n\t\t\tvar e = m.elements;\r\n\t\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\t\r\n\t\t\tthis.normalize();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdivide: function ( v ) {\r\n\t\r\n\t\t\tthis.x /= v.x;\r\n\t\t\tthis.y /= v.y;\r\n\t\t\tthis.z /= v.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdivideScalar: function ( scalar ) {\r\n\t\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmin: function ( v ) {\r\n\t\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\t\tthis.z = Math.min( this.z, v.z );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmax: function ( v ) {\r\n\t\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\t\tthis.z = Math.max( this.z, v.z );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclamp: function ( min, max ) {\r\n\t\r\n\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\t\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclampScalar: function () {\r\n\t\r\n\t\t\tvar min, max;\r\n\t\r\n\t\t\treturn function clampScalar( minVal, maxVal ) {\r\n\t\r\n\t\t\t\tif ( min === undefined ) {\r\n\t\r\n\t\t\t\t\tmin = new THREE.Vector3();\r\n\t\t\t\t\tmax = new THREE.Vector3();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tmin.set( minVal, minVal, minVal );\r\n\t\t\t\tmax.set( maxVal, maxVal, maxVal );\r\n\t\r\n\t\t\t\treturn this.clamp( min, max );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclampLength: function ( min, max ) {\r\n\t\r\n\t\t\tvar length = this.length();\r\n\t\r\n\t\t\tthis.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfloor: function () {\r\n\t\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\t\tthis.z = Math.floor( this.z );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tceil: function () {\r\n\t\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\t\tthis.z = Math.ceil( this.z );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tround: function () {\r\n\t\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\t\tthis.z = Math.round( this.z );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\troundToZero: function () {\r\n\t\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnegate: function () {\r\n\t\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\t\tthis.z = - this.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdot: function ( v ) {\r\n\t\r\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlengthSq: function () {\r\n\t\r\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlength: function () {\r\n\t\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlengthManhattan: function () {\r\n\t\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalize: function () {\r\n\t\r\n\t\t\treturn this.divideScalar( this.length() );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetLength: function ( length ) {\r\n\t\r\n\t\t\treturn this.multiplyScalar( length / this.length() );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerp: function ( v, alpha ) {\r\n\t\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\t\r\n\t\t\tthis.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcross: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.crossVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\r\n\t\t\tthis.x = y * v.z - z * v.y;\r\n\t\t\tthis.y = z * v.x - x * v.z;\r\n\t\t\tthis.z = x * v.y - y * v.x;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcrossVectors: function ( a, b ) {\r\n\t\r\n\t\t\tvar ax = a.x, ay = a.y, az = a.z;\r\n\t\t\tvar bx = b.x, by = b.y, bz = b.z;\r\n\t\r\n\t\t\tthis.x = ay * bz - az * by;\r\n\t\t\tthis.y = az * bx - ax * bz;\r\n\t\t\tthis.z = ax * by - ay * bx;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tprojectOnVector: function () {\r\n\t\r\n\t\t\tvar v1, dot;\r\n\t\r\n\t\t\treturn function projectOnVector( vector ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\r\n\t\t\t\tv1.copy( vector ).normalize();\r\n\t\r\n\t\t\t\tdot = this.dot( v1 );\r\n\t\r\n\t\t\t\treturn this.copy( v1 ).multiplyScalar( dot );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tprojectOnPlane: function () {\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function projectOnPlane( planeNormal ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\r\n\t\t\t\tv1.copy( this ).projectOnVector( planeNormal );\r\n\t\r\n\t\t\t\treturn this.sub( v1 );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\treflect: function () {\r\n\t\r\n\t\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t\t// normal is assumed to have unit length\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function reflect( normal ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\r\n\t\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tangleTo: function ( v ) {\r\n\t\r\n\t\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\r\n\t\r\n\t\t\t// clamp, to handle numerical problems\r\n\t\r\n\t\t\treturn Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceTo: function ( v ) {\r\n\t\r\n\t\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToSquared: function ( v ) {\r\n\t\r\n\t\t\tvar dx = this.x - v.x;\r\n\t\t\tvar dy = this.y - v.y;\r\n\t\t\tvar dz = this.z - v.z;\r\n\t\r\n\t\t\treturn dx * dx + dy * dy + dz * dz;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromSpherical: function( s ) {\r\n\t\r\n\t\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\r\n\t\r\n\t\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\r\n\t\t\tthis.y = Math.cos( s.phi ) * s.radius;\r\n\t\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromMatrixPosition: function ( m ) {\r\n\t\r\n\t\t\treturn this.setFromMatrixColumn( m, 3 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromMatrixScale: function ( m ) {\r\n\t\r\n\t\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\t\r\n\t\t\tthis.x = sx;\r\n\t\t\tthis.y = sy;\r\n\t\t\tthis.z = sz;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromMatrixColumn: function ( m, index ) {\r\n\t\r\n\t\t\tif ( typeof m === 'number' ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\r\n\t\r\n\t\t\t\tm = arguments[ 1 ];\r\n\t\t\t\tindex = arguments[ 0 ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this.fromArray( m.elements, index * 4 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( v ) {\r\n\t\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\t\tthis.z = array[ offset + 2 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\t\tarray[ offset + 2 ] = this.z;\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tindex = index * attribute.itemSize + offset;\r\n\t\r\n\t\t\tthis.x = attribute.array[ index ];\r\n\t\t\tthis.y = attribute.array[ index + 1 ];\r\n\t\t\tthis.z = attribute.array[ index + 2 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Vector4.js\r\n\t\r\n\t/**\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author egraether / http://egraether.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\t\r\n\tTHREE.Vector4 = function ( x, y, z, w ) {\r\n\t\r\n\t\tthis.x = x || 0;\r\n\t\tthis.y = y || 0;\r\n\t\tthis.z = z || 0;\r\n\t\tthis.w = ( w !== undefined ) ? w : 1;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Vector4.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Vector4,\r\n\t\r\n\t\tset: function ( x, y, z, w ) {\r\n\t\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t\tthis.z = z;\r\n\t\t\tthis.w = w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetScalar: function ( scalar ) {\r\n\t\r\n\t\t\tthis.x = scalar;\r\n\t\t\tthis.y = scalar;\r\n\t\t\tthis.z = scalar;\r\n\t\t\tthis.w = scalar;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetX: function ( x ) {\r\n\t\r\n\t\t\tthis.x = x;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetY: function ( y ) {\r\n\t\r\n\t\t\tthis.y = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetZ: function ( z ) {\r\n\t\r\n\t\t\tthis.z = z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetW: function ( w ) {\r\n\t\r\n\t\t\tthis.w = w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetComponent: function ( index, value ) {\r\n\t\r\n\t\t\tswitch ( index ) {\r\n\t\r\n\t\t\t\tcase 0: this.x = value; break;\r\n\t\t\t\tcase 1: this.y = value; break;\r\n\t\t\t\tcase 2: this.z = value; break;\r\n\t\t\t\tcase 3: this.w = value; break;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetComponent: function ( index ) {\r\n\t\r\n\t\t\tswitch ( index ) {\r\n\t\r\n\t\t\t\tcase 0: return this.x;\r\n\t\t\t\tcase 1: return this.y;\r\n\t\t\t\tcase 2: return this.z;\r\n\t\t\t\tcase 3: return this.w;\r\n\t\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( v ) {\r\n\t\r\n\t\t\tthis.x = v.x;\r\n\t\t\tthis.y = v.y;\r\n\t\t\tthis.z = v.z;\r\n\t\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tadd: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.addVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.x += v.x;\r\n\t\t\tthis.y += v.y;\r\n\t\t\tthis.z += v.z;\r\n\t\t\tthis.w += v.w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.x += s;\r\n\t\t\tthis.y += s;\r\n\t\t\tthis.z += s;\r\n\t\t\tthis.w += s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddVectors: function ( a, b ) {\r\n\t\r\n\t\t\tthis.x = a.x + b.x;\r\n\t\t\tthis.y = a.y + b.y;\r\n\t\t\tthis.z = a.z + b.z;\r\n\t\t\tthis.w = a.w + b.w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddScaledVector: function ( v, s ) {\r\n\t\r\n\t\t\tthis.x += v.x * s;\r\n\t\t\tthis.y += v.y * s;\r\n\t\t\tthis.z += v.z * s;\r\n\t\t\tthis.w += v.w * s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsub: function ( v, w ) {\r\n\t\r\n\t\t\tif ( w !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\t\treturn this.subVectors( v, w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.x -= v.x;\r\n\t\t\tthis.y -= v.y;\r\n\t\t\tthis.z -= v.z;\r\n\t\t\tthis.w -= v.w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsubScalar: function ( s ) {\r\n\t\r\n\t\t\tthis.x -= s;\r\n\t\t\tthis.y -= s;\r\n\t\t\tthis.z -= s;\r\n\t\t\tthis.w -= s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsubVectors: function ( a, b ) {\r\n\t\r\n\t\t\tthis.x = a.x - b.x;\r\n\t\t\tthis.y = a.y - b.y;\r\n\t\t\tthis.z = a.z - b.z;\r\n\t\t\tthis.w = a.w - b.w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyScalar: function ( scalar ) {\r\n\t\r\n\t\t\tif ( isFinite( scalar ) ) {\r\n\t\r\n\t\t\t\tthis.x *= scalar;\r\n\t\t\t\tthis.y *= scalar;\r\n\t\t\t\tthis.z *= scalar;\r\n\t\t\t\tthis.w *= scalar;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.x = 0;\r\n\t\t\t\tthis.y = 0;\r\n\t\t\t\tthis.z = 0;\r\n\t\t\t\tthis.w = 0;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyMatrix4: function ( m ) {\r\n\t\r\n\t\t\tvar x = this.x;\r\n\t\t\tvar y = this.y;\r\n\t\t\tvar z = this.z;\r\n\t\t\tvar w = this.w;\r\n\t\r\n\t\t\tvar e = m.elements;\r\n\t\r\n\t\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdivideScalar: function ( scalar ) {\r\n\t\r\n\t\t\treturn this.multiplyScalar( 1 / scalar );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\t\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\t\r\n\t\t\t// q is assumed to be normalized\r\n\t\r\n\t\t\tthis.w = 2 * Math.acos( q.w );\r\n\t\r\n\t\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\t\r\n\t\t\tif ( s < 0.0001 ) {\r\n\t\r\n\t\t\t\t this.x = 1;\r\n\t\t\t\t this.y = 0;\r\n\t\t\t\t this.z = 0;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t this.x = q.x / s;\r\n\t\t\t\t this.y = q.y / s;\r\n\t\t\t\t this.z = q.z / s;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\t\r\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\t\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\t\r\n\t\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\t\r\n\t\t\t\tte = m.elements,\r\n\t\r\n\t\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\t\r\n\t\t\tif ( ( Math.abs( m12 - m21 ) < epsilon )\r\n\t\t\t   && ( Math.abs( m13 - m31 ) < epsilon )\r\n\t\t\t   && ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\t\r\n\t\t\t\t// singularity found\r\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t\t// in leading diagonal and zero in other terms\r\n\t\r\n\t\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 )\r\n\t\t\t\t   && ( Math.abs( m13 + m31 ) < epsilon2 )\r\n\t\t\t\t   && ( Math.abs( m23 + m32 ) < epsilon2 )\r\n\t\t\t\t   && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\t\r\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\t\r\n\t\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\t\r\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// otherwise this singularity is angle = 180\r\n\t\r\n\t\t\t\tangle = Math.PI;\r\n\t\r\n\t\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\t\r\n\t\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\t\r\n\t\t\t\t\t// m11 is the largest diagonal term\r\n\t\r\n\t\t\t\t\tif ( xx < epsilon ) {\r\n\t\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\t\tz = 0.707106781;\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\t\tz = xz / x;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else if ( yy > zz ) {\r\n\t\r\n\t\t\t\t\t// m22 is the largest diagonal term\r\n\t\r\n\t\t\t\t\tif ( yy < epsilon ) {\r\n\t\r\n\t\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\tz = 0.707106781;\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\t\tz = yz / y;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\t\r\n\t\t\t\t\tif ( zz < epsilon ) {\r\n\t\r\n\t\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\t\tz = 0;\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\t\ty = yz / z;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.set( x, y, z, angle );\r\n\t\r\n\t\t\t\treturn this; // return 180 deg rotation\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// as we have reached here there are no singularities so we can handle normally\r\n\t\r\n\t\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )\r\n\t\t\t\t\t\t\t  + ( m13 - m31 ) * ( m13 - m31 )\r\n\t\t\t\t\t\t\t  + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\t\r\n\t\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\t\r\n\t\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t\t// caught by singularity test above, but I've left it in just in case\r\n\t\r\n\t\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmin: function ( v ) {\r\n\t\r\n\t\t\tthis.x = Math.min( this.x, v.x );\r\n\t\t\tthis.y = Math.min( this.y, v.y );\r\n\t\t\tthis.z = Math.min( this.z, v.z );\r\n\t\t\tthis.w = Math.min( this.w, v.w );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmax: function ( v ) {\r\n\t\r\n\t\t\tthis.x = Math.max( this.x, v.x );\r\n\t\t\tthis.y = Math.max( this.y, v.y );\r\n\t\t\tthis.z = Math.max( this.z, v.z );\r\n\t\t\tthis.w = Math.max( this.w, v.w );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclamp: function ( min, max ) {\r\n\t\r\n\t\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\t\r\n\t\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclampScalar: function () {\r\n\t\r\n\t\t\tvar min, max;\r\n\t\r\n\t\t\treturn function clampScalar( minVal, maxVal ) {\r\n\t\r\n\t\t\t\tif ( min === undefined ) {\r\n\t\r\n\t\t\t\t\tmin = new THREE.Vector4();\r\n\t\t\t\t\tmax = new THREE.Vector4();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tmin.set( minVal, minVal, minVal, minVal );\r\n\t\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\r\n\t\r\n\t\t\t\treturn this.clamp( min, max );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tfloor: function () {\r\n\t\r\n\t\t\tthis.x = Math.floor( this.x );\r\n\t\t\tthis.y = Math.floor( this.y );\r\n\t\t\tthis.z = Math.floor( this.z );\r\n\t\t\tthis.w = Math.floor( this.w );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tceil: function () {\r\n\t\r\n\t\t\tthis.x = Math.ceil( this.x );\r\n\t\t\tthis.y = Math.ceil( this.y );\r\n\t\t\tthis.z = Math.ceil( this.z );\r\n\t\t\tthis.w = Math.ceil( this.w );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tround: function () {\r\n\t\r\n\t\t\tthis.x = Math.round( this.x );\r\n\t\t\tthis.y = Math.round( this.y );\r\n\t\t\tthis.z = Math.round( this.z );\r\n\t\t\tthis.w = Math.round( this.w );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\troundToZero: function () {\r\n\t\r\n\t\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnegate: function () {\r\n\t\r\n\t\t\tthis.x = - this.x;\r\n\t\t\tthis.y = - this.y;\r\n\t\t\tthis.z = - this.z;\r\n\t\t\tthis.w = - this.w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdot: function ( v ) {\r\n\t\r\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlengthSq: function () {\r\n\t\r\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlength: function () {\r\n\t\r\n\t\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlengthManhattan: function () {\r\n\t\r\n\t\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalize: function () {\r\n\t\r\n\t\t\treturn this.divideScalar( this.length() );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetLength: function ( length ) {\r\n\t\r\n\t\t\treturn this.multiplyScalar( length / this.length() );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerp: function ( v, alpha ) {\r\n\t\r\n\t\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlerpVectors: function ( v1, v2, alpha ) {\r\n\t\r\n\t\t\tthis.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( v ) {\r\n\t\r\n\t\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tthis.x = array[ offset ];\r\n\t\t\tthis.y = array[ offset + 1 ];\r\n\t\t\tthis.z = array[ offset + 2 ];\r\n\t\t\tthis.w = array[ offset + 3 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tarray[ offset ] = this.x;\r\n\t\t\tarray[ offset + 1 ] = this.y;\r\n\t\t\tarray[ offset + 2 ] = this.z;\r\n\t\t\tarray[ offset + 3 ] = this.w;\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromAttribute: function ( attribute, index, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tindex = index * attribute.itemSize + offset;\r\n\t\r\n\t\t\tthis.x = attribute.array[ index ];\r\n\t\t\tthis.y = attribute.array[ index + 1 ];\r\n\t\t\tthis.z = attribute.array[ index + 2 ];\r\n\t\t\tthis.w = attribute.array[ index + 3 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Euler.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Euler = function ( x, y, z, order ) {\r\n\t\r\n\t\tthis._x = x || 0;\r\n\t\tthis._y = y || 0;\r\n\t\tthis._z = z || 0;\r\n\t\tthis._order = order || THREE.Euler.DefaultOrder;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\r\n\t\r\n\tTHREE.Euler.DefaultOrder = 'XYZ';\r\n\t\r\n\tTHREE.Euler.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Euler,\r\n\t\r\n\t\tget x () {\r\n\t\r\n\t\t\treturn this._x;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset x ( value ) {\r\n\t\r\n\t\t\tthis._x = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget y () {\r\n\t\r\n\t\t\treturn this._y;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset y ( value ) {\r\n\t\r\n\t\t\tthis._y = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget z () {\r\n\t\r\n\t\t\treturn this._z;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset z ( value ) {\r\n\t\r\n\t\t\tthis._z = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget order () {\r\n\t\r\n\t\t\treturn this._order;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset order ( value ) {\r\n\t\r\n\t\t\tthis._order = value;\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset: function ( x, y, z, order ) {\r\n\t\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\t\t\tthis._order = order || this._order;\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( euler ) {\r\n\t\r\n\t\t\tthis._x = euler._x;\r\n\t\t\tthis._y = euler._y;\r\n\t\t\tthis._z = euler._z;\r\n\t\t\tthis._order = euler._order;\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromRotationMatrix: function ( m, order, update ) {\r\n\t\r\n\t\t\tvar clamp = THREE.Math.clamp;\r\n\t\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\t\r\n\t\t\tvar te = m.elements;\r\n\t\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\t\r\n\t\t\torder = order || this._order;\r\n\t\r\n\t\t\tif ( order === 'XYZ' ) {\r\n\t\r\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\t\r\n\t\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\r\n\t\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._z = 0;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( order === 'YXZ' ) {\r\n\t\r\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\t\r\n\t\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\r\n\t\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\t\tthis._z = 0;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( order === 'ZXY' ) {\r\n\t\r\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\t\r\n\t\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\r\n\t\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis._y = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( order === 'ZYX' ) {\r\n\t\r\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\t\r\n\t\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\r\n\t\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( order === 'YZX' ) {\r\n\t\r\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\t\r\n\t\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\r\n\t\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( order === 'XZY' ) {\r\n\t\r\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\t\r\n\t\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\r\n\t\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._y = 0;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order )\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis._order = order;\r\n\t\r\n\t\t\tif ( update !== false ) this.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromQuaternion: function () {\r\n\t\r\n\t\t\tvar matrix;\r\n\t\r\n\t\t\treturn function ( q, order, update ) {\r\n\t\r\n\t\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\t\t\t\tmatrix.makeRotationFromQuaternion( q );\r\n\t\t\t\tthis.setFromRotationMatrix( matrix, order, update );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tsetFromVector3: function ( v, order ) {\r\n\t\r\n\t\t\treturn this.set( v.x, v.y, v.z, order || this._order );\r\n\t\r\n\t\t},\r\n\t\r\n\t\treorder: function () {\r\n\t\r\n\t\t\t// WARNING: this discards revolution information -bhouston\r\n\t\r\n\t\t\tvar q = new THREE.Quaternion();\r\n\t\r\n\t\t\treturn function ( newOrder ) {\r\n\t\r\n\t\t\t\tq.setFromEuler( this );\r\n\t\t\t\tthis.setFromQuaternion( q, newOrder );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tequals: function ( euler ) {\r\n\t\r\n\t\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array ) {\r\n\t\r\n\t\t\tthis._x = array[ 0 ];\r\n\t\t\tthis._y = array[ 1 ];\r\n\t\t\tthis._z = array[ 2 ];\r\n\t\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\r\n\t\r\n\t\t\tthis.onChangeCallback();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function ( array, offset ) {\r\n\t\r\n\t\t\tif ( array === undefined ) array = [];\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tarray[ offset ] = this._x;\r\n\t\t\tarray[ offset + 1 ] = this._y;\r\n\t\t\tarray[ offset + 2 ] = this._z;\r\n\t\t\tarray[ offset + 3 ] = this._order;\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoVector3: function ( optionalResult ) {\r\n\t\r\n\t\t\tif ( optionalResult ) {\r\n\t\r\n\t\t\t\treturn optionalResult.set( this._x, this._y, this._z );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\treturn new THREE.Vector3( this._x, this._y, this._z );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tonChange: function ( callback ) {\r\n\t\r\n\t\t\tthis.onChangeCallback = callback;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tonChangeCallback: function () {}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Line3.js\r\n\t\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Line3 = function ( start, end ) {\r\n\t\r\n\t\tthis.start = ( start !== undefined ) ? start : new THREE.Vector3();\r\n\t\tthis.end = ( end !== undefined ) ? end : new THREE.Vector3();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Line3.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Line3,\r\n\t\r\n\t\tset: function ( start, end ) {\r\n\t\r\n\t\t\tthis.start.copy( start );\r\n\t\t\tthis.end.copy( end );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( line ) {\r\n\t\r\n\t\t\tthis.start.copy( line.start );\r\n\t\t\tthis.end.copy( line.end );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcenter: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdelta: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.subVectors( this.end, this.start );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceSq: function () {\r\n\t\r\n\t\t\treturn this.start.distanceToSquared( this.end );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistance: function () {\r\n\t\r\n\t\t\treturn this.start.distanceTo( this.end );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tat: function ( t, optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclosestPointToPointParameter: function () {\r\n\t\r\n\t\t\tvar startP = new THREE.Vector3();\r\n\t\t\tvar startEnd = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( point, clampToLine ) {\r\n\t\r\n\t\t\t\tstartP.subVectors( point, this.start );\r\n\t\t\t\tstartEnd.subVectors( this.end, this.start );\r\n\t\r\n\t\t\t\tvar startEnd2 = startEnd.dot( startEnd );\r\n\t\t\t\tvar startEnd_startP = startEnd.dot( startP );\r\n\t\r\n\t\t\t\tvar t = startEnd_startP / startEnd2;\r\n\t\r\n\t\t\t\tif ( clampToLine ) {\r\n\t\r\n\t\t\t\t\tt = THREE.Math.clamp( t, 0, 1 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn t;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\r\n\t\r\n\t\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyMatrix4: function ( matrix ) {\r\n\t\r\n\t\t\tthis.start.applyMatrix4( matrix );\r\n\t\t\tthis.end.applyMatrix4( matrix );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( line ) {\r\n\t\r\n\t\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Box2.js\r\n\t\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Box2 = function ( min, max ) {\r\n\t\r\n\t\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( + Infinity, + Infinity );\r\n\t\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Box2.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Box2,\r\n\t\r\n\t\tset: function ( min, max ) {\r\n\t\r\n\t\t\tthis.min.copy( min );\r\n\t\t\tthis.max.copy( max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromPoints: function ( points ) {\r\n\t\r\n\t\t\tthis.makeEmpty();\r\n\t\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tthis.expandByPoint( points[ i ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromCenterAndSize: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector2();\r\n\t\r\n\t\t\treturn function ( center, size ) {\r\n\t\r\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\t\tthis.max.copy( center ).add( halfSize );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( box ) {\r\n\t\r\n\t\t\tthis.min.copy( box.min );\r\n\t\t\tthis.max.copy( box.max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeEmpty: function () {\r\n\t\r\n\t\t\tthis.min.x = this.min.y = + Infinity;\r\n\t\t\tthis.max.x = this.max.y = - Infinity;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tisEmpty: function () {\r\n\t\r\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\t\r\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcenter: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsize: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\t\treturn result.subVectors( this.max, this.min );\r\n\t\r\n\t\t},\r\n\t\r\n\t\texpandByPoint: function ( point ) {\r\n\t\r\n\t\t\tthis.min.min( point );\r\n\t\t\tthis.max.max( point );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\texpandByVector: function ( vector ) {\r\n\t\r\n\t\t\tthis.min.sub( vector );\r\n\t\t\tthis.max.add( vector );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\texpandByScalar: function ( scalar ) {\r\n\t\r\n\t\t\tthis.min.addScalar( - scalar );\r\n\t\t\tthis.max.addScalar( scalar );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcontainsPoint: function ( point ) {\r\n\t\r\n\t\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\t     point.y < this.min.y || point.y > this.max.y ) {\r\n\t\r\n\t\t\t\treturn false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcontainsBox: function ( box ) {\r\n\t\r\n\t\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\r\n\t\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn false;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetParameter: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\t// This can potentially have a divide by zero if the box\r\n\t\t\t// has a size dimension of 0.\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\r\n\t\t\treturn result.set(\r\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\r\n\t\t\t);\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectsBox: function ( box ) {\r\n\t\r\n\t\t\t// using 6 splitting planes to rule out intersections.\r\n\t\r\n\t\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\r\n\t\r\n\t\t\t\treturn false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclampPoint: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToPoint: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector2();\r\n\t\r\n\t\t\treturn function ( point ) {\r\n\t\r\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\t\treturn clampedPoint.sub( point ).length();\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tintersect: function ( box ) {\r\n\t\r\n\t\t\tthis.min.max( box.min );\r\n\t\t\tthis.max.min( box.max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tunion: function ( box ) {\r\n\t\r\n\t\t\tthis.min.min( box.min );\r\n\t\t\tthis.max.max( box.max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttranslate: function ( offset ) {\r\n\t\r\n\t\t\tthis.min.add( offset );\r\n\t\t\tthis.max.add( offset );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( box ) {\r\n\t\r\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Box3.js\r\n\t\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\t\r\n\tTHREE.Box3 = function ( min, max ) {\r\n\t\r\n\t\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( + Infinity, + Infinity, + Infinity );\r\n\t\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Box3.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Box3,\r\n\t\r\n\t\tset: function ( min, max ) {\r\n\t\r\n\t\t\tthis.min.copy( min );\r\n\t\t\tthis.max.copy( max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromArray: function ( array ) {\r\n\t\r\n\t\t\tthis.makeEmpty();\r\n\t\r\n\t\t\tvar minX = + Infinity;\r\n\t\t\tvar minY = + Infinity;\r\n\t\t\tvar minZ = + Infinity;\r\n\t\r\n\t\t\tvar maxX = - Infinity;\r\n\t\t\tvar maxY = - Infinity;\r\n\t\t\tvar maxZ = - Infinity;\r\n\t\r\n\t\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\r\n\t\r\n\t\t\t\tvar x = array[ i ];\r\n\t\t\t\tvar y = array[ i + 1 ];\r\n\t\t\t\tvar z = array[ i + 2 ];\r\n\t\r\n\t\t\t\tif ( x < minX ) minX = x;\r\n\t\t\t\tif ( y < minY ) minY = y;\r\n\t\t\t\tif ( z < minZ ) minZ = z;\r\n\t\r\n\t\t\t\tif ( x > maxX ) maxX = x;\r\n\t\t\t\tif ( y > maxY ) maxY = y;\r\n\t\t\t\tif ( z > maxZ ) maxZ = z;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.min.set( minX, minY, minZ );\r\n\t\t\tthis.max.set( maxX, maxY, maxZ );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromPoints: function ( points ) {\r\n\t\r\n\t\t\tthis.makeEmpty();\r\n\t\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tthis.expandByPoint( points[ i ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromCenterAndSize: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( center, size ) {\r\n\t\r\n\t\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\t\r\n\t\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\t\tthis.max.copy( center ).add( halfSize );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tsetFromObject: function () {\r\n\t\r\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t\t\t// accounting for both the object's, and children's, world transforms\r\n\t\r\n\t\t\tvar box;\r\n\t\r\n\t\t\treturn function ( object ) {\r\n\t\r\n\t\t\t\tif ( box === undefined ) box = new THREE.Box3();\r\n\t\r\n\t\t\t\tvar scope = this;\r\n\t\r\n\t\t\t\tthis.makeEmpty();\r\n\t\r\n\t\t\t\tobject.updateMatrixWorld( true );\r\n\t\r\n\t\t\t\tobject.traverse( function ( node ) {\r\n\t\r\n\t\t\t\t\tvar geometry = node.geometry;\r\n\t\r\n\t\t\t\t\tif ( geometry !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tif ( geometry.boundingBox === null ) {\r\n\t\r\n\t\t\t\t\t\t\tgeometry.computeBoundingBox();\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( geometry.boundingBox.isEmpty() === false ) {\r\n\t\r\n\t\t\t\t\t\t\tbox.copy( geometry.boundingBox );\r\n\t\t\t\t\t\t\tbox.applyMatrix4( node.matrixWorld );\r\n\t\t\t\t\t\t\tscope.union( box );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( box ) {\r\n\t\r\n\t\t\tthis.min.copy( box.min );\r\n\t\t\tthis.max.copy( box.max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeEmpty: function () {\r\n\t\r\n\t\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\r\n\t\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tisEmpty: function () {\r\n\t\r\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\t\r\n\t\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcenter: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsize: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.subVectors( this.max, this.min );\r\n\t\r\n\t\t},\r\n\t\r\n\t\texpandByPoint: function ( point ) {\r\n\t\r\n\t\t\tthis.min.min( point );\r\n\t\t\tthis.max.max( point );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\texpandByVector: function ( vector ) {\r\n\t\r\n\t\t\tthis.min.sub( vector );\r\n\t\t\tthis.max.add( vector );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\texpandByScalar: function ( scalar ) {\r\n\t\r\n\t\t\tthis.min.addScalar( - scalar );\r\n\t\t\tthis.max.addScalar( scalar );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcontainsPoint: function ( point ) {\r\n\t\r\n\t\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\t\t\t point.y < this.min.y || point.y > this.max.y ||\r\n\t\t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\r\n\t\r\n\t\t\t\treturn false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcontainsBox: function ( box ) {\r\n\t\r\n\t\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\r\n\t\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\r\n\t\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn false;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetParameter: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\t// This can potentially have a divide by zero if the box\r\n\t\t\t// has a size dimension of 0.\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\treturn result.set(\r\n\t\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t\t);\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectsBox: function ( box ) {\r\n\t\r\n\t\t\t// using 6 splitting planes to rule out intersections.\r\n\t\r\n\t\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\r\n\t\r\n\t\t\t\treturn false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectsSphere: ( function () {\r\n\t\r\n\t\t\tvar closestPoint;\r\n\t\r\n\t\t\treturn function intersectsSphere( sphere ) {\r\n\t\r\n\t\t\t\tif ( closestPoint === undefined ) closestPoint = new THREE.Vector3();\r\n\t\r\n\t\t\t\t// Find the point on the AABB closest to the sphere center.\r\n\t\t\t\tthis.clampPoint( sphere.center, closestPoint );\r\n\t\r\n\t\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\r\n\t\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t} )(),\r\n\t\r\n\t\tintersectsPlane: function ( plane ) {\r\n\t\r\n\t\t\t// We compute the minimum and maximum dot product values. If those values\r\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\r\n\t\r\n\t\t\tvar min, max;\r\n\t\r\n\t\t\tif ( plane.normal.x > 0 ) {\r\n\t\r\n\t\t\t\tmin = plane.normal.x * this.min.x;\r\n\t\t\t\tmax = plane.normal.x * this.max.x;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tmin = plane.normal.x * this.max.x;\r\n\t\t\t\tmax = plane.normal.x * this.min.x;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( plane.normal.y > 0 ) {\r\n\t\r\n\t\t\t\tmin += plane.normal.y * this.min.y;\r\n\t\t\t\tmax += plane.normal.y * this.max.y;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tmin += plane.normal.y * this.max.y;\r\n\t\t\t\tmax += plane.normal.y * this.min.y;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( plane.normal.z > 0 ) {\r\n\t\r\n\t\t\t\tmin += plane.normal.z * this.min.z;\r\n\t\t\t\tmax += plane.normal.z * this.max.z;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tmin += plane.normal.z * this.max.z;\r\n\t\t\t\tmax += plane.normal.z * this.min.z;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn ( min <= plane.constant && max >= plane.constant );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclampPoint: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.copy( point ).clamp( this.min, this.max );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToPoint: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( point ) {\r\n\t\r\n\t\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\t\treturn clampedPoint.sub( point ).length();\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tgetBoundingSphere: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( optionalTarget ) {\r\n\t\r\n\t\t\t\tvar result = optionalTarget || new THREE.Sphere();\r\n\t\r\n\t\t\t\tresult.center = this.center();\r\n\t\t\t\tresult.radius = this.size( v1 ).length() * 0.5;\r\n\t\r\n\t\t\t\treturn result;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tintersect: function ( box ) {\r\n\t\r\n\t\t\tthis.min.max( box.min );\r\n\t\t\tthis.max.min( box.max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tunion: function ( box ) {\r\n\t\r\n\t\t\tthis.min.min( box.min );\r\n\t\t\tthis.max.max( box.max );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyMatrix4: function () {\r\n\t\r\n\t\t\tvar points = [\r\n\t\t\t\tnew THREE.Vector3(),\r\n\t\t\t\tnew THREE.Vector3(),\r\n\t\t\t\tnew THREE.Vector3(),\r\n\t\t\t\tnew THREE.Vector3(),\r\n\t\t\t\tnew THREE.Vector3(),\r\n\t\t\t\tnew THREE.Vector3(),\r\n\t\t\t\tnew THREE.Vector3(),\r\n\t\t\t\tnew THREE.Vector3()\r\n\t\t\t];\r\n\t\r\n\t\t\treturn function ( matrix ) {\r\n\t\r\n\t\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\r\n\t\r\n\t\t\t\tthis.makeEmpty();\r\n\t\t\t\tthis.setFromPoints( points );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslate: function ( offset ) {\r\n\t\r\n\t\t\tthis.min.add( offset );\r\n\t\t\tthis.max.add( offset );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( box ) {\r\n\t\r\n\t\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Matrix3.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author bhouston / http://clara.io\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.Matrix3 = function () {\r\n\t\r\n\t\tthis.elements = new Float32Array( [\r\n\t\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\t\r\n\t\t] );\r\n\t\r\n\t\tif ( arguments.length > 0 ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Matrix3.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Matrix3,\r\n\t\r\n\t\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\r\n\t\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\r\n\t\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tidentity: function () {\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\t1, 0, 0,\r\n\t\t\t\t0, 1, 0,\r\n\t\t\t\t0, 0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().fromArray( this.elements );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( m ) {\r\n\t\r\n\t\t\tvar me = m.elements;\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\r\n\t\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\r\n\t\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromMatrix4: function( m ) {\r\n\t\r\n\t\t\tvar me = m.elements;\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\tme[ 0 ], me[ 4 ], me[  8 ],\r\n\t\t\t\tme[ 1 ], me[ 5 ], me[  9 ],\r\n\t\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyToVector3Array: function () {\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function ( array, offset, length ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\t\tif ( length === undefined ) length = array.length;\r\n\t\r\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\r\n\t\r\n\t\t\t\t\tv1.fromArray( array, j );\r\n\t\t\t\t\tv1.applyMatrix3( this );\r\n\t\t\t\t\tv1.toArray( array, j );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn array;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tapplyToBuffer: function () {\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function applyToBuffer( buffer, offset, length ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\r\n\t\r\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\r\n\t\r\n\t\t\t\t\tv1.x = buffer.getX( j );\r\n\t\t\t\t\tv1.y = buffer.getY( j );\r\n\t\t\t\t\tv1.z = buffer.getZ( j );\r\n\t\r\n\t\t\t\t\tv1.applyMatrix3( this );\r\n\t\r\n\t\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn buffer;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tmultiplyScalar: function ( s ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdeterminant: function () {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\t\r\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetInverse: function ( matrix, throwOnDegenerate ) {\r\n\t\r\n\t\t\tif ( matrix instanceof THREE.Matrix4 ) {\r\n\t\r\n\t\t\t\tconsole.warn( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar me = matrix.elements,\r\n\t\t\t\tte = this.elements,\r\n\t\r\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\r\n\t\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\r\n\t\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\r\n\t\r\n\t\t\t\tt11 = n33 * n22 - n32 * n23,\r\n\t\t\t\tt12 = n32 * n13 - n33 * n12,\r\n\t\t\t\tt13 = n23 * n12 - n22 * n13,\r\n\t\r\n\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\r\n\t\r\n\t\t\tif ( det === 0 ) {\r\n\t\r\n\t\t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\r\n\t\r\n\t\t\t\tif ( throwOnDegenerate || false ) {\r\n\t\r\n\t\t\t\t\tthrow new Error( msg );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tconsole.warn( msg );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn this.identity();\r\n\t\t\t}\r\n\t\r\n\t\t\tte[ 0 ] = t11;\r\n\t\t\tte[ 1 ] = n31 * n23 - n33 * n21;\r\n\t\t\tte[ 2 ] = n32 * n21 - n31 * n22;\r\n\t\r\n\t\t\tte[ 3 ] = t12;\r\n\t\t\tte[ 4 ] = n33 * n11 - n31 * n13;\r\n\t\t\tte[ 5 ] = n31 * n12 - n32 * n11;\r\n\t\r\n\t\t\tte[ 6 ] = t13;\r\n\t\t\tte[ 7 ] = n21 * n13 - n23 * n11;\r\n\t\t\tte[ 8 ] = n22 * n11 - n21 * n12;\r\n\t\r\n\t\t\treturn this.multiplyScalar( 1 / det );\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttranspose: function () {\r\n\t\r\n\t\t\tvar tmp, m = this.elements;\r\n\t\r\n\t\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tflattenToArrayOffset: function ( array, offset ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tarray[ offset ] = te[ 0 ];\r\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\r\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\r\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\t\tarray[ offset + 8 ]  = te[ 8 ];\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetNormalMatrix: function ( matrix4 ) {\r\n\t\r\n\t\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttransposeIntoArray: function ( r ) {\r\n\t\r\n\t\t\tvar m = this.elements;\r\n\t\r\n\t\t\tr[ 0 ] = m[ 0 ];\r\n\t\t\tr[ 1 ] = m[ 3 ];\r\n\t\t\tr[ 2 ] = m[ 6 ];\r\n\t\t\tr[ 3 ] = m[ 1 ];\r\n\t\t\tr[ 4 ] = m[ 4 ];\r\n\t\t\tr[ 5 ] = m[ 7 ];\r\n\t\t\tr[ 6 ] = m[ 2 ];\r\n\t\t\tr[ 7 ] = m[ 5 ];\r\n\t\t\tr[ 8 ] = m[ 8 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array ) {\r\n\t\r\n\t\t\tthis.elements.set( array );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function () {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\tte[ 0 ], te[ 1 ], te[ 2 ],\r\n\t\t\t\tte[ 3 ], te[ 4 ], te[ 5 ],\r\n\t\t\t\tte[ 6 ], te[ 7 ], te[ 8 ]\r\n\t\t\t];\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Matrix4.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author philogb / http://blog.thejit.org/\r\n\t * @author jordi_ros / http://plattsoft.com\r\n\t * @author D1plo1d / http://github.com/D1plo1d\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author timknip / http://www.floorplanner.com/\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\t\r\n\tTHREE.Matrix4 = function () {\r\n\t\r\n\t\tthis.elements = new Float32Array( [\r\n\t\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\t\r\n\t\t] );\r\n\t\r\n\t\tif ( arguments.length > 0 ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Matrix4.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Matrix4,\r\n\t\r\n\t\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tidentity: function () {\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\t1, 0, 0, 0,\r\n\t\t\t\t0, 1, 0, 0,\r\n\t\t\t\t0, 0, 1, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new THREE.Matrix4().fromArray( this.elements );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( m ) {\r\n\t\r\n\t\t\tthis.elements.set( m.elements );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyPosition: function ( m ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\t\r\n\t\t\tte[ 12 ] = me[ 12 ];\r\n\t\t\tte[ 13 ] = me[ 13 ];\r\n\t\t\tte[ 14 ] = me[ 14 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\textractBasis: function ( xAxis, yAxis, zAxis ) {\r\n\t\r\n\t\t\txAxis.setFromMatrixColumn( this, 0 );\r\n\t\t\tyAxis.setFromMatrixColumn( this, 1 );\r\n\t\t\tzAxis.setFromMatrixColumn( this, 2 );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\r\n\t\r\n\t\t\tthis.set(\r\n\t\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t\t0,       0,       0,       1\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\textractRotation: function () {\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function ( m ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\r\n\t\t\t\tvar te = this.elements;\r\n\t\t\t\tvar me = m.elements;\r\n\t\r\n\t\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\r\n\t\r\n\t\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\t\r\n\t\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\t\r\n\t\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tmakeRotationFromEuler: function ( euler ) {\r\n\t\r\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tvar x = euler.x, y = euler.y, z = euler.z;\r\n\t\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\t\r\n\t\t\tif ( euler.order === 'XYZ' ) {\r\n\t\r\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\t\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = - c * f;\r\n\t\t\t\tte[ 8 ] = d;\r\n\t\r\n\t\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\t\tte[ 9 ] = - b * c;\r\n\t\r\n\t\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\t\r\n\t\t\t} else if ( euler.order === 'YXZ' ) {\r\n\t\r\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\t\r\n\t\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\t\tte[ 8 ] = a * d;\r\n\t\r\n\t\t\t\tte[ 1 ] = a * f;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = - b;\r\n\t\r\n\t\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\t\r\n\t\t\t} else if ( euler.order === 'ZXY' ) {\r\n\t\r\n\t\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\t\r\n\t\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\t\tte[ 4 ] = - a * f;\r\n\t\t\t\tte[ 8 ] = de + cf * b;\r\n\t\r\n\t\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = df - ce * b;\r\n\t\r\n\t\t\t\tte[ 2 ] = - a * d;\r\n\t\t\t\tte[ 6 ] = b;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\t\r\n\t\t\t} else if ( euler.order === 'ZYX' ) {\r\n\t\r\n\t\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\t\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\t\tte[ 8 ] = ae * d + bf;\r\n\t\r\n\t\t\t\tte[ 1 ] = c * f;\r\n\t\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\t\tte[ 9 ] = af * d - be;\r\n\t\r\n\t\t\t\tte[ 2 ] = - d;\r\n\t\t\t\tte[ 6 ] = b * c;\r\n\t\t\t\tte[ 10 ] = a * c;\r\n\t\r\n\t\t\t} else if ( euler.order === 'YZX' ) {\r\n\t\r\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\t\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\t\tte[ 8 ] = bc * f + ad;\r\n\t\r\n\t\t\t\tte[ 1 ] = f;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = - b * e;\r\n\t\r\n\t\t\t\tte[ 2 ] = - d * e;\r\n\t\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\t\tte[ 10 ] = ac - bd * f;\r\n\t\r\n\t\t\t} else if ( euler.order === 'XZY' ) {\r\n\t\r\n\t\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\t\r\n\t\t\t\tte[ 0 ] = c * e;\r\n\t\t\t\tte[ 4 ] = - f;\r\n\t\t\t\tte[ 8 ] = d * e;\r\n\t\r\n\t\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\t\tte[ 5 ] = a * e;\r\n\t\t\t\tte[ 9 ] = ad * f - bc;\r\n\t\r\n\t\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\t\tte[ 6 ] = b * e;\r\n\t\t\t\tte[ 10 ] = bd * f + ac;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// last column\r\n\t\t\tte[ 3 ] = 0;\r\n\t\t\tte[ 7 ] = 0;\r\n\t\t\tte[ 11 ] = 0;\r\n\t\r\n\t\t\t// bottom row\r\n\t\t\tte[ 12 ] = 0;\r\n\t\t\tte[ 13 ] = 0;\r\n\t\t\tte[ 14 ] = 0;\r\n\t\t\tte[ 15 ] = 1;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeRotationFromQuaternion: function ( q ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\r\n\t\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\r\n\t\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\t\r\n\t\t\tte[ 0 ] = 1 - ( yy + zz );\r\n\t\t\tte[ 4 ] = xy - wz;\r\n\t\t\tte[ 8 ] = xz + wy;\r\n\t\r\n\t\t\tte[ 1 ] = xy + wz;\r\n\t\t\tte[ 5 ] = 1 - ( xx + zz );\r\n\t\t\tte[ 9 ] = yz - wx;\r\n\t\r\n\t\t\tte[ 2 ] = xz - wy;\r\n\t\t\tte[ 6 ] = yz + wx;\r\n\t\t\tte[ 10 ] = 1 - ( xx + yy );\r\n\t\r\n\t\t\t// last column\r\n\t\t\tte[ 3 ] = 0;\r\n\t\t\tte[ 7 ] = 0;\r\n\t\t\tte[ 11 ] = 0;\r\n\t\r\n\t\t\t// bottom row\r\n\t\t\tte[ 12 ] = 0;\r\n\t\t\tte[ 13 ] = 0;\r\n\t\t\tte[ 14 ] = 0;\r\n\t\t\tte[ 15 ] = 1;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlookAt: function () {\r\n\t\r\n\t\t\tvar x, y, z;\r\n\t\r\n\t\t\treturn function ( eye, target, up ) {\r\n\t\r\n\t\t\t\tif ( x === undefined ) x = new THREE.Vector3();\r\n\t\t\t\tif ( y === undefined ) y = new THREE.Vector3();\r\n\t\t\t\tif ( z === undefined ) z = new THREE.Vector3();\r\n\t\r\n\t\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\t\tz.subVectors( eye, target ).normalize();\r\n\t\r\n\t\t\t\tif ( z.lengthSq() === 0 ) {\r\n\t\r\n\t\t\t\t\tz.z = 1;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tx.crossVectors( up, z ).normalize();\r\n\t\r\n\t\t\t\tif ( x.lengthSq() === 0 ) {\r\n\t\r\n\t\t\t\t\tz.x += 0.0001;\r\n\t\t\t\t\tx.crossVectors( up, z ).normalize();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\ty.crossVectors( z, x );\r\n\t\r\n\t\r\n\t\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\r\n\t\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\r\n\t\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tmultiply: function ( m, n ) {\r\n\t\r\n\t\t\tif ( n !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\t\treturn this.multiplyMatrices( m, n );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this.multiplyMatrices( this, m );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyMatrices: function ( a, b ) {\r\n\t\r\n\t\t\tvar ae = a.elements;\r\n\t\t\tvar be = b.elements;\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\t\r\n\t\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\t\r\n\t\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\t\r\n\t\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\t\r\n\t\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\t\r\n\t\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyToArray: function ( a, b, r ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tthis.multiplyMatrices( a, b );\r\n\t\r\n\t\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\r\n\t\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\r\n\t\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\r\n\t\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmultiplyScalar: function ( s ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyToVector3Array: function () {\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function ( array, offset, length ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\t\tif ( length === undefined ) length = array.length;\r\n\t\r\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\r\n\t\r\n\t\t\t\t\tv1.fromArray( array, j );\r\n\t\t\t\t\tv1.applyMatrix4( this );\r\n\t\t\t\t\tv1.toArray( array, j );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn array;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tapplyToBuffer: function () {\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function applyToBuffer( buffer, offset, length ) {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\r\n\t\r\n\t\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\r\n\t\r\n\t\t\t\t\tv1.x = buffer.getX( j );\r\n\t\t\t\t\tv1.y = buffer.getY( j );\r\n\t\t\t\t\tv1.z = buffer.getZ( j );\r\n\t\r\n\t\t\t\t\tv1.applyMatrix4( this );\r\n\t\r\n\t\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn buffer;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tdeterminant: function () {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\t\r\n\t\t\t//TODO: make this more efficient\r\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\t\r\n\t\t\treturn (\r\n\t\t\t\tn41 * (\r\n\t\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t\t - n12 * n23 * n34\r\n\t\t\t\t) +\r\n\t\t\t\tn42 * (\r\n\t\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t\t - n14 * n23 * n31\r\n\t\t\t\t) +\r\n\t\t\t\tn43 * (\r\n\t\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t\t - n12 * n24 * n31\r\n\t\t\t\t) +\r\n\t\t\t\tn44 * (\r\n\t\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t\t + n12 * n23 * n31\r\n\t\t\t\t)\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttranspose: function () {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar tmp;\r\n\t\r\n\t\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\t\r\n\t\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tflattenToArrayOffset: function ( array, offset ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tarray[ offset ] = te[ 0 ];\r\n\t\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\r\n\t\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\r\n\t\t\tarray[ offset + 8 ]  = te[ 8 ];\r\n\t\t\tarray[ offset + 9 ]  = te[ 9 ];\r\n\t\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\t\r\n\t\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetPosition: function () {\r\n\t\r\n\t\t\tvar v1;\r\n\t\r\n\t\t\treturn function () {\r\n\t\r\n\t\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\r\n\t\r\n\t\t\t\treturn v1.setFromMatrixColumn( this, 3 );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tsetPosition: function ( v ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tte[ 12 ] = v.x;\r\n\t\t\tte[ 13 ] = v.y;\r\n\t\t\tte[ 14 ] = v.z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetInverse: function ( m, throwOnDegenerate ) {\r\n\t\r\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\t\tvar te = this.elements,\r\n\t\t\t\tme = m.elements,\r\n\t\r\n\t\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\r\n\t\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\r\n\t\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\r\n\t\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\r\n\t\r\n\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\t\r\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\t\r\n\t\t\tif ( det === 0 ) {\r\n\t\r\n\t\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\r\n\t\r\n\t\t\t\tif ( throwOnDegenerate || false ) {\r\n\t\r\n\t\t\t\t\tthrow new Error( msg );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tconsole.warn( msg );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn this.identity();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tte[ 0 ] = t11;\r\n\t\t\tte[ 1 ] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;\r\n\t\t\tte[ 2 ] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;\r\n\t\t\tte[ 3 ] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;\r\n\t\r\n\t\t\tte[ 4 ] = t12;\r\n\t\t\tte[ 5 ] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;\r\n\t\t\tte[ 6 ] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;\r\n\t\t\tte[ 7 ] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;\r\n\t\r\n\t\t\tte[ 8 ] = t13;\r\n\t\t\tte[ 9 ] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;\r\n\t\t\tte[ 10 ] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;\r\n\t\t\tte[ 11 ] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;\r\n\t\r\n\t\t\tte[ 12 ] = t14;\r\n\t\t\tte[ 13 ] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;\r\n\t\t\tte[ 14 ] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;\r\n\t\t\tte[ 15 ] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;\r\n\t\r\n\t\t\treturn this.multiplyScalar( 1 / det );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tscale: function ( v ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar x = v.x, y = v.y, z = v.z;\r\n\t\r\n\t\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetMaxScaleOnAxis: function () {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\t\r\n\t\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeTranslation: function ( x, y, z ) {\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\t1, 0, 0, x,\r\n\t\t\t\t0, 1, 0, y,\r\n\t\t\t\t0, 0, 1, z,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeRotationX: function ( theta ) {\r\n\t\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\t1, 0,  0, 0,\r\n\t\t\t\t0, c, - s, 0,\r\n\t\t\t\t0, s,  c, 0,\r\n\t\t\t\t0, 0,  0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeRotationY: function ( theta ) {\r\n\t\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\t c, 0, s, 0,\r\n\t\t\t\t 0, 1, 0, 0,\r\n\t\t\t\t- s, 0, c, 0,\r\n\t\t\t\t 0, 0, 0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeRotationZ: function ( theta ) {\r\n\t\r\n\t\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\tc, - s, 0, 0,\r\n\t\t\t\ts,  c, 0, 0,\r\n\t\t\t\t0,  0, 1, 0,\r\n\t\t\t\t0,  0, 0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeRotationAxis: function ( axis, angle ) {\r\n\t\r\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\t\r\n\t\t\tvar c = Math.cos( angle );\r\n\t\t\tvar s = Math.sin( angle );\r\n\t\t\tvar t = 1 - c;\r\n\t\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\t\tvar tx = t * x, ty = t * y;\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\t return this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeScale: function ( x, y, z ) {\r\n\t\r\n\t\t\tthis.set(\r\n\t\r\n\t\t\t\tx, 0, 0, 0,\r\n\t\t\t\t0, y, 0, 0,\r\n\t\t\t\t0, 0, z, 0,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\r\n\t\t\t);\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcompose: function ( position, quaternion, scale ) {\r\n\t\r\n\t\t\tthis.makeRotationFromQuaternion( quaternion );\r\n\t\t\tthis.scale( scale );\r\n\t\t\tthis.setPosition( position );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdecompose: function () {\r\n\t\r\n\t\t\tvar vector, matrix;\r\n\t\r\n\t\t\treturn function ( position, quaternion, scale ) {\r\n\t\r\n\t\t\t\tif ( vector === undefined ) vector = new THREE.Vector3();\r\n\t\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\t\r\n\t\t\t\t// if determine is negative, we need to invert one scale\r\n\t\t\t\tvar det = this.determinant();\r\n\t\t\t\tif ( det < 0 ) {\r\n\t\r\n\t\t\t\t\tsx = - sx;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tposition.x = te[ 12 ];\r\n\t\t\t\tposition.y = te[ 13 ];\r\n\t\t\t\tposition.z = te[ 14 ];\r\n\t\r\n\t\t\t\t// scale the rotation part\r\n\t\r\n\t\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\r\n\t\r\n\t\t\t\tvar invSX = 1 / sx;\r\n\t\t\t\tvar invSY = 1 / sy;\r\n\t\t\t\tvar invSZ = 1 / sz;\r\n\t\r\n\t\t\t\tmatrix.elements[ 0 ] *= invSX;\r\n\t\t\t\tmatrix.elements[ 1 ] *= invSX;\r\n\t\t\t\tmatrix.elements[ 2 ] *= invSX;\r\n\t\r\n\t\t\t\tmatrix.elements[ 4 ] *= invSY;\r\n\t\t\t\tmatrix.elements[ 5 ] *= invSY;\r\n\t\t\t\tmatrix.elements[ 6 ] *= invSY;\r\n\t\r\n\t\t\t\tmatrix.elements[ 8 ] *= invSZ;\r\n\t\t\t\tmatrix.elements[ 9 ] *= invSZ;\r\n\t\t\t\tmatrix.elements[ 10 ] *= invSZ;\r\n\t\r\n\t\t\t\tquaternion.setFromRotationMatrix( matrix );\r\n\t\r\n\t\t\t\tscale.x = sx;\r\n\t\t\t\tscale.y = sy;\r\n\t\t\t\tscale.z = sz;\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar x = 2 * near / ( right - left );\r\n\t\t\tvar y = 2 * near / ( top - bottom );\r\n\t\r\n\t\t\tvar a = ( right + left ) / ( right - left );\r\n\t\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\t\tvar d = - 2 * far * near / ( far - near );\r\n\t\r\n\t\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\r\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\r\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\r\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakePerspective: function ( fov, aspect, near, far ) {\r\n\t\r\n\t\t\tvar ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );\r\n\t\t\tvar ymin = - ymax;\r\n\t\t\tvar xmin = ymin * aspect;\r\n\t\t\tvar xmax = ymax * aspect;\r\n\t\r\n\t\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar w = 1.0 / ( right - left );\r\n\t\t\tvar h = 1.0 / ( top - bottom );\r\n\t\t\tvar p = 1.0 / ( far - near );\r\n\t\r\n\t\t\tvar x = ( right + left ) * w;\r\n\t\t\tvar y = ( top + bottom ) * h;\r\n\t\t\tvar z = ( far + near ) * p;\r\n\t\r\n\t\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\r\n\t\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\r\n\t\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\r\n\t\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( matrix ) {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = matrix.elements;\r\n\t\r\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\t\r\n\t\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromArray: function ( array ) {\r\n\t\r\n\t\t\tthis.elements.set( array );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoArray: function () {\r\n\t\r\n\t\t\tvar te = this.elements;\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\tte[ 0 ], te[ 1 ], te[ 2 ], te[ 3 ],\r\n\t\t\t\tte[ 4 ], te[ 5 ], te[ 6 ], te[ 7 ],\r\n\t\t\t\tte[ 8 ], te[ 9 ], te[ 10 ], te[ 11 ],\r\n\t\t\t\tte[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]\r\n\t\t\t];\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Ray.js\r\n\t\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Ray = function ( origin, direction ) {\r\n\t\r\n\t\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\r\n\t\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Ray.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Ray,\r\n\t\r\n\t\tset: function ( origin, direction ) {\r\n\t\r\n\t\t\tthis.origin.copy( origin );\r\n\t\t\tthis.direction.copy( direction );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( ray ) {\r\n\t\r\n\t\t\tthis.origin.copy( ray.origin );\r\n\t\t\tthis.direction.copy( ray.direction );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tat: function ( t, optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlookAt: function ( v ) {\r\n\t\r\n\t\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\r\n\t\r\n\t\t},\r\n\t\r\n\t\trecast: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( t ) {\r\n\t\r\n\t\t\t\tthis.origin.copy( this.at( t, v1 ) );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclosestPointToPoint: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\tresult.subVectors( point, this.origin );\r\n\t\t\tvar directionDistance = result.dot( this.direction );\r\n\t\r\n\t\t\tif ( directionDistance < 0 ) {\r\n\t\r\n\t\t\t\treturn result.copy( this.origin );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToPoint: function ( point ) {\r\n\t\r\n\t\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceSqToPoint: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( point ) {\r\n\t\r\n\t\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\r\n\t\r\n\t\t\t\t// point behind the ray\r\n\t\r\n\t\t\t\tif ( directionDistance < 0 ) {\r\n\t\r\n\t\t\t\t\treturn this.origin.distanceToSquared( point );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\t\r\n\t\t\t\treturn v1.distanceToSquared( point );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tdistanceSqToSegment: function () {\r\n\t\r\n\t\t\tvar segCenter = new THREE.Vector3();\r\n\t\t\tvar segDir = new THREE.Vector3();\r\n\t\t\tvar diff = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\r\n\t\r\n\t\t\t\t// from http://www.geometrictools.com/LibMathematics/Distance/Wm5DistRay3Segment3.cpp\r\n\t\t\t\t// It returns the min distance between the ray and the segment\r\n\t\t\t\t// defined by v0 and v1\r\n\t\t\t\t// It can also set two optional targets :\r\n\t\t\t\t// - The closest point on the ray\r\n\t\t\t\t// - The closest point on the segment\r\n\t\r\n\t\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\r\n\t\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\r\n\t\t\t\tdiff.copy( this.origin ).sub( segCenter );\r\n\t\r\n\t\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\r\n\t\t\t\tvar a01 = - this.direction.dot( segDir );\r\n\t\t\t\tvar b0 = diff.dot( this.direction );\r\n\t\t\t\tvar b1 = - diff.dot( segDir );\r\n\t\t\t\tvar c = diff.lengthSq();\r\n\t\t\t\tvar det = Math.abs( 1 - a01 * a01 );\r\n\t\t\t\tvar s0, s1, sqrDist, extDet;\r\n\t\r\n\t\t\t\tif ( det > 0 ) {\r\n\t\r\n\t\t\t\t\t// The ray and segment are not parallel.\r\n\t\r\n\t\t\t\t\ts0 = a01 * b1 - b0;\r\n\t\t\t\t\ts1 = a01 * b0 - b1;\r\n\t\t\t\t\textDet = segExtent * det;\r\n\t\r\n\t\t\t\t\tif ( s0 >= 0 ) {\r\n\t\r\n\t\t\t\t\t\tif ( s1 >= - extDet ) {\r\n\t\r\n\t\t\t\t\t\t\tif ( s1 <= extDet ) {\r\n\t\r\n\t\t\t\t\t\t\t\t// region 0\r\n\t\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\r\n\t\r\n\t\t\t\t\t\t\t\tvar invDet = 1 / det;\r\n\t\t\t\t\t\t\t\ts0 *= invDet;\r\n\t\t\t\t\t\t\t\ts1 *= invDet;\r\n\t\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\t// region 1\r\n\t\r\n\t\t\t\t\t\t\t\ts1 = segExtent;\r\n\t\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t// region 5\r\n\t\r\n\t\t\t\t\t\t\ts1 = - segExtent;\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tif ( s1 <= - extDet ) {\r\n\t\r\n\t\t\t\t\t\t\t// region 4\r\n\t\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\t\r\n\t\t\t\t\t\t} else if ( s1 <= extDet ) {\r\n\t\r\n\t\t\t\t\t\t\t// region 3\r\n\t\r\n\t\t\t\t\t\t\ts0 = 0;\r\n\t\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t// region 2\r\n\t\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// Ray and segment are parallel.\r\n\t\r\n\t\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\r\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( optionalPointOnRay ) {\r\n\t\r\n\t\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( optionalPointOnSegment ) {\r\n\t\r\n\t\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn sqrDist;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tintersectSphere: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( sphere, optionalTarget ) {\r\n\t\r\n\t\t\t\tv1.subVectors( sphere.center, this.origin );\r\n\t\t\t\tvar tca = v1.dot( this.direction );\r\n\t\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\r\n\t\t\t\tvar radius2 = sphere.radius * sphere.radius;\r\n\t\r\n\t\t\t\tif ( d2 > radius2 ) return null;\r\n\t\r\n\t\t\t\tvar thc = Math.sqrt( radius2 - d2 );\r\n\t\r\n\t\t\t\t// t0 = first intersect point - entrance on front of sphere\r\n\t\t\t\tvar t0 = tca - thc;\r\n\t\r\n\t\t\t\t// t1 = second intersect point - exit point on back of sphere\r\n\t\t\t\tvar t1 = tca + thc;\r\n\t\r\n\t\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\r\n\t\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\r\n\t\r\n\t\t\t\t// test to see if t0 is behind the ray:\r\n\t\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n\t\t\t\t// in order to always return an intersect point that is in front of the ray.\r\n\t\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\r\n\t\r\n\t\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\t\t\t\treturn this.at( t0, optionalTarget );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\t\r\n\t\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToPlane: function ( plane ) {\r\n\t\r\n\t\t\tvar denominator = plane.normal.dot( this.direction );\r\n\t\r\n\t\t\tif ( denominator === 0 ) {\r\n\t\r\n\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\r\n\t\r\n\t\t\t\t\treturn 0;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\r\n\t\r\n\t\t\t\treturn null;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\t\r\n\t\t\t// Return if the ray never intersects the plane\r\n\t\r\n\t\t\treturn t >= 0 ? t :  null;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectPlane: function ( plane, optionalTarget ) {\r\n\t\r\n\t\t\tvar t = this.distanceToPlane( plane );\r\n\t\r\n\t\t\tif ( t === null ) {\r\n\t\r\n\t\t\t\treturn null;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this.at( t, optionalTarget );\r\n\t\r\n\t\t},\r\n\t\r\n\t\r\n\t\r\n\t\tintersectsPlane: function ( plane ) {\r\n\t\r\n\t\t\t// check if the ray lies on the plane first\r\n\t\r\n\t\t\tvar distToPoint = plane.distanceToPoint( this.origin );\r\n\t\r\n\t\t\tif ( distToPoint === 0 ) {\r\n\t\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar denominator = plane.normal.dot( this.direction );\r\n\t\r\n\t\t\tif ( denominator * distToPoint < 0 ) {\r\n\t\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// ray origin is behind the plane (and is pointing behind it)\r\n\t\r\n\t\t\treturn false;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectBox: function ( box, optionalTarget ) {\r\n\t\r\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n\t\r\n\t\t\tvar invdirx = 1 / this.direction.x,\r\n\t\t\t\tinvdiry = 1 / this.direction.y,\r\n\t\t\t\tinvdirz = 1 / this.direction.z;\r\n\t\r\n\t\t\tvar origin = this.origin;\r\n\t\r\n\t\t\tif ( invdirx >= 0 ) {\r\n\t\r\n\t\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\r\n\t\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\r\n\t\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( invdiry >= 0 ) {\r\n\t\r\n\t\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\r\n\t\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\r\n\t\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\r\n\t\r\n\t\t\t// These lines also handle the case where tmin or tmax is NaN\r\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\r\n\t\r\n\t\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\r\n\t\r\n\t\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\r\n\t\r\n\t\t\tif ( invdirz >= 0 ) {\r\n\t\r\n\t\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\r\n\t\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\r\n\t\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\r\n\t\r\n\t\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\r\n\t\r\n\t\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\r\n\t\r\n\t\t\t//return point closest to the ray (positive side)\r\n\t\r\n\t\t\tif ( tmax < 0 ) return null;\r\n\t\r\n\t\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectsBox: ( function () {\r\n\t\r\n\t\t\tvar v = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( box ) {\r\n\t\r\n\t\t\t\treturn this.intersectBox( box, v ) !== null;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t} )(),\r\n\t\r\n\t\tintersectTriangle: function () {\r\n\t\r\n\t\t\t// Compute the offset origin, edges, and normal.\r\n\t\t\tvar diff = new THREE.Vector3();\r\n\t\t\tvar edge1 = new THREE.Vector3();\r\n\t\t\tvar edge2 = new THREE.Vector3();\r\n\t\t\tvar normal = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( a, b, c, backfaceCulling, optionalTarget ) {\r\n\t\r\n\t\t\t\t// from http://www.geometrictools.com/LibMathematics/Intersection/Wm5IntrRay3Triangle3.cpp\r\n\t\r\n\t\t\t\tedge1.subVectors( b, a );\r\n\t\t\t\tedge2.subVectors( c, a );\r\n\t\t\t\tnormal.crossVectors( edge1, edge2 );\r\n\t\r\n\t\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n\t\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n\t\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n\t\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n\t\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\t\t\t\tvar DdN = this.direction.dot( normal );\r\n\t\t\t\tvar sign;\r\n\t\r\n\t\t\t\tif ( DdN > 0 ) {\r\n\t\r\n\t\t\t\t\tif ( backfaceCulling ) return null;\r\n\t\t\t\t\tsign = 1;\r\n\t\r\n\t\t\t\t} else if ( DdN < 0 ) {\r\n\t\r\n\t\t\t\t\tsign = - 1;\r\n\t\t\t\t\tDdN = - DdN;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\treturn null;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tdiff.subVectors( this.origin, a );\r\n\t\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\r\n\t\r\n\t\t\t\t// b1 < 0, no intersection\r\n\t\t\t\tif ( DdQxE2 < 0 ) {\r\n\t\r\n\t\t\t\t\treturn null;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\r\n\t\r\n\t\t\t\t// b2 < 0, no intersection\r\n\t\t\t\tif ( DdE1xQ < 0 ) {\r\n\t\r\n\t\t\t\t\treturn null;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// b1+b2 > 1, no intersection\r\n\t\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\r\n\t\r\n\t\t\t\t\treturn null;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Line intersects triangle, check if ray does.\r\n\t\t\t\tvar QdN = - sign * diff.dot( normal );\r\n\t\r\n\t\t\t\t// t < 0, no intersection\r\n\t\t\t\tif ( QdN < 0 ) {\r\n\t\r\n\t\t\t\t\treturn null;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Ray intersects triangle.\r\n\t\t\t\treturn this.at( QdN / DdN, optionalTarget );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tapplyMatrix4: function ( matrix4 ) {\r\n\t\r\n\t\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\r\n\t\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\t\tthis.direction.sub( this.origin );\r\n\t\t\tthis.direction.normalize();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( ray ) {\r\n\t\r\n\t\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Sphere.js\r\n\t\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Sphere = function ( center, radius ) {\r\n\t\r\n\t\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\r\n\t\tthis.radius = ( radius !== undefined ) ? radius : 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Sphere.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Sphere,\r\n\t\r\n\t\tset: function ( center, radius ) {\r\n\t\r\n\t\t\tthis.center.copy( center );\r\n\t\t\tthis.radius = radius;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromPoints: function () {\r\n\t\r\n\t\t\tvar box = new THREE.Box3();\r\n\t\r\n\t\t\treturn function ( points, optionalCenter ) {\r\n\t\r\n\t\t\t\tvar center = this.center;\r\n\t\r\n\t\t\t\tif ( optionalCenter !== undefined ) {\r\n\t\r\n\t\t\t\t\tcenter.copy( optionalCenter );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tbox.setFromPoints( points ).center( center );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar maxRadiusSq = 0;\r\n\t\r\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( sphere ) {\r\n\t\r\n\t\t\tthis.center.copy( sphere.center );\r\n\t\t\tthis.radius = sphere.radius;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tempty: function () {\r\n\t\r\n\t\t\treturn ( this.radius <= 0 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcontainsPoint: function ( point ) {\r\n\t\r\n\t\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToPoint: function ( point ) {\r\n\t\r\n\t\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\t\r\n\t\t\tvar radiusSum = this.radius + sphere.radius;\r\n\t\r\n\t\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectsBox: function ( box ) {\r\n\t\r\n\t\t\treturn box.intersectsSphere( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectsPlane: function ( plane ) {\r\n\t\r\n\t\t\t// We use the following equation to compute the signed distance from\r\n\t\t\t// the center of the sphere to the plane.\r\n\t\t\t//\r\n\t\t\t// distance = q * n - d\r\n\t\t\t//\r\n\t\t\t// If this distance is greater than the radius of the sphere,\r\n\t\t\t// then there is no intersection.\r\n\t\r\n\t\t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclampPoint: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\tresult.copy( point );\r\n\t\r\n\t\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\t\r\n\t\t\t\tresult.sub( this.center ).normalize();\r\n\t\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn result;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetBoundingBox: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar box = optionalTarget || new THREE.Box3();\r\n\t\r\n\t\t\tbox.set( this.center, this.center );\r\n\t\t\tbox.expandByScalar( this.radius );\r\n\t\r\n\t\t\treturn box;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyMatrix4: function ( matrix ) {\r\n\t\r\n\t\t\tthis.center.applyMatrix4( matrix );\r\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttranslate: function ( offset ) {\r\n\t\r\n\t\t\tthis.center.add( offset );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( sphere ) {\r\n\t\r\n\t\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Frustum.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\r\n\t\r\n\t\tthis.planes = [\r\n\t\r\n\t\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\r\n\t\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\r\n\t\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\r\n\t\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\r\n\t\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\r\n\t\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\r\n\t\r\n\t\t];\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Frustum.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Frustum,\r\n\t\r\n\t\tset: function ( p0, p1, p2, p3, p4, p5 ) {\r\n\t\r\n\t\t\tvar planes = this.planes;\r\n\t\r\n\t\t\tplanes[ 0 ].copy( p0 );\r\n\t\t\tplanes[ 1 ].copy( p1 );\r\n\t\t\tplanes[ 2 ].copy( p2 );\r\n\t\t\tplanes[ 3 ].copy( p3 );\r\n\t\t\tplanes[ 4 ].copy( p4 );\r\n\t\t\tplanes[ 5 ].copy( p5 );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( frustum ) {\r\n\t\r\n\t\t\tvar planes = this.planes;\r\n\t\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromMatrix: function ( m ) {\r\n\t\r\n\t\t\tvar planes = this.planes;\r\n\t\t\tvar me = m.elements;\r\n\t\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\r\n\t\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\r\n\t\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\r\n\t\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\r\n\t\r\n\t\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectsObject: function () {\r\n\t\r\n\t\t\tvar sphere = new THREE.Sphere();\r\n\t\r\n\t\t\treturn function ( object ) {\r\n\t\r\n\t\t\t\tvar geometry = object.geometry;\r\n\t\r\n\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\t\r\n\t\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\t\tsphere.applyMatrix4( object.matrixWorld );\r\n\t\r\n\t\t\t\treturn this.intersectsSphere( sphere );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\t\r\n\t\t\tvar planes = this.planes;\r\n\t\t\tvar center = sphere.center;\r\n\t\t\tvar negRadius = - sphere.radius;\r\n\t\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\t\r\n\t\t\t\tif ( distance < negRadius ) {\r\n\t\r\n\t\t\t\t\treturn false;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectsBox: function () {\r\n\t\r\n\t\t\tvar p1 = new THREE.Vector3(),\r\n\t\t\t\tp2 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( box ) {\r\n\t\r\n\t\t\t\tvar planes = this.planes;\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar plane = planes[ i ];\r\n\t\r\n\t\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\r\n\t\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\r\n\t\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\r\n\t\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\r\n\t\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\r\n\t\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\r\n\t\r\n\t\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\r\n\t\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\r\n\t\r\n\t\t\t\t\t// if both outside plane, no intersection\r\n\t\r\n\t\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\r\n\t\r\n\t\t\t\t\t\treturn false;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\r\n\t\tcontainsPoint: function ( point ) {\r\n\t\r\n\t\t\tvar planes = this.planes;\r\n\t\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\t\r\n\t\t\t\t\treturn false;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn true;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Plane.js\r\n\t\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Plane = function ( normal, constant ) {\r\n\t\r\n\t\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\r\n\t\tthis.constant = ( constant !== undefined ) ? constant : 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Plane.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Plane,\r\n\t\r\n\t\tset: function ( normal, constant ) {\r\n\t\r\n\t\t\tthis.normal.copy( normal );\r\n\t\t\tthis.constant = constant;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetComponents: function ( x, y, z, w ) {\r\n\t\r\n\t\t\tthis.normal.set( x, y, z );\r\n\t\t\tthis.constant = w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\r\n\t\r\n\t\t\tthis.normal.copy( normal );\r\n\t\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromCoplanarPoints: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\t\tvar v2 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( a, b, c ) {\r\n\t\r\n\t\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\r\n\t\r\n\t\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\t\r\n\t\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( plane ) {\r\n\t\r\n\t\t\tthis.normal.copy( plane.normal );\r\n\t\t\tthis.constant = plane.constant;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalize: function () {\r\n\t\r\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\t\r\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\r\n\t\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\t\tthis.constant *= inverseNormalLength;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnegate: function () {\r\n\t\r\n\t\t\tthis.constant *= - 1;\r\n\t\t\tthis.normal.negate();\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToPoint: function ( point ) {\r\n\t\r\n\t\t\treturn this.normal.dot( point ) + this.constant;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdistanceToSphere: function ( sphere ) {\r\n\t\r\n\t\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tprojectPoint: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\r\n\t\r\n\t\t},\r\n\t\r\n\t\torthoPoint: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectLine: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( line, optionalTarget ) {\r\n\t\r\n\t\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\t\tvar direction = line.delta( v1 );\r\n\t\r\n\t\t\t\tvar denominator = this.normal.dot( direction );\r\n\t\r\n\t\t\t\tif ( denominator === 0 ) {\r\n\t\r\n\t\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\r\n\t\r\n\t\t\t\t\t\treturn result.copy( line.start );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\t\t\treturn undefined;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\r\n\t\r\n\t\t\t\tif ( t < 0 || t > 1 ) {\r\n\t\r\n\t\t\t\t\treturn undefined;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tintersectsLine: function ( line ) {\r\n\t\r\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\t\r\n\t\t\tvar startSign = this.distanceToPoint( line.start );\r\n\t\t\tvar endSign = this.distanceToPoint( line.end );\r\n\t\r\n\t\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectsBox: function ( box ) {\r\n\t\r\n\t\t\treturn box.intersectsPlane( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintersectsSphere: function ( sphere ) {\r\n\t\r\n\t\t\treturn sphere.intersectsPlane( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcoplanarPoint: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyMatrix4: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\t\tvar v2 = new THREE.Vector3();\r\n\t\t\tvar m1 = new THREE.Matrix3();\r\n\t\r\n\t\t\treturn function ( matrix, optionalNormalMatrix ) {\r\n\t\r\n\t\t\t\t// compute new normal based on theory here:\r\n\t\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\r\n\t\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\r\n\t\t\t\tvar newNormal = v1.copy( this.normal ).applyMatrix3( normalMatrix );\r\n\t\r\n\t\t\t\tvar newCoplanarPoint = this.coplanarPoint( v2 );\r\n\t\t\t\tnewCoplanarPoint.applyMatrix4( matrix );\r\n\t\r\n\t\t\t\tthis.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslate: function ( offset ) {\r\n\t\r\n\t\t\tthis.constant = this.constant - offset.dot( this.normal );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( plane ) {\r\n\t\r\n\t\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Spherical.js\r\n\t\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\r\n\t *\r\n\t * The poles (phi) are at the positive and negative y axis.\r\n\t * The equator starts at positive z.\r\n\t */\r\n\t\r\n\tTHREE.Spherical = function ( radius, phi, theta ) {\r\n\t\r\n\t\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\r\n\t\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\r\n\t\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Spherical.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Spherical,\r\n\t\r\n\t\tset: function ( radius, phi, theta ) {\r\n\t\r\n\t\t\tthis.radius = radius;\r\n\t\t\tthis.phi = phi;\r\n\t\t\tthis.theta = theta;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( other ) {\r\n\t\r\n\t\t\tthis.radius.copy( other.radius );\r\n\t\t\tthis.phi.copy( other.phi );\r\n\t\t\tthis.theta.copy( other.theta );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// restrict phi to be betwee EPS and PI-EPS\r\n\t\tmakeSafe: function() {\r\n\t\r\n\t\t\tvar EPS = 0.000001;\r\n\t\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromVector3: function( vec3 ) {\r\n\t\r\n\t\t\tthis.radius = vec3.length();\r\n\t\r\n\t\t\tif ( this.radius === 0 ) {\r\n\t\r\n\t\t\t\tthis.theta = 0;\r\n\t\t\t\tthis.phi = 0;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\r\n\t\t\t\tthis.phi = Math.acos( THREE.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Math.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Math = {\r\n\t\r\n\t\tgenerateUUID: function () {\r\n\t\r\n\t\t\t// http://www.broofa.com/Tools/Math.uuid.htm\r\n\t\r\n\t\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\r\n\t\t\tvar uuid = new Array( 36 );\r\n\t\t\tvar rnd = 0, r;\r\n\t\r\n\t\t\treturn function () {\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < 36; i ++ ) {\r\n\t\r\n\t\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\r\n\t\r\n\t\t\t\t\t\tuuid[ i ] = '-';\r\n\t\r\n\t\t\t\t\t} else if ( i === 14 ) {\r\n\t\r\n\t\t\t\t\t\tuuid[ i ] = '4';\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\r\n\t\t\t\t\t\tr = rnd & 0xf;\r\n\t\t\t\t\t\trnd = rnd >> 4;\r\n\t\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn uuid.join( '' );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tclamp: function ( value, min, max ) {\r\n\t\r\n\t\t\treturn Math.max( min, Math.min( max, value ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// compute euclidian modulo of m % n\r\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\r\n\t\r\n\t\teuclideanModulo: function ( n, m ) {\r\n\t\r\n\t\t\treturn ( ( n % m ) + m ) % m;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\t\r\n\t\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\t\r\n\t\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\r\n\t\r\n\t\tsmoothstep: function ( x, min, max ) {\r\n\t\r\n\t\t\tif ( x <= min ) return 0;\r\n\t\t\tif ( x >= max ) return 1;\r\n\t\r\n\t\t\tx = ( x - min ) / ( max - min );\r\n\t\r\n\t\t\treturn x * x * ( 3 - 2 * x );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsmootherstep: function ( x, min, max ) {\r\n\t\r\n\t\t\tif ( x <= min ) return 0;\r\n\t\t\tif ( x >= max ) return 1;\r\n\t\r\n\t\t\tx = ( x - min ) / ( max - min );\r\n\t\r\n\t\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\trandom16: function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\r\n\t\t\treturn Math.random();\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Random integer from <low, high> interval\r\n\t\r\n\t\trandInt: function ( low, high ) {\r\n\t\r\n\t\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Random float from <low, high> interval\r\n\t\r\n\t\trandFloat: function ( low, high ) {\r\n\t\r\n\t\t\treturn low + Math.random() * ( high - low );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Random float from <-range/2, range/2> interval\r\n\t\r\n\t\trandFloatSpread: function ( range ) {\r\n\t\r\n\t\t\treturn range * ( 0.5 - Math.random() );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdegToRad: function () {\r\n\t\r\n\t\t\tvar degreeToRadiansFactor = Math.PI / 180;\r\n\t\r\n\t\t\treturn function ( degrees ) {\r\n\t\r\n\t\t\t\treturn degrees * degreeToRadiansFactor;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tradToDeg: function () {\r\n\t\r\n\t\t\tvar radianToDegreesFactor = 180 / Math.PI;\r\n\t\r\n\t\t\treturn function ( radians ) {\r\n\t\r\n\t\t\t\treturn radians * radianToDegreesFactor;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tisPowerOfTwo: function ( value ) {\r\n\t\r\n\t\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnearestPowerOfTwo: function ( value ) {\r\n\t\r\n\t\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnextPowerOfTwo: function ( value ) {\r\n\t\r\n\t\t\tvalue --;\r\n\t\t\tvalue |= value >> 1;\r\n\t\t\tvalue |= value >> 2;\r\n\t\t\tvalue |= value >> 4;\r\n\t\t\tvalue |= value >> 8;\r\n\t\t\tvalue |= value >> 16;\r\n\t\t\tvalue ++;\r\n\t\r\n\t\t\treturn value;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Spline.js\r\n\t\r\n\t/**\r\n\t * Spline from Tween.js, slightly optimized (and trashed)\r\n\t * http://sole.github.com/tween.js/examples/05_spline.html\r\n\t *\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Spline = function ( points ) {\r\n\t\r\n\t\tthis.points = points;\r\n\t\r\n\t\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\r\n\t\tpoint, intPoint, weight, w2, w3,\r\n\t\tpa, pb, pc, pd;\r\n\t\r\n\t\tthis.initFromArray = function ( a ) {\r\n\t\r\n\t\t\tthis.points = [];\r\n\t\r\n\t\t\tfor ( var i = 0; i < a.length; i ++ ) {\r\n\t\r\n\t\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getPoint = function ( k ) {\r\n\t\r\n\t\t\tpoint = ( this.points.length - 1 ) * k;\r\n\t\t\tintPoint = Math.floor( point );\r\n\t\t\tweight = point - intPoint;\r\n\t\r\n\t\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\r\n\t\t\tc[ 1 ] = intPoint;\r\n\t\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\r\n\t\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\r\n\t\r\n\t\t\tpa = this.points[ c[ 0 ] ];\r\n\t\t\tpb = this.points[ c[ 1 ] ];\r\n\t\t\tpc = this.points[ c[ 2 ] ];\r\n\t\t\tpd = this.points[ c[ 3 ] ];\r\n\t\r\n\t\t\tw2 = weight * weight;\r\n\t\t\tw3 = weight * w2;\r\n\t\r\n\t\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\r\n\t\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\r\n\t\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\r\n\t\r\n\t\t\treturn v3;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getControlPointsArray = function () {\r\n\t\r\n\t\t\tvar i, p, l = this.points.length,\r\n\t\t\t\tcoords = [];\r\n\t\r\n\t\t\tfor ( i = 0; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tp = this.points[ i ];\r\n\t\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn coords;\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// approximate length by summing linear segments\r\n\t\r\n\t\tthis.getLength = function ( nSubDivisions ) {\r\n\t\r\n\t\t\tvar i, index, nSamples, position,\r\n\t\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\r\n\t\t\t\toldPosition = new THREE.Vector3(),\r\n\t\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\t\tchunkLengths = [],\r\n\t\t\t\ttotalLength = 0;\r\n\t\r\n\t\t\t// first point has 0 length\r\n\t\r\n\t\t\tchunkLengths[ 0 ] = 0;\r\n\t\r\n\t\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\r\n\t\r\n\t\t\tnSamples = this.points.length * nSubDivisions;\r\n\t\r\n\t\t\toldPosition.copy( this.points[ 0 ] );\r\n\t\r\n\t\t\tfor ( i = 1; i < nSamples; i ++ ) {\r\n\t\r\n\t\t\t\tindex = i / nSamples;\r\n\t\r\n\t\t\t\tposition = this.getPoint( index );\r\n\t\t\t\ttmpVec.copy( position );\r\n\t\r\n\t\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\r\n\t\r\n\t\t\t\toldPosition.copy( position );\r\n\t\r\n\t\t\t\tpoint = ( this.points.length - 1 ) * index;\r\n\t\t\t\tintPoint = Math.floor( point );\r\n\t\r\n\t\t\t\tif ( intPoint !== oldIntPoint ) {\r\n\t\r\n\t\t\t\t\tchunkLengths[ intPoint ] = totalLength;\r\n\t\t\t\t\toldIntPoint = intPoint;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// last point ends with total length\r\n\t\r\n\t\t\tchunkLengths[ chunkLengths.length ] = totalLength;\r\n\t\r\n\t\t\treturn { chunks: chunkLengths, total: totalLength };\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\r\n\t\r\n\t\t\tvar i, j,\r\n\t\t\t\tindex, indexCurrent, indexNext,\r\n\t\t\t\trealDistance,\r\n\t\t\t\tsampling, position,\r\n\t\t\t\tnewpoints = [],\r\n\t\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\t\tsl = this.getLength();\r\n\t\r\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\r\n\t\r\n\t\t\tfor ( i = 1; i < this.points.length; i ++ ) {\r\n\t\r\n\t\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\r\n\t\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\r\n\t\r\n\t\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\r\n\t\r\n\t\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\r\n\t\r\n\t\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\r\n\t\t\t\tindexNext = i / ( this.points.length - 1 );\r\n\t\r\n\t\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\r\n\t\r\n\t\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\r\n\t\r\n\t\t\t\t\tposition = this.getPoint( index );\r\n\t\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.points = newpoints;\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// Catmull-Rom\r\n\t\r\n\t\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\r\n\t\r\n\t\t\tvar v0 = ( p2 - p0 ) * 0.5,\r\n\t\t\t\tv1 = ( p3 - p1 ) * 0.5;\r\n\t\r\n\t\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Triangle.js\r\n\t\r\n\t/**\r\n\t * @author bhouston / http://clara.io\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Triangle = function ( a, b, c ) {\r\n\t\r\n\t\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\r\n\t\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\r\n\t\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Triangle.normal = function () {\r\n\t\r\n\t\tvar v0 = new THREE.Vector3();\r\n\t\r\n\t\treturn function ( a, b, c, optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\tresult.subVectors( c, b );\r\n\t\t\tv0.subVectors( a, b );\r\n\t\t\tresult.cross( v0 );\r\n\t\r\n\t\t\tvar resultLengthSq = result.lengthSq();\r\n\t\t\tif ( resultLengthSq > 0 ) {\r\n\t\r\n\t\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn result.set( 0, 0, 0 );\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\t// static/instance method to calculate barycentric coordinates\r\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\n\tTHREE.Triangle.barycoordFromPoint = function () {\r\n\t\r\n\t\tvar v0 = new THREE.Vector3();\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\t\r\n\t\treturn function ( point, a, b, c, optionalTarget ) {\r\n\t\r\n\t\t\tv0.subVectors( c, a );\r\n\t\t\tv1.subVectors( b, a );\r\n\t\t\tv2.subVectors( point, a );\r\n\t\r\n\t\t\tvar dot00 = v0.dot( v0 );\r\n\t\t\tvar dot01 = v0.dot( v1 );\r\n\t\t\tvar dot02 = v0.dot( v2 );\r\n\t\t\tvar dot11 = v1.dot( v1 );\r\n\t\t\tvar dot12 = v1.dot( v2 );\r\n\t\r\n\t\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\t// collinear or singular triangle\r\n\t\t\tif ( denom === 0 ) {\r\n\t\r\n\t\t\t\t// arbitrary location outside of triangle?\r\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\t\t\treturn result.set( - 2, - 1, - 1 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar invDenom = 1 / denom;\r\n\t\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\t\r\n\t\t\t// barycentric coordinates must always sum to 1\r\n\t\t\treturn result.set( 1 - u - v, v, u );\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\tTHREE.Triangle.containsPoint = function () {\r\n\t\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\treturn function ( point, a, b, c ) {\r\n\t\r\n\t\t\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );\r\n\t\r\n\t\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\tTHREE.Triangle.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Triangle,\r\n\t\r\n\t\tset: function ( a, b, c ) {\r\n\t\r\n\t\t\tthis.a.copy( a );\r\n\t\t\tthis.b.copy( b );\r\n\t\t\tthis.c.copy( c );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\r\n\t\r\n\t\t\tthis.a.copy( points[ i0 ] );\r\n\t\t\tthis.b.copy( points[ i1 ] );\r\n\t\t\tthis.c.copy( points[ i2 ] );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( triangle ) {\r\n\t\r\n\t\t\tthis.a.copy( triangle.a );\r\n\t\t\tthis.b.copy( triangle.b );\r\n\t\t\tthis.c.copy( triangle.c );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tarea: function () {\r\n\t\r\n\t\t\tvar v0 = new THREE.Vector3();\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function () {\r\n\t\r\n\t\t\t\tv0.subVectors( this.c, this.b );\r\n\t\t\t\tv1.subVectors( this.a, this.b );\r\n\t\r\n\t\t\t\treturn v0.cross( v1 ).length() * 0.5;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tmidpoint: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormal: function ( optionalTarget ) {\r\n\t\r\n\t\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tplane: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Plane();\r\n\t\r\n\t\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tbarycoordFromPoint: function ( point, optionalTarget ) {\r\n\t\r\n\t\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcontainsPoint: function ( point ) {\r\n\t\r\n\t\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tequals: function ( triangle ) {\r\n\t\r\n\t\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/math/Interpolant.js\r\n\t\r\n\t/**\r\n\t * Abstract base class of interpolants over parametric samples.\r\n\t *\r\n\t * The parameter domain is one dimensional, typically the time or a path\r\n\t * along a curve defined by the data.\r\n\t *\r\n\t * The sample values can have any dimensionality and derived classes may\r\n\t * apply special interpretations to the data.\r\n\t *\r\n\t * This class provides the interval seek in a Template Method, deferring\r\n\t * the actual interpolation to derived classes.\r\n\t *\r\n\t * Time complexity is O(1) for linear access crossing at most two points\r\n\t * and O(log N) for random access, where N is the number of positions.\r\n\t *\r\n\t * References:\r\n\t *\r\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.Interpolant = function(\r\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\t\r\n\t\tthis.parameterPositions = parameterPositions;\r\n\t\tthis._cachedIndex = 0;\r\n\t\r\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\r\n\t\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\r\n\t\tthis.sampleValues = sampleValues;\r\n\t\tthis.valueSize = sampleSize;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Interpolant.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Interpolant,\r\n\t\r\n\t\tevaluate: function( t ) {\r\n\t\r\n\t\t\tvar pp = this.parameterPositions,\r\n\t\t\t\ti1 = this._cachedIndex,\r\n\t\r\n\t\t\t\tt1 = pp[   i1   ],\r\n\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\t\r\n\t\t\tvalidate_interval: {\r\n\t\r\n\t\t\t\tseek: {\r\n\t\r\n\t\t\t\t\tvar right;\r\n\t\r\n\t\t\t\t\tlinear_scan: {\r\n\t//- See http://jsperf.com/comparison-to-undefined/3\r\n\t//- slower code:\r\n\t//-\r\n\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\r\n\t\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\r\n\t\r\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\r\n\t\r\n\t\t\t\t\t\t\t\tif ( t1 === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\r\n\t\r\n\t\t\t\t\t\t\t\t\t// after end\r\n\t\r\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\t\r\n\t\t\t\t\t\t\t\tt0 = t1;\r\n\t\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\r\n\t\r\n\t\t\t\t\t\t\t\tif ( t < t1 ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\t\tbreak seek;\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t// prepare binary search on the right side of the index\r\n\t\t\t\t\t\t\tright = pp.length;\r\n\t\t\t\t\t\t\tbreak linear_scan;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t//- slower code:\r\n\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\r\n\t\t\t\t\t\tif ( ! ( t >= t0 ) ) {\r\n\t\r\n\t\t\t\t\t\t\t// looping?\r\n\t\r\n\t\t\t\t\t\t\tvar t1global = pp[ 1 ];\r\n\t\r\n\t\t\t\t\t\t\tif ( t < t1global ) {\r\n\t\r\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\r\n\t\t\t\t\t\t\t\tt0 = t1global;\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t// linear reverse scan\r\n\t\r\n\t\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\r\n\t\r\n\t\t\t\t\t\t\t\tif ( t0 === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\t// before start\r\n\t\r\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\t\r\n\t\t\t\t\t\t\t\tt1 = t0;\r\n\t\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\r\n\t\r\n\t\t\t\t\t\t\t\tif ( t >= t0 ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\t\tbreak seek;\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t// prepare binary search on the left side of the index\r\n\t\t\t\t\t\t\tright = i1;\r\n\t\t\t\t\t\t\ti1 = 0;\r\n\t\t\t\t\t\t\tbreak linear_scan;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t// the interval is valid\r\n\t\r\n\t\t\t\t\t\tbreak validate_interval;\r\n\t\r\n\t\t\t\t\t} // linear scan\r\n\t\r\n\t\t\t\t\t// binary search\r\n\t\r\n\t\t\t\t\twhile ( i1 < right ) {\r\n\t\r\n\t\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\r\n\t\r\n\t\t\t\t\t\tif ( t < pp[ mid ] ) {\r\n\t\r\n\t\t\t\t\t\t\tright = mid;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\ti1 = mid + 1;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tt1 = pp[   i1   ];\r\n\t\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\t\r\n\t\t\t\t\t// check boundary cases, again\r\n\t\r\n\t\t\t\t\tif ( t0 === undefined ) {\r\n\t\r\n\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( t1 === undefined ) {\r\n\t\r\n\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} // seek\r\n\t\r\n\t\t\t\tthis._cachedIndex = i1;\r\n\t\r\n\t\t\t\tthis.intervalChanged_( i1, t0, t1 );\r\n\t\r\n\t\t\t} // validate_interval\r\n\t\r\n\t\t\treturn this.interpolate_( i1, t0, t, t1 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsettings: null, // optional, subclass-specific settings structure\r\n\t\t// Note: The indirection allows central control of many interpolants.\r\n\t\r\n\t\t// --- Protected interface\r\n\t\r\n\t\tDefaultSettings_: {},\r\n\t\r\n\t\tgetSettings_: function() {\r\n\t\r\n\t\t\treturn this.settings || this.DefaultSettings_;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopySampleValue_: function( index ) {\r\n\t\r\n\t\t\t// copies a sample value to the result buffer\r\n\t\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\t\t\t\toffset = index * stride;\r\n\t\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\t\r\n\t\t\t\tresult[ i ] = values[ offset + i ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn result;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Template methods for derived classes:\r\n\t\r\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\t\r\n\t\t\tthrow new Error( \"call to abstract method\" );\r\n\t\t\t// implementations shall return this.resultBuffer\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintervalChanged_: function( i1, t0, t1 ) {\r\n\t\r\n\t\t\t// empty\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tObject.assign( THREE.Interpolant.prototype, {\r\n\t\r\n\t\tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\r\n\t\t\tTHREE.Interpolant.prototype.copySampleValue_,\r\n\t\r\n\t\tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\r\n\t\t\tTHREE.Interpolant.prototype.copySampleValue_\r\n\t\r\n\t} );\r\n\t\r\n\t// File:src/math/interpolants/CubicInterpolant.js\r\n\t\r\n\t/**\r\n\t * Fast and simple cubic spline interpolant.\r\n\t *\r\n\t * It was derived from a Hermitian construction setting the first derivative\r\n\t * at each sample position to the linear slope between neighboring positions\r\n\t * over their parameter interval.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.CubicInterpolant = function(\r\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\t\r\n\t\tTHREE.Interpolant.call(\r\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\t\r\n\t\tthis._weightPrev = -0;\r\n\t\tthis._offsetPrev = -0;\r\n\t\tthis._weightNext = -0;\r\n\t\tthis._offsetNext = -0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CubicInterpolant.prototype =\r\n\t\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\t\r\n\t\tconstructor: THREE.CubicInterpolant,\r\n\t\r\n\t\tDefaultSettings_: {\r\n\t\r\n\t\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\r\n\t\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\r\n\t\r\n\t\t},\r\n\t\r\n\t\tintervalChanged_: function( i1, t0, t1 ) {\r\n\t\r\n\t\t\tvar pp = this.parameterPositions,\r\n\t\t\t\tiPrev = i1 - 2,\r\n\t\t\t\tiNext = i1 + 1,\r\n\t\r\n\t\t\t\ttPrev = pp[ iPrev ],\r\n\t\t\t\ttNext = pp[ iNext ];\r\n\t\r\n\t\t\tif ( tPrev === undefined ) {\r\n\t\r\n\t\t\t\tswitch ( this.getSettings_().endingStart ) {\r\n\t\r\n\t\t\t\t\tcase THREE.ZeroSlopeEnding:\r\n\t\r\n\t\t\t\t\t\t// f'(t0) = 0\r\n\t\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.WrapAroundEnding:\r\n\t\r\n\t\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\t\tiPrev = pp.length - 2;\r\n\t\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\t\r\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\r\n\t\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\t\ttPrev = t1;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( tNext === undefined ) {\r\n\t\r\n\t\t\t\tswitch ( this.getSettings_().endingEnd ) {\r\n\t\r\n\t\t\t\t\tcase THREE.ZeroSlopeEnding:\r\n\t\r\n\t\t\t\t\t\t// f'(tN) = 0\r\n\t\t\t\t\t\tiNext = i1;\r\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.WrapAroundEnding:\r\n\t\r\n\t\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\t\tiNext = 1;\r\n\t\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\t\r\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\r\n\t\t\t\t\t\tiNext = i1 - 1;\r\n\t\t\t\t\t\ttNext = t0;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar halfDt = ( t1 - t0 ) * 0.5,\r\n\t\t\t\tstride = this.valueSize;\r\n\t\r\n\t\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\r\n\t\t\tthis._weightNext = halfDt / ( tNext - t1 );\r\n\t\t\tthis._offsetPrev = iPrev * stride;\r\n\t\t\tthis._offsetNext = iNext * stride;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\t\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\t\r\n\t\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\r\n\t\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\r\n\t\t\t\twP = this._weightPrev,\twN = this._weightNext,\r\n\t\r\n\t\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\t\tpp = p * p,\r\n\t\t\t\tppp = pp * p;\r\n\t\r\n\t\t\t// evaluate polynomials\r\n\t\r\n\t\t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\r\n\t\t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\r\n\t\t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\r\n\t\t\tvar sN =       wN   * ppp   -           wN      * pp;\r\n\t\r\n\t\t\t// combine data linearly\r\n\t\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\t\r\n\t\t\t\tresult[ i ] =\r\n\t\t\t\t\t\tsP * values[ oP + i ] +\r\n\t\t\t\t\t\ts0 * values[ o0 + i ] +\r\n\t\t\t\t\t\ts1 * values[ o1 + i ] +\r\n\t\t\t\t\t\tsN * values[ oN + i ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn result;\r\n\t\r\n\t\t}\r\n\t\r\n\t} );\r\n\t\r\n\t// File:src/math/interpolants/DiscreteInterpolant.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * Interpolant that evaluates to the sample value at the position preceeding\r\n\t * the parameter.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.DiscreteInterpolant = function(\r\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\t\r\n\t\tTHREE.Interpolant.call(\r\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.DiscreteInterpolant.prototype =\r\n\t\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\t\r\n\t\tconstructor: THREE.DiscreteInterpolant,\r\n\t\r\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\t\r\n\t\t\treturn this.copySampleValue_( i1 - 1 );\r\n\t\r\n\t\t}\r\n\t\r\n\t} );\r\n\t\r\n\t// File:src/math/interpolants/LinearInterpolant.js\r\n\t\r\n\t/**\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.LinearInterpolant = function(\r\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\t\r\n\t\tTHREE.Interpolant.call(\r\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LinearInterpolant.prototype =\r\n\t\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\t\r\n\t\tconstructor: THREE.LinearInterpolant,\r\n\t\r\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\t\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\t\r\n\t\t\t\toffset1 = i1 * stride,\r\n\t\t\t\toffset0 = offset1 - stride,\r\n\t\r\n\t\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\t\tweight0 = 1 - weight1;\r\n\t\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\t\r\n\t\t\t\tresult[ i ] =\r\n\t\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\r\n\t\t\t\t\t\tvalues[ offset1 + i ] * weight1;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn result;\r\n\t\r\n\t\t}\r\n\t\r\n\t} );\r\n\t\r\n\t// File:src/math/interpolants/QuaternionLinearInterpolant.js\r\n\t\r\n\t/**\r\n\t * Spherical linear unit quaternion interpolant.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.QuaternionLinearInterpolant = function(\r\n\t\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\t\r\n\t\tTHREE.Interpolant.call(\r\n\t\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.QuaternionLinearInterpolant.prototype =\r\n\t\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\t\r\n\t\tconstructor: THREE.QuaternionLinearInterpolant,\r\n\t\r\n\t\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\t\r\n\t\t\tvar result = this.resultBuffer,\r\n\t\t\t\tvalues = this.sampleValues,\r\n\t\t\t\tstride = this.valueSize,\r\n\t\r\n\t\t\t\toffset = i1 * stride,\r\n\t\r\n\t\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\r\n\t\r\n\t\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\r\n\t\r\n\t\t\t\tTHREE.Quaternion.slerpFlat( result, 0,\r\n\t\t\t\t\t\tvalues, offset - stride, values, offset, alpha );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn result;\r\n\t\r\n\t\t}\r\n\t\r\n\t} );\r\n\t\r\n\t// File:src/core/Clock.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Clock = function ( autoStart ) {\r\n\t\r\n\t\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\r\n\t\r\n\t\tthis.startTime = 0;\r\n\t\tthis.oldTime = 0;\r\n\t\tthis.elapsedTime = 0;\r\n\t\r\n\t\tthis.running = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Clock.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Clock,\r\n\t\r\n\t\tstart: function () {\r\n\t\r\n\t\t\tthis.startTime = performance.now();\r\n\t\r\n\t\t\tthis.oldTime = this.startTime;\r\n\t\t\tthis.running = true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tstop: function () {\r\n\t\r\n\t\t\tthis.getElapsedTime();\r\n\t\t\tthis.running = false;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetElapsedTime: function () {\r\n\t\r\n\t\t\tthis.getDelta();\r\n\t\t\treturn this.elapsedTime;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetDelta: function () {\r\n\t\r\n\t\t\tvar diff = 0;\r\n\t\r\n\t\t\tif ( this.autoStart && ! this.running ) {\r\n\t\r\n\t\t\t\tthis.start();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.running ) {\r\n\t\r\n\t\t\t\tvar newTime = performance.now();\r\n\t\r\n\t\t\t\tdiff = 0.001 * ( newTime - this.oldTime );\r\n\t\t\t\tthis.oldTime = newTime;\r\n\t\r\n\t\t\t\tthis.elapsedTime += diff;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn diff;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/EventDispatcher.js\r\n\t\r\n\t/**\r\n\t * https://github.com/mrdoob/eventdispatcher.js/\r\n\t */\r\n\t\r\n\tTHREE.EventDispatcher = function () {};\r\n\t\r\n\tTHREE.EventDispatcher.prototype = {\r\n\t\r\n\t\tconstructor: THREE.EventDispatcher,\r\n\t\r\n\t\tapply: function ( object ) {\r\n\t\r\n\t\t\tobject.addEventListener = THREE.EventDispatcher.prototype.addEventListener;\r\n\t\t\tobject.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;\r\n\t\t\tobject.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;\r\n\t\t\tobject.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddEventListener: function ( type, listener ) {\r\n\t\r\n\t\t\tif ( this._listeners === undefined ) this._listeners = {};\r\n\t\r\n\t\t\tvar listeners = this._listeners;\r\n\t\r\n\t\t\tif ( listeners[ type ] === undefined ) {\r\n\t\r\n\t\t\t\tlisteners[ type ] = [];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\t\r\n\t\t\t\tlisteners[ type ].push( listener );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\thasEventListener: function ( type, listener ) {\r\n\t\r\n\t\t\tif ( this._listeners === undefined ) return false;\r\n\t\r\n\t\t\tvar listeners = this._listeners;\r\n\t\r\n\t\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\r\n\t\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn false;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tremoveEventListener: function ( type, listener ) {\r\n\t\r\n\t\t\tif ( this._listeners === undefined ) return;\r\n\t\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tvar listenerArray = listeners[ type ];\r\n\t\r\n\t\t\tif ( listenerArray !== undefined ) {\r\n\t\r\n\t\t\t\tvar index = listenerArray.indexOf( listener );\r\n\t\r\n\t\t\t\tif ( index !== - 1 ) {\r\n\t\r\n\t\t\t\t\tlistenerArray.splice( index, 1 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdispatchEvent: function ( event ) {\r\n\t\r\n\t\t\tif ( this._listeners === undefined ) return;\r\n\t\r\n\t\t\tvar listeners = this._listeners;\r\n\t\t\tvar listenerArray = listeners[ event.type ];\r\n\t\r\n\t\t\tif ( listenerArray !== undefined ) {\r\n\t\r\n\t\t\t\tevent.target = this;\r\n\t\r\n\t\t\t\tvar array = [];\r\n\t\t\t\tvar length = listenerArray.length;\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\t\r\n\t\t\t\t\tarray[ i ] = listenerArray[ i ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\t\r\n\t\t\t\t\tarray[ i ].call( this, event );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/Layers.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Layers = function () {\r\n\t\r\n\t\tthis.mask = 1;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Layers.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Layers,\r\n\t\r\n\t\tset: function ( channel ) {\r\n\t\r\n\t\t\tthis.mask = 1 << channel;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tenable: function ( channel ) {\r\n\t\r\n\t\t\tthis.mask |= 1 << channel;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoggle: function ( channel ) {\r\n\t\r\n\t\t\tthis.mask ^= 1 << channel;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdisable: function ( channel ) {\r\n\t\r\n\t\t\tthis.mask &= ~ ( 1 << channel );\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttest: function ( layers ) {\r\n\t\r\n\t\t\treturn ( this.mask & layers.mask ) !== 0;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/Raycaster.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author bhouston / http://clara.io/\r\n\t * @author stephomi / http://stephaneginier.com/\r\n\t */\r\n\t\r\n\t( function ( THREE ) {\r\n\t\r\n\t\tTHREE.Raycaster = function ( origin, direction, near, far ) {\r\n\t\r\n\t\t\tthis.ray = new THREE.Ray( origin, direction );\r\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\t\r\n\t\t\tthis.near = near || 0;\r\n\t\t\tthis.far = far || Infinity;\r\n\t\r\n\t\t\tthis.params = {\r\n\t\t\t\tMesh: {},\r\n\t\t\t\tLine: {},\r\n\t\t\t\tLOD: {},\r\n\t\t\t\tPoints: { threshold: 1 },\r\n\t\t\t\tSprite: {}\r\n\t\t\t};\r\n\t\r\n\t\t\tObject.defineProperties( this.params, {\r\n\t\t\t\tPointCloud: {\r\n\t\t\t\t\tget: function () {\r\n\t\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\r\n\t\t\t\t\t\treturn this.Points;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction ascSort( a, b ) {\r\n\t\r\n\t\t\treturn a.distance - b.distance;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction intersectObject( object, raycaster, intersects, recursive ) {\r\n\t\r\n\t\t\tif ( object.visible === false ) return;\r\n\t\r\n\t\t\tobject.raycast( raycaster, intersects );\r\n\t\r\n\t\t\tif ( recursive === true ) {\r\n\t\r\n\t\t\t\tvar children = object.children;\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t//\r\n\t\r\n\t\tTHREE.Raycaster.prototype = {\r\n\t\r\n\t\t\tconstructor: THREE.Raycaster,\r\n\t\r\n\t\t\tlinePrecision: 1,\r\n\t\r\n\t\t\tset: function ( origin, direction ) {\r\n\t\r\n\t\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\t\r\n\t\t\t\tthis.ray.set( origin, direction );\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tsetFromCamera: function ( coords, camera ) {\r\n\t\r\n\t\t\t\tif ( camera instanceof THREE.PerspectiveCamera ) {\r\n\t\r\n\t\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\r\n\t\r\n\t\t\t\t} else if ( camera instanceof THREE.OrthographicCamera ) {\r\n\t\r\n\t\t\t\t\tthis.ray.origin.set( coords.x, coords.y, - 1 ).unproject( camera );\r\n\t\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tintersectObject: function ( object, recursive ) {\r\n\t\r\n\t\t\t\tvar intersects = [];\r\n\t\r\n\t\t\t\tintersectObject( object, this, intersects, recursive );\r\n\t\r\n\t\t\t\tintersects.sort( ascSort );\r\n\t\r\n\t\t\t\treturn intersects;\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tintersectObjects: function ( objects, recursive ) {\r\n\t\r\n\t\t\t\tvar intersects = [];\r\n\t\r\n\t\t\t\tif ( Array.isArray( objects ) === false ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\r\n\t\t\t\t\treturn intersects;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tintersects.sort( ascSort );\r\n\t\r\n\t\t\t\treturn intersects;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t}( THREE ) );\r\n\t\r\n\t// File:src/core/Object3D.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author elephantatwork / www.elephantatwork.ch\r\n\t */\r\n\t\r\n\tTHREE.Object3D = function () {\r\n\t\r\n\t\tObject.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Object3D';\r\n\t\r\n\t\tthis.parent = null;\r\n\t\tthis.children = [];\r\n\t\r\n\t\tthis.up = THREE.Object3D.DefaultUp.clone();\r\n\t\r\n\t\tvar position = new THREE.Vector3();\r\n\t\tvar rotation = new THREE.Euler();\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\t\tvar scale = new THREE.Vector3( 1, 1, 1 );\r\n\t\r\n\t\tfunction onRotationChange() {\r\n\t\r\n\t\t\tquaternion.setFromEuler( rotation, false );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction onQuaternionChange() {\r\n\t\r\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\r\n\t\r\n\t\t}\r\n\t\r\n\t\trotation.onChange( onRotationChange );\r\n\t\tquaternion.onChange( onQuaternionChange );\r\n\t\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tposition: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: position\r\n\t\t\t},\r\n\t\t\trotation: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: rotation\r\n\t\t\t},\r\n\t\t\tquaternion: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: quaternion\r\n\t\t\t},\r\n\t\t\tscale: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: scale\r\n\t\t\t},\r\n\t\t\tmodelViewMatrix: {\r\n\t\t\t\tvalue: new THREE.Matrix4()\r\n\t\t\t},\r\n\t\t\tnormalMatrix: {\r\n\t\t\t\tvalue: new THREE.Matrix3()\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t\tthis.rotationAutoUpdate = true;\r\n\t\r\n\t\tthis.matrix = new THREE.Matrix4();\r\n\t\tthis.matrixWorld = new THREE.Matrix4();\r\n\t\r\n\t\tthis.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\t\r\n\t\tthis.layers = new THREE.Layers();\r\n\t\tthis.visible = true;\r\n\t\r\n\t\tthis.castShadow = false;\r\n\t\tthis.receiveShadow = false;\r\n\t\r\n\t\tthis.frustumCulled = true;\r\n\t\tthis.renderOrder = 0;\r\n\t\r\n\t\tthis.userData = {};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );\r\n\tTHREE.Object3D.DefaultMatrixAutoUpdate = true;\r\n\t\r\n\tTHREE.Object3D.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Object3D,\r\n\t\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\t\r\n\t\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\r\n\t\r\n\t\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetRotationFromAxisAngle: function ( axis, angle ) {\r\n\t\r\n\t\t\t// assumes axis is normalized\r\n\t\r\n\t\t\tthis.quaternion.setFromAxisAngle( axis, angle );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetRotationFromEuler: function ( euler ) {\r\n\t\r\n\t\t\tthis.quaternion.setFromEuler( euler, true );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetRotationFromMatrix: function ( m ) {\r\n\t\r\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\t\r\n\t\t\tthis.quaternion.setFromRotationMatrix( m );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetRotationFromQuaternion: function ( q ) {\r\n\t\r\n\t\t\t// assumes q is normalized\r\n\t\r\n\t\t\tthis.quaternion.copy( q );\r\n\t\r\n\t\t},\r\n\t\r\n\t\trotateOnAxis: function () {\r\n\t\r\n\t\t\t// rotate object on axis in object space\r\n\t\t\t// axis is assumed to be normalized\r\n\t\r\n\t\t\tvar q1 = new THREE.Quaternion();\r\n\t\r\n\t\t\treturn function ( axis, angle ) {\r\n\t\r\n\t\t\t\tq1.setFromAxisAngle( axis, angle );\r\n\t\r\n\t\t\t\tthis.quaternion.multiply( q1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\trotateX: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\r\n\t\r\n\t\t\treturn function ( angle ) {\r\n\t\r\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\trotateY: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\r\n\t\r\n\t\t\treturn function ( angle ) {\r\n\t\r\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\trotateZ: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\r\n\t\r\n\t\t\treturn function ( angle ) {\r\n\t\r\n\t\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslateOnAxis: function () {\r\n\t\r\n\t\t\t// translate object by distance along axis in object space\r\n\t\t\t// axis is assumed to be normalized\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( axis, distance ) {\r\n\t\r\n\t\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\r\n\t\r\n\t\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslateX: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\r\n\t\r\n\t\t\treturn function ( distance ) {\r\n\t\r\n\t\t\t\treturn this.translateOnAxis( v1, distance );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslateY: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\r\n\t\r\n\t\t\treturn function ( distance ) {\r\n\t\r\n\t\t\t\treturn this.translateOnAxis( v1, distance );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslateZ: function () {\r\n\t\r\n\t\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\r\n\t\r\n\t\t\treturn function ( distance ) {\r\n\t\r\n\t\t\t\treturn this.translateOnAxis( v1, distance );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tlocalToWorld: function ( vector ) {\r\n\t\r\n\t\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tworldToLocal: function () {\r\n\t\r\n\t\t\tvar m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\treturn function ( vector ) {\r\n\t\r\n\t\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tlookAt: function () {\r\n\t\r\n\t\t\t// This routine does not support objects with rotated and/or translated parent(s)\r\n\t\r\n\t\t\tvar m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\treturn function ( vector ) {\r\n\t\r\n\t\t\t\tm1.lookAt( vector, this.position, this.up );\r\n\t\r\n\t\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tadd: function ( object ) {\r\n\t\r\n\t\t\tif ( arguments.length > 1 ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\t\r\n\t\t\t\t\tthis.add( arguments[ i ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( object === this ) {\r\n\t\r\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( object instanceof THREE.Object3D ) {\r\n\t\r\n\t\t\t\tif ( object.parent !== null ) {\r\n\t\r\n\t\t\t\t\tobject.parent.remove( object );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tobject.parent = this;\r\n\t\t\t\tobject.dispatchEvent( { type: 'added' } );\r\n\t\r\n\t\t\t\tthis.children.push( object );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tremove: function ( object ) {\r\n\t\r\n\t\t\tif ( arguments.length > 1 ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\t\r\n\t\t\t\t\tthis.remove( arguments[ i ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar index = this.children.indexOf( object );\r\n\t\r\n\t\t\tif ( index !== - 1 ) {\r\n\t\r\n\t\t\t\tobject.parent = null;\r\n\t\r\n\t\t\t\tobject.dispatchEvent( { type: 'removed' } );\r\n\t\r\n\t\t\t\tthis.children.splice( index, 1 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetObjectById: function ( id ) {\r\n\t\r\n\t\t\treturn this.getObjectByProperty( 'id', id );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetObjectByName: function ( name ) {\r\n\t\r\n\t\t\treturn this.getObjectByProperty( 'name', name );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetObjectByProperty: function ( name, value ) {\r\n\t\r\n\t\t\tif ( this[ name ] === value ) return this;\r\n\t\r\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar child = this.children[ i ];\r\n\t\t\t\tvar object = child.getObjectByProperty( name, value );\r\n\t\r\n\t\t\t\tif ( object !== undefined ) {\r\n\t\r\n\t\t\t\t\treturn object;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn undefined;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetWorldPosition: function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\t\r\n\t\t\treturn result.setFromMatrixPosition( this.matrixWorld );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetWorldQuaternion: function () {\r\n\t\r\n\t\t\tvar position = new THREE.Vector3();\r\n\t\t\tvar scale = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function ( optionalTarget ) {\r\n\t\r\n\t\t\t\tvar result = optionalTarget || new THREE.Quaternion();\r\n\t\r\n\t\t\t\tthis.updateMatrixWorld( true );\r\n\t\r\n\t\t\t\tthis.matrixWorld.decompose( position, result, scale );\r\n\t\r\n\t\t\t\treturn result;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tgetWorldRotation: function () {\r\n\t\r\n\t\t\tvar quaternion = new THREE.Quaternion();\r\n\t\r\n\t\t\treturn function ( optionalTarget ) {\r\n\t\r\n\t\t\t\tvar result = optionalTarget || new THREE.Euler();\r\n\t\r\n\t\t\t\tthis.getWorldQuaternion( quaternion );\r\n\t\r\n\t\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tgetWorldScale: function () {\r\n\t\r\n\t\t\tvar position = new THREE.Vector3();\r\n\t\t\tvar quaternion = new THREE.Quaternion();\r\n\t\r\n\t\t\treturn function ( optionalTarget ) {\r\n\t\r\n\t\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\t\tthis.updateMatrixWorld( true );\r\n\t\r\n\t\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\r\n\t\r\n\t\t\t\treturn result;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tgetWorldDirection: function () {\r\n\t\r\n\t\t\tvar quaternion = new THREE.Quaternion();\r\n\t\r\n\t\t\treturn function ( optionalTarget ) {\r\n\t\r\n\t\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\t\tthis.getWorldQuaternion( quaternion );\r\n\t\r\n\t\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\traycast: function () {},\r\n\t\r\n\t\ttraverse: function ( callback ) {\r\n\t\r\n\t\t\tcallback( this );\r\n\t\r\n\t\t\tvar children = this.children;\r\n\t\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tchildren[ i ].traverse( callback );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttraverseVisible: function ( callback ) {\r\n\t\r\n\t\t\tif ( this.visible === false ) return;\r\n\t\r\n\t\t\tcallback( this );\r\n\t\r\n\t\t\tvar children = this.children;\r\n\t\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tchildren[ i ].traverseVisible( callback );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttraverseAncestors: function ( callback ) {\r\n\t\r\n\t\t\tvar parent = this.parent;\r\n\t\r\n\t\t\tif ( parent !== null ) {\r\n\t\r\n\t\t\t\tcallback( parent );\r\n\t\r\n\t\t\t\tparent.traverseAncestors( callback );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tupdateMatrix: function () {\r\n\t\r\n\t\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\r\n\t\r\n\t\t\tthis.matrixWorldNeedsUpdate = true;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tupdateMatrixWorld: function ( force ) {\r\n\t\r\n\t\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\r\n\t\r\n\t\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\r\n\t\r\n\t\t\t\tif ( this.parent === null ) {\r\n\t\r\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\t\r\n\t\t\t\tforce = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// update children\r\n\t\r\n\t\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tthis.children[ i ].updateMatrixWorld( force );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoJSON: function ( meta ) {\r\n\t\r\n\t\t\tvar isRootObject = ( meta === undefined );\r\n\t\r\n\t\t\tvar output = {};\r\n\t\r\n\t\t\t// meta is a hash used to collect geometries, materials.\r\n\t\t\t// not providing it implies that this is the root object\r\n\t\t\t// being serialized.\r\n\t\t\tif ( isRootObject ) {\r\n\t\r\n\t\t\t\t// initialize meta obj\r\n\t\t\t\tmeta = {\r\n\t\t\t\t\tgeometries: {},\r\n\t\t\t\t\tmaterials: {},\r\n\t\t\t\t\ttextures: {},\r\n\t\t\t\t\timages: {}\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\toutput.metadata = {\r\n\t\t\t\t\tversion: 4.4,\r\n\t\t\t\t\ttype: 'Object',\r\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// standard Object3D serialization\r\n\t\r\n\t\t\tvar object = {};\r\n\t\r\n\t\t\tobject.uuid = this.uuid;\r\n\t\t\tobject.type = this.type;\r\n\t\r\n\t\t\tif ( this.name !== '' ) object.name = this.name;\r\n\t\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\r\n\t\t\tif ( this.castShadow === true ) object.castShadow = true;\r\n\t\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\r\n\t\t\tif ( this.visible === false ) object.visible = false;\r\n\t\r\n\t\t\tobject.matrix = this.matrix.toArray();\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tif ( this.geometry !== undefined ) {\r\n\t\r\n\t\t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\r\n\t\r\n\t\t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tobject.geometry = this.geometry.uuid;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.material !== undefined ) {\r\n\t\r\n\t\t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\r\n\t\r\n\t\t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tobject.material = this.material.uuid;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tif ( this.children.length > 0 ) {\r\n\t\r\n\t\t\t\tobject.children = [];\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\r\n\t\r\n\t\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( isRootObject ) {\r\n\t\r\n\t\t\t\tvar geometries = extractFromCache( meta.geometries );\r\n\t\t\t\tvar materials = extractFromCache( meta.materials );\r\n\t\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\t\tvar images = extractFromCache( meta.images );\r\n\t\r\n\t\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\r\n\t\t\t\tif ( materials.length > 0 ) output.materials = materials;\r\n\t\t\t\tif ( textures.length > 0 ) output.textures = textures;\r\n\t\t\t\tif ( images.length > 0 ) output.images = images;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\toutput.object = object;\r\n\t\r\n\t\t\treturn output;\r\n\t\r\n\t\t\t// extract data from the cache hash\r\n\t\t\t// remove metadata on each item\r\n\t\t\t// and return as array\r\n\t\t\tfunction extractFromCache ( cache ) {\r\n\t\r\n\t\t\t\tvar values = [];\r\n\t\t\t\tfor ( var key in cache ) {\r\n\t\r\n\t\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\t\tdelete data.metadata;\r\n\t\t\t\t\tvalues.push( data );\r\n\t\r\n\t\t\t\t}\r\n\t\t\t\treturn values;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function ( recursive ) {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this, recursive );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source, recursive ) {\r\n\t\r\n\t\t\tif ( recursive === undefined ) recursive = true;\r\n\t\r\n\t\t\tthis.name = source.name;\r\n\t\r\n\t\t\tthis.up.copy( source.up );\r\n\t\r\n\t\t\tthis.position.copy( source.position );\r\n\t\t\tthis.quaternion.copy( source.quaternion );\r\n\t\t\tthis.scale.copy( source.scale );\r\n\t\r\n\t\t\tthis.rotationAutoUpdate = source.rotationAutoUpdate;\r\n\t\r\n\t\t\tthis.matrix.copy( source.matrix );\r\n\t\t\tthis.matrixWorld.copy( source.matrixWorld );\r\n\t\r\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n\t\r\n\t\t\tthis.visible = source.visible;\r\n\t\r\n\t\t\tthis.castShadow = source.castShadow;\r\n\t\t\tthis.receiveShadow = source.receiveShadow;\r\n\t\r\n\t\t\tthis.frustumCulled = source.frustumCulled;\r\n\t\t\tthis.renderOrder = source.renderOrder;\r\n\t\r\n\t\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\t\r\n\t\t\tif ( recursive === true ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar child = source.children[ i ];\r\n\t\t\t\t\tthis.add( child.clone() );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.Object3D.prototype );\r\n\t\r\n\tTHREE.Object3DIdCount = 0;\r\n\t\r\n\t// File:src/core/Face3.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\r\n\t\r\n\t\tthis.a = a;\r\n\t\tthis.b = b;\r\n\t\tthis.c = c;\r\n\t\r\n\t\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\r\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\r\n\t\r\n\t\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\r\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\r\n\t\r\n\t\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Face3.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Face3,\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.a = source.a;\r\n\t\t\tthis.b = source.b;\r\n\t\t\tthis.c = source.c;\r\n\t\r\n\t\t\tthis.normal.copy( source.normal );\r\n\t\t\tthis.color.copy( source.color );\r\n\t\r\n\t\t\tthis.materialIndex = source.materialIndex;\r\n\t\r\n\t\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/BufferAttribute.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.BufferAttribute = function ( array, itemSize ) {\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.array = array;\r\n\t\tthis.itemSize = itemSize;\r\n\t\r\n\t\tthis.dynamic = false;\r\n\t\tthis.updateRange = { offset: 0, count: - 1 };\r\n\t\r\n\t\tthis.version = 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BufferAttribute.prototype = {\r\n\t\r\n\t\tconstructor: THREE.BufferAttribute,\r\n\t\r\n\t\tget count() {\r\n\t\r\n\t\t\treturn this.array.length / this.itemSize;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset needsUpdate( value ) {\r\n\t\r\n\t\t\tif ( value === true ) this.version ++;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetDynamic: function ( value ) {\r\n\t\r\n\t\t\tthis.dynamic = value;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.array = new source.array.constructor( source.array );\r\n\t\t\tthis.itemSize = source.itemSize;\r\n\t\r\n\t\t\tthis.dynamic = source.dynamic;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyAt: function ( index1, attribute, index2 ) {\r\n\t\r\n\t\t\tindex1 *= this.itemSize;\r\n\t\t\tindex2 *= attribute.itemSize;\r\n\t\r\n\t\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyArray: function ( array ) {\r\n\t\r\n\t\t\tthis.array.set( array );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyColorsArray: function ( colors ) {\r\n\t\r\n\t\t\tvar array = this.array, offset = 0;\r\n\t\r\n\t\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar color = colors[ i ];\r\n\t\r\n\t\t\t\tif ( color === undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\r\n\t\t\t\t\tcolor = new THREE.Color();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tarray[ offset ++ ] = color.r;\r\n\t\t\t\tarray[ offset ++ ] = color.g;\r\n\t\t\t\tarray[ offset ++ ] = color.b;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyIndicesArray: function ( indices ) {\r\n\t\r\n\t\t\tvar array = this.array, offset = 0;\r\n\t\r\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar index = indices[ i ];\r\n\t\r\n\t\t\t\tarray[ offset ++ ] = index.a;\r\n\t\t\t\tarray[ offset ++ ] = index.b;\r\n\t\t\t\tarray[ offset ++ ] = index.c;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyVector2sArray: function ( vectors ) {\r\n\t\r\n\t\t\tvar array = this.array, offset = 0;\r\n\t\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\t\r\n\t\t\t\tif ( vector === undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new THREE.Vector2();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyVector3sArray: function ( vectors ) {\r\n\t\r\n\t\t\tvar array = this.array, offset = 0;\r\n\t\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\t\r\n\t\t\t\tif ( vector === undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new THREE.Vector3();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\t\tarray[ offset ++ ] = vector.z;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyVector4sArray: function ( vectors ) {\r\n\t\r\n\t\t\tvar array = this.array, offset = 0;\r\n\t\r\n\t\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar vector = vectors[ i ];\r\n\t\r\n\t\t\t\tif ( vector === undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\r\n\t\t\t\t\tvector = new THREE.Vector4();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\t\tarray[ offset ++ ] = vector.z;\r\n\t\t\t\tarray[ offset ++ ] = vector.w;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset: function ( value, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tthis.array.set( value, offset );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetX: function ( index ) {\r\n\t\r\n\t\t\treturn this.array[ index * this.itemSize ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetX: function ( index, x ) {\r\n\t\r\n\t\t\tthis.array[ index * this.itemSize ] = x;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetY: function ( index ) {\r\n\t\r\n\t\t\treturn this.array[ index * this.itemSize + 1 ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetY: function ( index, y ) {\r\n\t\r\n\t\t\tthis.array[ index * this.itemSize + 1 ] = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetZ: function ( index ) {\r\n\t\r\n\t\t\treturn this.array[ index * this.itemSize + 2 ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetZ: function ( index, z ) {\r\n\t\r\n\t\t\tthis.array[ index * this.itemSize + 2 ] = z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetW: function ( index ) {\r\n\t\r\n\t\t\treturn this.array[ index * this.itemSize + 3 ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetW: function ( index, w ) {\r\n\t\r\n\t\t\tthis.array[ index * this.itemSize + 3 ] = w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetXY: function ( index, x, y ) {\r\n\t\r\n\t\t\tindex *= this.itemSize;\r\n\t\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetXYZ: function ( index, x, y, z ) {\r\n\t\r\n\t\t\tindex *= this.itemSize;\r\n\t\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\t\t\tthis.array[ index + 2 ] = z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetXYZW: function ( index, x, y, z, w ) {\r\n\t\r\n\t\t\tindex *= this.itemSize;\r\n\t\r\n\t\t\tthis.array[ index + 0 ] = x;\r\n\t\t\tthis.array[ index + 1 ] = y;\r\n\t\t\tthis.array[ index + 2 ] = z;\r\n\t\t\tthis.array[ index + 3 ] = w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t//\r\n\t\r\n\tTHREE.Int8Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Int8Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Uint8Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Uint8Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Uint8ClampedAttribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Int16Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Int16Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Uint16Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Uint16Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Int32Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Int32Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Uint32Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Uint32Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Float32Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Float32Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Float64Attribute = function ( array, itemSize ) {\r\n\t\r\n\t\treturn new THREE.BufferAttribute( new Float64Array( array ), itemSize );\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\t// Deprecated\r\n\t\r\n\tTHREE.DynamicBufferAttribute = function ( array, itemSize ) {\r\n\t\r\n\t\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\r\n\t\treturn new THREE.BufferAttribute( array, itemSize ).setDynamic( true );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/InstancedBufferAttribute.js\r\n\t\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\t\r\n\tTHREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {\r\n\t\r\n\t\tTHREE.BufferAttribute.call( this, array, itemSize );\r\n\t\r\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );\r\n\tTHREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;\r\n\t\r\n\tTHREE.InstancedBufferAttribute.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.BufferAttribute.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/InterleavedBuffer.js\r\n\t\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\t\r\n\tTHREE.InterleavedBuffer = function ( array, stride ) {\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.array = array;\r\n\t\tthis.stride = stride;\r\n\t\r\n\t\tthis.dynamic = false;\r\n\t\tthis.updateRange = { offset: 0, count: - 1 };\r\n\t\r\n\t\tthis.version = 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.InterleavedBuffer.prototype = {\r\n\t\r\n\t\tconstructor: THREE.InterleavedBuffer,\r\n\t\r\n\t\tget length () {\r\n\t\r\n\t\t\treturn this.array.length;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget count () {\r\n\t\r\n\t\t\treturn this.array.length / this.stride;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset needsUpdate( value ) {\r\n\t\r\n\t\t\tif ( value === true ) this.version ++;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetDynamic: function ( value ) {\r\n\t\r\n\t\t\tthis.dynamic = value;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.array = new source.array.constructor( source.array );\r\n\t\t\tthis.stride = source.stride;\r\n\t\t\tthis.dynamic = source.dynamic;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopyAt: function ( index1, attribute, index2 ) {\r\n\t\r\n\t\t\tindex1 *= this.stride;\r\n\t\t\tindex2 *= attribute.stride;\r\n\t\r\n\t\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset: function ( value, offset ) {\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tthis.array.set( value, offset );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/InstancedInterleavedBuffer.js\r\n\t\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\t\r\n\tTHREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {\r\n\t\r\n\t\tTHREE.InterleavedBuffer.call( this, array, stride );\r\n\t\r\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );\r\n\tTHREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;\r\n\t\r\n\tTHREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.InterleavedBuffer.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/InterleavedBufferAttribute.js\r\n\t\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\t\r\n\tTHREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset ) {\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.data = interleavedBuffer;\r\n\t\tthis.itemSize = itemSize;\r\n\t\tthis.offset = offset;\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.InterleavedBufferAttribute.prototype = {\r\n\t\r\n\t\tconstructor: THREE.InterleavedBufferAttribute,\r\n\t\r\n\t\tget length() {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\r\n\t\t\treturn this.array.length;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget count() {\r\n\t\r\n\t\t\treturn this.data.count;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetX: function ( index, x ) {\r\n\t\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetY: function ( index, y ) {\r\n\t\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetZ: function ( index, z ) {\r\n\t\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetW: function ( index, w ) {\r\n\t\r\n\t\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetX: function ( index ) {\r\n\t\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetY: function ( index ) {\r\n\t\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetZ: function ( index ) {\r\n\t\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetW: function ( index ) {\r\n\t\r\n\t\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetXY: function ( index, x, y ) {\r\n\t\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\t\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetXYZ: function ( index, x, y, z ) {\r\n\t\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\t\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\t\t\tthis.data.array[ index + 2 ] = z;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetXYZW: function ( index, x, y, z, w ) {\r\n\t\r\n\t\t\tindex = index * this.data.stride + this.offset;\r\n\t\r\n\t\t\tthis.data.array[ index + 0 ] = x;\r\n\t\t\tthis.data.array[ index + 1 ] = y;\r\n\t\t\tthis.data.array[ index + 2 ] = z;\r\n\t\t\tthis.data.array[ index + 3 ] = w;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/core/Geometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author kile / http://kile.stravaganza.org/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\tTHREE.Geometry = function () {\r\n\t\r\n\t\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Geometry';\r\n\t\r\n\t\tthis.vertices = [];\r\n\t\tthis.colors = [];\r\n\t\tthis.faces = [];\r\n\t\tthis.faceVertexUvs = [ [] ];\r\n\t\r\n\t\tthis.morphTargets = [];\r\n\t\tthis.morphNormals = [];\r\n\t\r\n\t\tthis.skinWeights = [];\r\n\t\tthis.skinIndices = [];\r\n\t\r\n\t\tthis.lineDistances = [];\r\n\t\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\t\r\n\t\t// update flags\r\n\t\r\n\t\tthis.verticesNeedUpdate = false;\r\n\t\tthis.elementsNeedUpdate = false;\r\n\t\tthis.uvsNeedUpdate = false;\r\n\t\tthis.normalsNeedUpdate = false;\r\n\t\tthis.colorsNeedUpdate = false;\r\n\t\tthis.lineDistancesNeedUpdate = false;\r\n\t\tthis.groupsNeedUpdate = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Geometry.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Geometry,\r\n\t\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\t\r\n\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\t\r\n\t\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\t\tvertex.applyMatrix4( matrix );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar face = this.faces[ i ];\r\n\t\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\r\n\t\r\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.boundingBox !== null ) {\r\n\t\r\n\t\t\t\tthis.computeBoundingBox();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.boundingSphere !== null ) {\r\n\t\r\n\t\t\t\tthis.computeBoundingSphere();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.verticesNeedUpdate = true;\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\trotateX: function () {\r\n\t\r\n\t\t\t// rotate geometry around world x-axis\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function rotateX( angle ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeRotationX( angle );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\trotateY: function () {\r\n\t\r\n\t\t\t// rotate geometry around world y-axis\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function rotateY( angle ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeRotationY( angle );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\trotateZ: function () {\r\n\t\r\n\t\t\t// rotate geometry around world z-axis\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function rotateZ( angle ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeRotationZ( angle );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslate: function () {\r\n\t\r\n\t\t\t// translate geometry\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function translate( x, y, z ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeTranslation( x, y, z );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tscale: function () {\r\n\t\r\n\t\t\t// scale geometry\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function scale( x, y, z ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeScale( x, y, z );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tlookAt: function () {\r\n\t\r\n\t\t\tvar obj;\r\n\t\r\n\t\t\treturn function lookAt( vector ) {\r\n\t\r\n\t\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\r\n\t\r\n\t\t\t\tobj.lookAt( vector );\r\n\t\r\n\t\t\t\tobj.updateMatrix();\r\n\t\r\n\t\t\t\tthis.applyMatrix( obj.matrix );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tfromBufferGeometry: function ( geometry ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\t\r\n\t\t\tvar positions = attributes.position.array;\r\n\t\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\r\n\t\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\r\n\t\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\r\n\t\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\r\n\t\r\n\t\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\r\n\t\r\n\t\t\tvar tempNormals = [];\r\n\t\t\tvar tempUVs = [];\r\n\t\t\tvar tempUVs2 = [];\r\n\t\r\n\t\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\r\n\t\r\n\t\t\t\tscope.vertices.push( new THREE.Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\r\n\t\r\n\t\t\t\tif ( normals !== undefined ) {\r\n\t\r\n\t\t\t\t\ttempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( colors !== undefined ) {\r\n\t\r\n\t\t\t\t\tscope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( uvs !== undefined ) {\r\n\t\r\n\t\t\t\t\ttempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( uvs2 !== undefined ) {\r\n\t\r\n\t\t\t\t\ttempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction addFace( a, b, c, materialIndex ) {\r\n\t\r\n\t\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\r\n\t\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\r\n\t\r\n\t\t\t\tvar face = new THREE.Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\r\n\t\r\n\t\t\t\tscope.faces.push( face );\r\n\t\r\n\t\t\t\tif ( uvs !== undefined ) {\r\n\t\r\n\t\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( uvs2 !== undefined ) {\r\n\t\r\n\t\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( indices !== undefined ) {\r\n\t\r\n\t\t\t\tvar groups = geometry.groups;\r\n\t\r\n\t\t\t\tif ( groups.length > 0 ) {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar group = groups[ i ];\r\n\t\r\n\t\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\t\tvar count = group.count;\r\n\t\r\n\t\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\r\n\t\r\n\t\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\r\n\t\r\n\t\t\t\t\taddFace( i, i + 1, i + 2 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.computeFaceNormals();\r\n\t\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\t\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\t\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcenter: function () {\r\n\t\r\n\t\t\tthis.computeBoundingBox();\r\n\t\r\n\t\t\tvar offset = this.boundingBox.center().negate();\r\n\t\r\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\t\r\n\t\t\treturn offset;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalize: function () {\r\n\t\r\n\t\t\tthis.computeBoundingSphere();\r\n\t\r\n\t\t\tvar center = this.boundingSphere.center;\r\n\t\t\tvar radius = this.boundingSphere.radius;\r\n\t\r\n\t\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\r\n\t\r\n\t\t\tvar matrix = new THREE.Matrix4();\r\n\t\t\tmatrix.set(\r\n\t\t\t\ts, 0, 0, - s * center.x,\r\n\t\t\t\t0, s, 0, - s * center.y,\r\n\t\t\t\t0, 0, s, - s * center.z,\r\n\t\t\t\t0, 0, 0, 1\r\n\t\t\t);\r\n\t\r\n\t\t\tthis.applyMatrix( matrix );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeFaceNormals: function () {\r\n\t\r\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\t\r\n\t\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\tvar face = this.faces[ f ];\r\n\t\r\n\t\t\t\tvar vA = this.vertices[ face.a ];\r\n\t\t\t\tvar vB = this.vertices[ face.b ];\r\n\t\t\t\tvar vC = this.vertices[ face.c ];\r\n\t\r\n\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\tcb.cross( ab );\r\n\t\r\n\t\t\t\tcb.normalize();\r\n\t\r\n\t\t\t\tface.normal.copy( cb );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeVertexNormals: function ( areaWeighted ) {\r\n\t\r\n\t\t\tif ( areaWeighted === undefined ) areaWeighted = true;\r\n\t\r\n\t\t\tvar v, vl, f, fl, face, vertices;\r\n\t\r\n\t\t\tvertices = new Array( this.vertices.length );\r\n\t\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\t\r\n\t\t\t\tvertices[ v ] = new THREE.Vector3();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( areaWeighted ) {\r\n\t\r\n\t\t\t\t// vertex normals weighted by triangle areas\r\n\t\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\r\n\t\r\n\t\t\t\tvar vA, vB, vC;\r\n\t\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\t\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\t\r\n\t\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\t\tvC = this.vertices[ face.c ];\r\n\t\r\n\t\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\t\r\n\t\t\t\t\tvertices[ face.a ].add( cb );\r\n\t\t\t\t\tvertices[ face.b ].add( cb );\r\n\t\t\t\t\tvertices[ face.c ].add( cb );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\t\r\n\t\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\t\r\n\t\t\t\tvertices[ v ].normalize();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\tface = this.faces[ f ];\r\n\t\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\t\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\t\r\n\t\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\r\n\t\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\r\n\t\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.faces.length > 0 ) {\r\n\t\r\n\t\t\t\tthis.normalsNeedUpdate = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeMorphNormals: function () {\r\n\t\r\n\t\t\tvar i, il, f, fl, face;\r\n\t\r\n\t\t\t// save original normals\r\n\t\t\t// - create temp variables on first access\r\n\t\t\t//   otherwise just copy (for faster repeated calls)\r\n\t\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\tface = this.faces[ f ];\r\n\t\r\n\t\t\t\tif ( ! face.__originalFaceNormal ) {\r\n\t\r\n\t\t\t\t\tface.__originalFaceNormal = face.normal.clone();\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tface.__originalFaceNormal.copy( face.normal );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\r\n\t\r\n\t\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\r\n\t\r\n\t\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// use temp geometry to compute face and vertex normals for each morph\r\n\t\r\n\t\t\tvar tmpGeo = new THREE.Geometry();\r\n\t\t\ttmpGeo.faces = this.faces;\r\n\t\r\n\t\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t// create on first access\r\n\t\r\n\t\t\t\tif ( ! this.morphNormals[ i ] ) {\r\n\t\r\n\t\t\t\t\tthis.morphNormals[ i ] = {};\r\n\t\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\r\n\t\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\r\n\t\r\n\t\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\r\n\t\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\r\n\t\r\n\t\t\t\t\tvar faceNormal, vertexNormals;\r\n\t\r\n\t\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\t\t\tfaceNormal = new THREE.Vector3();\r\n\t\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\r\n\t\r\n\t\t\t\t\t\tdstNormalsFace.push( faceNormal );\r\n\t\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar morphNormals = this.morphNormals[ i ];\r\n\t\r\n\t\t\t\t// set vertices to morph target\r\n\t\r\n\t\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\r\n\t\r\n\t\t\t\t// compute morph normals\r\n\t\r\n\t\t\t\ttmpGeo.computeFaceNormals();\r\n\t\t\t\ttmpGeo.computeVertexNormals();\r\n\t\r\n\t\t\t\t// store morph normals\r\n\t\r\n\t\t\t\tvar faceNormal, vertexNormals;\r\n\t\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\t\tface = this.faces[ f ];\r\n\t\r\n\t\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\r\n\t\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\r\n\t\r\n\t\t\t\t\tfaceNormal.copy( face.normal );\r\n\t\r\n\t\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// restore original normals\r\n\t\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\tface = this.faces[ f ];\r\n\t\r\n\t\t\t\tface.normal = face.__originalFaceNormal;\r\n\t\t\t\tface.vertexNormals = face.__originalVertexNormals;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeTangents: function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeLineDistances: function () {\r\n\t\r\n\t\t\tvar d = 0;\r\n\t\t\tvar vertices = this.vertices;\r\n\t\r\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tif ( i > 0 ) {\r\n\t\r\n\t\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.lineDistances[ i ] = d;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeBoundingBox: function () {\r\n\t\r\n\t\t\tif ( this.boundingBox === null ) {\r\n\t\r\n\t\t\t\tthis.boundingBox = new THREE.Box3();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.boundingBox.setFromPoints( this.vertices );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeBoundingSphere: function () {\r\n\t\r\n\t\t\tif ( this.boundingSphere === null ) {\r\n\t\r\n\t\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.boundingSphere.setFromPoints( this.vertices );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmerge: function ( geometry, matrix, materialIndexOffset ) {\r\n\t\r\n\t\t\tif ( geometry instanceof THREE.Geometry === false ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar normalMatrix,\r\n\t\t\tvertexOffset = this.vertices.length,\r\n\t\t\tvertices1 = this.vertices,\r\n\t\t\tvertices2 = geometry.vertices,\r\n\t\t\tfaces1 = this.faces,\r\n\t\t\tfaces2 = geometry.faces,\r\n\t\t\tuvs1 = this.faceVertexUvs[ 0 ],\r\n\t\t\tuvs2 = geometry.faceVertexUvs[ 0 ];\r\n\t\r\n\t\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\r\n\t\r\n\t\t\tif ( matrix !== undefined ) {\r\n\t\r\n\t\t\t\tnormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// vertices\r\n\t\r\n\t\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar vertex = vertices2[ i ];\r\n\t\r\n\t\t\t\tvar vertexCopy = vertex.clone();\r\n\t\r\n\t\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\r\n\t\r\n\t\t\t\tvertices1.push( vertexCopy );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// faces\r\n\t\r\n\t\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\r\n\t\t\t\tfaceVertexNormals = face.vertexNormals,\r\n\t\t\t\tfaceVertexColors = face.vertexColors;\r\n\t\r\n\t\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\r\n\t\t\t\tfaceCopy.normal.copy( face.normal );\r\n\t\r\n\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\t\r\n\t\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\tnormal = faceVertexNormals[ j ].clone();\r\n\t\r\n\t\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tfaceCopy.vertexNormals.push( normal );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfaceCopy.color.copy( face.color );\r\n\t\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\tcolor = faceVertexColors[ j ];\r\n\t\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\r\n\t\r\n\t\t\t\tfaces1.push( faceCopy );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// uvs\r\n\t\r\n\t\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar uv = uvs2[ i ], uvCopy = [];\r\n\t\r\n\t\t\t\tif ( uv === undefined ) {\r\n\t\r\n\t\t\t\t\tcontinue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\tuvCopy.push( uv[ j ].clone() );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tuvs1.push( uvCopy );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmergeMesh: function ( mesh ) {\r\n\t\r\n\t\t\tif ( mesh instanceof THREE.Mesh === false ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\r\n\t\r\n\t\t\tthis.merge( mesh.geometry, mesh.matrix );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t/*\r\n\t\t * Checks for duplicate vertices with hashmap.\r\n\t\t * Duplicated vertices are removed\r\n\t\t * and faces' vertices are updated.\r\n\t\t */\r\n\t\r\n\t\tmergeVertices: function () {\r\n\t\r\n\t\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\r\n\t\t\tvar unique = [], changes = [];\r\n\t\r\n\t\t\tvar v, key;\r\n\t\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\r\n\t\t\tvar precision = Math.pow( 10, precisionPoints );\r\n\t\t\tvar i, il, face;\r\n\t\t\tvar indices, j, jl;\r\n\t\r\n\t\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tv = this.vertices[ i ];\r\n\t\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\r\n\t\r\n\t\t\t\tif ( verticesMap[ key ] === undefined ) {\r\n\t\r\n\t\t\t\t\tverticesMap[ key ] = i;\r\n\t\t\t\t\tunique.push( this.vertices[ i ] );\r\n\t\t\t\t\tchanges[ i ] = unique.length - 1;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\r\n\t\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\r\n\t\t\t// if faces are completely degenerate after merging vertices, we\r\n\t\t\t// have to remove them from the geometry.\r\n\t\t\tvar faceIndicesToRemove = [];\r\n\t\r\n\t\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tface = this.faces[ i ];\r\n\t\r\n\t\t\t\tface.a = changes[ face.a ];\r\n\t\t\t\tface.b = changes[ face.b ];\r\n\t\t\t\tface.c = changes[ face.c ];\r\n\t\r\n\t\t\t\tindices = [ face.a, face.b, face.c ];\r\n\t\r\n\t\t\t\tvar dupIndex = - 1;\r\n\t\r\n\t\t\t\t// if any duplicate vertices are found in a Face3\r\n\t\t\t\t// we have to remove the face as nothing can be saved\r\n\t\t\t\tfor ( var n = 0; n < 3; n ++ ) {\r\n\t\r\n\t\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\r\n\t\r\n\t\t\t\t\t\tdupIndex = n;\r\n\t\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\r\n\t\r\n\t\t\t\tvar idx = faceIndicesToRemove[ i ];\r\n\t\r\n\t\t\t\tthis.faces.splice( idx, 1 );\r\n\t\r\n\t\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// Use unique set of vertices\r\n\t\r\n\t\t\tvar diff = this.vertices.length - unique.length;\r\n\t\t\tthis.vertices = unique;\r\n\t\t\treturn diff;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsortFacesByMaterialIndex: function () {\r\n\t\r\n\t\t\tvar faces = this.faces;\r\n\t\t\tvar length = faces.length;\r\n\t\r\n\t\t\t// tag faces\r\n\t\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\t\r\n\t\t\t\tfaces[ i ]._id = i;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// sort faces\r\n\t\r\n\t\t\tfunction materialIndexSort( a, b ) {\r\n\t\r\n\t\t\t\treturn a.materialIndex - b.materialIndex;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfaces.sort( materialIndexSort );\r\n\t\r\n\t\t\t// sort uvs\r\n\t\r\n\t\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\r\n\t\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\r\n\t\r\n\t\t\tvar newUvs1, newUvs2;\r\n\t\r\n\t\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\r\n\t\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\r\n\t\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\t\r\n\t\t\t\tvar id = faces[ i ]._id;\r\n\t\r\n\t\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\r\n\t\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\r\n\t\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoJSON: function () {\r\n\t\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.4,\r\n\t\t\t\t\ttype: 'Geometry',\r\n\t\t\t\t\tgenerator: 'Geometry.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\r\n\t\t\t// standard Geometry serialization\r\n\t\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\t\t\tif ( this.name !== '' ) data.name = this.name;\r\n\t\r\n\t\t\tif ( this.parameters !== undefined ) {\r\n\t\r\n\t\t\t\tvar parameters = this.parameters;\r\n\t\r\n\t\t\t\tfor ( var key in parameters ) {\r\n\t\r\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn data;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar vertices = [];\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar faces = [];\r\n\t\t\tvar normals = [];\r\n\t\t\tvar normalsHash = {};\r\n\t\t\tvar colors = [];\r\n\t\t\tvar colorsHash = {};\r\n\t\t\tvar uvs = [];\r\n\t\t\tvar uvsHash = {};\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar face = this.faces[ i ];\r\n\t\r\n\t\t\t\tvar hasMaterial = true;\r\n\t\t\t\tvar hasFaceUv = false; // deprecated\r\n\t\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\r\n\t\t\t\tvar hasFaceNormal = face.normal.length() > 0;\r\n\t\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\r\n\t\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\r\n\t\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\r\n\t\r\n\t\t\t\tvar faceType = 0;\r\n\t\r\n\t\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\r\n\t\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\r\n\t\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\r\n\t\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\r\n\t\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\r\n\t\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\r\n\t\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\r\n\t\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\r\n\t\r\n\t\t\t\tfaces.push( faceType );\r\n\t\t\t\tfaces.push( face.a, face.b, face.c );\r\n\t\t\t\tfaces.push( face.materialIndex );\r\n\t\r\n\t\t\t\tif ( hasFaceVertexUv ) {\r\n\t\r\n\t\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\r\n\t\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\r\n\t\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\r\n\t\t\t\t\t);\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( hasFaceNormal ) {\r\n\t\r\n\t\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\t\r\n\t\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\t\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\r\n\t\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\r\n\t\t\t\t\t);\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( hasFaceColor ) {\r\n\t\r\n\t\t\t\t\tfaces.push( getColorIndex( face.color ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( hasFaceVertexColor ) {\r\n\t\r\n\t\t\t\t\tvar vertexColors = face.vertexColors;\r\n\t\r\n\t\t\t\t\tfaces.push(\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\r\n\t\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\r\n\t\t\t\t\t);\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction setBit( value, position, enabled ) {\r\n\t\r\n\t\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction getNormalIndex( normal ) {\r\n\t\r\n\t\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\r\n\t\r\n\t\t\t\tif ( normalsHash[ hash ] !== undefined ) {\r\n\t\r\n\t\t\t\t\treturn normalsHash[ hash ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tnormalsHash[ hash ] = normals.length / 3;\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\t\r\n\t\t\t\treturn normalsHash[ hash ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction getColorIndex( color ) {\r\n\t\r\n\t\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\r\n\t\r\n\t\t\t\tif ( colorsHash[ hash ] !== undefined ) {\r\n\t\r\n\t\t\t\t\treturn colorsHash[ hash ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tcolorsHash[ hash ] = colors.length;\r\n\t\t\t\tcolors.push( color.getHex() );\r\n\t\r\n\t\t\t\treturn colorsHash[ hash ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction getUvIndex( uv ) {\r\n\t\r\n\t\t\t\tvar hash = uv.x.toString() + uv.y.toString();\r\n\t\r\n\t\t\t\tif ( uvsHash[ hash ] !== undefined ) {\r\n\t\r\n\t\t\t\t\treturn uvsHash[ hash ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tuvsHash[ hash ] = uvs.length / 2;\r\n\t\t\t\tuvs.push( uv.x, uv.y );\r\n\t\r\n\t\t\t\treturn uvsHash[ hash ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tdata.data = {};\r\n\t\r\n\t\t\tdata.data.vertices = vertices;\r\n\t\t\tdata.data.normals = normals;\r\n\t\t\tif ( colors.length > 0 ) data.data.colors = colors;\r\n\t\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\r\n\t\t\tdata.data.faces = faces;\r\n\t\r\n\t\t\treturn data;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\t/*\r\n\t\t\t// Handle primitives\r\n\t\r\n\t\t\tvar parameters = this.parameters;\r\n\t\r\n\t\t\tif ( parameters !== undefined ) {\r\n\t\r\n\t\t\t\tvar values = [];\r\n\t\r\n\t\t\t\tfor ( var key in parameters ) {\r\n\t\r\n\t\t\t\t\tvalues.push( parameters[ key ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar geometry = Object.create( this.constructor.prototype );\r\n\t\t\t\tthis.constructor.apply( geometry, values );\r\n\t\t\t\treturn geometry;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\t\t*/\r\n\t\r\n\t\t\treturn new THREE.Geometry().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.vertices = [];\r\n\t\t\tthis.faces = [];\r\n\t\t\tthis.faceVertexUvs = [ [] ];\r\n\t\r\n\t\t\tvar vertices = source.vertices;\r\n\t\r\n\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tthis.vertices.push( vertices[ i ].clone() );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar faces = source.faces;\r\n\t\r\n\t\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tthis.faces.push( faces[ i ].clone() );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\r\n\t\r\n\t\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\r\n\t\r\n\t\t\t\t\tthis.faceVertexUvs[ i ] = [];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\r\n\t\r\n\t\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar uv = uvs[ k ];\r\n\t\r\n\t\t\t\t\t\tuvsCopy.push( uv.clone() );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdispose: function () {\r\n\t\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.Geometry.prototype );\r\n\t\r\n\tTHREE.GeometryIdCount = 0;\r\n\t\r\n\t// File:src/core/DirectGeometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.DirectGeometry = function () {\r\n\t\r\n\t\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'DirectGeometry';\r\n\t\r\n\t\tthis.indices = [];\r\n\t\tthis.vertices = [];\r\n\t\tthis.normals = [];\r\n\t\tthis.colors = [];\r\n\t\tthis.uvs = [];\r\n\t\tthis.uvs2 = [];\r\n\t\r\n\t\tthis.groups = [];\r\n\t\r\n\t\tthis.morphTargets = {};\r\n\t\r\n\t\tthis.skinWeights = [];\r\n\t\tthis.skinIndices = [];\r\n\t\r\n\t\t// this.lineDistances = [];\r\n\t\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\t\r\n\t\t// update flags\r\n\t\r\n\t\tthis.verticesNeedUpdate = false;\r\n\t\tthis.normalsNeedUpdate = false;\r\n\t\tthis.colorsNeedUpdate = false;\r\n\t\tthis.uvsNeedUpdate = false;\r\n\t\tthis.groupsNeedUpdate = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.DirectGeometry.prototype = {\r\n\t\r\n\t\tconstructor: THREE.DirectGeometry,\r\n\t\r\n\t\tcomputeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,\r\n\t\tcomputeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,\r\n\t\r\n\t\tcomputeFaceNormals: function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeVertexNormals: function () {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeGroups: function ( geometry ) {\r\n\t\r\n\t\t\tvar group;\r\n\t\t\tvar groups = [];\r\n\t\t\tvar materialIndex;\r\n\t\r\n\t\t\tvar faces = geometry.faces;\r\n\t\r\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar face = faces[ i ];\r\n\t\r\n\t\t\t\t// materials\r\n\t\r\n\t\t\t\tif ( face.materialIndex !== materialIndex ) {\r\n\t\r\n\t\t\t\t\tmaterialIndex = face.materialIndex;\r\n\t\r\n\t\t\t\t\tif ( group !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\t\t\tgroups.push( group );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tgroup = {\r\n\t\t\t\t\t\tstart: i * 3,\r\n\t\t\t\t\t\tmaterialIndex: materialIndex\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( group !== undefined ) {\r\n\t\r\n\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\tgroups.push( group );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.groups = groups;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromGeometry: function ( geometry ) {\r\n\t\r\n\t\t\tvar faces = geometry.faces;\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs;\r\n\t\r\n\t\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\r\n\t\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\r\n\t\r\n\t\t\t// morphs\r\n\t\r\n\t\t\tvar morphTargets = geometry.morphTargets;\r\n\t\t\tvar morphTargetsLength = morphTargets.length;\r\n\t\r\n\t\t\tvar morphTargetsPosition;\r\n\t\r\n\t\t\tif ( morphTargetsLength > 0 ) {\r\n\t\r\n\t\t\t\tmorphTargetsPosition = [];\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\r\n\t\r\n\t\t\t\t\tmorphTargetsPosition[ i ] = [];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.morphTargets.position = morphTargetsPosition;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar morphNormals = geometry.morphNormals;\r\n\t\t\tvar morphNormalsLength = morphNormals.length;\r\n\t\r\n\t\t\tvar morphTargetsNormal;\r\n\t\r\n\t\t\tif ( morphNormalsLength > 0 ) {\r\n\t\r\n\t\t\t\tmorphTargetsNormal = [];\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\r\n\t\r\n\t\t\t\t\tmorphTargetsNormal[ i ] = [];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.morphTargets.normal = morphTargetsNormal;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// skins\r\n\t\r\n\t\t\tvar skinIndices = geometry.skinIndices;\r\n\t\t\tvar skinWeights = geometry.skinWeights;\r\n\t\r\n\t\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\r\n\t\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar face = faces[ i ];\r\n\t\r\n\t\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\r\n\t\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\t\r\n\t\t\t\tif ( vertexNormals.length === 3 ) {\r\n\t\r\n\t\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tvar normal = face.normal;\r\n\t\r\n\t\t\t\t\tthis.normals.push( normal, normal, normal );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar vertexColors = face.vertexColors;\r\n\t\r\n\t\t\t\tif ( vertexColors.length === 3 ) {\r\n\t\r\n\t\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tvar color = face.color;\r\n\t\r\n\t\t\t\t\tthis.colors.push( color, color, color );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( hasFaceVertexUv === true ) {\r\n\t\r\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\r\n\t\r\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\r\n\t\r\n\t\t\t\t\t\tthis.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( hasFaceVertexUv2 === true ) {\r\n\t\r\n\t\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\r\n\t\r\n\t\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\r\n\t\r\n\t\t\t\t\t\tthis.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// morphs\r\n\t\r\n\t\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\r\n\t\r\n\t\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\r\n\t\r\n\t\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// skins\r\n\t\r\n\t\t\t\tif ( hasSkinIndices ) {\r\n\t\r\n\t\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( hasSkinWeights ) {\r\n\t\r\n\t\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.computeGroups( geometry );\r\n\t\r\n\t\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdispose: function () {\r\n\t\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.DirectGeometry.prototype );\r\n\t\r\n\t// File:src/core/BufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.BufferGeometry = function () {\r\n\t\r\n\t\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'BufferGeometry';\r\n\t\r\n\t\tthis.index = null;\r\n\t\tthis.attributes = {};\r\n\t\r\n\t\tthis.morphAttributes = {};\r\n\t\r\n\t\tthis.groups = [];\r\n\t\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\t\r\n\t\tthis.drawRange = { start: 0, count: Infinity };\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BufferGeometry.prototype = {\r\n\t\r\n\t\tconstructor: THREE.BufferGeometry,\r\n\t\r\n\t\tgetIndex: function () {\r\n\t\r\n\t\t\treturn this.index;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetIndex: function ( index ) {\r\n\t\r\n\t\t\tthis.index = index;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddAttribute: function ( name, attribute ) {\r\n\t\r\n\t\t\tif ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\r\n\t\r\n\t\t\t\tthis.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\r\n\t\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( name === 'index' ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\r\n\t\t\t\tthis.setIndex( attribute );\r\n\t\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.attributes[ name ] = attribute;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetAttribute: function ( name ) {\r\n\t\r\n\t\t\treturn this.attributes[ name ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tremoveAttribute: function ( name ) {\r\n\t\r\n\t\t\tdelete this.attributes[ name ];\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\taddGroup: function ( start, count, materialIndex ) {\r\n\t\r\n\t\t\tthis.groups.push( {\r\n\t\r\n\t\t\t\tstart: start,\r\n\t\t\t\tcount: count,\r\n\t\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\r\n\t\r\n\t\t\t} );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclearGroups: function () {\r\n\t\r\n\t\t\tthis.groups = [];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetDrawRange: function ( start, count ) {\r\n\t\r\n\t\t\tthis.drawRange.start = start;\r\n\t\t\tthis.drawRange.count = count;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tapplyMatrix: function ( matrix ) {\r\n\t\r\n\t\t\tvar position = this.attributes.position;\r\n\t\r\n\t\t\tif ( position !== undefined ) {\r\n\t\r\n\t\t\t\tmatrix.applyToVector3Array( position.array );\r\n\t\t\t\tposition.needsUpdate = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar normal = this.attributes.normal;\r\n\t\r\n\t\t\tif ( normal !== undefined ) {\r\n\t\r\n\t\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\t\r\n\t\t\t\tnormalMatrix.applyToVector3Array( normal.array );\r\n\t\t\t\tnormal.needsUpdate = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.boundingBox !== null ) {\r\n\t\r\n\t\t\t\tthis.computeBoundingBox();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.boundingSphere !== null ) {\r\n\t\r\n\t\t\t\tthis.computeBoundingSphere();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\trotateX: function () {\r\n\t\r\n\t\t\t// rotate geometry around world x-axis\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function rotateX( angle ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeRotationX( angle );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\trotateY: function () {\r\n\t\r\n\t\t\t// rotate geometry around world y-axis\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function rotateY( angle ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeRotationY( angle );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\trotateZ: function () {\r\n\t\r\n\t\t\t// rotate geometry around world z-axis\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function rotateZ( angle ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeRotationZ( angle );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\ttranslate: function () {\r\n\t\r\n\t\t\t// translate geometry\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function translate( x, y, z ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeTranslation( x, y, z );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tscale: function () {\r\n\t\r\n\t\t\t// scale geometry\r\n\t\r\n\t\t\tvar m1;\r\n\t\r\n\t\t\treturn function scale( x, y, z ) {\r\n\t\r\n\t\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\t\r\n\t\t\t\tm1.makeScale( x, y, z );\r\n\t\r\n\t\t\t\tthis.applyMatrix( m1 );\r\n\t\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tlookAt: function () {\r\n\t\r\n\t\t\tvar obj;\r\n\t\r\n\t\t\treturn function lookAt( vector ) {\r\n\t\r\n\t\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\r\n\t\r\n\t\t\t\tobj.lookAt( vector );\r\n\t\r\n\t\t\t\tobj.updateMatrix();\r\n\t\r\n\t\t\t\tthis.applyMatrix( obj.matrix );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tcenter: function () {\r\n\t\r\n\t\t\tthis.computeBoundingBox();\r\n\t\r\n\t\t\tvar offset = this.boundingBox.center().negate();\r\n\t\r\n\t\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\t\r\n\t\t\treturn offset;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetFromObject: function ( object ) {\r\n\t\r\n\t\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\r\n\t\r\n\t\t\tvar geometry = object.geometry;\r\n\t\r\n\t\t\tif ( object instanceof THREE.Points || object instanceof THREE.Line ) {\r\n\t\r\n\t\t\t\tvar positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );\r\n\t\t\t\tvar colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );\r\n\t\r\n\t\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\r\n\t\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\r\n\t\r\n\t\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\r\n\t\r\n\t\t\t\t\tvar lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );\r\n\t\r\n\t\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\t\r\n\t\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( geometry.boundingBox !== null ) {\r\n\t\r\n\t\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( object instanceof THREE.Mesh ) {\r\n\t\r\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\t\t\tthis.fromGeometry( geometry );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tupdateFromObject: function ( object ) {\r\n\t\r\n\t\t\tvar geometry = object.geometry;\r\n\t\r\n\t\t\tif ( object instanceof THREE.Mesh ) {\r\n\t\r\n\t\t\t\tvar direct = geometry.__directGeometry;\r\n\t\r\n\t\t\t\tif ( direct === undefined ) {\r\n\t\r\n\t\t\t\t\treturn this.fromGeometry( geometry );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\t\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\t\tgeometry.groupsNeedUpdate = false;\r\n\t\r\n\t\t\t\tgeometry = direct;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.verticesNeedUpdate === true ) {\r\n\t\r\n\t\t\t\tvar attribute = this.attributes.position;\r\n\t\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\t\r\n\t\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.normalsNeedUpdate === true ) {\r\n\t\r\n\t\t\t\tvar attribute = this.attributes.normal;\r\n\t\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\t\r\n\t\t\t\t\tattribute.copyVector3sArray( geometry.normals );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.colorsNeedUpdate === true ) {\r\n\t\r\n\t\t\t\tvar attribute = this.attributes.color;\r\n\t\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\t\r\n\t\t\t\t\tattribute.copyColorsArray( geometry.colors );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.uvsNeedUpdate ) {\r\n\t\r\n\t\t\t\tvar attribute = this.attributes.uv;\r\n\t\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\t\r\n\t\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.lineDistancesNeedUpdate ) {\r\n\t\r\n\t\t\t\tvar attribute = this.attributes.lineDistance;\r\n\t\r\n\t\t\t\tif ( attribute !== undefined ) {\r\n\t\r\n\t\t\t\t\tattribute.copyArray( geometry.lineDistances );\r\n\t\t\t\t\tattribute.needsUpdate = true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgeometry.lineDistancesNeedUpdate = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.groupsNeedUpdate ) {\r\n\t\r\n\t\t\t\tgeometry.computeGroups( object.geometry );\r\n\t\t\t\tthis.groups = geometry.groups;\r\n\t\r\n\t\t\t\tgeometry.groupsNeedUpdate = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromGeometry: function ( geometry ) {\r\n\t\r\n\t\t\tgeometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );\r\n\t\r\n\t\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfromDirectGeometry: function ( geometry ) {\r\n\t\r\n\t\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\r\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\r\n\t\r\n\t\t\tif ( geometry.normals.length > 0 ) {\r\n\t\r\n\t\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\r\n\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.colors.length > 0 ) {\r\n\t\r\n\t\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\r\n\t\t\t\tthis.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.uvs.length > 0 ) {\r\n\t\r\n\t\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\r\n\t\t\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.uvs2.length > 0 ) {\r\n\t\r\n\t\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\r\n\t\t\t\tthis.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.indices.length > 0 ) {\r\n\t\r\n\t\t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\r\n\t\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\r\n\t\t\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// groups\r\n\t\r\n\t\t\tthis.groups = geometry.groups;\r\n\t\r\n\t\t\t// morphs\r\n\t\r\n\t\t\tfor ( var name in geometry.morphTargets ) {\r\n\t\r\n\t\t\t\tvar array = [];\r\n\t\t\t\tvar morphTargets = geometry.morphTargets[ name ];\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\t\r\n\t\t\t\t\tvar attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );\r\n\t\r\n\t\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.morphAttributes[ name ] = array;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// skinning\r\n\t\r\n\t\t\tif ( geometry.skinIndices.length > 0 ) {\r\n\t\r\n\t\t\t\tvar skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );\r\n\t\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.skinWeights.length > 0 ) {\r\n\t\r\n\t\t\t\tvar skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );\r\n\t\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\t\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\t\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeBoundingBox: function () {\r\n\t\r\n\t\t\tvar vector = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function () {\r\n\t\r\n\t\t\t\tif ( this.boundingBox === null ) {\r\n\t\r\n\t\t\t\t\tthis.boundingBox = new THREE.Box3();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar positions = this.attributes.position.array;\r\n\t\r\n\t\t\t\tif ( positions ) {\r\n\t\r\n\t\t\t\t\tthis.boundingBox.setFromArray( positions );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( positions === undefined || positions.length === 0 ) {\r\n\t\r\n\t\t\t\t\tthis.boundingBox.min.set( 0, 0, 0 );\r\n\t\t\t\t\tthis.boundingBox.max.set( 0, 0, 0 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\r\n\t\r\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tcomputeBoundingSphere: function () {\r\n\t\r\n\t\t\tvar box = new THREE.Box3();\r\n\t\t\tvar vector = new THREE.Vector3();\r\n\t\r\n\t\t\treturn function () {\r\n\t\r\n\t\t\t\tif ( this.boundingSphere === null ) {\r\n\t\r\n\t\t\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar positions = this.attributes.position.array;\r\n\t\r\n\t\t\t\tif ( positions ) {\r\n\t\r\n\t\t\t\t\tvar center = this.boundingSphere.center;\r\n\t\r\n\t\t\t\t\tbox.setFromArray( positions );\r\n\t\t\t\t\tbox.center( center );\r\n\t\r\n\t\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\r\n\t\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\r\n\t\r\n\t\t\t\t\tvar maxRadiusSq = 0;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\tvector.fromArray( positions, i );\r\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\t\r\n\t\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\r\n\t\r\n\t\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}(),\r\n\t\r\n\t\tcomputeFaceNormals: function () {\r\n\t\r\n\t\t\t// backwards compatibility\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcomputeVertexNormals: function () {\r\n\t\r\n\t\t\tvar index = this.index;\r\n\t\t\tvar attributes = this.attributes;\r\n\t\t\tvar groups = this.groups;\r\n\t\r\n\t\t\tif ( attributes.position ) {\r\n\t\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\t\r\n\t\t\t\tif ( attributes.normal === undefined ) {\r\n\t\r\n\t\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// reset existing normals to zero\r\n\t\r\n\t\t\t\t\tvar array = attributes.normal.array;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tarray[ i ] = 0;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar normals = attributes.normal.array;\r\n\t\r\n\t\t\t\tvar vA, vB, vC,\r\n\t\r\n\t\t\t\tpA = new THREE.Vector3(),\r\n\t\t\t\tpB = new THREE.Vector3(),\r\n\t\t\t\tpC = new THREE.Vector3(),\r\n\t\r\n\t\t\t\tcb = new THREE.Vector3(),\r\n\t\t\t\tab = new THREE.Vector3();\r\n\t\r\n\t\t\t\t// indexed elements\r\n\t\r\n\t\t\t\tif ( index ) {\r\n\t\r\n\t\t\t\t\tvar indices = index.array;\r\n\t\r\n\t\t\t\t\tif ( groups.length === 0 ) {\r\n\t\r\n\t\t\t\t\t\tthis.addGroup( 0, indices.length );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\r\n\t\r\n\t\t\t\t\t\tvar group = groups[ j ];\r\n\t\r\n\t\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\t\tvar count = group.count;\r\n\t\r\n\t\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\r\n\t\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\r\n\t\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\r\n\t\r\n\t\t\t\t\t\t\tpA.fromArray( positions, vA );\r\n\t\t\t\t\t\t\tpB.fromArray( positions, vB );\r\n\t\t\t\t\t\t\tpC.fromArray( positions, vC );\r\n\t\r\n\t\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\t\tcb.cross( ab );\r\n\t\r\n\t\t\t\t\t\t\tnormals[ vA ] += cb.x;\r\n\t\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\r\n\t\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\r\n\t\r\n\t\t\t\t\t\t\tnormals[ vB ] += cb.x;\r\n\t\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\r\n\t\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\r\n\t\r\n\t\t\t\t\t\t\tnormals[ vC ] += cb.x;\r\n\t\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\r\n\t\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\r\n\t\r\n\t\t\t\t\t\tpA.fromArray( positions, i );\r\n\t\t\t\t\t\tpB.fromArray( positions, i + 3 );\r\n\t\t\t\t\t\tpC.fromArray( positions, i + 6 );\r\n\t\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\t\r\n\t\t\t\t\t\tnormals[ i ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 1 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 2 ] = cb.z;\r\n\t\r\n\t\t\t\t\t\tnormals[ i + 3 ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 4 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 5 ] = cb.z;\r\n\t\r\n\t\t\t\t\t\tnormals[ i + 6 ] = cb.x;\r\n\t\t\t\t\t\tnormals[ i + 7 ] = cb.y;\r\n\t\t\t\t\t\tnormals[ i + 8 ] = cb.z;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.normalizeNormals();\r\n\t\r\n\t\t\t\tattributes.normal.needsUpdate = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmerge: function ( geometry, offset ) {\r\n\t\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry === false ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\r\n\t\t\tvar attributes = this.attributes;\r\n\t\r\n\t\t\tfor ( var key in attributes ) {\r\n\t\r\n\t\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\r\n\t\r\n\t\t\t\tvar attribute1 = attributes[ key ];\r\n\t\t\t\tvar attributeArray1 = attribute1.array;\r\n\t\r\n\t\t\t\tvar attribute2 = geometry.attributes[ key ];\r\n\t\t\t\tvar attributeArray2 = attribute2.array;\r\n\t\r\n\t\t\t\tvar attributeSize = attribute2.itemSize;\r\n\t\r\n\t\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\r\n\t\r\n\t\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalizeNormals: function () {\r\n\t\r\n\t\t\tvar normals = this.attributes.normal.array;\r\n\t\r\n\t\t\tvar x, y, z, n;\r\n\t\r\n\t\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\r\n\t\r\n\t\t\t\tx = normals[ i ];\r\n\t\t\t\ty = normals[ i + 1 ];\r\n\t\t\t\tz = normals[ i + 2 ];\r\n\t\r\n\t\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\r\n\t\r\n\t\t\t\tnormals[ i ] *= n;\r\n\t\t\t\tnormals[ i + 1 ] *= n;\r\n\t\t\t\tnormals[ i + 2 ] *= n;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoNonIndexed: function () {\r\n\t\r\n\t\t\tif ( this.index === null ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\r\n\t\t\t\treturn this;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar geometry2 = new THREE.BufferGeometry();\r\n\t\r\n\t\t\tvar indices = this.index.array;\r\n\t\t\tvar attributes = this.attributes;\r\n\t\r\n\t\t\tfor ( var name in attributes ) {\r\n\t\r\n\t\t\t\tvar attribute = attributes[ name ];\r\n\t\r\n\t\t\t\tvar array = attribute.array;\r\n\t\t\t\tvar itemSize = attribute.itemSize;\r\n\t\r\n\t\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\r\n\t\r\n\t\t\t\tvar index = 0, index2 = 0;\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tindex = indices[ i ] * itemSize;\r\n\t\r\n\t\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\r\n\t\r\n\t\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgeometry2.addAttribute( name, new THREE.BufferAttribute( array2, itemSize ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn geometry2;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoJSON: function () {\r\n\t\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.4,\r\n\t\t\t\t\ttype: 'BufferGeometry',\r\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\r\n\t\t\t// standard BufferGeometry serialization\r\n\t\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\t\t\tif ( this.name !== '' ) data.name = this.name;\r\n\t\r\n\t\t\tif ( this.parameters !== undefined ) {\r\n\t\r\n\t\t\t\tvar parameters = this.parameters;\r\n\t\r\n\t\t\t\tfor ( var key in parameters ) {\r\n\t\r\n\t\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn data;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tdata.data = { attributes: {} };\r\n\t\r\n\t\t\tvar index = this.index;\r\n\t\r\n\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\tvar array = Array.prototype.slice.call( index.array );\r\n\t\r\n\t\t\t\tdata.data.index = {\r\n\t\t\t\t\ttype: index.array.constructor.name,\r\n\t\t\t\t\tarray: array\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar attributes = this.attributes;\r\n\t\r\n\t\t\tfor ( var key in attributes ) {\r\n\t\r\n\t\t\t\tvar attribute = attributes[ key ];\r\n\t\r\n\t\t\t\tvar array = Array.prototype.slice.call( attribute.array );\r\n\t\r\n\t\t\t\tdata.data.attributes[ key ] = {\r\n\t\t\t\t\titemSize: attribute.itemSize,\r\n\t\t\t\t\ttype: attribute.array.constructor.name,\r\n\t\t\t\t\tarray: array\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar groups = this.groups;\r\n\t\r\n\t\t\tif ( groups.length > 0 ) {\r\n\t\r\n\t\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar boundingSphere = this.boundingSphere;\r\n\t\r\n\t\t\tif ( boundingSphere !== null ) {\r\n\t\r\n\t\t\t\tdata.data.boundingSphere = {\r\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\r\n\t\t\t\t\tradius: boundingSphere.radius\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn data;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\t/*\r\n\t\t\t// Handle primitives\r\n\t\r\n\t\t\tvar parameters = this.parameters;\r\n\t\r\n\t\t\tif ( parameters !== undefined ) {\r\n\t\r\n\t\t\t\tvar values = [];\r\n\t\r\n\t\t\t\tfor ( var key in parameters ) {\r\n\t\r\n\t\t\t\t\tvalues.push( parameters[ key ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar geometry = Object.create( this.constructor.prototype );\r\n\t\t\t\tthis.constructor.apply( geometry, values );\r\n\t\t\t\treturn geometry;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\t\t*/\r\n\t\r\n\t\t\treturn new THREE.BufferGeometry().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tvar index = source.index;\r\n\t\r\n\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\tthis.setIndex( index.clone() );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar attributes = source.attributes;\r\n\t\r\n\t\t\tfor ( var name in attributes ) {\r\n\t\r\n\t\t\t\tvar attribute = attributes[ name ];\r\n\t\t\t\tthis.addAttribute( name, attribute.clone() );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar groups = source.groups;\r\n\t\r\n\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\tthis.addGroup( group.start, group.count );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdispose: function () {\r\n\t\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.BufferGeometry.prototype );\r\n\t\r\n\tTHREE.BufferGeometry.MaxIndex = 65535;\r\n\t\r\n\t// File:src/core/InstancedBufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\t\r\n\tTHREE.InstancedBufferGeometry = function () {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthis.type = 'InstancedBufferGeometry';\r\n\t\tthis.maxInstancedCount = undefined;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;\r\n\t\r\n\tTHREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\r\n\t\r\n\t\tthis.groups.push( {\r\n\t\r\n\t\t\tstart: start,\r\n\t\t\tcount: count,\r\n\t\t\tinstances: instances\r\n\t\r\n\t\t} );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.InstancedBufferGeometry.prototype.copy = function ( source ) {\r\n\t\r\n\t\tvar index = source.index;\r\n\t\r\n\t\tif ( index !== null ) {\r\n\t\r\n\t\t\tthis.setIndex( index.clone() );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar attributes = source.attributes;\r\n\t\r\n\t\tfor ( var name in attributes ) {\r\n\t\r\n\t\t\tvar attribute = attributes[ name ];\r\n\t\t\tthis.addAttribute( name, attribute.clone() );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar groups = source.groups;\r\n\t\r\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tvar group = groups[ i ];\r\n\t\t\tthis.addGroup( group.start, group.count, group.instances );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.InstancedBufferGeometry.prototype );\r\n\t\r\n\t// File:src/core/Uniform.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Uniform = function ( type, value ) {\r\n\t\r\n\t\tthis.type = type;\r\n\t\tthis.value = value;\r\n\t\r\n\t\tthis.dynamic = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Uniform.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Uniform,\r\n\t\r\n\t\tonUpdate: function ( callback ) {\r\n\t\r\n\t\t\tthis.dynamic = true;\r\n\t\t\tthis.onUpdateCallback = callback;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/animation/AnimationClip.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * Reusable set of Tracks that represent an animation.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\t\r\n\tTHREE.AnimationClip = function ( name, duration, tracks ) {\r\n\t\r\n\t\tthis.name = name || THREE.Math.generateUUID();\r\n\t\tthis.tracks = tracks;\r\n\t\tthis.duration = ( duration !== undefined ) ? duration : -1;\r\n\t\r\n\t\t// this means it should figure out its duration by scanning the tracks\r\n\t\tif ( this.duration < 0 ) {\r\n\t\r\n\t\t\tthis.resetDuration();\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// maybe only do these on demand, as doing them here could potentially slow down loading\r\n\t\t// but leaving these here during development as this ensures a lot of testing of these functions\r\n\t\tthis.trim();\r\n\t\tthis.optimize();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AnimationClip.prototype = {\r\n\t\r\n\t\tconstructor: THREE.AnimationClip,\r\n\t\r\n\t\tresetDuration: function() {\r\n\t\r\n\t\t\tvar tracks = this.tracks,\r\n\t\t\t\tduration = 0;\r\n\t\r\n\t\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\tvar track = this.tracks[ i ];\r\n\t\r\n\t\t\t\tduration = Math.max(\r\n\t\t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.duration = duration;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttrim: function() {\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\t\r\n\t\t\t\tthis.tracks[ i ].trim( 0, this.duration );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\toptimize: function() {\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\t\r\n\t\t\t\tthis.tracks[ i ].optimize();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// Static methods:\r\n\t\r\n\tObject.assign( THREE.AnimationClip, {\r\n\t\r\n\t\tparse: function( json ) {\r\n\t\r\n\t\t\tvar tracks = [],\r\n\t\t\t\tjsonTracks = json.tracks,\r\n\t\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\r\n\t\r\n\t\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\ttracks.push( THREE.KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn new THREE.AnimationClip( json.name, json.duration, tracks );\r\n\t\r\n\t\t},\r\n\t\r\n\t\r\n\t\ttoJSON: function( clip ) {\r\n\t\r\n\t\t\tvar tracks = [],\r\n\t\t\t\tclipTracks = clip.tracks;\r\n\t\r\n\t\t\tvar json = {\r\n\t\r\n\t\t\t\t'name': clip.name,\r\n\t\t\t\t'duration': clip.duration,\r\n\t\t\t\t'tracks': tracks\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\ttracks.push( THREE.KeyframeTrack.toJSON( clipTracks[ i ] ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn json;\r\n\t\r\n\t\t},\r\n\t\r\n\t\r\n\t\tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps ) {\r\n\t\r\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\r\n\t\t\tvar tracks = [];\r\n\t\r\n\t\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\r\n\t\r\n\t\t\t\tvar times = [];\r\n\t\t\t\tvar values = [];\r\n\t\r\n\t\t\t\ttimes.push(\r\n\t\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\r\n\t\t\t\t\t\ti,\r\n\t\t\t\t\t\t( i + 1 ) % numMorphTargets );\r\n\t\r\n\t\t\t\tvalues.push( 0, 1, 0 );\r\n\t\r\n\t\t\t\tvar order = THREE.AnimationUtils.getKeyframeOrder( times );\r\n\t\t\t\ttimes = THREE.AnimationUtils.sortedArray( times, 1, order );\r\n\t\t\t\tvalues = THREE.AnimationUtils.sortedArray( values, 1, order );\r\n\t\r\n\t\t\t\t// if there is a key at the first frame, duplicate it as the\r\n\t\t\t\t// last frame as well for perfect loop.\r\n\t\t\t\tif ( times[ 0 ] === 0 ) {\r\n\t\r\n\t\t\t\t\ttimes.push( numMorphTargets );\r\n\t\t\t\t\tvalues.push( values[ 0 ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\ttracks.push(\r\n\t\t\t\t\t\tnew THREE.NumberKeyframeTrack(\r\n\t\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\r\n\t\t\t\t\t\t\ttimes, values\r\n\t\t\t\t\t\t).scale( 1.0 / fps ) );\r\n\t\t\t}\r\n\t\r\n\t\t\treturn new THREE.AnimationClip( name, -1, tracks );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfindByName: function( clipArray, name ) {\r\n\t\r\n\t\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\r\n\t\r\n\t\t\t\tif ( clipArray[ i ].name === name ) {\r\n\t\r\n\t\t\t\t\treturn clipArray[ i ];\r\n\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\r\n\t\t\treturn null;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tCreateClipsFromMorphTargetSequences: function( morphTargets, fps ) {\r\n\t\r\n\t\t\tvar animationToMorphTargets = {};\r\n\t\r\n\t\t\t// tested with https://regex101.com/ on trick sequences\r\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\r\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\r\n\t\r\n\t\t\t// sort morph target names into animation groups based\r\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\r\n\t\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\t\t\t\tvar parts = morphTarget.name.match( pattern );\r\n\t\r\n\t\t\t\tif ( parts && parts.length > 1 ) {\r\n\t\r\n\t\t\t\t\tvar name = parts[ 1 ];\r\n\t\r\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\r\n\t\t\t\t\tif ( ! animationMorphTargets ) {\r\n\t\r\n\t\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tanimationMorphTargets.push( morphTarget );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar clips = [];\r\n\t\r\n\t\t\tfor ( var name in animationToMorphTargets ) {\r\n\t\r\n\t\t\t\tclips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn clips;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// parse the animation.hierarchy format\r\n\t\tparseAnimation: function( animation, bones, nodeName ) {\r\n\t\r\n\t\t\tif ( ! animation ) {\r\n\t\r\n\t\t\t\tconsole.error( \"  no animation in JSONLoader data\" );\r\n\t\t\t\treturn null;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar addNonemptyTrack = function(\r\n\t\t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\r\n\t\r\n\t\t\t\t// only return track if there are actually keys.\r\n\t\t\t\tif ( animationKeys.length !== 0 ) {\r\n\t\r\n\t\t\t\t\tvar times = [];\r\n\t\t\t\t\tvar values = [];\r\n\t\r\n\t\t\t\t\tTHREE.AnimationUtils.flattenJSON(\r\n\t\t\t\t\t\t\tanimationKeys, times, values, propertyName );\r\n\t\r\n\t\t\t\t\t// empty keys are filtered out, so check again\r\n\t\t\t\t\tif ( times.length !== 0 ) {\r\n\t\r\n\t\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\tvar tracks = [];\r\n\t\r\n\t\t\tvar clipName = animation.name || 'default';\r\n\t\t\t// automatic length determination in AnimationClip.\r\n\t\t\tvar duration = animation.length || -1;\r\n\t\t\tvar fps = animation.fps || 30;\r\n\t\r\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\r\n\t\r\n\t\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\r\n\t\r\n\t\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\r\n\t\r\n\t\t\t\t// skip empty tracks\r\n\t\t\t\tif ( ! animationKeys || animationKeys.length == 0 ) continue;\r\n\t\r\n\t\t\t\t// process morph targets in a way exactly compatible\r\n\t\t\t\t// with AnimationHandler.init( animation )\r\n\t\t\t\tif ( animationKeys[0].morphTargets ) {\r\n\t\r\n\t\t\t\t\t// figure out all morph targets used in this track\r\n\t\t\t\t\tvar morphTargetNames = {};\r\n\t\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\r\n\t\r\n\t\t\t\t\t\tif ( animationKeys[k].morphTargets ) {\r\n\t\r\n\t\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// create a track for each morph target with all zero\r\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\r\n\t\t\t\t\t// the morphTarget is named.\r\n\t\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\r\n\t\r\n\t\t\t\t\t\tvar times = [];\r\n\t\t\t\t\t\tvar values = [];\r\n\t\r\n\t\t\t\t\t\tfor ( var m = 0;\r\n\t\t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\r\n\t\r\n\t\t\t\t\t\t\tvar animationKey = animationKeys[k];\r\n\t\r\n\t\t\t\t\t\t\ttimes.push( animationKey.time );\r\n\t\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 )\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\ttracks.push( new THREE.NumberKeyframeTrack(\r\n\t\t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// ...assume skeletal animation\r\n\t\r\n\t\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\r\n\t\r\n\t\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.position',\r\n\t\t\t\t\t\t\tanimationKeys, 'pos', tracks );\r\n\t\r\n\t\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\t\tTHREE.QuaternionKeyframeTrack, boneName + '.quaternion',\r\n\t\t\t\t\t\t\tanimationKeys, 'rot', tracks );\r\n\t\r\n\t\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.scale',\r\n\t\t\t\t\t\t\tanimationKeys, 'scl', tracks );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( tracks.length === 0 ) {\r\n\t\r\n\t\t\t\treturn null;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar clip = new THREE.AnimationClip( clipName, duration, tracks );\r\n\t\r\n\t\t\treturn clip;\r\n\t\r\n\t\t}\r\n\t\r\n\t} );\r\n\t\r\n\t\r\n\t// File:src/animation/AnimationMixer.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * Player for AnimationClips.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.AnimationMixer = function( root ) {\r\n\t\r\n\t\tthis._root = root;\r\n\t\tthis._initMemoryManager();\r\n\t\tthis._accuIndex = 0;\r\n\t\r\n\t\tthis.time = 0;\r\n\t\r\n\t\tthis.timeScale = 1.0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AnimationMixer.prototype = {\r\n\t\r\n\t\tconstructor: THREE.AnimationMixer,\r\n\t\r\n\t\t// return an action for a clip optionally using a custom root target\r\n\t\t// object (this method allocates a lot of dynamic memory in case a\r\n\t\t// previously unknown clip/root combination is specified)\r\n\t\tclipAction: function( clip, optionalRoot ) {\r\n\t\r\n\t\t\tvar root = optionalRoot || this._root,\r\n\t\t\t\trootUuid = root.uuid,\r\n\t\t\t\tclipName = ( typeof clip === 'string' ) ? clip : clip.name,\r\n\t\t\t\tclipObject = ( clip !== clipName ) ? clip : null,\r\n\t\r\n\t\t\t\tactionsForClip = this._actionsByClip[ clipName ],\r\n\t\t\t\tprototypeAction;\r\n\t\r\n\t\t\tif ( actionsForClip !== undefined ) {\r\n\t\r\n\t\t\t\tvar existingAction =\r\n\t\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\r\n\t\r\n\t\t\t\tif ( existingAction !== undefined ) {\r\n\t\r\n\t\t\t\t\treturn existingAction;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// we know the clip, so we don't have to parse all\r\n\t\t\t\t// the bindings again but can just copy\r\n\t\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\r\n\t\r\n\t\t\t\t// also, take the clip from the prototype action\r\n\t\t\t\tclipObject = prototypeAction._clip;\r\n\t\r\n\t\t\t\tif ( clip !== clipName && clip !== clipObject ) {\r\n\t\r\n\t\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\t\t\"Different clips with the same name detected!\" );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// clip must be known when specified via string\r\n\t\t\tif ( clipObject === null ) return null;\r\n\t\r\n\t\t\t// allocate all resources required to run it\r\n\t\t\tvar newAction = new THREE.\r\n\t\t\t\t\tAnimationMixer._Action( this, clipObject, optionalRoot );\r\n\t\r\n\t\t\tthis._bindAction( newAction, prototypeAction );\r\n\t\r\n\t\t\t// and make the action known to the memory manager\r\n\t\t\tthis._addInactiveAction( newAction, clipName, rootUuid );\r\n\t\r\n\t\t\treturn newAction;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// get an existing action\r\n\t\texistingAction: function( clip, optionalRoot ) {\r\n\t\r\n\t\t\tvar root = optionalRoot || this._root,\r\n\t\t\t\trootUuid = root.uuid,\r\n\t\t\t\tclipName = ( typeof clip === 'string' ) ? clip : clip.name,\r\n\t\t\t\tactionsForClip = this._actionsByClip[ clipName ];\r\n\t\r\n\t\t\tif ( actionsForClip !== undefined ) {\r\n\t\r\n\t\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn null;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// deactivates all previously scheduled actions\r\n\t\tstopAllAction: function() {\r\n\t\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tnActions = this._nActiveActions,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = this._nActiveBindings;\r\n\t\r\n\t\t\tthis._nActiveActions = 0;\r\n\t\t\tthis._nActiveBindings = 0;\r\n\t\r\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\t\r\n\t\t\t\tactions[ i ].reset();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\t\r\n\t\t\t\tbindings[ i ].useCount = 0;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// advance the time and update apply the animation\r\n\t\tupdate: function( deltaTime ) {\r\n\t\r\n\t\t\tdeltaTime *= this.timeScale;\r\n\t\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tnActions = this._nActiveActions,\r\n\t\r\n\t\t\t\ttime = this.time += deltaTime,\r\n\t\t\t\ttimeDirection = Math.sign( deltaTime ),\r\n\t\r\n\t\t\t\taccuIndex = this._accuIndex ^= 1;\r\n\t\r\n\t\t\t// run active actions\r\n\t\r\n\t\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\t\r\n\t\t\t\tvar action = actions[ i ];\r\n\t\r\n\t\t\t\tif ( action.enabled ) {\r\n\t\r\n\t\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// update scene graph\r\n\t\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tnBindings = this._nActiveBindings;\r\n\t\r\n\t\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\t\r\n\t\t\t\tbindings[ i ].apply( accuIndex );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// return this mixer's root target object\r\n\t\tgetRoot: function() {\r\n\t\r\n\t\t\treturn this._root;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// free all resources specific to a particular clip\r\n\t\tuncacheClip: function( clip ) {\r\n\t\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tclipName = clip.name,\r\n\t\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\t\tactionsForClip = actionsByClip[ clipName ];\r\n\t\r\n\t\t\tif ( actionsForClip !== undefined ) {\r\n\t\r\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\r\n\t\t\t\t// iteration state and also require updating the state we can\r\n\t\t\t\t// just throw away\r\n\t\r\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\r\n\t\r\n\t\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\t\tvar action = actionsToRemove[ i ];\r\n\t\r\n\t\t\t\t\tthis._deactivateAction( action );\r\n\t\r\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\r\n\t\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\r\n\t\r\n\t\t\t\t\taction._cacheIndex = null;\r\n\t\t\t\t\taction._byClipCacheIndex = null;\r\n\t\r\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\t\t\t\tactions.pop();\r\n\t\r\n\t\t\t\t\tthis._removeInactiveBindingsForAction( action );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tdelete actionsByClip[ clipName ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// free all resources specific to a particular root target object\r\n\t\tuncacheRoot: function( root ) {\r\n\t\r\n\t\t\tvar rootUuid = root.uuid,\r\n\t\t\t\tactionsByClip = this._actionsByClip;\r\n\t\r\n\t\t\tfor ( var clipName in actionsByClip ) {\r\n\t\r\n\t\t\t\tvar actionByRoot = actionsByClip[ clipName ].actionByRoot,\r\n\t\t\t\t\taction = actionByRoot[ rootUuid ];\r\n\t\r\n\t\t\t\tif ( action !== undefined ) {\r\n\t\r\n\t\t\t\t\tthis._deactivateAction( action );\r\n\t\t\t\t\tthis._removeInactiveAction( action );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\r\n\t\r\n\t\t\tif ( bindingByName !== undefined ) {\r\n\t\r\n\t\t\t\tfor ( var trackName in bindingByName ) {\r\n\t\r\n\t\t\t\t\tvar binding = bindingByName[ trackName ];\r\n\t\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\t\tthis._removeInactiveBinding( binding );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// remove a targeted clip from the cache\r\n\t\tuncacheAction: function( clip, optionalRoot ) {\r\n\t\r\n\t\t\tvar action = this.existingAction( clip, optionalRoot );\r\n\t\r\n\t\t\tif ( action !== null ) {\r\n\t\r\n\t\t\t\tthis._deactivateAction( action );\r\n\t\t\t\tthis._removeInactiveAction( action );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.AnimationMixer.prototype );\r\n\t\r\n\tTHREE.AnimationMixer._Action =\r\n\t\t\tfunction( mixer, clip, localRoot ) {\r\n\t\r\n\t\tthis._mixer = mixer;\r\n\t\tthis._clip = clip;\r\n\t\tthis._localRoot = localRoot || null;\r\n\t\r\n\t\tvar tracks = clip.tracks,\r\n\t\t\tnTracks = tracks.length,\r\n\t\t\tinterpolants = new Array( nTracks );\r\n\t\r\n\t\tvar interpolantSettings = {\r\n\t\t\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\r\n\t\t\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\r\n\t\t};\r\n\t\r\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\t\r\n\t\t\tvar interpolant = tracks[ i ].createInterpolant( null );\r\n\t\t\tinterpolants[ i ] = interpolant;\r\n\t\t\tinterpolant.settings = interpolantSettings\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis._interpolantSettings = interpolantSettings;\r\n\t\r\n\t\tthis._interpolants = interpolants;\t// bound by the mixer\r\n\t\r\n\t\t// inside: PropertyMixer (managed by the mixer)\r\n\t\tthis._propertyBindings = new Array( nTracks );\r\n\t\r\n\t\tthis._cacheIndex = null;\t\t\t// for the memory manager\r\n\t\tthis._byClipCacheIndex = null;\t\t// for the memory manager\r\n\t\r\n\t\tthis._timeScaleInterpolant = null;\r\n\t\tthis._weightInterpolant = null;\r\n\t\r\n\t\tthis.loop = THREE.LoopRepeat;\r\n\t\tthis._loopCount = -1;\r\n\t\r\n\t\t// global mixer time when the action is to be started\r\n\t\t// it's set back to 'null' upon start of the action\r\n\t\tthis._startTime = null;\r\n\t\r\n\t\t// scaled local time of the action\r\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\r\n\t\tthis.time = 0;\r\n\t\r\n\t\tthis.timeScale = 1;\r\n\t\tthis._effectiveTimeScale = 1;\r\n\t\r\n\t\tthis.weight = 1;\r\n\t\tthis._effectiveWeight = 1;\r\n\t\r\n\t\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\r\n\t\r\n\t\tthis.paused = false;\t\t\t\t// false -> zero effective time scale\r\n\t\tthis.enabled = true;\t\t\t\t// true -> zero effective weight\r\n\t\r\n\t\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\r\n\t\r\n\t\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\r\n\t\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AnimationMixer._Action.prototype = {\r\n\t\r\n\t\tconstructor: THREE.AnimationMixer._Action,\r\n\t\r\n\t\t// State & Scheduling\r\n\t\r\n\t\tplay: function() {\r\n\t\r\n\t\t\tthis._mixer._activateAction( this );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tstop: function() {\r\n\t\r\n\t\t\tthis._mixer._deactivateAction( this );\r\n\t\r\n\t\t\treturn this.reset();\r\n\t\r\n\t\t},\r\n\t\r\n\t\treset: function() {\r\n\t\r\n\t\t\tthis.paused = false;\r\n\t\t\tthis.enabled = true;\r\n\t\r\n\t\t\tthis.time = 0;\t\t\t// restart clip\r\n\t\t\tthis._loopCount = -1;\t// forget previous loops\r\n\t\t\tthis._startTime = null;\t// forget scheduling\r\n\t\r\n\t\t\treturn this.stopFading().stopWarping();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tisRunning: function() {\r\n\t\r\n\t\t\tvar start = this._startTime;\r\n\t\r\n\t\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\r\n\t\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this )\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// return true when play has been called\r\n\t\tisScheduled: function() {\r\n\t\r\n\t\t\treturn this._mixer._isActiveAction( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tstartAt: function( time ) {\r\n\t\r\n\t\t\tthis._startTime = time;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetLoop: function( mode, repetitions ) {\r\n\t\r\n\t\t\tthis.loop = mode;\r\n\t\t\tthis.repetitions = repetitions;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Weight\r\n\t\r\n\t\t// set the weight stopping any scheduled fading\r\n\t\t// although .enabled = false yields an effective weight of zero, this\r\n\t\t// method does *not* change .enabled, because it would be confusing\r\n\t\tsetEffectiveWeight: function( weight ) {\r\n\t\r\n\t\t\tthis.weight = weight;\r\n\t\r\n\t\t\t// note: same logic as when updated at runtime\r\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\r\n\t\r\n\t\t\treturn this.stopFading();\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// return the weight considering fading and .enabled\r\n\t\tgetEffectiveWeight: function() {\r\n\t\r\n\t\t\treturn this._effectiveWeight;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfadeIn: function( duration ) {\r\n\t\r\n\t\t\treturn this._scheduleFading( duration, 0, 1 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfadeOut: function( duration ) {\r\n\t\r\n\t\t\treturn this._scheduleFading( duration, 1, 0 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\r\n\t\r\n\t\t\tvar mixer = this._mixer;\r\n\t\r\n\t\t\tfadeOutAction.fadeOut( duration );\r\n\t\t\tthis.fadeIn( duration );\r\n\t\r\n\t\t\tif( warp ) {\r\n\t\r\n\t\t\t\tvar fadeInDuration = this._clip.duration,\r\n\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\r\n\t\r\n\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\r\n\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\r\n\t\r\n\t\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\r\n\t\t\t\tthis.warp( endStartRatio, 1.0, duration );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcrossFadeTo: function( fadeInAction, duration, warp ) {\r\n\t\r\n\t\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tstopFading: function() {\r\n\t\r\n\t\t\tvar weightInterpolant = this._weightInterpolant;\r\n\t\r\n\t\t\tif ( weightInterpolant !== null ) {\r\n\t\r\n\t\t\t\tthis._weightInterpolant = null;\r\n\t\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Time Scale Control\r\n\t\r\n\t\t// set the weight stopping any scheduled warping\r\n\t\t// although .paused = true yields an effective time scale of zero, this\r\n\t\t// method does *not* change .paused, because it would be confusing\r\n\t\tsetEffectiveTimeScale: function( timeScale ) {\r\n\t\r\n\t\t\tthis.timeScale = timeScale;\r\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\r\n\t\r\n\t\t\treturn this.stopWarping();\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// return the time scale considering warping and .paused\r\n\t\tgetEffectiveTimeScale: function() {\r\n\t\r\n\t\t\treturn this._effectiveTimeScale;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetDuration: function( duration ) {\r\n\t\r\n\t\t\tthis.timeScale = this._clip.duration / duration;\r\n\t\r\n\t\t\treturn this.stopWarping();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsyncWith: function( action ) {\r\n\t\r\n\t\t\tthis.time = action.time;\r\n\t\t\tthis.timeScale = action.timeScale;\r\n\t\r\n\t\t\treturn this.stopWarping();\r\n\t\r\n\t\t},\r\n\t\r\n\t\thalt: function( duration ) {\r\n\t\r\n\t\t\treturn this.warp( this._currentTimeScale, 0, duration );\r\n\t\r\n\t\t},\r\n\t\r\n\t\twarp: function( startTimeScale, endTimeScale, duration ) {\r\n\t\r\n\t\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\t\tinterpolant = this._timeScaleInterpolant,\r\n\t\r\n\t\t\t\ttimeScale = this.timeScale;\r\n\t\r\n\t\t\tif ( interpolant === null ) {\r\n\t\r\n\t\t\t\tinterpolant = mixer._lendControlInterpolant(),\r\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar times = interpolant.parameterPositions,\r\n\t\t\t\tvalues = interpolant.sampleValues;\r\n\t\r\n\t\t\ttimes[ 0 ] = now;\r\n\t\t\ttimes[ 1 ] = now + duration;\r\n\t\r\n\t\t\tvalues[ 0 ] = startTimeScale / timeScale;\r\n\t\t\tvalues[ 1 ] = endTimeScale / timeScale;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tstopWarping: function() {\r\n\t\r\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\r\n\t\r\n\t\t\tif ( timeScaleInterpolant !== null ) {\r\n\t\r\n\t\t\t\tthis._timeScaleInterpolant = null;\r\n\t\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Object Accessors\r\n\t\r\n\t\tgetMixer: function() {\r\n\t\r\n\t\t\treturn this._mixer;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetClip: function() {\r\n\t\r\n\t\t\treturn this._clip;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetRoot: function() {\r\n\t\r\n\t\t\treturn this._localRoot || this._mixer._root;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Interna\r\n\t\r\n\t\t_update: function( time, deltaTime, timeDirection, accuIndex ) {\r\n\t\t\t// called by the mixer\r\n\t\r\n\t\t\tvar startTime = this._startTime;\r\n\t\r\n\t\t\tif ( startTime !== null ) {\r\n\t\r\n\t\t\t\t// check for scheduled start of action\r\n\t\r\n\t\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\r\n\t\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\r\n\t\r\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// start\r\n\t\r\n\t\t\t\tthis._startTime = null; // unschedule\r\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// apply time scale and advance time\r\n\t\r\n\t\t\tdeltaTime *= this._updateTimeScale( time );\r\n\t\t\tvar clipTime = this._updateTime( deltaTime );\r\n\t\r\n\t\t\t// note: _updateTime may disable the action resulting in\r\n\t\t\t// an effective weight of 0\r\n\t\r\n\t\t\tvar weight = this._updateWeight( time );\r\n\t\r\n\t\t\tif ( weight > 0 ) {\r\n\t\r\n\t\t\t\tvar interpolants = this._interpolants;\r\n\t\t\t\tvar propertyMixers = this._propertyBindings;\r\n\t\r\n\t\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\r\n\t\r\n\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\r\n\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_updateWeight: function( time ) {\r\n\t\r\n\t\t\tvar weight = 0;\r\n\t\r\n\t\t\tif ( this.enabled ) {\r\n\t\r\n\t\t\t\tweight = this.weight;\r\n\t\t\t\tvar interpolant = this._weightInterpolant;\r\n\t\r\n\t\t\t\tif ( interpolant !== null ) {\r\n\t\r\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\t\r\n\t\t\t\t\tweight *= interpolantValue;\r\n\t\r\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\t\r\n\t\t\t\t\t\tthis.stopFading();\r\n\t\r\n\t\t\t\t\t\tif ( interpolantValue === 0 ) {\r\n\t\r\n\t\t\t\t\t\t\t// faded out, disable\r\n\t\t\t\t\t\t\tthis.enabled = false;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis._effectiveWeight = weight;\r\n\t\t\treturn weight;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_updateTimeScale: function( time ) {\r\n\t\r\n\t\t\tvar timeScale = 0;\r\n\t\r\n\t\t\tif ( ! this.paused ) {\r\n\t\r\n\t\t\t\ttimeScale = this.timeScale;\r\n\t\r\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\r\n\t\r\n\t\t\t\tif ( interpolant !== null ) {\r\n\t\r\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\t\r\n\t\t\t\t\ttimeScale *= interpolantValue;\r\n\t\r\n\t\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\t\r\n\t\t\t\t\t\tthis.stopWarping();\r\n\t\r\n\t\t\t\t\t\tif ( timeScale === 0 ) {\r\n\t\r\n\t\t\t\t\t\t\t// motion has halted, pause\r\n\t\t\t\t\t\t\tthis.pause = true;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t// warp done - apply final time scale\r\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis._effectiveTimeScale = timeScale;\r\n\t\t\treturn timeScale;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_updateTime: function( deltaTime ) {\r\n\t\r\n\t\t\tvar time = this.time + deltaTime;\r\n\t\r\n\t\t\tif ( deltaTime === 0 ) return time;\r\n\t\r\n\t\t\tvar duration = this._clip.duration,\r\n\t\r\n\t\t\t\tloop = this.loop,\r\n\t\t\t\tloopCount = this._loopCount,\r\n\t\r\n\t\t\t\tpingPong = false;\r\n\t\r\n\t\t\tswitch ( loop ) {\r\n\t\r\n\t\t\t\tcase THREE.LoopOnce:\r\n\t\r\n\t\t\t\t\tif ( loopCount === -1 ) {\r\n\t\r\n\t\t\t\t\t\t// just started\r\n\t\r\n\t\t\t\t\t\tthis.loopCount = 0;\r\n\t\t\t\t\t\tthis._setEndings( true, true, false );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( time >= duration ) {\r\n\t\r\n\t\t\t\t\t\ttime = duration;\r\n\t\r\n\t\t\t\t\t} else if ( time < 0 ) {\r\n\t\r\n\t\t\t\t\t\ttime = 0;\r\n\t\r\n\t\t\t\t\t} else break;\r\n\t\r\n\t\t\t\t\t// reached the end\r\n\t\r\n\t\t\t\t\tif ( this.clampWhenFinished ) this.pause = true;\r\n\t\t\t\t\telse this.enabled = false;\r\n\t\r\n\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\r\n\t\t\t\t\t} );\r\n\t\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase THREE.LoopPingPong:\r\n\t\r\n\t\t\t\t\tpingPong = true;\r\n\t\r\n\t\t\t\tcase THREE.LoopRepeat:\r\n\t\r\n\t\t\t\t\tif ( loopCount === -1 ) {\r\n\t\r\n\t\t\t\t\t\t// just started\r\n\t\r\n\t\t\t\t\t\tif ( deltaTime > 0 ) {\r\n\t\r\n\t\t\t\t\t\t\tloopCount = 0;\r\n\t\r\n\t\t\t\t\t\t\tthis._setEndings(\r\n\t\t\t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t// when looping in reverse direction, the initial\r\n\t\t\t\t\t\t\t// transition through zero counts as a repetition,\r\n\t\t\t\t\t\t\t// so leave loopCount at -1\r\n\t\r\n\t\t\t\t\t\t\tthis._setEndings(\r\n\t\t\t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( time >= duration || time < 0 ) {\r\n\t\r\n\t\t\t\t\t\t// wrap around\r\n\t\r\n\t\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\r\n\t\t\t\t\t\ttime -= duration * loopDelta;\r\n\t\r\n\t\t\t\t\t\tloopCount += Math.abs( loopDelta );\r\n\t\r\n\t\t\t\t\t\tvar pending = this.repetitions - loopCount;\r\n\t\r\n\t\t\t\t\t\tif ( pending < 0 ) {\r\n\t\r\n\t\t\t\t\t\t\t// stop (switch state, clamp time, fire event)\r\n\t\r\n\t\t\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\r\n\t\t\t\t\t\t\telse this.enabled = false;\r\n\t\r\n\t\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\r\n\t\r\n\t\t\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\r\n\t\t\t\t\t\t\t} );\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t} else if ( pending === 0 ) {\r\n\t\r\n\t\t\t\t\t\t\t// transition to last round\r\n\t\r\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\r\n\t\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tthis._loopCount = loopCount;\r\n\t\r\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\r\n\t\t\t\t\t\t} );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( loop === THREE.LoopPingPong && ( loopCount & 1 ) === 1 ) {\r\n\t\r\n\t\t\t\t\t\t// invert time for the \"pong round\"\r\n\t\r\n\t\t\t\t\t\tthis.time = time;\r\n\t\r\n\t\t\t\t\t\treturn duration - time;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.time = time;\r\n\t\r\n\t\t\treturn time;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_setEndings: function( atStart, atEnd, pingPong ) {\r\n\t\r\n\t\t\tvar settings = this._interpolantSettings;\r\n\t\r\n\t\t\tif ( pingPong ) {\r\n\t\r\n\t\t\t\tsettings.endingStart \t= THREE.ZeroSlopeEnding;\r\n\t\t\t\tsettings.endingEnd\t\t= THREE.ZeroSlopeEnding;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\r\n\t\r\n\t\t\t\tif ( atStart ) {\r\n\t\r\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\r\n\t\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tsettings.endingStart = THREE.WrapAroundEnding;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( atEnd ) {\r\n\t\r\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\r\n\t\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tsettings.endingEnd \t = THREE.WrapAroundEnding;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_scheduleFading: function( duration, weightNow, weightThen ) {\r\n\t\r\n\t\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\t\tinterpolant = this._weightInterpolant;\r\n\t\r\n\t\t\tif ( interpolant === null ) {\r\n\t\r\n\t\t\t\tinterpolant = mixer._lendControlInterpolant(),\r\n\t\t\t\tthis._weightInterpolant = interpolant;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar times = interpolant.parameterPositions,\r\n\t\t\t\tvalues = interpolant.sampleValues;\r\n\t\r\n\t\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\r\n\t\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// Implementation details:\r\n\t\r\n\tObject.assign( THREE.AnimationMixer.prototype, {\r\n\t\r\n\t\t_bindAction: function( action, prototypeAction ) {\r\n\t\r\n\t\t\tvar root = action._localRoot || this._root,\r\n\t\t\t\ttracks = action._clip.tracks,\r\n\t\t\t\tnTracks = tracks.length,\r\n\t\t\t\tbindings = action._propertyBindings,\r\n\t\t\t\tinterpolants = action._interpolants,\r\n\t\t\t\trootUuid = root.uuid,\r\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\r\n\t\r\n\t\t\tif ( bindingsByName === undefined ) {\r\n\t\r\n\t\t\t\tbindingsByName = {};\r\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\t\r\n\t\t\t\tvar track = tracks[ i ],\r\n\t\t\t\t\ttrackName = track.name,\r\n\t\t\t\t\tbinding = bindingsByName[ trackName ];\r\n\t\r\n\t\t\t\tif ( binding !== undefined ) {\r\n\t\r\n\t\t\t\t\tbindings[ i ] = binding;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tbinding = bindings[ i ];\r\n\t\r\n\t\t\t\t\tif ( binding !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t// existing binding, make sure the cache knows\r\n\t\r\n\t\t\t\t\t\tif ( binding._cacheIndex === null ) {\r\n\t\r\n\t\t\t\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tcontinue;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tvar path = prototypeAction && prototypeAction.\r\n\t\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\r\n\t\r\n\t\t\t\t\tbinding = new THREE.PropertyMixer(\r\n\t\t\t\t\t\t\tTHREE.PropertyBinding.create( root, trackName, path ),\r\n\t\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\r\n\t\r\n\t\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\t\r\n\t\t\t\t\tbindings[ i ] = binding;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_activateAction: function( action ) {\r\n\t\r\n\t\t\tif ( ! this._isActiveAction( action ) ) {\r\n\t\r\n\t\t\t\tif ( action._cacheIndex === null ) {\r\n\t\r\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\r\n\t\t\t\t\t// appears to be still using it -> rebind\r\n\t\r\n\t\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\r\n\t\t\t\t\t\tclipName = action._clip.name,\r\n\t\t\t\t\t\tactionsForClip = this._actionsByClip[ clipName ];\r\n\t\r\n\t\t\t\t\tthis._bindAction( action,\r\n\t\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\r\n\t\r\n\t\t\t\t\tthis._addInactiveAction( action, clipName, rootUuid );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar bindings = action._propertyBindings;\r\n\t\r\n\t\t\t\t// increment reference counts / sort out state\r\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\t\tvar binding = bindings[ i ];\r\n\t\r\n\t\t\t\t\tif ( binding.useCount ++ === 0 ) {\r\n\t\r\n\t\t\t\t\t\tthis._lendBinding( binding );\r\n\t\t\t\t\t\tbinding.saveOriginalState();\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis._lendAction( action );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_deactivateAction: function( action ) {\r\n\t\r\n\t\t\tif ( this._isActiveAction( action ) ) {\r\n\t\r\n\t\t\t\tvar bindings = action._propertyBindings;\r\n\t\r\n\t\t\t\t// decrement reference counts / sort out state\r\n\t\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\t\tvar binding = bindings[ i ];\r\n\t\r\n\t\t\t\t\tif ( -- binding.useCount === 0 ) {\r\n\t\r\n\t\t\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\t\t\tthis._takeBackBinding( binding );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis._takeBackAction( action );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Memory manager\r\n\t\r\n\t\t_initMemoryManager: function() {\r\n\t\r\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\r\n\t\t\tthis._nActiveActions = 0;\r\n\t\r\n\t\t\tthis._actionsByClip = {};\r\n\t\t\t// inside:\r\n\t\t\t// {\r\n\t\t\t// \t\tknownActions: Array< _Action >\t- used as prototypes\r\n\t\t\t// \t\tactionByRoot: _Action\t\t\t- lookup\r\n\t\t\t// }\r\n\t\r\n\t\r\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\r\n\t\t\tthis._nActiveBindings = 0;\r\n\t\r\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\r\n\t\r\n\t\r\n\t\t\tthis._controlInterpolants = []; // same game as above\r\n\t\t\tthis._nActiveControlInterpolants = 0;\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tthis.stats = {\r\n\t\r\n\t\t\t\tactions: {\r\n\t\t\t\t\tget total() { return scope._actions.length; },\r\n\t\t\t\t\tget inUse() { return scope._nActiveActions; }\r\n\t\t\t\t},\r\n\t\t\t\tbindings: {\r\n\t\t\t\t\tget total() { return scope._bindings.length; },\r\n\t\t\t\t\tget inUse() { return scope._nActiveBindings; }\r\n\t\t\t\t},\r\n\t\t\t\tcontrolInterpolants: {\r\n\t\t\t\t\tget total() { return scope._controlInterpolants.length; },\r\n\t\t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\r\n\t\t\t\t}\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Memory management for _Action objects\r\n\t\r\n\t\t_isActiveAction: function( action ) {\r\n\t\r\n\t\t\tvar index = action._cacheIndex;\r\n\t\t\treturn index !== null && index < this._nActiveActions;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_addInactiveAction: function( action, clipName, rootUuid ) {\r\n\t\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\t\tactionsForClip = actionsByClip[ clipName ];\r\n\t\r\n\t\t\tif ( actionsForClip === undefined ) {\r\n\t\r\n\t\t\t\tactionsForClip = {\r\n\t\r\n\t\t\t\t\tknownActions: [ action ],\r\n\t\t\t\t\tactionByRoot: {}\r\n\t\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\taction._byClipCacheIndex = 0;\r\n\t\r\n\t\t\t\tactionsByClip[ clipName ] = actionsForClip;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\r\n\t\r\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\r\n\t\t\t\tknownActions.push( action );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\taction._cacheIndex = actions.length;\r\n\t\t\tactions.push( action );\r\n\t\r\n\t\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_removeInactiveAction: function( action ) {\r\n\t\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\r\n\t\t\t\tcacheIndex = action._cacheIndex;\r\n\t\r\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\t\tactions.pop();\r\n\t\r\n\t\t\taction._cacheIndex = null;\r\n\t\r\n\t\r\n\t\t\tvar clipName = action._clip.name,\r\n\t\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\t\tactionsForClip = actionsByClip[ clipName ],\r\n\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\r\n\t\r\n\t\t\t\tlastKnownAction =\r\n\t\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\r\n\t\r\n\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\r\n\t\r\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\r\n\t\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\r\n\t\t\tknownActionsForClip.pop();\r\n\t\r\n\t\t\taction._byClipCacheIndex = null;\r\n\t\r\n\t\r\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\r\n\t\t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\r\n\t\r\n\t\t\tdelete actionByRoot[ rootUuid ];\r\n\t\r\n\t\t\tif ( knownActionsForClip.length === 0 ) {\r\n\t\r\n\t\t\t\tdelete actionsByClip[ clipName ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis._removeInactiveBindingsForAction( action );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_removeInactiveBindingsForAction: function( action ) {\r\n\t\r\n\t\t\tvar bindings = action._propertyBindings;\r\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\tvar binding = bindings[ i ];\r\n\t\r\n\t\t\t\tif ( -- binding.referenceCount === 0 ) {\r\n\t\r\n\t\t\t\t\tthis._removeInactiveBinding( binding );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_lendAction: function( action ) {\r\n\t\r\n\t\t\t// [ active actions |  inactive actions  ]\r\n\t\t\t// [  active actions >| inactive actions ]\r\n\t\t\t//                 s        a\r\n\t\t\t//                  <-swap->\r\n\t\t\t//                 a        s\r\n\t\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tprevIndex = action._cacheIndex,\r\n\t\r\n\t\t\t\tlastActiveIndex = this._nActiveActions ++,\r\n\t\r\n\t\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\r\n\t\r\n\t\t\taction._cacheIndex = lastActiveIndex;\r\n\t\t\tactions[ lastActiveIndex ] = action;\r\n\t\r\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\r\n\t\t\tactions[ prevIndex ] = firstInactiveAction;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_takeBackAction: function( action ) {\r\n\t\r\n\t\t\t// [  active actions  | inactive actions ]\r\n\t\t\t// [ active actions |< inactive actions  ]\r\n\t\t\t//        a        s\r\n\t\t\t//         <-swap->\r\n\t\t\t//        s        a\r\n\t\r\n\t\t\tvar actions = this._actions,\r\n\t\t\t\tprevIndex = action._cacheIndex,\r\n\t\r\n\t\t\t\tfirstInactiveIndex = -- this._nActiveActions,\r\n\t\r\n\t\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\r\n\t\r\n\t\t\taction._cacheIndex = firstInactiveIndex;\r\n\t\t\tactions[ firstInactiveIndex ] = action;\r\n\t\r\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\r\n\t\t\tactions[ prevIndex ] = lastActiveAction;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Memory management for PropertyMixer objects\r\n\t\r\n\t\t_addInactiveBinding: function( binding, rootUuid, trackName ) {\r\n\t\r\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\t\r\n\t\t\t\tbindings = this._bindings;\r\n\t\r\n\t\t\tif ( bindingByName === undefined ) {\r\n\t\r\n\t\t\t\tbindingByName = {};\r\n\t\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tbindingByName[ trackName ] = binding;\r\n\t\r\n\t\t\tbinding._cacheIndex = bindings.length;\r\n\t\t\tbindings.push( binding );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_removeInactiveBinding: function( binding ) {\r\n\t\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tpropBinding = binding.binding,\r\n\t\t\t\trootUuid = propBinding.rootNode.uuid,\r\n\t\t\t\ttrackName = propBinding.path,\r\n\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\t\r\n\t\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\r\n\t\t\t\tcacheIndex = binding._cacheIndex;\r\n\t\r\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\r\n\t\t\tbindings[ cacheIndex ] = lastInactiveBinding;\r\n\t\t\tbindings.pop();\r\n\t\r\n\t\t\tdelete bindingByName[ trackName ];\r\n\t\r\n\t\t\tremove_empty_map: {\r\n\t\r\n\t\t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\r\n\t\r\n\t\t\t\tdelete bindingsByRoot[ rootUuid ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_lendBinding: function( binding ) {\r\n\t\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tprevIndex = binding._cacheIndex,\r\n\t\r\n\t\t\t\tlastActiveIndex = this._nActiveBindings ++,\r\n\t\r\n\t\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\r\n\t\r\n\t\t\tbinding._cacheIndex = lastActiveIndex;\r\n\t\t\tbindings[ lastActiveIndex ] = binding;\r\n\t\r\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\r\n\t\t\tbindings[ prevIndex ] = firstInactiveBinding;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_takeBackBinding: function( binding ) {\r\n\t\r\n\t\t\tvar bindings = this._bindings,\r\n\t\t\t\tprevIndex = binding._cacheIndex,\r\n\t\r\n\t\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\r\n\t\r\n\t\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\r\n\t\r\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\r\n\t\t\tbindings[ firstInactiveIndex ] = binding;\r\n\t\r\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\r\n\t\t\tbindings[ prevIndex ] = lastActiveBinding;\r\n\t\r\n\t\t},\r\n\t\r\n\t\r\n\t\t// Memory management of Interpolants for weight and time scale\r\n\t\r\n\t\t_lendControlInterpolant: function() {\r\n\t\r\n\t\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\r\n\t\t\t\tinterpolant = interpolants[ lastActiveIndex ];\r\n\t\r\n\t\t\tif ( interpolant === undefined ) {\r\n\t\r\n\t\t\t\tinterpolant = new THREE.LinearInterpolant(\r\n\t\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\r\n\t\t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\r\n\t\r\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\r\n\t\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn interpolant;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_takeBackControlInterpolant: function( interpolant ) {\r\n\t\r\n\t\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\t\tprevIndex = interpolant.__cacheIndex,\r\n\t\r\n\t\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\r\n\t\r\n\t\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\r\n\t\r\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\r\n\t\t\tinterpolants[ firstInactiveIndex ] = interpolant;\r\n\t\r\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\r\n\t\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_controlInterpolantsResultBuffer: new Float32Array( 1 )\r\n\t\r\n\t} );\r\n\t\r\n\t\r\n\t// File:src/animation/AnimationObjectGroup.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A group of objects that receives a shared animation state.\r\n\t *\r\n\t * Usage:\r\n\t *\r\n\t * \t-\tAdd objects you would otherwise pass as 'root' to the\r\n\t * \t\tconstructor or the .clipAction method of AnimationMixer.\r\n\t *\r\n\t * \t-\tInstead pass this object as 'root'.\r\n\t *\r\n\t * \t-\tYou can also add and remove objects later when the mixer\r\n\t * \t\tis running.\r\n\t *\r\n\t * Note:\r\n\t *\r\n\t *  \tObjects of this class appear as one object to the mixer,\r\n\t *  \tso cache control of the individual objects must be done\r\n\t *  \ton the group.\r\n\t *\r\n\t * Limitation:\r\n\t *\r\n\t * \t- \tThe animated properties must be compatible among the\r\n\t * \t\tall objects in the group.\r\n\t *\r\n\t *  -\tA single property can either be controlled through a\r\n\t *  \ttarget group or directly, but not both.\r\n\t *\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.AnimationObjectGroup = function( var_args ) {\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\t// cached objects followed by the active ones\r\n\t\tthis._objects = Array.prototype.slice.call( arguments );\r\n\t\r\n\t\tthis.nCachedObjects_ = 0;\t\t\t// threshold\r\n\t\t// note: read by PropertyBinding.Composite\r\n\t\r\n\t\tvar indices = {};\r\n\t\tthis._indicesByUUID = indices;\t\t// for bookkeeping\r\n\t\r\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\tindices[ arguments[ i ].uuid ] = i;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis._paths = [];\t\t\t\t\t// inside: string\r\n\t\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\r\n\t\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\r\n\t\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\r\n\t\r\n\t\tvar scope = this;\r\n\t\r\n\t\tthis.stats = {\r\n\t\r\n\t\t\tobjects: {\r\n\t\t\t\tget total() { return scope._objects.length; },\r\n\t\t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\r\n\t\t\t},\r\n\t\r\n\t\t\tget bindingsPerObject() { return scope._bindings.length; }\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AnimationObjectGroup.prototype = {\r\n\t\r\n\t\tconstructor: THREE.AnimationObjectGroup,\r\n\t\r\n\t\tadd: function( var_args ) {\r\n\t\r\n\t\t\tvar objects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\t\tpaths = this._paths,\r\n\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = bindings.length;\r\n\t\r\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\tvar object = arguments[ i ],\r\n\t\t\t\t\tuuid = object.uuid,\r\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\t\r\n\t\t\t\tif ( index === undefined ) {\r\n\t\r\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\r\n\t\r\n\t\t\t\t\tindex = nObjects ++;\r\n\t\t\t\t\tindicesByUUID[ uuid ] = index;\r\n\t\t\t\t\tobjects.push( object );\r\n\t\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\t\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\t\r\n\t\t\t\t\t\tbindings[ j ].push(\r\n\t\t\t\t\t\t\t\tnew THREE.PropertyBinding(\r\n\t\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else if ( index < nCachedObjects ) {\r\n\t\r\n\t\t\t\t\tvar knownObject = objects[ index ];\r\n\t\r\n\t\t\t\t\t// move existing object to the ACTIVE region\r\n\t\r\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\r\n\t\r\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\t\r\n\t\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\r\n\t\t\t\t\tobjects[ firstActiveIndex ] = object;\r\n\t\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\t\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\t\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\t\r\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\t\r\n\t\t\t\t\t\tif ( binding === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\r\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\r\n\t\t\t\t\t\t\t// or may not exist\r\n\t\r\n\t\t\t\t\t\t\tbinding = new THREE.PropertyBinding(\r\n\t\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else if ( objects[ index ] !== knownObject) {\r\n\t\r\n\t\t\t\t\tconsole.error( \"Different objects with the same UUID \" +\r\n\t\t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\r\n\t\t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\r\n\t\r\n\t\t\t\t} // else the object is already where we want it to be\r\n\t\r\n\t\t\t} // for arguments\r\n\t\r\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tremove: function( var_args ) {\r\n\t\r\n\t\t\tvar objects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = bindings.length;\r\n\t\r\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\tvar object = arguments[ i ],\r\n\t\t\t\t\tuuid = object.uuid,\r\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\t\r\n\t\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\r\n\t\r\n\t\t\t\t\t// move existing object into the CACHED region\r\n\t\r\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\r\n\t\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\r\n\t\r\n\t\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = firstActiveObject;\r\n\t\r\n\t\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\r\n\t\t\t\t\tobjects[ lastCachedIndex ] = object;\r\n\t\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\t\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\t\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\r\n\t\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\t\r\n\t\t\t\t\t\tbindingsForPath[ index ] = firstActive;\r\n\t\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} // for arguments\r\n\t\r\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// remove & forget\r\n\t\tuncache: function( var_args ) {\r\n\t\r\n\t\t\tvar objects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tnBindings = bindings.length;\r\n\t\r\n\t\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\tvar object = arguments[ i ],\r\n\t\t\t\t\tuuid = object.uuid,\r\n\t\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\t\r\n\t\t\t\tif ( index !== undefined ) {\r\n\t\r\n\t\t\t\t\tdelete indicesByUUID[ uuid ];\r\n\t\r\n\t\t\t\t\tif ( index < nCachedObjects ) {\r\n\t\r\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\r\n\t\r\n\t\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\r\n\t\t\t\t\t\t\tlastIndex = -- nObjects,\r\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\t\r\n\t\t\t\t\t\t// last cached object takes this object's place\r\n\t\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\t\r\n\t\t\t\t\t\t// last object goes to the activated slot and pop\r\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\r\n\t\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\r\n\t\t\t\t\t\tobjects.pop();\r\n\t\r\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\t\r\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\t\r\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\r\n\t\r\n\t\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\t\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\r\n\t\t\t\t\t\t\tbindingsForPath.pop();\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t// object is active, just swap with the last and pop\r\n\t\r\n\t\t\t\t\t\tvar lastIndex = -- nObjects,\r\n\t\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\t\r\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\r\n\t\t\t\t\t\tobjects[ index ] = lastObject;\r\n\t\t\t\t\t\tobjects.pop();\r\n\t\r\n\t\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\t\r\n\t\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\t\r\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\r\n\t\r\n\t\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\r\n\t\t\t\t\t\t\tbindingsForPath.pop();\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} // cached or active\r\n\t\r\n\t\t\t\t} // if object is known\r\n\t\r\n\t\t\t} // for arguments\r\n\t\r\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Internal interface used by befriended PropertyBinding.Composite:\r\n\t\r\n\t\tsubscribe_: function( path, parsedPath ) {\r\n\t\t\t// returns an array of bindings for the given path that is changed\r\n\t\t\t// according to the contained objects in the group\r\n\t\r\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\t\tindex = indicesByPath[ path ],\r\n\t\t\t\tbindings = this._bindings;\r\n\t\r\n\t\t\tif ( index !== undefined ) return bindings[ index ];\r\n\t\r\n\t\t\tvar paths = this._paths,\r\n\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\tobjects = this._objects,\r\n\t\t\t\tnObjects = objects.length,\r\n\t\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\t\tbindingsForPath = new Array( nObjects );\r\n\t\r\n\t\t\tindex = bindings.length;\r\n\t\r\n\t\t\tindicesByPath[ path ] = index;\r\n\t\r\n\t\t\tpaths.push( path );\r\n\t\t\tparsedPaths.push( parsedPath );\r\n\t\t\tbindings.push( bindingsForPath );\r\n\t\r\n\t\t\tfor ( var i = nCachedObjects,\r\n\t\t\t\t\tn = objects.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\tvar object = objects[ i ];\r\n\t\r\n\t\t\t\tbindingsForPath[ i ] =\r\n\t\t\t\t\t\tnew THREE.PropertyBinding( object, path, parsedPath );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn bindingsForPath;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tunsubscribe_: function( path ) {\r\n\t\t\t// tells the group to forget about a property path and no longer\r\n\t\t\t// update the array previously obtained with 'subscribe_'\r\n\t\r\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\t\tindex = indicesByPath[ path ];\r\n\t\r\n\t\t\tif ( index !== undefined ) {\r\n\t\r\n\t\t\t\tvar paths = this._paths,\r\n\t\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\t\tbindings = this._bindings,\r\n\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\r\n\t\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\r\n\t\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\r\n\t\r\n\t\t\t\tindicesByPath[ lastBindingsPath ] = index;\r\n\t\r\n\t\t\t\tbindings[ index ] = lastBindings;\r\n\t\t\t\tbindings.pop();\r\n\t\r\n\t\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\r\n\t\t\t\tparsedPaths.pop();\r\n\t\r\n\t\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\r\n\t\t\t\tpaths.pop();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\t// File:src/animation/AnimationUtils.js\r\n\t\r\n\t/**\r\n\t * @author tschw\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t */\r\n\t\r\n\tTHREE.AnimationUtils = {\r\n\t\r\n\t\t// same as Array.prototype.slice, but also works on typed arrays\r\n\t\tarraySlice: function( array, from, to ) {\r\n\t\r\n\t\t\tif ( THREE.AnimationUtils.isTypedArray( array ) ) {\r\n\t\r\n\t\t\t\treturn new array.constructor( array.subarray( from, to ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn array.slice( from, to );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// converts an array to a specific type\r\n\t\tconvertArray: function( array, type, forceClone ) {\r\n\t\r\n\t\t\tif ( ! array || // let 'undefined' and 'null' pass\r\n\t\t\t\t\t! forceClone && array.constructor === type ) return array;\r\n\t\r\n\t\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\r\n\t\r\n\t\t\t\treturn new type( array ); // create typed array\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn Array.prototype.slice.call( array ); // create Array\r\n\t\r\n\t\t},\r\n\t\r\n\t\tisTypedArray: function( object ) {\r\n\t\r\n\t\t\treturn ArrayBuffer.isView( object ) &&\r\n\t\t\t\t\t! ( object instanceof DataView );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// returns an array by which times and values can be sorted\r\n\t\tgetKeyframeOrder: function( times ) {\r\n\t\r\n\t\t\tfunction compareTime( i, j ) {\r\n\t\r\n\t\t\t\treturn times[ i ] - times[ j ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar n = times.length;\r\n\t\t\tvar result = new Array( n );\r\n\t\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\r\n\t\r\n\t\t\tresult.sort( compareTime );\r\n\t\r\n\t\t\treturn result;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\r\n\t\tsortedArray: function( values, stride, order ) {\r\n\t\r\n\t\t\tvar nValues = values.length;\r\n\t\t\tvar result = new values.constructor( nValues );\r\n\t\r\n\t\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\r\n\t\r\n\t\t\t\tvar srcOffset = order[ i ] * stride;\r\n\t\r\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\t\r\n\t\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn result;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// function for parsing AOS keyframe formats\r\n\t\tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\r\n\t\r\n\t\t\tvar i = 1, key = jsonKeys[ 0 ];\r\n\t\r\n\t\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\r\n\t\r\n\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( key === undefined ) return; // no data\r\n\t\r\n\t\t\tvar value = key[ valuePropertyName ];\r\n\t\t\tif ( value === undefined ) return; // no data\r\n\t\r\n\t\t\tif ( Array.isArray( value ) ) {\r\n\t\r\n\t\t\t\tdo {\r\n\t\r\n\t\t\t\t\tvalue = key[ valuePropertyName ];\r\n\t\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\t\r\n\t\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\t\r\n\t\t\t\t} while ( key !== undefined );\r\n\t\r\n\t\t\t} else if ( value.toArray !== undefined ) {\r\n\t\t\t\t// ...assume THREE.Math-ish\r\n\t\r\n\t\t\t\tdo {\r\n\t\r\n\t\t\t\t\tvalue = key[ valuePropertyName ];\r\n\t\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\t\r\n\t\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\t\tvalue.toArray( values, values.length );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\t\r\n\t\t\t\t} while ( key !== undefined );\r\n\t\r\n\t\t\t} else {\r\n\t\t\t\t// otherwise push as-is\r\n\t\r\n\t\t\t\tdo {\r\n\t\r\n\t\t\t\t\tvalue = key[ valuePropertyName ];\r\n\t\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\t\r\n\t\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\t\tvalues.push( value );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\t\r\n\t\t\t\t} while ( key !== undefined );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/animation/KeyframeTrack.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A timed sequence of keyframes for a specific property.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.KeyframeTrack = function ( name, times, values, interpolation ) {\r\n\t\r\n\t\tif( name === undefined ) throw new Error( \"track name is undefined\" );\r\n\t\r\n\t\tif( times === undefined || times.length === 0 ) {\r\n\t\r\n\t\t\tthrow new Error( \"no keyframes in track named \" + name );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.name = name;\r\n\t\r\n\t\tthis.times = THREE.AnimationUtils.convertArray( times, this.TimeBufferType );\r\n\t\tthis.values = THREE.AnimationUtils.convertArray( values, this.ValueBufferType );\r\n\t\r\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\r\n\t\r\n\t\tthis.validate();\r\n\t\tthis.optimize();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.KeyframeTrack.prototype = {\r\n\t\r\n\t\tconstructor: THREE.KeyframeTrack,\r\n\t\r\n\t\tTimeBufferType: Float32Array,\r\n\t\tValueBufferType: Float32Array,\r\n\t\r\n\t\tDefaultInterpolation: THREE.InterpolateLinear,\r\n\t\r\n\t\tInterpolantFactoryMethodDiscrete: function( result ) {\r\n\t\r\n\t\t\treturn new THREE.DiscreteInterpolant(\r\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tInterpolantFactoryMethodLinear: function( result ) {\r\n\t\r\n\t\t\treturn new THREE.LinearInterpolant(\r\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tInterpolantFactoryMethodSmooth: function( result ) {\r\n\t\r\n\t\t\treturn new THREE.CubicInterpolant(\r\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetInterpolation: function( interpolation ) {\r\n\t\r\n\t\t\tvar factoryMethod = undefined;\r\n\t\r\n\t\t\tswitch ( interpolation ) {\r\n\t\r\n\t\t\t\tcase THREE.InterpolateDiscrete:\r\n\t\r\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\r\n\t\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase THREE.InterpolateLinear:\r\n\t\r\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\r\n\t\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase THREE.InterpolateSmooth:\r\n\t\r\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\r\n\t\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( factoryMethod === undefined ) {\r\n\t\r\n\t\t\t\tvar message = \"unsupported interpolation for \" +\r\n\t\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\r\n\t\r\n\t\t\t\tif ( this.createInterpolant === undefined ) {\r\n\t\r\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\r\n\t\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\r\n\t\r\n\t\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tthrow new Error( message ); // fatal, in this case\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tconsole.warn( message );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.createInterpolant = factoryMethod;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetInterpolation: function() {\r\n\t\r\n\t\t\tswitch ( this.createInterpolant ) {\r\n\t\r\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\r\n\t\r\n\t\t\t\t\treturn THREE.InterpolateDiscrete;\r\n\t\r\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\r\n\t\r\n\t\t\t\t\treturn THREE.InterpolateLinear;\r\n\t\r\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\r\n\t\r\n\t\t\t\t\treturn THREE.InterpolateSmooth;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetValueSize: function() {\r\n\t\r\n\t\t\treturn this.values.length / this.times.length;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// move all keyframes either forwards or backwards in time\r\n\t\tshift: function( timeOffset ) {\r\n\t\r\n\t\t\tif( timeOffset !== 0.0 ) {\r\n\t\r\n\t\t\t\tvar times = this.times;\r\n\t\r\n\t\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\t\ttimes[ i ] += timeOffset;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\r\n\t\tscale: function( timeScale ) {\r\n\t\r\n\t\t\tif( timeScale !== 1.0 ) {\r\n\t\r\n\t\t\t\tvar times = this.times;\r\n\t\r\n\t\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\t\ttimes[ i ] *= timeScale;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\r\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\r\n\t\ttrim: function( startTime, endTime ) {\r\n\t\r\n\t\t\tvar times = this.times,\r\n\t\t\t\tnKeys = times.length,\r\n\t\t\t\tfrom = 0,\r\n\t\t\t\tto = nKeys - 1;\r\n\t\r\n\t\t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\r\n\t\t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\r\n\t\r\n\t\t\t++ to; // inclusive -> exclusive bound\r\n\t\r\n\t\t\tif( from !== 0 || to !== nKeys ) {\r\n\t\r\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\r\n\t\t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\r\n\t\r\n\t\t\t\tvar stride = this.getValueSize();\r\n\t\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, from, to );\r\n\t\t\t\tthis.values = THREE.AnimationUtils.\r\n\t\t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\r\n\t\tvalidate: function() {\r\n\t\r\n\t\t\tvar valid = true;\r\n\t\r\n\t\t\tvar valueSize = this.getValueSize();\r\n\t\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\r\n\t\r\n\t\t\t\tconsole.error( \"invalid value size in track\", this );\r\n\t\t\t\tvalid = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar times = this.times,\r\n\t\t\t\tvalues = this.values,\r\n\t\r\n\t\t\t\tnKeys = times.length;\r\n\t\r\n\t\t\tif( nKeys === 0 ) {\r\n\t\r\n\t\t\t\tconsole.error( \"track is empty\", this );\r\n\t\t\t\tvalid = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar prevTime = null;\r\n\t\r\n\t\t\tfor( var i = 0; i !== nKeys; i ++ ) {\r\n\t\r\n\t\t\t\tvar currTime = times[ i ];\r\n\t\r\n\t\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\r\n\t\r\n\t\t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\r\n\t\t\t\t\tvalid = false;\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif( prevTime !== null && prevTime > currTime ) {\r\n\t\r\n\t\t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\r\n\t\t\t\t\tvalid = false;\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tprevTime = currTime;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( values !== undefined ) {\r\n\t\r\n\t\t\t\tif ( THREE.AnimationUtils.isTypedArray( values ) ) {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\t\t\tvar value = values[ i ];\r\n\t\r\n\t\t\t\t\t\tif ( isNaN( value ) ) {\r\n\t\r\n\t\t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\r\n\t\t\t\t\t\t\tvalid = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn valid;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// removes equivalent sequential keys as common in morph target sequences\r\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\r\n\t\toptimize: function() {\r\n\t\r\n\t\t\tvar times = this.times,\r\n\t\t\t\tvalues = this.values,\r\n\t\t\t\tstride = this.getValueSize(),\r\n\t\r\n\t\t\t\twriteIndex = 1;\r\n\t\r\n\t\t\tfor( var i = 1, n = times.length - 1; i <= n; ++ i ) {\r\n\t\r\n\t\t\t\tvar keep = false;\r\n\t\r\n\t\t\t\tvar time = times[ i ];\r\n\t\t\t\tvar timeNext = times[ i + 1 ];\r\n\t\r\n\t\t\t\t// remove adjacent keyframes scheduled at the same time\r\n\t\r\n\t\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\r\n\t\r\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\r\n\t\t\t\t\tvar offset = i * stride,\r\n\t\t\t\t\t\toffsetP = offset - stride,\r\n\t\t\t\t\t\toffsetN = offset + stride;\r\n\t\r\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\t\r\n\t\t\t\t\t\tvar value = values[ offset + j ];\r\n\t\r\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\r\n\t\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\r\n\t\r\n\t\t\t\t\t\t\tkeep = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// in-place compaction\r\n\t\r\n\t\t\t\tif ( keep ) {\r\n\t\r\n\t\t\t\t\tif ( i !== writeIndex ) {\r\n\t\r\n\t\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\r\n\t\r\n\t\t\t\t\t\tvar readOffset = i * stride,\r\n\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\r\n\t\r\n\t\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\t\r\n\t\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t++ writeIndex;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( writeIndex !== times.length ) {\r\n\t\r\n\t\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, 0, writeIndex );\r\n\t\t\t\tthis.values = THREE.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// Static methods:\r\n\t\r\n\tObject.assign( THREE.KeyframeTrack, {\r\n\t\r\n\t\t// Serialization (in static context, because of constructor invocation\r\n\t\t// and automatic invocation of .toJSON):\r\n\t\r\n\t\tparse: function( json ) {\r\n\t\r\n\t\t\tif( json.type === undefined ) {\r\n\t\r\n\t\t\t\tthrow new Error( \"track type undefined, can not parse\" );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName( json.type );\r\n\t\r\n\t\t\tif ( json.times === undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( \"legacy JSON format detected, converting\" );\r\n\t\r\n\t\t\t\tvar times = [], values = [];\r\n\t\r\n\t\t\t\tTHREE.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\r\n\t\r\n\t\t\t\tjson.times = times;\r\n\t\t\t\tjson.values = values;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// derived classes can define a static parse method\r\n\t\t\tif ( trackType.parse !== undefined ) {\r\n\t\r\n\t\t\t\treturn trackType.parse( json );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// by default, we asssume a constructor compatible with the base\r\n\t\t\t\treturn new trackType(\r\n\t\t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoJSON: function( track ) {\r\n\t\r\n\t\t\tvar trackType = track.constructor;\r\n\t\r\n\t\t\tvar json;\r\n\t\r\n\t\t\t// derived classes can define a static toJSON method\r\n\t\t\tif ( trackType.toJSON !== undefined ) {\r\n\t\r\n\t\t\t\tjson = trackType.toJSON( track );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// by default, we assume the data can be serialized as-is\r\n\t\t\t\tjson = {\r\n\t\r\n\t\t\t\t\t'name': track.name,\r\n\t\t\t\t\t'times': THREE.AnimationUtils.convertArray( track.times, Array ),\r\n\t\t\t\t\t'values': THREE.AnimationUtils.convertArray( track.values, Array )\r\n\t\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tvar interpolation = track.getInterpolation();\r\n\t\r\n\t\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\r\n\t\r\n\t\t\t\t\tjson.interpolation = interpolation;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tjson.type = track.ValueTypeName; // mandatory\r\n\t\r\n\t\t\treturn json;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_getTrackTypeForValueTypeName: function( typeName ) {\r\n\t\r\n\t\t\tswitch( typeName.toLowerCase() ) {\r\n\t\r\n\t\t\t\tcase \"scalar\":\r\n\t\t\t\tcase \"double\":\r\n\t\t\t\tcase \"float\":\r\n\t\t\t\tcase \"number\":\r\n\t\t\t\tcase \"integer\":\r\n\t\r\n\t\t\t\t\treturn THREE.NumberKeyframeTrack;\r\n\t\r\n\t\t\t\tcase \"vector\":\r\n\t\t\t\tcase \"vector2\":\r\n\t\t\t\tcase \"vector3\":\r\n\t\t\t\tcase \"vector4\":\r\n\t\r\n\t\t\t\t\treturn THREE.VectorKeyframeTrack;\r\n\t\r\n\t\t\t\tcase \"color\":\r\n\t\r\n\t\t\t\t\treturn THREE.ColorKeyframeTrack;\r\n\t\r\n\t\t\t\tcase \"quaternion\":\r\n\t\r\n\t\t\t\t\treturn THREE.QuaternionKeyframeTrack;\r\n\t\r\n\t\t\t\tcase \"bool\":\r\n\t\t\t\tcase \"boolean\":\r\n\t\r\n\t\t\t\t\treturn THREE.BooleanKeyframeTrack;\r\n\t\r\n\t\t\t\tcase \"string\":\r\n\t\r\n\t\t\t\t\treturn THREE.StringKeyframeTrack;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\tthrow new Error( \"Unsupported typeName: \" + typeName );\r\n\t\r\n\t\t}\r\n\t\r\n\t} );\r\n\t\r\n\t// File:src/animation/PropertyBinding.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A reference to a real property in the scene graph.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.PropertyBinding = function ( rootNode, path, parsedPath ) {\r\n\t\r\n\t\tthis.path = path;\r\n\t\tthis.parsedPath = parsedPath ||\r\n\t\t\t\tTHREE.PropertyBinding.parseTrackName( path );\r\n\t\r\n\t\tthis.node = THREE.PropertyBinding.findNode(\r\n\t\t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\r\n\t\r\n\t\tthis.rootNode = rootNode;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PropertyBinding.prototype = {\r\n\t\r\n\t\tconstructor: THREE.PropertyBinding,\r\n\t\r\n\t\tgetValue: function getValue_unbound( targetArray, offset ) {\r\n\t\r\n\t\t\tthis.bind();\r\n\t\t\tthis.getValue( targetArray, offset );\r\n\t\r\n\t\t\t// Note: This class uses a State pattern on a per-method basis:\r\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\r\n\t\t\t// prototype version of these methods with one that represents\r\n\t\t\t// the bound state. When the property is not found, the methods\r\n\t\t\t// become no-ops.\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetValue: function getValue_unbound( sourceArray, offset ) {\r\n\t\r\n\t\t\tthis.bind();\r\n\t\t\tthis.setValue( sourceArray, offset );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// create getter / setter pair for a property in the scene graph\r\n\t\tbind: function() {\r\n\t\r\n\t\t\tvar targetObject = this.node,\r\n\t\t\t\tparsedPath = this.parsedPath,\r\n\t\r\n\t\t\t\tobjectName = parsedPath.objectName,\r\n\t\t\t\tpropertyName = parsedPath.propertyName,\r\n\t\t\t\tpropertyIndex = parsedPath.propertyIndex;\r\n\t\r\n\t\t\tif ( ! targetObject ) {\r\n\t\r\n\t\t\t\ttargetObject = THREE.PropertyBinding.findNode(\r\n\t\t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\r\n\t\r\n\t\t\t\tthis.node = targetObject;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// set fail state so we can just 'return' on error\r\n\t\t\tthis.getValue = this._getValue_unavailable;\r\n\t\t\tthis.setValue = this._setValue_unavailable;\r\n\t\r\n\t \t\t// ensure there is a value node\r\n\t\t\tif ( ! targetObject ) {\r\n\t\r\n\t\t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif( objectName ) {\r\n\t\r\n\t\t\t\tvar objectIndex = parsedPath.objectIndex;\r\n\t\r\n\t\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\r\n\t\t\t\tswitch ( objectName ) {\r\n\t\r\n\t\t\t\t\tcase 'materials':\r\n\t\r\n\t\t\t\t\t\tif( ! targetObject.material ) {\r\n\t\r\n\t\t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\r\n\t\t\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif( ! targetObject.material.materials ) {\r\n\t\r\n\t\t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\r\n\t\t\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'bones':\r\n\t\r\n\t\t\t\t\t\tif( ! targetObject.skeleton ) {\r\n\t\r\n\t\t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\r\n\t\t\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\r\n\t\t\t\t\t\t// and convert the integer string to a true integer.\r\n\t\r\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\r\n\t\r\n\t\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tif ( targetObject[i].name === objectIndex ) {\r\n\t\r\n\t\t\t\t\t\t\t\tobjectIndex = i;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tdefault:\r\n\t\r\n\t\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\r\n\t\t\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\ttargetObject = targetObject[ objectName ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\tif ( objectIndex !== undefined ) {\r\n\t\r\n\t\t\t\t\tif( targetObject[ objectIndex ] === undefined ) {\r\n\t\r\n\t\t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\r\n\t\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\ttargetObject = targetObject[ objectIndex ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// resolve property\r\n\t\t\tvar nodeProperty = targetObject[ propertyName ];\r\n\t\r\n\t\t\tif ( ! nodeProperty ) {\r\n\t\r\n\t\t\t\tvar nodeName = parsedPath.nodeName;\r\n\t\r\n\t\t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\r\n\t\t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// determine versioning scheme\r\n\t\t\tvar versioning = this.Versioning.None;\r\n\t\r\n\t\t\tif ( targetObject.needsUpdate !== undefined ) { // material\r\n\t\r\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\r\n\t\t\t\tthis.targetObject = targetObject;\r\n\t\r\n\t\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\r\n\t\r\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\r\n\t\t\t\tthis.targetObject = targetObject;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// determine how the property gets bound\r\n\t\t\tvar bindingType = this.BindingType.Direct;\r\n\t\r\n\t\t\tif ( propertyIndex !== undefined ) {\r\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\r\n\t\r\n\t\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\r\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\r\n\t\r\n\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\tif ( ! targetObject.geometry ) {\r\n\t\r\n\t\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\r\n\t\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\r\n\t\r\n\t\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\r\n\t\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tif ( targetObject.geometry.morphTargets[i].name === propertyIndex ) {\r\n\t\r\n\t\t\t\t\t\t\tpropertyIndex = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\r\n\t\r\n\t\t\t\tthis.resolvedProperty = nodeProperty;\r\n\t\t\t\tthis.propertyIndex = propertyIndex;\r\n\t\r\n\t\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\r\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\r\n\t\r\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\r\n\t\r\n\t\t\t\tthis.resolvedProperty = nodeProperty;\r\n\t\r\n\t\t\t} else if ( nodeProperty.length !== undefined ) {\r\n\t\r\n\t\t\t\tbindingType = this.BindingType.EntireArray;\r\n\t\r\n\t\t\t\tthis.resolvedProperty = nodeProperty;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.propertyName = propertyName;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// select getter / setter\r\n\t\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\r\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tunbind: function() {\r\n\t\r\n\t\t\tthis.node = null;\r\n\t\r\n\t\t\t// back to the prototype version of getValue / setValue\r\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\r\n\t\t\tthis.getValue = this._getValue_unbound;\r\n\t\t\tthis.setValue = this._setValue_unbound;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tObject.assign( THREE.PropertyBinding.prototype, { // prototype, continued\r\n\t\r\n\t\t// these are used to \"bind\" a nonexistent property\r\n\t\t_getValue_unavailable: function() {},\r\n\t\t_setValue_unavailable: function() {},\r\n\t\r\n\t\t// initial state of these methods that calls 'bind'\r\n\t\t_getValue_unbound: THREE.PropertyBinding.prototype.getValue,\r\n\t\t_setValue_unbound: THREE.PropertyBinding.prototype.setValue,\r\n\t\r\n\t\tBindingType: {\r\n\t\t\tDirect: 0,\r\n\t\t\tEntireArray: 1,\r\n\t\t\tArrayElement: 2,\r\n\t\t\tHasFromToArray: 3\r\n\t\t},\r\n\t\r\n\t\tVersioning: {\r\n\t\t\tNone: 0,\r\n\t\t\tNeedsUpdate: 1,\r\n\t\t\tMatrixWorldNeedsUpdate: 2\r\n\t\t},\r\n\t\r\n\t\tGetterByBindingType: [\r\n\t\r\n\t\t\tfunction getValue_direct( buffer, offset ) {\r\n\t\r\n\t\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tfunction getValue_array( buffer, offset ) {\r\n\t\r\n\t\t\t\tvar source = this.resolvedProperty;\r\n\t\r\n\t\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\t\tbuffer[ offset ++ ] = source[ i ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tfunction getValue_arrayElement( buffer, offset ) {\r\n\t\r\n\t\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tfunction getValue_toArray( buffer, offset ) {\r\n\t\r\n\t\t\t\tthis.resolvedProperty.toArray( buffer, offset );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t],\r\n\t\r\n\t\tSetterByBindingTypeAndVersioning: [\r\n\t\r\n\t\t\t[\r\n\t\t\t\t// Direct\r\n\t\r\n\t\t\t\tfunction setValue_direct( buffer, offset ) {\r\n\t\r\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\r\n\t\r\n\t\t\t\t},\r\n\t\r\n\t\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\r\n\t\r\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\t\r\n\t\t\t\t},\r\n\t\r\n\t\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\t\r\n\t\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t], [\r\n\t\r\n\t\t\t\t// EntireArray\r\n\t\r\n\t\t\t\tfunction setValue_array( buffer, offset ) {\r\n\t\r\n\t\t\t\t\tvar dest = this.resolvedProperty;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t},\r\n\t\r\n\t\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\r\n\t\r\n\t\t\t\t\tvar dest = this.resolvedProperty;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\t\r\n\t\t\t\t},\r\n\t\r\n\t\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\t\r\n\t\t\t\t\tvar dest = this.resolvedProperty;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t], [\r\n\t\r\n\t\t\t\t// ArrayElement\r\n\t\r\n\t\t\t\tfunction setValue_arrayElement( buffer, offset ) {\r\n\t\r\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\r\n\t\t\t\t},\r\n\t\r\n\t\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\r\n\t\r\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\t\r\n\t\t\t\t},\r\n\t\r\n\t\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\t\r\n\t\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t], [\r\n\t\r\n\t\t\t\t// HasToFromArray\r\n\t\r\n\t\t\t\tfunction setValue_fromArray( buffer, offset ) {\r\n\t\r\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\r\n\t\t\t\t},\r\n\t\r\n\t\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\r\n\t\r\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\t\r\n\t\t\t\t},\r\n\t\r\n\t\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\t\r\n\t\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t]\r\n\t\r\n\t\t]\r\n\t\r\n\t} );\r\n\t\r\n\tTHREE.PropertyBinding.Composite =\r\n\t\t\tfunction( targetGroup, path, optionalParsedPath ) {\r\n\t\r\n\t\tvar parsedPath = optionalParsedPath ||\r\n\t\t\t\tTHREE.PropertyBinding.parseTrackName( path );\r\n\t\r\n\t\tthis._targetGroup = targetGroup;\r\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PropertyBinding.Composite.prototype = {\r\n\t\r\n\t\tconstructor: THREE.PropertyBinding.Composite,\r\n\t\r\n\t\tgetValue: function( array, offset ) {\r\n\t\r\n\t\t\tthis.bind(); // bind all binding\r\n\t\r\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\r\n\t\t\t\tbinding = this._bindings[ firstValidIndex ];\r\n\t\r\n\t\t\t// and only call .getValue on the first\r\n\t\t\tif ( binding !== undefined ) binding.getValue( array, offset );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetValue: function( array, offset ) {\r\n\t\r\n\t\t\tvar bindings = this._bindings;\r\n\t\r\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\r\n\t\t\t\t\tn = bindings.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\tbindings[ i ].setValue( array, offset );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tbind: function() {\r\n\t\r\n\t\t\tvar bindings = this._bindings;\r\n\t\r\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\r\n\t\t\t\t\tn = bindings.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\tbindings[ i ].bind();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\tunbind: function() {\r\n\t\r\n\t\t\tvar bindings = this._bindings;\r\n\t\r\n\t\t\tfor ( var i = this._targetGroup.nCachedObjects_,\r\n\t\t\t\t\tn = bindings.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\tbindings[ i ].unbind();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PropertyBinding.create = function( root, path, parsedPath ) {\r\n\t\r\n\t\tif ( ! ( root instanceof THREE.AnimationObjectGroup ) ) {\r\n\t\r\n\t\t\treturn new THREE.PropertyBinding( root, path, parsedPath );\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\treturn new THREE.PropertyBinding.Composite( root, path, parsedPath );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PropertyBinding.parseTrackName = function( trackName ) {\r\n\t\r\n\t\t// matches strings in the form of:\r\n\t\t//    nodeName.property\r\n\t\t//    nodeName.property[accessor]\r\n\t\t//    nodeName.material.property[accessor]\r\n\t\t//    uuid.property[accessor]\r\n\t\t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\r\n\t\t//    parentName/nodeName.property\r\n\t\t//    parentName/parentName/nodeName.property[index]\r\n\t\t//\t  .bone[Armature.DEF_cog].position\r\n\t\t// created and tested via https://regex101.com/#javascript\r\n\t\r\n\t\tvar re = /^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_.:\\- ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/;\r\n\t\tvar matches = re.exec(trackName);\r\n\t\r\n\t\tif( ! matches ) {\r\n\t\t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\r\n\t\t}\r\n\t\r\n\t    if (matches.index === re.lastIndex) {\r\n\t        re.lastIndex++;\r\n\t    }\r\n\t\r\n\t\tvar results = {\r\n\t\t\t// directoryName: matches[1], // (tschw) currently unused\r\n\t\t\tnodeName: matches[3], \t// allowed to be null, specified root node.\r\n\t\t\tobjectName: matches[5],\r\n\t\t\tobjectIndex: matches[7],\r\n\t\t\tpropertyName: matches[9],\r\n\t\t\tpropertyIndex: matches[11]\t// allowed to be null, specifies that the whole property is set.\r\n\t\t};\r\n\t\r\n\t\tif( results.propertyName === null || results.propertyName.length === 0 ) {\r\n\t\t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\r\n\t\t}\r\n\t\r\n\t\treturn results;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PropertyBinding.findNode = function( root, nodeName ) {\r\n\t\r\n\t\tif( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\r\n\t\r\n\t\t\treturn root;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// search into skeleton bones.\r\n\t\tif( root.skeleton ) {\r\n\t\r\n\t\t\tvar searchSkeleton = function( skeleton ) {\r\n\t\r\n\t\t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar bone = skeleton.bones[i];\r\n\t\r\n\t\t\t\t\tif( bone.name === nodeName ) {\r\n\t\r\n\t\t\t\t\t\treturn bone;\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn null;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\tvar bone = searchSkeleton( root.skeleton );\r\n\t\r\n\t\t\tif( bone ) {\r\n\t\r\n\t\t\t\treturn bone;\r\n\t\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\t\t// search into node subtree.\r\n\t\tif( root.children ) {\r\n\t\r\n\t\t\tvar searchNodeSubtree = function( children ) {\r\n\t\r\n\t\t\t\tfor( var i = 0; i < children.length; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar childNode = children[i];\r\n\t\r\n\t\t\t\t\tif( childNode.name === nodeName || childNode.uuid === nodeName ) {\r\n\t\r\n\t\t\t\t\t\treturn childNode;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tvar result = searchNodeSubtree( childNode.children );\r\n\t\r\n\t\t\t\t\tif( result ) return result;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn null;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\tvar subTreeNode = searchNodeSubtree( root.children );\r\n\t\r\n\t\t\tif( subTreeNode ) {\r\n\t\r\n\t\t\t\treturn subTreeNode;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn null;\r\n\t\r\n\t}\r\n\t\r\n\t// File:src/animation/PropertyMixer.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * Buffered scene graph property that allows weighted accumulation.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.PropertyMixer = function ( binding, typeName, valueSize ) {\r\n\t\r\n\t\tthis.binding = binding;\r\n\t\tthis.valueSize = valueSize;\r\n\t\r\n\t\tvar bufferType = Float64Array,\r\n\t\t\tmixFunction;\r\n\t\r\n\t\tswitch ( typeName ) {\r\n\t\r\n\t\t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\r\n\t\r\n\t\t\tcase 'string':\r\n\t\t\tcase 'bool':\r\n\t\r\n\t\t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\r\n\t\r\n\t\t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.buffer = new bufferType( valueSize * 4 );\r\n\t\t// layout: [ incoming | accu0 | accu1 | orig ]\r\n\t\t//\r\n\t\t// interpolators can use .buffer as their .result\r\n\t\t// the data then goes to 'incoming'\r\n\t\t//\r\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\r\n\t\t// the cumulative result and are compared to detect\r\n\t\t// changes\r\n\t\t//\r\n\t\t// 'orig' stores the original state of the property\r\n\t\r\n\t\tthis._mixBufferRegion = mixFunction;\r\n\t\r\n\t\tthis.cumulativeWeight = 0;\r\n\t\r\n\t\tthis.useCount = 0;\r\n\t\tthis.referenceCount = 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PropertyMixer.prototype = {\r\n\t\r\n\t\tconstructor: THREE.PropertyMixer,\r\n\t\r\n\t\t// accumulate data in the 'incoming' region into 'accu<i>'\r\n\t\taccumulate: function( accuIndex, weight ) {\r\n\t\r\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\r\n\t\t\t// the weight and shouldn't have made the call in the first place\r\n\t\r\n\t\t\tvar buffer = this.buffer,\r\n\t\t\t\tstride = this.valueSize,\r\n\t\t\t\toffset = accuIndex * stride + stride,\r\n\t\r\n\t\t\t\tcurrentWeight = this.cumulativeWeight;\r\n\t\r\n\t\t\tif ( currentWeight === 0 ) {\r\n\t\r\n\t\t\t\t// accuN := incoming * weight\r\n\t\r\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\t\r\n\t\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tcurrentWeight = weight;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// accuN := accuN + incoming * weight\r\n\t\r\n\t\t\t\tcurrentWeight += weight;\r\n\t\t\t\tvar mix = weight / currentWeight;\r\n\t\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.cumulativeWeight = currentWeight;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// apply the state of 'accu<i>' to the binding when accus differ\r\n\t\tapply: function( accuIndex ) {\r\n\t\r\n\t\t\tvar stride = this.valueSize,\r\n\t\t\t\tbuffer = this.buffer,\r\n\t\t\t\toffset = accuIndex * stride + stride,\r\n\t\r\n\t\t\t\tweight = this.cumulativeWeight,\r\n\t\r\n\t\t\t\tbinding = this.binding;\r\n\t\r\n\t\t\tthis.cumulativeWeight = 0;\r\n\t\r\n\t\t\tif ( weight < 1 ) {\r\n\t\r\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\r\n\t\r\n\t\t\t\tvar originalValueOffset = stride * 3;\r\n\t\r\n\t\t\t\tthis._mixBufferRegion(\r\n\t\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\r\n\t\r\n\t\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\r\n\t\r\n\t\t\t\t\t// value has changed -> update scene graph\r\n\t\r\n\t\t\t\t\tbinding.setValue( buffer, offset );\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// remember the state of the bound property and copy it to both accus\r\n\t\tsaveOriginalState: function() {\r\n\t\r\n\t\t\tvar binding = this.binding;\r\n\t\r\n\t\t\tvar buffer = this.buffer,\r\n\t\t\t\tstride = this.valueSize,\r\n\t\r\n\t\t\t\toriginalValueOffset = stride * 3;\r\n\t\r\n\t\t\tbinding.getValue( buffer, originalValueOffset );\r\n\t\r\n\t\t\t// accu[0..1] := orig -- initially detect changes against the original\r\n\t\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\r\n\t\r\n\t\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.cumulativeWeight = 0;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// apply the state previously taken via 'saveOriginalState' to the binding\r\n\t\trestoreOriginalState: function() {\r\n\t\r\n\t\t\tvar originalValueOffset = this.valueSize * 3;\r\n\t\t\tthis.binding.setValue( this.buffer, originalValueOffset );\r\n\t\r\n\t\t},\r\n\t\r\n\t\r\n\t\t// mix functions\r\n\t\r\n\t\t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\r\n\t\r\n\t\t\tif ( t >= 0.5 ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\t\r\n\t\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\r\n\t\r\n\t\t\tTHREE.Quaternion.slerpFlat( buffer, dstOffset,\r\n\t\t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\r\n\t\r\n\t\t\tvar s = 1 - t;\r\n\t\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\t\r\n\t\t\t\tvar j = dstOffset + i;\r\n\t\r\n\t\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/animation/tracks/BooleanKeyframeTrack.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A Track of Boolean keyframe values.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.BooleanKeyframeTrack = function ( name, times, values ) {\r\n\t\r\n\t\tTHREE.KeyframeTrack.call( this, name, times, values );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BooleanKeyframeTrack.prototype =\r\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\t\r\n\t\tconstructor: THREE.BooleanKeyframeTrack,\r\n\t\r\n\t\tValueTypeName: 'bool',\r\n\t\tValueBufferType: Array,\r\n\t\r\n\t\tDefaultInterpolation: THREE.IntepolateDiscrete,\r\n\t\r\n\t\tInterpolantFactoryMethodLinear: undefined,\r\n\t\tInterpolantFactoryMethodSmooth: undefined\r\n\t\r\n\t\t// Note: Actually this track could have a optimized / compressed\r\n\t\t// representation of a single value and a custom interpolant that\r\n\t\t// computes \"firstValue ^ isOdd( index )\".\r\n\t\r\n\t} );\r\n\t\r\n\t// File:src/animation/tracks/NumberKeyframeTrack.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A Track of numeric keyframe values.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.NumberKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\t\r\n\t\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.NumberKeyframeTrack.prototype =\r\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\t\r\n\t\tconstructor: THREE.NumberKeyframeTrack,\r\n\t\r\n\t\tValueTypeName: 'number',\r\n\t\r\n\t\t// ValueBufferType is inherited\r\n\t\r\n\t\t// DefaultInterpolation is inherited\r\n\t\r\n\t} );\r\n\t\r\n\t// File:src/animation/tracks/QuaternionKeyframeTrack.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A Track of quaternion keyframe values.\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.QuaternionKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\t\r\n\t\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.QuaternionKeyframeTrack.prototype =\r\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\t\r\n\t\tconstructor: THREE.QuaternionKeyframeTrack,\r\n\t\r\n\t\tValueTypeName: 'quaternion',\r\n\t\r\n\t\t// ValueBufferType is inherited\r\n\t\r\n\t\tDefaultInterpolation: THREE.InterpolateLinear,\r\n\t\r\n\t\tInterpolantFactoryMethodLinear: function( result ) {\r\n\t\r\n\t\t\treturn new THREE.QuaternionLinearInterpolant(\r\n\t\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\r\n\t\r\n\t} );\r\n\t\r\n\t// File:src/animation/tracks/StringKeyframeTrack.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A Track that interpolates Strings\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.StringKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\t\r\n\t\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.StringKeyframeTrack.prototype =\r\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\t\r\n\t\tconstructor: THREE.StringKeyframeTrack,\r\n\t\r\n\t\tValueTypeName: 'string',\r\n\t\tValueBufferType: Array,\r\n\t\r\n\t\tDefaultInterpolation: THREE.IntepolateDiscrete,\r\n\t\r\n\t\tInterpolantFactoryMethodLinear: undefined,\r\n\t\r\n\t\tInterpolantFactoryMethodSmooth: undefined\r\n\t\r\n\t} );\r\n\t\r\n\t// File:src/animation/tracks/VectorKeyframeTrack.js\r\n\t\r\n\t/**\r\n\t *\r\n\t * A Track of vectored keyframe values.\r\n\t *\r\n\t *\r\n\t * @author Ben Houston / http://clara.io/\r\n\t * @author David Sarno / http://lighthaus.us/\r\n\t * @author tschw\r\n\t */\r\n\t\r\n\tTHREE.VectorKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\t\r\n\t\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.VectorKeyframeTrack.prototype =\r\n\t\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\t\r\n\t\tconstructor: THREE.VectorKeyframeTrack,\r\n\t\r\n\t\tValueTypeName: 'vector'\r\n\t\r\n\t\t// ValueBufferType is inherited\r\n\t\r\n\t\t// DefaultInterpolation is inherited\r\n\t\r\n\t} );\r\n\t\r\n\t// File:src/audio/Audio.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Audio = function ( listener ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Audio';\r\n\t\r\n\t\tthis.context = listener.context;\r\n\t\tthis.source = this.context.createBufferSource();\r\n\t\tthis.source.onended = this.onEnded.bind( this );\r\n\t\r\n\t\tthis.gain = this.context.createGain();\r\n\t\tthis.gain.connect( listener.getInput() );\r\n\t\r\n\t\tthis.autoplay = false;\r\n\t\r\n\t\tthis.startTime = 0;\r\n\t\tthis.playbackRate = 1;\r\n\t\tthis.isPlaying = false;\r\n\t\tthis.hasPlaybackControl = true;\r\n\t\tthis.sourceType = 'empty';\r\n\t\r\n\t\tthis.filter = null;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Audio.prototype.constructor = THREE.Audio;\r\n\t\r\n\tTHREE.Audio.prototype.getOutput = function () {\r\n\t\r\n\t\treturn this.gain;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.load = function ( file ) {\r\n\t\r\n\t\tvar buffer = new THREE.AudioBuffer( this.context );\r\n\t\tbuffer.load( file );\r\n\t\r\n\t\tthis.setBuffer( buffer );\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.setNodeSource = function ( audioNode ) {\r\n\t\r\n\t\tthis.hasPlaybackControl = false;\r\n\t\tthis.sourceType = 'audioNode';\r\n\t\tthis.source = audioNode;\r\n\t\tthis.connect();\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.setBuffer = function ( audioBuffer ) {\r\n\t\r\n\t\tvar scope = this;\r\n\t\r\n\t\taudioBuffer.onReady( function( buffer ) {\r\n\t\r\n\t\t\tscope.source.buffer = buffer;\r\n\t\t\tscope.sourceType = 'buffer';\r\n\t\t\tif ( scope.autoplay ) scope.play();\r\n\t\r\n\t\t} );\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.play = function () {\r\n\t\r\n\t\tif ( this.isPlaying === true ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\r\n\t\t\treturn;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar source = this.context.createBufferSource();\r\n\t\r\n\t\tsource.buffer = this.source.buffer;\r\n\t\tsource.loop = this.source.loop;\r\n\t\tsource.onended = this.source.onended;\r\n\t\tsource.start( 0, this.startTime );\r\n\t\tsource.playbackRate.value = this.playbackRate;\r\n\t\r\n\t\tthis.isPlaying = true;\r\n\t\r\n\t\tthis.source = source;\r\n\t\r\n\t\tthis.connect();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.pause = function () {\r\n\t\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.source.stop();\r\n\t\tthis.startTime = this.context.currentTime;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.stop = function () {\r\n\t\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.source.stop();\r\n\t\tthis.startTime = 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.connect = function () {\r\n\t\r\n\t\tif ( this.filter !== null ) {\r\n\t\r\n\t\t\tthis.source.connect( this.filter );\r\n\t\t\tthis.filter.connect( this.getOutput() );\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.source.connect( this.getOutput() );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.disconnect = function () {\r\n\t\r\n\t\tif ( this.filter !== null ) {\r\n\t\r\n\t\t\tthis.source.disconnect( this.filter );\r\n\t\t\tthis.filter.disconnect( this.getOutput() );\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.source.disconnect( this.getOutput() );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.getFilter = function () {\r\n\t\r\n\t\treturn this.filter;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.setFilter = function ( value ) {\r\n\t\r\n\t\tif ( value === undefined ) value = null;\r\n\t\r\n\t\tif ( this.isPlaying === true ) {\r\n\t\r\n\t\t\tthis.disconnect();\r\n\t\t\tthis.filter = value;\r\n\t\t\tthis.connect();\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.filter = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.setPlaybackRate = function ( value ) {\r\n\t\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.playbackRate = value;\r\n\t\r\n\t\tif ( this.isPlaying === true ) {\r\n\t\r\n\t\t\tthis.source.playbackRate.value = this.playbackRate;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.getPlaybackRate = function () {\r\n\t\r\n\t\treturn this.playbackRate;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.onEnded = function() {\r\n\t\r\n\t\tthis.isPlaying = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.setLoop = function ( value ) {\r\n\t\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.source.loop = value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.getLoop = function () {\r\n\t\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn false;\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn this.source.loop;\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.Audio.prototype.setVolume = function ( value ) {\r\n\t\r\n\t\tthis.gain.gain.value = value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Audio.prototype.getVolume = function () {\r\n\t\r\n\t\treturn this.gain.gain.value;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/audio/AudioAnalyser.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.AudioAnalyser = function ( audio, fftSize ) {\r\n\t\r\n\t\tthis.analyser = audio.context.createAnalyser();\r\n\t\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\r\n\t\r\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\r\n\t\r\n\t\taudio.getOutput().connect( this.analyser );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AudioAnalyser.prototype = {\r\n\t\r\n\t\tconstructor: THREE.AudioAnalyser,\r\n\t\r\n\t\tgetData: function () {\r\n\t\r\n\t\t\tthis.analyser.getByteFrequencyData( this.data );\r\n\t\t\treturn this.data;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/audio/AudioBuffer.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.AudioBuffer = function ( context ) {\r\n\t\r\n\t\tthis.context = context;\r\n\t\tthis.ready = false;\r\n\t\tthis.readyCallbacks = [];\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AudioBuffer.prototype.load = function ( file ) {\r\n\t\r\n\t\tvar scope = this;\r\n\t\r\n\t\tvar request = new XMLHttpRequest();\r\n\t\trequest.open( 'GET', file, true );\r\n\t\trequest.responseType = 'arraybuffer';\r\n\t\trequest.onload = function ( e ) {\r\n\t\r\n\t\t\tscope.context.decodeAudioData( this.response, function ( buffer ) {\r\n\t\r\n\t\t\t\tscope.buffer = buffer;\r\n\t\t\t\tscope.ready = true;\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < scope.readyCallbacks.length; i ++ ) {\r\n\t\r\n\t\t\t\t\tscope.readyCallbacks[ i ]( scope.buffer );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tscope.readyCallbacks = [];\r\n\t\r\n\t\t\t} );\r\n\t\r\n\t\t};\r\n\t\trequest.send();\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AudioBuffer.prototype.onReady = function ( callback ) {\r\n\t\r\n\t\tif ( this.ready ) {\r\n\t\r\n\t\t\tcallback( this.buffer );\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.readyCallbacks.push( callback );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/audio/PositionalAudio.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.PositionalAudio = function ( listener ) {\r\n\t\r\n\t\tTHREE.Audio.call( this, listener );\r\n\t\r\n\t\tthis.panner = this.context.createPanner();\r\n\t\tthis.panner.connect( this.gain );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PositionalAudio.prototype = Object.create( THREE.Audio.prototype );\r\n\tTHREE.PositionalAudio.prototype.constructor = THREE.PositionalAudio;\r\n\t\r\n\tTHREE.PositionalAudio.prototype.getOutput = function () {\r\n\t\r\n\t\treturn this.panner;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PositionalAudio.prototype.setRefDistance = function ( value ) {\r\n\t\r\n\t\tthis.panner.refDistance = value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PositionalAudio.prototype.getRefDistance = function () {\r\n\t\r\n\t\treturn this.panner.refDistance;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PositionalAudio.prototype.setRolloffFactor = function ( value ) {\r\n\t\r\n\t\tthis.panner.rolloffFactor = value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PositionalAudio.prototype.getRolloffFactor = function () {\r\n\t\r\n\t\treturn this.panner.rolloffFactor;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PositionalAudio.prototype.setDistanceModel = function ( value ) {\r\n\t\r\n\t\tthis.panner.distanceModel = value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PositionalAudio.prototype.getDistanceModel = function () {\r\n\t\r\n\t\treturn this.panner.distanceModel;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PositionalAudio.prototype.setMaxDistance = function ( value ) {\r\n\t\r\n\t\tthis.panner.maxDistance = value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PositionalAudio.prototype.getMaxDistance = function () {\r\n\t\r\n\t\treturn this.panner.maxDistance;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PositionalAudio.prototype.updateMatrixWorld = ( function () {\r\n\t\r\n\t\tvar position = new THREE.Vector3();\r\n\t\r\n\t\treturn function updateMatrixWorld( force ) {\r\n\t\r\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\r\n\t\r\n\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\r\n\t\r\n\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\r\n\t\r\n\t\t};\r\n\t\r\n\t} )();\r\n\t\r\n\t// File:src/audio/AudioListener.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.AudioListener = function () {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'AudioListener';\r\n\t\r\n\t\tthis.context = new ( window.AudioContext || window.webkitAudioContext )();\r\n\t\r\n\t\tthis.gain = this.context.createGain();\r\n\t\tthis.gain.connect( this.context.destination );\r\n\t\r\n\t\tthis.filter = null;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.AudioListener.prototype.constructor = THREE.AudioListener;\r\n\t\r\n\tTHREE.AudioListener.prototype.getInput = function () {\r\n\t\r\n\t\treturn this.gain;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AudioListener.prototype.removeFilter = function ( ) {\r\n\t\r\n\t\tif ( this.filter !== null ) {\r\n\t\r\n\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\tthis.filter.disconnect( this.context.destination );\r\n\t\t\tthis.gain.connect( this.context.destination );\r\n\t\t\tthis.filter = null;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AudioListener.prototype.setFilter = function ( value ) {\r\n\t\r\n\t\tif ( this.filter !== null ) {\r\n\t\r\n\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\tthis.filter.disconnect( this.context.destination );\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.gain.disconnect( this.context.destination );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.filter = value;\r\n\t\tthis.gain.connect( this.filter );\r\n\t\tthis.filter.connect( this.context.destination );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AudioListener.prototype.getFilter = function () {\r\n\t\r\n\t\treturn this.filter;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AudioListener.prototype.setMasterVolume = function ( value ) {\r\n\t\r\n\t\tthis.gain.gain.value = value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AudioListener.prototype.getMasterVolume = function () {\r\n\t\r\n\t\treturn this.gain.gain.value;\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.AudioListener.prototype.updateMatrixWorld = ( function () {\r\n\t\r\n\t\tvar position = new THREE.Vector3();\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\t\tvar scale = new THREE.Vector3();\r\n\t\r\n\t\tvar orientation = new THREE.Vector3();\r\n\t\r\n\t\treturn function updateMatrixWorld( force ) {\r\n\t\r\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\r\n\t\r\n\t\t\tvar listener = this.context.listener;\r\n\t\t\tvar up = this.up;\r\n\t\r\n\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\r\n\t\r\n\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\r\n\t\r\n\t\t\tlistener.setPosition( position.x, position.y, position.z );\r\n\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\r\n\t\r\n\t\t};\r\n\t\r\n\t} )();\r\n\t\r\n\t// File:src/cameras/Camera.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t*/\r\n\t\r\n\tTHREE.Camera = function () {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Camera';\r\n\t\r\n\t\tthis.matrixWorldInverse = new THREE.Matrix4();\r\n\t\tthis.projectionMatrix = new THREE.Matrix4();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Camera.prototype.constructor = THREE.Camera;\r\n\t\r\n\tTHREE.Camera.prototype.getWorldDirection = function () {\r\n\t\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\t\r\n\t\treturn function ( optionalTarget ) {\r\n\t\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\r\n\t\t\tthis.getWorldQuaternion( quaternion );\r\n\t\r\n\t\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\tTHREE.Camera.prototype.lookAt = function () {\r\n\t\r\n\t\t// This routine does not support cameras with rotated and/or translated parent(s)\r\n\t\r\n\t\tvar m1 = new THREE.Matrix4();\r\n\t\r\n\t\treturn function ( vector ) {\r\n\t\r\n\t\t\tm1.lookAt( this.position, vector, this.up );\r\n\t\r\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\tTHREE.Camera.prototype.clone = function () {\r\n\t\r\n\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Camera.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\r\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/cameras/CubeCamera.js\r\n\t\r\n\t/**\r\n\t * Camera for rendering cube maps\r\n\t *\t- renders scene into axis-aligned cube\r\n\t *\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.CubeCamera = function ( near, far, cubeResolution ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'CubeCamera';\r\n\t\r\n\t\tvar fov = 90, aspect = 1;\r\n\t\r\n\t\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPX.up.set( 0, - 1, 0 );\r\n\t\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\r\n\t\tthis.add( cameraPX );\r\n\t\r\n\t\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNX.up.set( 0, - 1, 0 );\r\n\t\tcameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );\r\n\t\tthis.add( cameraNX );\r\n\t\r\n\t\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPY.up.set( 0, 0, 1 );\r\n\t\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\r\n\t\tthis.add( cameraPY );\r\n\t\r\n\t\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNY.up.set( 0, 0, - 1 );\r\n\t\tcameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );\r\n\t\tthis.add( cameraNY );\r\n\t\r\n\t\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraPZ.up.set( 0, - 1, 0 );\r\n\t\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\r\n\t\tthis.add( cameraPZ );\r\n\t\r\n\t\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\t\tcameraNZ.up.set( 0, - 1, 0 );\r\n\t\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );\r\n\t\tthis.add( cameraNZ );\r\n\t\r\n\t\tvar options = { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter };\r\n\t\r\n\t\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\r\n\t\r\n\t\tthis.updateCubeMap = function ( renderer, scene ) {\r\n\t\r\n\t\t\tif ( this.parent === null ) this.updateMatrixWorld();\r\n\t\r\n\t\t\tvar renderTarget = this.renderTarget;\r\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\r\n\t\r\n\t\t\trenderTarget.texture.generateMipmaps = false;\r\n\t\r\n\t\t\trenderTarget.activeCubeFace = 0;\r\n\t\t\trenderer.render( scene, cameraPX, renderTarget );\r\n\t\r\n\t\t\trenderTarget.activeCubeFace = 1;\r\n\t\t\trenderer.render( scene, cameraNX, renderTarget );\r\n\t\r\n\t\t\trenderTarget.activeCubeFace = 2;\r\n\t\t\trenderer.render( scene, cameraPY, renderTarget );\r\n\t\r\n\t\t\trenderTarget.activeCubeFace = 3;\r\n\t\t\trenderer.render( scene, cameraNY, renderTarget );\r\n\t\r\n\t\t\trenderTarget.activeCubeFace = 4;\r\n\t\t\trenderer.render( scene, cameraPZ, renderTarget );\r\n\t\r\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\r\n\t\r\n\t\t\trenderTarget.activeCubeFace = 5;\r\n\t\t\trenderer.render( scene, cameraNZ, renderTarget );\r\n\t\r\n\t\t\trenderer.setRenderTarget( null );\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.CubeCamera.prototype.constructor = THREE.CubeCamera;\r\n\t\r\n\t// File:src/cameras/OrthographicCamera.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\r\n\t\r\n\t\tTHREE.Camera.call( this );\r\n\t\r\n\t\tthis.type = 'OrthographicCamera';\r\n\t\r\n\t\tthis.zoom = 1;\r\n\t\r\n\t\tthis.left = left;\r\n\t\tthis.right = right;\r\n\t\tthis.top = top;\r\n\t\tthis.bottom = bottom;\r\n\t\r\n\t\tthis.near = ( near !== undefined ) ? near : 0.1;\r\n\t\tthis.far = ( far !== undefined ) ? far : 2000;\r\n\t\r\n\t\tthis.updateProjectionMatrix();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );\r\n\tTHREE.OrthographicCamera.prototype.constructor = THREE.OrthographicCamera;\r\n\t\r\n\tTHREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {\r\n\t\r\n\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\r\n\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\r\n\t\tvar cx = ( this.right + this.left ) / 2;\r\n\t\tvar cy = ( this.top + this.bottom ) / 2;\r\n\t\r\n\t\tthis.projectionMatrix.makeOrthographic( cx - dx, cx + dx, cy + dy, cy - dy, this.near, this.far );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.OrthographicCamera.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Camera.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.left = source.left;\r\n\t\tthis.right = source.right;\r\n\t\tthis.top = source.top;\r\n\t\tthis.bottom = source.bottom;\r\n\t\tthis.near = source.near;\r\n\t\tthis.far = source.far;\r\n\t\r\n\t\tthis.zoom = source.zoom;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.OrthographicCamera.prototype.toJSON = function ( meta ) {\r\n\t\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\t\r\n\t\tdata.object.zoom = this.zoom;\r\n\t\tdata.object.left = this.left;\r\n\t\tdata.object.right = this.right;\r\n\t\tdata.object.top = this.top;\r\n\t\tdata.object.bottom = this.bottom;\r\n\t\tdata.object.near = this.near;\r\n\t\tdata.object.far = this.far;\r\n\t\r\n\t\treturn data;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/cameras/PerspectiveCamera.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author greggman / http://games.greggman.com/\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\t\r\n\tTHREE.PerspectiveCamera = function ( fov, aspect, near, far ) {\r\n\t\r\n\t\tTHREE.Camera.call( this );\r\n\t\r\n\t\tthis.type = 'PerspectiveCamera';\r\n\t\r\n\t\tthis.focalLength = 10;\r\n\t\tthis.zoom = 1;\r\n\t\r\n\t\tthis.fov = fov !== undefined ? fov : 50;\r\n\t\tthis.aspect = aspect !== undefined ? aspect : 1;\r\n\t\tthis.near = near !== undefined ? near : 0.1;\r\n\t\tthis.far = far !== undefined ? far : 2000;\r\n\t\r\n\t\tthis.updateProjectionMatrix();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );\r\n\tTHREE.PerspectiveCamera.prototype.constructor = THREE.PerspectiveCamera;\r\n\t\r\n\t\r\n\t/**\r\n\t * Uses Focal Length (in mm) to estimate and set FOV\r\n\t * 35mm (full-frame) camera is used if frame size is not specified;\r\n\t * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html\r\n\t */\r\n\t\r\n\tTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {\r\n\t\r\n\t\tif ( frameHeight === undefined ) frameHeight = 24;\r\n\t\r\n\t\tthis.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );\r\n\t\tthis.updateProjectionMatrix();\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\t/**\r\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\r\n\t * multi-monitor/multi-machine setups.\r\n\t *\r\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n\t * the monitors are in grid like this\r\n\t *\r\n\t *   +---+---+---+\r\n\t *   | A | B | C |\r\n\t *   +---+---+---+\r\n\t *   | D | E | F |\r\n\t *   +---+---+---+\r\n\t *\r\n\t * then for each monitor you would call it like this\r\n\t *\r\n\t *   var w = 1920;\r\n\t *   var h = 1080;\r\n\t *   var fullWidth = w * 3;\r\n\t *   var fullHeight = h * 2;\r\n\t *\r\n\t *   --A--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n\t *   --B--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n\t *   --C--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n\t *   --D--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n\t *   --E--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n\t *   --F--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n\t *\r\n\t *   Note there is no reason monitors have to be the same size or in a grid.\r\n\t */\r\n\t\r\n\tTHREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\t\r\n\t\tthis.fullWidth = fullWidth;\r\n\t\tthis.fullHeight = fullHeight;\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\r\n\t\tthis.updateProjectionMatrix();\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {\r\n\t\r\n\t\tvar fov = THREE.Math.radToDeg( 2 * Math.atan( Math.tan( THREE.Math.degToRad( this.fov ) * 0.5 ) / this.zoom ) );\r\n\t\r\n\t\tif ( this.fullWidth ) {\r\n\t\r\n\t\t\tvar aspect = this.fullWidth / this.fullHeight;\r\n\t\t\tvar top = Math.tan( THREE.Math.degToRad( fov * 0.5 ) ) * this.near;\r\n\t\t\tvar bottom = - top;\r\n\t\t\tvar left = aspect * bottom;\r\n\t\t\tvar right = aspect * top;\r\n\t\t\tvar width = Math.abs( right - left );\r\n\t\t\tvar height = Math.abs( top - bottom );\r\n\t\r\n\t\t\tthis.projectionMatrix.makeFrustum(\r\n\t\t\t\tleft + this.x * width / this.fullWidth,\r\n\t\t\t\tleft + ( this.x + this.width ) * width / this.fullWidth,\r\n\t\t\t\ttop - ( this.y + this.height ) * height / this.fullHeight,\r\n\t\t\t\ttop - this.y * height / this.fullHeight,\r\n\t\t\t\tthis.near,\r\n\t\t\t\tthis.far\r\n\t\t\t);\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.projectionMatrix.makePerspective( fov, this.aspect, this.near, this.far );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PerspectiveCamera.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Camera.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.focalLength = source.focalLength;\r\n\t\tthis.zoom = source.zoom;\r\n\t\r\n\t\tthis.fov = source.fov;\r\n\t\tthis.aspect = source.aspect;\r\n\t\tthis.near = source.near;\r\n\t\tthis.far = source.far;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PerspectiveCamera.prototype.toJSON = function ( meta ) {\r\n\t\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\t\r\n\t\tdata.object.focalLength = this.focalLength;\r\n\t\tdata.object.zoom = this.zoom;\r\n\t\r\n\t\tdata.object.fov = this.fov;\r\n\t\tdata.object.aspect = this.aspect;\r\n\t\tdata.object.near = this.near;\r\n\t\tdata.object.far = this.far;\r\n\t\r\n\t\treturn data;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/cameras/StereoCamera.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.StereoCamera = function () {\r\n\t\r\n\t\tthis.type = 'StereoCamera';\r\n\t\r\n\t\tthis.aspect = 1;\r\n\t\r\n\t\tthis.cameraL = new THREE.PerspectiveCamera();\r\n\t\tthis.cameraL.layers.enable( 1 );\r\n\t\tthis.cameraL.matrixAutoUpdate = false;\r\n\t\r\n\t\tthis.cameraR = new THREE.PerspectiveCamera();\r\n\t\tthis.cameraR.layers.enable( 2 );\r\n\t\tthis.cameraR.matrixAutoUpdate = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.StereoCamera.prototype = {\r\n\t\r\n\t\tconstructor: THREE.StereoCamera,\r\n\t\r\n\t\tupdate: ( function () {\r\n\t\r\n\t\t\tvar focalLength, fov, aspect, near, far;\r\n\t\r\n\t\t\tvar eyeRight = new THREE.Matrix4();\r\n\t\t\tvar eyeLeft = new THREE.Matrix4();\r\n\t\r\n\t\t\treturn function update ( camera ) {\r\n\t\r\n\t\t\t\tvar needsUpdate = focalLength !== camera.focalLength || fov !== camera.fov ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far;\r\n\t\r\n\t\t\t\tif ( needsUpdate ) {\r\n\t\r\n\t\t\t\t\tfocalLength = camera.focalLength;\r\n\t\t\t\t\tfov = camera.fov;\r\n\t\t\t\t\taspect = camera.aspect * this.aspect;\r\n\t\t\t\t\tnear = camera.near;\r\n\t\t\t\t\tfar = camera.far;\r\n\t\r\n\t\t\t\t\t// Off-axis stereoscopic effect based on\r\n\t\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\r\n\t\r\n\t\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\r\n\t\t\t\t\tvar eyeSep = 0.064 / 2;\r\n\t\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focalLength;\r\n\t\t\t\t\tvar ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );\r\n\t\t\t\t\tvar xmin, xmax;\r\n\t\r\n\t\t\t\t\t// translate xOffset\r\n\t\r\n\t\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\r\n\t\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\r\n\t\r\n\t\t\t\t\t// for left eye\r\n\t\r\n\t\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\r\n\t\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\r\n\t\r\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\r\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\t\r\n\t\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\r\n\t\r\n\t\t\t\t\t// for right eye\r\n\t\r\n\t\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\r\n\t\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\r\n\t\r\n\t\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\r\n\t\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\t\r\n\t\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\r\n\t\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t} )()\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/lights/Light.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Light = function ( color, intensity ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Light';\r\n\t\r\n\t\tthis.color = new THREE.Color( color );\r\n\t\tthis.intensity = intensity !== undefined ? intensity : 1;\r\n\t\r\n\t\tthis.receiveShadow = undefined;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Light.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Light.prototype.constructor = THREE.Light;\r\n\t\r\n\tTHREE.Light.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.intensity = source.intensity;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Light.prototype.toJSON = function ( meta ) {\r\n\t\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\t\r\n\t\tdata.object.color = this.color.getHex();\r\n\t\tdata.object.intensity = this.intensity;\r\n\t\r\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\r\n\t\r\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\r\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\r\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\r\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\r\n\t\r\n\t\treturn data;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/lights/LightShadow.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.LightShadow = function ( camera ) {\r\n\t\r\n\t\tthis.camera = camera;\r\n\t\r\n\t\tthis.bias = 0;\r\n\t\tthis.radius = 1;\r\n\t\r\n\t\tthis.mapSize = new THREE.Vector2( 512, 512 );\r\n\t\r\n\t\tthis.map = null;\r\n\t\tthis.matrix = new THREE.Matrix4();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LightShadow.prototype = {\r\n\t\r\n\t\tconstructor: THREE.LightShadow,\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.camera = source.camera.clone();\r\n\t\r\n\t\t\tthis.bias = source.bias;\r\n\t\t\tthis.radius = source.radius;\r\n\t\r\n\t\t\tthis.mapSize.copy( source.mapSize );\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/lights/AmbientLight.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.AmbientLight = function ( color, intensity ) {\r\n\t\r\n\t\tTHREE.Light.call( this, color, intensity );\r\n\t\r\n\t\tthis.type = 'AmbientLight';\r\n\t\r\n\t\tthis.castShadow = undefined;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );\r\n\tTHREE.AmbientLight.prototype.constructor = THREE.AmbientLight;\r\n\t\r\n\t// File:src/lights/DirectionalLight.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.DirectionalLight = function ( color, intensity ) {\r\n\t\r\n\t\tTHREE.Light.call( this, color, intensity );\r\n\t\r\n\t\tthis.type = 'DirectionalLight';\r\n\t\r\n\t\tthis.position.set( 0, 1, 0 );\r\n\t\tthis.updateMatrix();\r\n\t\r\n\t\tthis.target = new THREE.Object3D();\r\n\t\r\n\t\tthis.shadow = new THREE.LightShadow( new THREE.OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );\r\n\tTHREE.DirectionalLight.prototype.constructor = THREE.DirectionalLight;\r\n\t\r\n\tTHREE.DirectionalLight.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.target = source.target.clone();\r\n\t\r\n\t\tthis.shadow = source.shadow.clone();\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/lights/HemisphereLight.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {\r\n\t\r\n\t\tTHREE.Light.call( this, skyColor, intensity );\r\n\t\r\n\t\tthis.type = 'HemisphereLight';\r\n\t\r\n\t\tthis.castShadow = undefined;\r\n\t\r\n\t\tthis.position.set( 0, 1, 0 );\r\n\t\tthis.updateMatrix();\r\n\t\r\n\t\tthis.groundColor = new THREE.Color( groundColor );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );\r\n\tTHREE.HemisphereLight.prototype.constructor = THREE.HemisphereLight;\r\n\t\r\n\tTHREE.HemisphereLight.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.groundColor.copy( source.groundColor );\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/lights/PointLight.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\t\r\n\tTHREE.PointLight = function ( color, intensity, distance, decay ) {\r\n\t\r\n\t\tTHREE.Light.call( this, color, intensity );\r\n\t\r\n\t\tthis.type = 'PointLight';\r\n\t\r\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\t\r\n\t\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 0.5, 500 ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PointLight.prototype = Object.create( THREE.Light.prototype );\r\n\tTHREE.PointLight.prototype.constructor = THREE.PointLight;\r\n\t\r\n\tObject.defineProperty( THREE.PointLight.prototype, \"power\", {\r\n\t\r\n\t\tget: function () {\r\n\t\r\n\t\t\t// intensity = power per solid angle.\r\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\t\treturn this.intensity * 4 * Math.PI;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset: function ( power ) {\r\n\t\r\n\t\t\t// intensity = power per solid angle.\r\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\t\tthis.intensity = power / ( 4 * Math.PI );\r\n\t\r\n\t\t}\r\n\t\r\n\t} );\r\n\t\r\n\tTHREE.PointLight.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.distance = source.distance;\r\n\t\tthis.decay = source.decay;\r\n\t\r\n\t\tthis.shadow = source.shadow.clone();\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/lights/SpotLight.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.SpotLight = function ( color, intensity, distance, angle, penumbra, decay ) {\r\n\t\r\n\t\tTHREE.Light.call( this, color, intensity );\r\n\t\r\n\t\tthis.type = 'SpotLight';\r\n\t\r\n\t\tthis.position.set( 0, 1, 0 );\r\n\t\tthis.updateMatrix();\r\n\t\r\n\t\tthis.target = new THREE.Object3D();\r\n\t\r\n\t\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\t\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\r\n\t\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\r\n\t\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\t\r\n\t\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 50, 1, 0.5, 500 ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SpotLight.prototype = Object.create( THREE.Light.prototype );\r\n\tTHREE.SpotLight.prototype.constructor = THREE.SpotLight;\r\n\t\r\n\tObject.defineProperty( THREE.SpotLight.prototype, \"power\", {\r\n\t\r\n\t\tget: function () {\r\n\t\r\n\t\t\t// intensity = power per solid angle.\r\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\t\treturn this.intensity * Math.PI;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset: function ( power ) {\r\n\t\r\n\t\t\t// intensity = power per solid angle.\r\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\t\tthis.intensity = power / Math.PI;\r\n\t\r\n\t\t}\r\n\t\r\n\t} );\r\n\t\r\n\tTHREE.SpotLight.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.distance = source.distance;\r\n\t\tthis.angle = source.angle;\r\n\t\tthis.penumbra = source.penumbra;\r\n\t\tthis.decay = source.decay;\r\n\t\r\n\t\tthis.target = source.target.clone();\r\n\t\r\n\t\tthis.shadow = source.shadow.clone();\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/Cache.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Cache = {\r\n\t\r\n\t\tenabled: false,\r\n\t\r\n\t\tfiles: {},\r\n\t\r\n\t\tadd: function ( key, file ) {\r\n\t\r\n\t\t\tif ( this.enabled === false ) return;\r\n\t\r\n\t\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\r\n\t\r\n\t\t\tthis.files[ key ] = file;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget: function ( key ) {\r\n\t\r\n\t\t\tif ( this.enabled === false ) return;\r\n\t\r\n\t\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\r\n\t\r\n\t\t\treturn this.files[ key ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tremove: function ( key ) {\r\n\t\r\n\t\t\tdelete this.files[ key ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclear: function () {\r\n\t\r\n\t\t\tthis.files = {};\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/Loader.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Loader = function () {\r\n\t\r\n\t\tthis.onLoadStart = function () {};\r\n\t\tthis.onLoadProgress = function () {};\r\n\t\tthis.onLoadComplete = function () {};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Loader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Loader,\r\n\t\r\n\t\tcrossOrigin: undefined,\r\n\t\r\n\t\textractUrlBase: function ( url ) {\r\n\t\r\n\t\t\tvar parts = url.split( '/' );\r\n\t\r\n\t\t\tif ( parts.length === 1 ) return './';\r\n\t\r\n\t\t\tparts.pop();\r\n\t\r\n\t\t\treturn parts.join( '/' ) + '/';\r\n\t\r\n\t\t},\r\n\t\r\n\t\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\r\n\t\r\n\t\t\tvar array = [];\r\n\t\r\n\t\t\tfor ( var i = 0; i < materials.length; ++ i ) {\r\n\t\r\n\t\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn array;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcreateMaterial: ( function () {\r\n\t\r\n\t\t\tvar color, textureLoader, materialLoader;\r\n\t\r\n\t\t\treturn function ( m, texturePath, crossOrigin ) {\r\n\t\r\n\t\t\t\tif ( color === undefined ) color = new THREE.Color();\r\n\t\t\t\tif ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();\r\n\t\t\t\tif ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();\r\n\t\r\n\t\t\t\t// convert from old material format\r\n\t\r\n\t\t\t\tvar textures = {};\r\n\t\r\n\t\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\r\n\t\r\n\t\t\t\t\tvar fullPath = texturePath + path;\r\n\t\t\t\t\tvar loader = THREE.Loader.Handlers.get( fullPath );\r\n\t\r\n\t\t\t\t\tvar texture;\r\n\t\r\n\t\t\t\t\tif ( loader !== null ) {\r\n\t\r\n\t\t\t\t\t\ttexture = loader.load( fullPath );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\r\n\t\t\t\t\t\ttexture = textureLoader.load( fullPath );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( repeat !== undefined ) {\r\n\t\r\n\t\t\t\t\t\ttexture.repeat.fromArray( repeat );\r\n\t\r\n\t\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\r\n\t\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( offset !== undefined ) {\r\n\t\r\n\t\t\t\t\t\ttexture.offset.fromArray( offset );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( wrap !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;\r\n\t\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;\r\n\t\r\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;\r\n\t\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( anisotropy !== undefined ) {\r\n\t\r\n\t\t\t\t\t\ttexture.anisotropy = anisotropy;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tvar uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\t\t\t\ttextures[ uuid ] = texture;\r\n\t\r\n\t\t\t\t\treturn uuid;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t//\r\n\t\r\n\t\t\t\tvar json = {\r\n\t\t\t\t\tuuid: THREE.Math.generateUUID(),\r\n\t\t\t\t\ttype: 'MeshLambertMaterial'\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\tfor ( var name in m ) {\r\n\t\r\n\t\t\t\t\tvar value = m[ name ];\r\n\t\r\n\t\t\t\t\tswitch ( name ) {\r\n\t\t\t\t\t\tcase 'DbgColor':\r\n\t\t\t\t\t\tcase 'DbgIndex':\r\n\t\t\t\t\t\tcase 'opticalDensity':\r\n\t\t\t\t\t\tcase 'illumination':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'DbgName':\r\n\t\t\t\t\t\t\tjson.name = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'blending':\r\n\t\t\t\t\t\t\tjson.blending = THREE[ value ];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'colorAmbient':\r\n\t\t\t\t\t\tcase 'mapAmbient':\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'colorDiffuse':\r\n\t\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'colorSpecular':\r\n\t\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'colorEmissive':\r\n\t\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'specularCoef':\r\n\t\t\t\t\t\t\tjson.shininess = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'shading':\r\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\r\n\t\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapDiffuse':\r\n\t\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapDiffuseRepeat':\r\n\t\t\t\t\t\tcase 'mapDiffuseOffset':\r\n\t\t\t\t\t\tcase 'mapDiffuseWrap':\r\n\t\t\t\t\t\tcase 'mapDiffuseAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapLight':\r\n\t\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapLightRepeat':\r\n\t\t\t\t\t\tcase 'mapLightOffset':\r\n\t\t\t\t\t\tcase 'mapLightWrap':\r\n\t\t\t\t\t\tcase 'mapLightAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapAO':\r\n\t\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapAORepeat':\r\n\t\t\t\t\t\tcase 'mapAOOffset':\r\n\t\t\t\t\t\tcase 'mapAOWrap':\r\n\t\t\t\t\t\tcase 'mapAOAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapBump':\r\n\t\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapBumpScale':\r\n\t\t\t\t\t\t\tjson.bumpScale = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapBumpRepeat':\r\n\t\t\t\t\t\tcase 'mapBumpOffset':\r\n\t\t\t\t\t\tcase 'mapBumpWrap':\r\n\t\t\t\t\t\tcase 'mapBumpAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapNormal':\r\n\t\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapNormalFactor':\r\n\t\t\t\t\t\t\tjson.normalScale = [ value, value ];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapNormalRepeat':\r\n\t\t\t\t\t\tcase 'mapNormalOffset':\r\n\t\t\t\t\t\tcase 'mapNormalWrap':\r\n\t\t\t\t\t\tcase 'mapNormalAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapSpecular':\r\n\t\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapSpecularRepeat':\r\n\t\t\t\t\t\tcase 'mapSpecularOffset':\r\n\t\t\t\t\t\tcase 'mapSpecularWrap':\r\n\t\t\t\t\t\tcase 'mapSpecularAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapAlpha':\r\n\t\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'mapAlphaRepeat':\r\n\t\t\t\t\t\tcase 'mapAlphaOffset':\r\n\t\t\t\t\t\tcase 'mapAlphaWrap':\r\n\t\t\t\t\t\tcase 'mapAlphaAnisotropy':\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'flipSided':\r\n\t\t\t\t\t\t\tjson.side = THREE.BackSide;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'doubleSided':\r\n\t\t\t\t\t\t\tjson.side = THREE.DoubleSide;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'transparency':\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\r\n\t\t\t\t\t\t\tjson.opacity = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'depthTest':\r\n\t\t\t\t\t\tcase 'depthWrite':\r\n\t\t\t\t\t\tcase 'colorWrite':\r\n\t\t\t\t\t\tcase 'opacity':\r\n\t\t\t\t\t\tcase 'reflectivity':\r\n\t\t\t\t\t\tcase 'transparent':\r\n\t\t\t\t\t\tcase 'visible':\r\n\t\t\t\t\t\tcase 'wireframe':\r\n\t\t\t\t\t\t\tjson[ name ] = value;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase 'vertexColors':\r\n\t\t\t\t\t\t\tif ( value === true ) json.vertexColors = THREE.VertexColors;\r\n\t\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = THREE.FaceColors;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\r\n\t\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\r\n\t\r\n\t\t\t\tif ( json.opacity < 1 ) json.transparent = true;\r\n\t\r\n\t\t\t\tmaterialLoader.setTextures( textures );\r\n\t\r\n\t\t\t\treturn materialLoader.parse( json );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t} )()\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Loader.Handlers = {\r\n\t\r\n\t\thandlers: [],\r\n\t\r\n\t\tadd: function ( regex, loader ) {\r\n\t\r\n\t\t\tthis.handlers.push( regex, loader );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tget: function ( file ) {\r\n\t\r\n\t\t\tvar handlers = this.handlers;\r\n\t\r\n\t\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\r\n\t\r\n\t\t\t\tvar regex = handlers[ i ];\r\n\t\t\t\tvar loader  = handlers[ i + 1 ];\r\n\t\r\n\t\t\t\tif ( regex.test( file ) ) {\r\n\t\r\n\t\t\t\t\treturn loader;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn null;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/XHRLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.XHRLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.XHRLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.XHRLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar cached = THREE.Cache.get( url );\r\n\t\r\n\t\t\tif ( cached !== undefined ) {\r\n\t\r\n\t\t\t\tif ( onLoad ) {\r\n\t\r\n\t\t\t\t\tsetTimeout( function () {\r\n\t\r\n\t\t\t\t\t\tonLoad( cached );\r\n\t\r\n\t\t\t\t\t}, 0 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn cached;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar request = new XMLHttpRequest();\r\n\t\t\trequest.overrideMimeType( 'text/plain' );\r\n\t\t\trequest.open( 'GET', url, true );\r\n\t\r\n\t\t\trequest.addEventListener( 'load', function ( event ) {\r\n\t\r\n\t\t\t\tvar response = event.target.response;\r\n\t\r\n\t\t\t\tTHREE.Cache.add( url, response );\r\n\t\r\n\t\t\t\tif ( this.status === 200 ) {\r\n\t\r\n\t\t\t\t\tif ( onLoad ) onLoad( response );\r\n\t\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\t\r\n\t\t\t\t} else if ( this.status === 0 ) {\r\n\t\r\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\r\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\r\n\t\r\n\t\t\t\t\tif ( onLoad ) onLoad( response );\r\n\t\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tif ( onError ) onError( event );\r\n\t\r\n\t\t\t\t\tscope.manager.itemError( url );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}, false );\r\n\t\r\n\t\t\tif ( onProgress !== undefined ) {\r\n\t\r\n\t\t\t\trequest.addEventListener( 'progress', function ( event ) {\r\n\t\r\n\t\t\t\t\tonProgress( event );\r\n\t\r\n\t\t\t\t}, false );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\trequest.addEventListener( 'error', function ( event ) {\r\n\t\r\n\t\t\t\tif ( onError ) onError( event );\r\n\t\r\n\t\t\t\tscope.manager.itemError( url );\r\n\t\r\n\t\t\t}, false );\r\n\t\r\n\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\r\n\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\r\n\t\r\n\t\t\trequest.send( null );\r\n\t\r\n\t\t\tscope.manager.itemStart( url );\r\n\t\r\n\t\t\treturn request;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetPath: function ( value ) {\r\n\t\r\n\t\t\tthis.path = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetResponseType: function ( value ) {\r\n\t\r\n\t\t\tthis.responseType = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetWithCredentials: function ( value ) {\r\n\t\r\n\t\t\tthis.withCredentials = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/FontLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.FontLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.FontLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.FontLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\t\r\n\t\t\t\tonLoad( new THREE.Font( JSON.parse( text.substring( 65, text.length - 2 ) ) ) );\r\n\t\r\n\t\t\t}, onProgress, onError );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/ImageLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.ImageLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ImageLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.ImageLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tif ( this.path !== undefined ) url = this.path + url;\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar cached = THREE.Cache.get( url );\r\n\t\r\n\t\t\tif ( cached !== undefined ) {\r\n\t\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\t\r\n\t\t\t\tif ( onLoad ) {\r\n\t\r\n\t\t\t\t\tsetTimeout( function () {\r\n\t\r\n\t\t\t\t\t\tonLoad( cached );\r\n\t\r\n\t\t\t\t\t\tscope.manager.itemEnd( url );\r\n\t\r\n\t\t\t\t\t}, 0 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn cached;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar image = document.createElement( 'img' );\r\n\t\r\n\t\t\timage.addEventListener( 'load', function ( event ) {\r\n\t\r\n\t\t\t\tTHREE.Cache.add( url, this );\r\n\t\r\n\t\t\t\tif ( onLoad ) onLoad( this );\r\n\t\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\t\r\n\t\t\t}, false );\r\n\t\r\n\t\t\tif ( onProgress !== undefined ) {\r\n\t\r\n\t\t\t\timage.addEventListener( 'progress', function ( event ) {\r\n\t\r\n\t\t\t\t\tonProgress( event );\r\n\t\r\n\t\t\t\t}, false );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\timage.addEventListener( 'error', function ( event ) {\r\n\t\r\n\t\t\t\tif ( onError ) onError( event );\r\n\t\r\n\t\t\t\tscope.manager.itemError( url );\r\n\t\r\n\t\t\t}, false );\r\n\t\r\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\r\n\t\r\n\t\t\tscope.manager.itemStart( url );\r\n\t\r\n\t\t\timage.src = url;\r\n\t\r\n\t\t\treturn image;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\t\r\n\t\t\tthis.crossOrigin = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetPath: function ( value ) {\r\n\t\r\n\t\t\tthis.path = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/JSONLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.JSONLoader = function ( manager ) {\r\n\t\r\n\t\tif ( typeof manager === 'boolean' ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\r\n\t\t\tmanager = undefined;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t\tthis.withCredentials = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.JSONLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.JSONLoader,\r\n\t\r\n\t\t// Deprecated\r\n\t\r\n\t\tget statusDomElement () {\r\n\t\r\n\t\t\tif ( this._statusDomElement === undefined ) {\r\n\t\r\n\t\t\t\tthis._statusDomElement = document.createElement( 'div' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tconsole.warn( 'THREE.JSONLoader: .statusDomElement has been removed.' );\r\n\t\t\treturn this._statusDomElement;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tload: function( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );\r\n\t\r\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\t\r\n\t\t\t\tvar json = JSON.parse( text );\r\n\t\t\t\tvar metadata = json.metadata;\r\n\t\r\n\t\t\t\tif ( metadata !== undefined ) {\r\n\t\r\n\t\t\t\t\tvar type = metadata.type;\r\n\t\r\n\t\t\t\t\tif ( type !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\r\n\t\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\r\n\t\t\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\r\n\t\r\n\t\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\r\n\t\t\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar object = scope.parse( json, texturePath );\r\n\t\t\t\tonLoad( object.geometry, object.materials );\r\n\t\r\n\t\t\t}, onProgress, onError );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetTexturePath: function ( value ) {\r\n\t\r\n\t\t\tthis.texturePath = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparse: function ( json, texturePath ) {\r\n\t\r\n\t\t\tvar geometry = new THREE.Geometry(),\r\n\t\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\r\n\t\r\n\t\t\tparseModel( scale );\r\n\t\r\n\t\t\tparseSkin();\r\n\t\t\tparseMorphing( scale );\r\n\t\t\tparseAnimations();\r\n\t\r\n\t\t\tgeometry.computeFaceNormals();\r\n\t\t\tgeometry.computeBoundingSphere();\r\n\t\r\n\t\t\tfunction parseModel( scale ) {\r\n\t\r\n\t\t\t\tfunction isBitSet( value, position ) {\r\n\t\r\n\t\t\t\t\treturn value & ( 1 << position );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar i, j, fi,\r\n\t\r\n\t\t\t\toffset, zLength,\r\n\t\r\n\t\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\r\n\t\r\n\t\t\t\ttype,\r\n\t\t\t\tisQuad,\r\n\t\t\t\thasMaterial,\r\n\t\t\t\thasFaceVertexUv,\r\n\t\t\t\thasFaceNormal, hasFaceVertexNormal,\r\n\t\t\t\thasFaceColor, hasFaceVertexColor,\r\n\t\r\n\t\t\tvertex, face, faceA, faceB, hex, normal,\r\n\t\r\n\t\t\t\tuvLayer, uv, u, v,\r\n\t\r\n\t\t\t\tfaces = json.faces,\r\n\t\t\t\tvertices = json.vertices,\r\n\t\t\t\tnormals = json.normals,\r\n\t\t\t\tcolors = json.colors,\r\n\t\r\n\t\t\t\tnUvLayers = 0;\r\n\t\r\n\t\t\t\tif ( json.uvs !== undefined ) {\r\n\t\r\n\t\t\t\t\t// disregard empty arrays\r\n\t\r\n\t\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\toffset = 0;\r\n\t\t\t\tzLength = vertices.length;\r\n\t\r\n\t\t\t\twhile ( offset < zLength ) {\r\n\t\r\n\t\t\t\t\tvertex = new THREE.Vector3();\r\n\t\r\n\t\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\r\n\t\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\r\n\t\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\r\n\t\r\n\t\t\t\t\tgeometry.vertices.push( vertex );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\toffset = 0;\r\n\t\t\t\tzLength = faces.length;\r\n\t\r\n\t\t\t\twhile ( offset < zLength ) {\r\n\t\r\n\t\t\t\t\ttype = faces[ offset ++ ];\r\n\t\r\n\t\r\n\t\t\t\t\tisQuad              = isBitSet( type, 0 );\r\n\t\t\t\t\thasMaterial         = isBitSet( type, 1 );\r\n\t\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\r\n\t\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\r\n\t\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\r\n\t\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\r\n\t\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\r\n\t\r\n\t\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\r\n\t\r\n\t\t\t\t\tif ( isQuad ) {\r\n\t\r\n\t\t\t\t\t\tfaceA = new THREE.Face3();\r\n\t\t\t\t\t\tfaceA.a = faces[ offset ];\r\n\t\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\r\n\t\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\r\n\t\r\n\t\t\t\t\t\tfaceB = new THREE.Face3();\r\n\t\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\r\n\t\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\r\n\t\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\r\n\t\r\n\t\t\t\t\t\toffset += 4;\r\n\t\r\n\t\t\t\t\t\tif ( hasMaterial ) {\r\n\t\r\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\r\n\t\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t// to get face <=> uv index correspondence\r\n\t\r\n\t\t\t\t\t\tfi = geometry.faces.length;\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\r\n\t\r\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\t\r\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\r\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\r\n\t\r\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\t\r\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\t\r\n\t\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\r\n\t\r\n\t\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\r\n\t\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceNormal ) {\r\n\t\r\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\t\r\n\t\t\t\t\t\t\tfaceA.normal.set(\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\t\r\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\t\r\n\t\t\t\t\t\t\t\tnormal = new THREE.Vector3(\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t\t);\r\n\t\r\n\t\r\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\r\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceColor ) {\r\n\t\r\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\r\n\t\r\n\t\t\t\t\t\t\tfaceA.color.setHex( hex );\r\n\t\t\t\t\t\t\tfaceB.color.setHex( hex );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\r\n\t\r\n\t\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\t\thex = colors[ colorIndex ];\r\n\t\r\n\t\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\r\n\t\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tgeometry.faces.push( faceA );\r\n\t\t\t\t\t\tgeometry.faces.push( faceB );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tface = new THREE.Face3();\r\n\t\t\t\t\t\tface.a = faces[ offset ++ ];\r\n\t\t\t\t\t\tface.b = faces[ offset ++ ];\r\n\t\t\t\t\t\tface.c = faces[ offset ++ ];\r\n\t\r\n\t\t\t\t\t\tif ( hasMaterial ) {\r\n\t\r\n\t\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\tface.materialIndex = materialIndex;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t// to get face <=> uv index correspondence\r\n\t\r\n\t\t\t\t\t\tfi = geometry.faces.length;\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceVertexUv ) {\r\n\t\r\n\t\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\t\r\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\r\n\t\r\n\t\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\t\r\n\t\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\t\r\n\t\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\r\n\t\r\n\t\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceNormal ) {\r\n\t\r\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\t\r\n\t\t\t\t\t\t\tface.normal.set(\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\t\r\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\t\r\n\t\t\t\t\t\t\t\tnormal = new THREE.Vector3(\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\t\tface.vertexNormals.push( normal );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceColor ) {\r\n\t\r\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\t\t\tif ( hasFaceVertexColor ) {\r\n\t\r\n\t\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\t\tface.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tgeometry.faces.push( face );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\tfunction parseSkin() {\r\n\t\r\n\t\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\r\n\t\r\n\t\t\t\tif ( json.skinWeights ) {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\r\n\t\r\n\t\t\t\t\t\tvar x =                               json.skinWeights[ i ];\r\n\t\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\r\n\t\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\r\n\t\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\r\n\t\r\n\t\t\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( json.skinIndices ) {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\r\n\t\r\n\t\t\t\t\t\tvar a =                               json.skinIndices[ i ];\r\n\t\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\r\n\t\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\r\n\t\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\r\n\t\r\n\t\t\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgeometry.bones = json.bones;\r\n\t\r\n\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\r\n\t\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\tfunction parseMorphing( scale ) {\r\n\t\r\n\t\t\t\tif ( json.morphTargets !== undefined ) {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tgeometry.morphTargets[ i ] = {};\r\n\t\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\r\n\t\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\r\n\t\r\n\t\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\r\n\t\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\r\n\t\r\n\t\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\r\n\t\r\n\t\t\t\t\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\r\n\t\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\r\n\t\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\r\n\t\r\n\t\t\t\t\t\t\tdstVertices.push( vertex );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\r\n\t\r\n\t\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction parseAnimations() {\r\n\t\r\n\t\t\t\tvar outputAnimations = [];\r\n\t\r\n\t\t\t\t// parse old style Bone/Hierarchy animations\r\n\t\t\t\tvar animations = [];\r\n\t\r\n\t\t\t\tif ( json.animation !== undefined ) {\r\n\t\r\n\t\t\t\t\tanimations.push( json.animation );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( json.animations !== undefined ) {\r\n\t\r\n\t\t\t\t\tif ( json.animations.length ) {\r\n\t\r\n\t\t\t\t\t\tanimations = animations.concat( json.animations );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tanimations.push( json.animations );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );\r\n\t\t\t\t\tif ( clip ) outputAnimations.push( clip );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// parse implicit morph animations\r\n\t\t\t\tif ( geometry.morphTargets ) {\r\n\t\r\n\t\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\r\n\t\t\t\t\tvar morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\r\n\t\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\r\n\t\r\n\t\t\t\treturn { geometry: geometry };\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tvar materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\r\n\t\r\n\t\t\t\treturn { geometry: geometry, materials: materials };\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/LoadingManager.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.LoadingManager = function ( onLoad, onProgress, onError ) {\r\n\t\r\n\t\tvar scope = this;\r\n\t\r\n\t\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\r\n\t\r\n\t\tthis.onStart = undefined;\r\n\t\tthis.onLoad = onLoad;\r\n\t\tthis.onProgress = onProgress;\r\n\t\tthis.onError = onError;\r\n\t\r\n\t\tthis.itemStart = function ( url ) {\r\n\t\r\n\t\t\titemsTotal ++;\r\n\t\r\n\t\t\tif ( isLoading === false ) {\r\n\t\r\n\t\t\t\tif ( scope.onStart !== undefined ) {\r\n\t\r\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tisLoading = true;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.itemEnd = function ( url ) {\r\n\t\r\n\t\t\titemsLoaded ++;\r\n\t\r\n\t\t\tif ( scope.onProgress !== undefined ) {\r\n\t\r\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( itemsLoaded === itemsTotal ) {\r\n\t\r\n\t\t\t\tisLoading = false;\r\n\t\r\n\t\t\t\tif ( scope.onLoad !== undefined ) {\r\n\t\r\n\t\t\t\t\tscope.onLoad();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.itemError = function ( url ) {\r\n\t\r\n\t\t\tif ( scope.onError !== undefined ) {\r\n\t\r\n\t\t\t\tscope.onError( url );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.DefaultLoadingManager = new THREE.LoadingManager();\r\n\t\r\n\t// File:src/loaders/BufferGeometryLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.BufferGeometryLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BufferGeometryLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.BufferGeometryLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\t\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\t\r\n\t\t\t}, onProgress, onError );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparse: function ( json ) {\r\n\t\r\n\t\t\tvar geometry = new THREE.BufferGeometry();\r\n\t\r\n\t\t\tvar index = json.data.index;\r\n\t\r\n\t\t\tvar TYPED_ARRAYS = {\r\n\t\t\t\t'Int8Array': Int8Array,\r\n\t\t\t\t'Uint8Array': Uint8Array,\r\n\t\t\t\t'Uint8ClampedArray': Uint8ClampedArray,\r\n\t\t\t\t'Int16Array': Int16Array,\r\n\t\t\t\t'Uint16Array': Uint16Array,\r\n\t\t\t\t'Int32Array': Int32Array,\r\n\t\t\t\t'Uint32Array': Uint32Array,\r\n\t\t\t\t'Float32Array': Float32Array,\r\n\t\t\t\t'Float64Array': Float64Array\r\n\t\t\t};\r\n\t\r\n\t\t\tif ( index !== undefined ) {\r\n\t\r\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\r\n\t\t\t\tgeometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar attributes = json.data.attributes;\r\n\t\r\n\t\t\tfor ( var key in attributes ) {\r\n\t\r\n\t\t\t\tvar attribute = attributes[ key ];\r\n\t\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\r\n\t\r\n\t\t\t\tgeometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\r\n\t\r\n\t\t\tif ( groups !== undefined ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\r\n\t\r\n\t\t\t\t\tvar group = groups[ i ];\r\n\t\r\n\t\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar boundingSphere = json.data.boundingSphere;\r\n\t\r\n\t\t\tif ( boundingSphere !== undefined ) {\r\n\t\r\n\t\t\t\tvar center = new THREE.Vector3();\r\n\t\r\n\t\t\t\tif ( boundingSphere.center !== undefined ) {\r\n\t\r\n\t\t\t\t\tcenter.fromArray( boundingSphere.center );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgeometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn geometry;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/MaterialLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.MaterialLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\tthis.textures = {};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MaterialLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.MaterialLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\t\r\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\t\r\n\t\t\t}, onProgress, onError );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetTextures: function ( value ) {\r\n\t\r\n\t\t\tthis.textures = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetTexture: function ( name ) {\r\n\t\r\n\t\t\tvar textures = this.textures;\r\n\t\r\n\t\t\tif ( textures[ name ] === undefined ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn textures[ name ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparse: function ( json ) {\r\n\t\r\n\t\t\tvar material = new THREE[ json.type ];\r\n\t\r\n\t\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\r\n\t\t\tif ( json.name !== undefined ) material.name = json.name;\r\n\t\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\r\n\t\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\r\n\t\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\r\n\t\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\r\n\t\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\r\n\t\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\r\n\t\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\r\n\t\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\r\n\t\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\r\n\t\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\r\n\t\t\tif ( json.shading !== undefined ) material.shading = json.shading;\r\n\t\t\tif ( json.blending !== undefined ) material.blending = json.blending;\r\n\t\t\tif ( json.side !== undefined ) material.side = json.side;\r\n\t\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\r\n\t\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\r\n\t\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\r\n\t\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\r\n\t\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\r\n\t\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\r\n\t\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\r\n\t\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\r\n\t\r\n\t\t\t// for PointsMaterial\r\n\t\t\tif ( json.size !== undefined ) material.size = json.size;\r\n\t\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\r\n\t\r\n\t\t\t// maps\r\n\t\r\n\t\t\tif ( json.map !== undefined ) material.map = this.getTexture( json.map );\r\n\t\r\n\t\t\tif ( json.alphaMap !== undefined ) {\r\n\t\r\n\t\t\t\tmaterial.alphaMap = this.getTexture( json.alphaMap );\r\n\t\t\t\tmaterial.transparent = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );\r\n\t\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\r\n\t\r\n\t\t\tif ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );\r\n\t\t\tif ( json.normalScale !== undefined ) {\r\n\t\r\n\t\t\t\tvar normalScale = json.normalScale;\r\n\t\r\n\t\t\t\tif ( Array.isArray( normalScale ) === false ) {\r\n\t\r\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\r\n\t\r\n\t\t\t\t\tnormalScale = [ normalScale, normalScale ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tmaterial.normalScale = new THREE.Vector2().fromArray( normalScale );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );\r\n\t\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\r\n\t\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\r\n\t\r\n\t\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = this.getTexture( json.roughnessMap );\r\n\t\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = this.getTexture( json.metalnessMap );\r\n\t\r\n\t\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = this.getTexture( json.emissiveMap );\r\n\t\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\r\n\t\r\n\t\t\tif ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );\r\n\t\r\n\t\t\tif ( json.envMap !== undefined ) {\r\n\t\r\n\t\t\t\tmaterial.envMap = this.getTexture( json.envMap );\r\n\t\t\t\tmaterial.combine = THREE.MultiplyOperation;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( json.reflectivity ) material.reflectivity = json.reflectivity;\r\n\t\r\n\t\t\tif ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );\r\n\t\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\r\n\t\r\n\t\t\tif ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );\r\n\t\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\r\n\t\r\n\t\t\t// MultiMaterial\r\n\t\r\n\t\t\tif ( json.materials !== undefined ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn material;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/ObjectLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.ObjectLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\tthis.texturePath = '';\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ObjectLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.ObjectLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tif ( this.texturePath === '' ) {\r\n\t\r\n\t\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\t\tloader.load( url, function ( text ) {\r\n\t\r\n\t\t\t\tscope.parse( JSON.parse( text ), onLoad );\r\n\t\r\n\t\t\t}, onProgress, onError );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetTexturePath: function ( value ) {\r\n\t\r\n\t\t\tthis.texturePath = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\t\r\n\t\t\tthis.crossOrigin = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparse: function ( json, onLoad ) {\r\n\t\r\n\t\t\tvar geometries = this.parseGeometries( json.geometries );\r\n\t\r\n\t\t\tvar images = this.parseImages( json.images, function () {\r\n\t\r\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\r\n\t\r\n\t\t\t} );\r\n\t\r\n\t\t\tvar textures  = this.parseTextures( json.textures, images );\r\n\t\t\tvar materials = this.parseMaterials( json.materials, textures );\r\n\t\r\n\t\t\tvar object = this.parseObject( json.object, geometries, materials );\r\n\t\r\n\t\t\tif ( json.animations ) {\r\n\t\r\n\t\t\t\tobject.animations = this.parseAnimations( json.animations );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( json.images === undefined || json.images.length === 0 ) {\r\n\t\r\n\t\t\t\tif ( onLoad !== undefined ) onLoad( object );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn object;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparseGeometries: function ( json ) {\r\n\t\r\n\t\t\tvar geometries = {};\r\n\t\r\n\t\t\tif ( json !== undefined ) {\r\n\t\r\n\t\t\t\tvar geometryLoader = new THREE.JSONLoader();\r\n\t\t\t\tvar bufferGeometryLoader = new THREE.BufferGeometryLoader();\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar geometry;\r\n\t\t\t\t\tvar data = json[ i ];\r\n\t\r\n\t\t\t\t\tswitch ( data.type ) {\r\n\t\r\n\t\t\t\t\t\tcase 'PlaneGeometry':\r\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'BoxGeometry':\r\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\r\n\t\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.depth,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.depthSegments\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'CircleGeometry':\r\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'CylinderGeometry':\r\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radiusTop,\r\n\t\t\t\t\t\t\t\tdata.radiusBottom,\r\n\t\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'SphereGeometry':\r\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\t\tdata.phiLength,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.DodecahedronGeometry(\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.IcosahedronGeometry(\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'OctahedronGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.OctahedronGeometry(\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.TetrahedronGeometry(\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'RingGeometry':\r\n\t\t\t\t\t\tcase 'RingBufferGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.innerRadius,\r\n\t\t\t\t\t\t\t\tdata.outerRadius,\r\n\t\t\t\t\t\t\t\tdata.thetaSegments,\r\n\t\t\t\t\t\t\t\tdata.phiSegments,\r\n\t\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'TorusGeometry':\r\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\t\tdata.arc\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\r\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\t\tdata.p,\r\n\t\t\t\t\t\t\t\tdata.q\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'LatheGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = new THREE.LatheGeometry(\r\n\t\t\t\t\t\t\t\tdata.points,\r\n\t\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\t\tdata.phiLength\r\n\t\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'BufferGeometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase 'Geometry':\r\n\t\r\n\t\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\r\n\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tdefault:\r\n\t\r\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\r\n\t\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tgeometry.uuid = data.uuid;\r\n\t\r\n\t\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\r\n\t\r\n\t\t\t\t\tgeometries[ data.uuid ] = geometry;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn geometries;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparseMaterials: function ( json, textures ) {\r\n\t\r\n\t\t\tvar materials = {};\r\n\t\r\n\t\t\tif ( json !== undefined ) {\r\n\t\r\n\t\t\t\tvar loader = new THREE.MaterialLoader();\r\n\t\t\t\tloader.setTextures( textures );\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar material = loader.parse( json[ i ] );\r\n\t\t\t\t\tmaterials[ material.uuid ] = material;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn materials;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparseAnimations: function ( json ) {\r\n\t\r\n\t\t\tvar animations = [];\r\n\t\r\n\t\t\tfor ( var i = 0; i < json.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar clip = THREE.AnimationClip.parse( json[ i ] );\r\n\t\r\n\t\t\t\tanimations.push( clip );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn animations;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparseImages: function ( json, onLoad ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\t\tvar images = {};\r\n\t\r\n\t\t\tfunction loadImage( url ) {\r\n\t\r\n\t\t\t\tscope.manager.itemStart( url );\r\n\t\r\n\t\t\t\treturn loader.load( url, function () {\r\n\t\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\t\r\n\t\t\t\t} );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( json !== undefined && json.length > 0 ) {\r\n\t\r\n\t\t\t\tvar manager = new THREE.LoadingManager( onLoad );\r\n\t\r\n\t\t\t\tvar loader = new THREE.ImageLoader( manager );\r\n\t\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar image = json[ i ];\r\n\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\r\n\t\r\n\t\t\t\t\timages[ image.uuid ] = loadImage( path );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn images;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparseTextures: function ( json, images ) {\r\n\t\r\n\t\t\tfunction parseConstant( value ) {\r\n\t\r\n\t\t\t\tif ( typeof( value ) === 'number' ) return value;\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\r\n\t\r\n\t\t\t\treturn THREE[ value ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar textures = {};\r\n\t\r\n\t\t\tif ( json !== undefined ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar data = json[ i ];\r\n\t\r\n\t\t\t\t\tif ( data.image === undefined ) {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( images[ data.image ] === undefined ) {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tvar texture = new THREE.Texture( images[ data.image ] );\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\r\n\t\t\t\t\ttexture.uuid = data.uuid;\r\n\t\r\n\t\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\r\n\t\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );\r\n\t\t\t\t\tif ( data.offset !== undefined ) texture.offset = new THREE.Vector2( data.offset[ 0 ], data.offset[ 1 ] );\r\n\t\t\t\t\tif ( data.repeat !== undefined ) texture.repeat = new THREE.Vector2( data.repeat[ 0 ], data.repeat[ 1 ] );\r\n\t\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );\r\n\t\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );\r\n\t\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\r\n\t\t\t\t\tif ( Array.isArray( data.wrap ) ) {\r\n\t\r\n\t\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ] );\r\n\t\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ] );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\ttextures[ data.uuid ] = texture;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn textures;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tparseObject: function () {\r\n\t\r\n\t\t\tvar matrix = new THREE.Matrix4();\r\n\t\r\n\t\t\treturn function ( data, geometries, materials ) {\r\n\t\r\n\t\t\t\tvar object;\r\n\t\r\n\t\t\t\tfunction getGeometry( name ) {\r\n\t\r\n\t\t\t\t\tif ( geometries[ name ] === undefined ) {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\treturn geometries[ name ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfunction getMaterial( name ) {\r\n\t\r\n\t\t\t\t\tif ( name === undefined ) return undefined;\r\n\t\r\n\t\t\t\t\tif ( materials[ name ] === undefined ) {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\treturn materials[ name ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tswitch ( data.type ) {\r\n\t\r\n\t\t\t\t\tcase 'Scene':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.Scene();\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'PerspectiveCamera':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'OrthographicCamera':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'AmbientLight':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.AmbientLight( data.color, data.intensity );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'DirectionalLight':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.DirectionalLight( data.color, data.intensity );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'PointLight':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'SpotLight':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'HemisphereLight':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'Mesh':\r\n\t\r\n\t\t\t\t\t\tvar geometry = getGeometry( data.geometry );\r\n\t\t\t\t\t\tvar material = getMaterial( data.material );\r\n\t\r\n\t\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\r\n\t\r\n\t\t\t\t\t\t\tobject = new THREE.SkinnedMesh( geometry, material );\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tobject = new THREE.Mesh( geometry, material );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'LOD':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.LOD();\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'Line':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'PointCloud':\r\n\t\t\t\t\tcase 'Points':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'Sprite':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.Sprite( getMaterial( data.material ) );\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase 'Group':\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.Group();\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tdefault:\r\n\t\r\n\t\t\t\t\t\tobject = new THREE.Object3D();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tobject.uuid = data.uuid;\r\n\t\r\n\t\t\t\tif ( data.name !== undefined ) object.name = data.name;\r\n\t\t\t\tif ( data.matrix !== undefined ) {\r\n\t\r\n\t\t\t\t\tmatrix.fromArray( data.matrix );\r\n\t\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\r\n\t\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\r\n\t\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\r\n\t\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\r\n\t\r\n\t\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\r\n\t\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\r\n\t\r\n\t\t\t\tif ( data.children !== undefined ) {\r\n\t\r\n\t\t\t\t\tfor ( var child in data.children ) {\r\n\t\r\n\t\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( data.type === 'LOD' ) {\r\n\t\r\n\t\t\t\t\tvar levels = data.levels;\r\n\t\r\n\t\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar level = levels[ l ];\r\n\t\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\r\n\t\r\n\t\t\t\t\t\tif ( child !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tobject.addLevel( child, level.distance );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn object;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t}()\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/TextureLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.TextureLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TextureLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.TextureLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar texture = new THREE.Texture();\r\n\t\r\n\t\t\tvar loader = new THREE.ImageLoader( this.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.load( url, function ( image ) {\r\n\t\r\n\t\t\t\ttexture.image = image;\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\t\r\n\t\t\t\tif ( onLoad !== undefined ) {\r\n\t\r\n\t\t\t\t\tonLoad( texture );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}, onProgress, onError );\r\n\t\r\n\t\t\treturn texture;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\t\r\n\t\t\tthis.crossOrigin = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetPath: function ( value ) {\r\n\t\r\n\t\t\tthis.path = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/CubeTextureLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.CubeTextureLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CubeTextureLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.CubeTextureLoader,\r\n\t\r\n\t\tload: function ( urls, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar texture = new THREE.CubeTexture();\r\n\t\r\n\t\t\tvar loader = new THREE.ImageLoader( this.manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\t\tloader.setPath( this.path );\r\n\t\r\n\t\t\tvar loaded = 0;\r\n\t\r\n\t\t\tfunction loadTexture( i ) {\r\n\t\r\n\t\t\t\tloader.load( urls[ i ], function ( image ) {\r\n\t\r\n\t\t\t\t\ttexture.images[ i ] = image;\r\n\t\r\n\t\t\t\t\tloaded ++;\r\n\t\r\n\t\t\t\t\tif ( loaded === 6 ) {\r\n\t\r\n\t\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\r\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}, undefined, onError );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var i = 0; i < urls.length; ++ i ) {\r\n\t\r\n\t\t\t\tloadTexture( i );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn texture;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetCrossOrigin: function ( value ) {\r\n\t\r\n\t\t\tthis.crossOrigin = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetPath: function ( value ) {\r\n\t\r\n\t\t\tthis.path = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/BinaryTextureLoader.js\r\n\t\r\n\t/**\r\n\t * @author Nikos M. / https://github.com/foo123/\r\n\t *\r\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\r\n\t */\r\n\t\r\n\tTHREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t\t// override in sub classes\r\n\t\tthis._parser = null;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BinaryTextureLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.BinaryTextureLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar texture = new THREE.DataTexture();\r\n\t\r\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\r\n\t\t\tloader.load( url, function ( buffer ) {\r\n\t\r\n\t\t\t\tvar texData = scope._parser( buffer );\r\n\t\r\n\t\t\t\tif ( ! texData ) return;\r\n\t\r\n\t\t\t\tif ( undefined !== texData.image ) {\r\n\t\r\n\t\t\t\t\ttexture.image = texData.image;\r\n\t\r\n\t\t\t\t} else if ( undefined !== texData.data ) {\r\n\t\r\n\t\t\t\t\ttexture.image.width = texData.width;\r\n\t\t\t\t\ttexture.image.height = texData.height;\r\n\t\t\t\t\ttexture.image.data = texData.data;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;\r\n\t\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;\r\n\t\r\n\t\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;\r\n\t\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;\r\n\t\r\n\t\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\r\n\t\r\n\t\t\t\tif ( undefined !== texData.format ) {\r\n\t\r\n\t\t\t\t\ttexture.format = texData.format;\r\n\t\r\n\t\t\t\t}\r\n\t\t\t\tif ( undefined !== texData.type ) {\r\n\t\r\n\t\t\t\t\ttexture.type = texData.type;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( undefined !== texData.mipmaps ) {\r\n\t\r\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( 1 === texData.mipmapCount ) {\r\n\t\r\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\t\r\n\t\t\t\tif ( onLoad ) onLoad( texture, texData );\r\n\t\r\n\t\t\t}, onProgress, onError );\r\n\t\r\n\t\r\n\t\t\treturn texture;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/loaders/CompressedTextureLoader.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\r\n\t */\r\n\t\r\n\tTHREE.CompressedTextureLoader = function ( manager ) {\r\n\t\r\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\t\r\n\t\t// override in sub classes\r\n\t\tthis._parser = null;\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.CompressedTextureLoader.prototype = {\r\n\t\r\n\t\tconstructor: THREE.CompressedTextureLoader,\r\n\t\r\n\t\tload: function ( url, onLoad, onProgress, onError ) {\r\n\t\r\n\t\t\tvar scope = this;\r\n\t\r\n\t\t\tvar images = [];\r\n\t\r\n\t\t\tvar texture = new THREE.CompressedTexture();\r\n\t\t\ttexture.image = images;\r\n\t\r\n\t\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\t\tloader.setPath( this.path );\r\n\t\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\r\n\t\t\tfunction loadTexture( i ) {\r\n\t\r\n\t\t\t\tloader.load( url[ i ], function ( buffer ) {\r\n\t\r\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\r\n\t\r\n\t\t\t\t\timages[ i ] = {\r\n\t\t\t\t\t\twidth: texDatas.width,\r\n\t\t\t\t\t\theight: texDatas.height,\r\n\t\t\t\t\t\tformat: texDatas.format,\r\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t\tloaded += 1;\r\n\t\r\n\t\t\t\t\tif ( loaded === 6 ) {\r\n\t\r\n\t\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\r\n\t\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\t\r\n\t\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\r\n\t\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}, onProgress, onError );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( Array.isArray( url ) ) {\r\n\t\r\n\t\t\t\tvar loaded = 0;\r\n\t\r\n\t\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\r\n\t\r\n\t\t\t\t\tloadTexture( i );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\r\n\t\r\n\t\t\t\tloader.load( url, function ( buffer ) {\r\n\t\r\n\t\t\t\t\tvar texDatas = scope._parser( buffer, true );\r\n\t\r\n\t\t\t\t\tif ( texDatas.isCubemap ) {\r\n\t\r\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\r\n\t\r\n\t\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\r\n\t\r\n\t\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\r\n\t\r\n\t\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\r\n\t\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\r\n\t\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\r\n\t\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\r\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\r\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\r\n\t\r\n\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\t\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\t\r\n\t\t\t\t}, onProgress, onError );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn texture;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetPath: function ( value ) {\r\n\t\r\n\t\t\tthis.path = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/Material.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Material = function () {\r\n\t\r\n\t\tObject.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'Material';\r\n\t\r\n\t\tthis.side = THREE.FrontSide;\r\n\t\r\n\t\tthis.opacity = 1;\r\n\t\tthis.transparent = false;\r\n\t\r\n\t\tthis.blending = THREE.NormalBlending;\r\n\t\r\n\t\tthis.blendSrc = THREE.SrcAlphaFactor;\r\n\t\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\r\n\t\tthis.blendEquation = THREE.AddEquation;\r\n\t\tthis.blendSrcAlpha = null;\r\n\t\tthis.blendDstAlpha = null;\r\n\t\tthis.blendEquationAlpha = null;\r\n\t\r\n\t\tthis.depthFunc = THREE.LessEqualDepth;\r\n\t\tthis.depthTest = true;\r\n\t\tthis.depthWrite = true;\r\n\t\r\n\t\tthis.colorWrite = true;\r\n\t\r\n\t\tthis.precision = null; // override the renderer's default precision for this material\r\n\t\r\n\t\tthis.polygonOffset = false;\r\n\t\tthis.polygonOffsetFactor = 0;\r\n\t\tthis.polygonOffsetUnits = 0;\r\n\t\r\n\t\tthis.alphaTest = 0;\r\n\t\tthis.premultipliedAlpha = false;\r\n\t\r\n\t\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\r\n\t\r\n\t\tthis.visible = true;\r\n\t\r\n\t\tthis._needsUpdate = true;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Material.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Material,\r\n\t\r\n\t\tget needsUpdate () {\r\n\t\r\n\t\t\treturn this._needsUpdate;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset needsUpdate ( value ) {\r\n\t\r\n\t\t\tif ( value === true ) this.update();\r\n\t\r\n\t\t\tthis._needsUpdate = value;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tsetValues: function ( values ) {\r\n\t\r\n\t\t\tif ( values === undefined ) return;\r\n\t\r\n\t\t\tfor ( var key in values ) {\r\n\t\r\n\t\t\t\tvar newValue = values[ key ];\r\n\t\r\n\t\t\t\tif ( newValue === undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\r\n\t\t\t\t\tcontinue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar currentValue = this[ key ];\r\n\t\r\n\t\t\t\tif ( currentValue === undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\r\n\t\t\t\t\tcontinue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( currentValue instanceof THREE.Color ) {\r\n\t\r\n\t\t\t\t\tcurrentValue.set( newValue );\r\n\t\r\n\t\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\r\n\t\r\n\t\t\t\t\tcurrentValue.copy( newValue );\r\n\t\r\n\t\t\t\t} else if ( key === 'overdraw' ) {\r\n\t\r\n\t\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\r\n\t\t\t\t\tthis[ key ] = Number( newValue );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis[ key ] = newValue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoJSON: function ( meta ) {\r\n\t\r\n\t\t\tvar isRoot = meta === undefined;\r\n\t\r\n\t\t\tif ( isRoot ) {\r\n\t\r\n\t\t\t\tmeta = {\r\n\t\t\t\t\ttextures: {},\r\n\t\t\t\t\timages: {}\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar data = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.4,\r\n\t\t\t\t\ttype: 'Material',\r\n\t\t\t\t\tgenerator: 'Material.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\r\n\t\t\t// standard Material serialization\r\n\t\t\tdata.uuid = this.uuid;\r\n\t\t\tdata.type = this.type;\r\n\t\t\tif ( this.name !== '' ) data.name = this.name;\r\n\t\r\n\t\t\tif ( this.color instanceof THREE.Color ) data.color = this.color.getHex();\r\n\t\r\n\t\t\tif ( this.roughness !== 0.5 ) data.roughness = this.roughness;\r\n\t\t\tif ( this.metalness !== 0.5 ) data.metalness = this.metalness;\r\n\t\r\n\t\t\tif ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();\r\n\t\t\tif ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();\r\n\t\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\r\n\t\r\n\t\t\tif ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;\r\n\t\t\tif ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\r\n\t\t\tif ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\r\n\t\t\tif ( this.bumpMap instanceof THREE.Texture ) {\r\n\t\r\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.bumpScale = this.bumpScale;\r\n\t\r\n\t\t\t}\r\n\t\t\tif ( this.normalMap instanceof THREE.Texture ) {\r\n\t\r\n\t\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\r\n\t\r\n\t\t\t}\r\n\t\t\tif ( this.displacementMap instanceof THREE.Texture ) {\r\n\t\r\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.displacementScale = this.displacementScale;\r\n\t\t\t\tdata.displacementBias = this.displacementBias;\r\n\t\r\n\t\t\t}\r\n\t\t\tif ( this.roughnessMap instanceof THREE.Texture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\r\n\t\t\tif ( this.metalnessMap instanceof THREE.Texture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\r\n\t\r\n\t\t\tif ( this.emissiveMap instanceof THREE.Texture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\r\n\t\t\tif ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\r\n\t\r\n\t\t\tif ( this.envMap instanceof THREE.Texture ) {\r\n\t\r\n\t\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\r\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.size !== undefined ) data.size = this.size;\r\n\t\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\r\n\t\r\n\t\t\tif ( this.vertexColors !== undefined && this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;\r\n\t\t\tif ( this.shading !== undefined && this.shading !== THREE.SmoothShading ) data.shading = this.shading;\r\n\t\t\tif ( this.blending !== undefined && this.blending !== THREE.NormalBlending ) data.blending = this.blending;\r\n\t\t\tif ( this.side !== undefined && this.side !== THREE.FrontSide ) data.side = this.side;\r\n\t\r\n\t\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\r\n\t\t\tif ( this.transparent === true ) data.transparent = this.transparent;\r\n\t\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\r\n\t\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\r\n\t\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\r\n\t\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\r\n\t\r\n\t\t\t// TODO: Copied from Object3D.toJSON\r\n\t\r\n\t\t\tfunction extractFromCache ( cache ) {\r\n\t\r\n\t\t\t\tvar values = [];\r\n\t\r\n\t\t\t\tfor ( var key in cache ) {\r\n\t\r\n\t\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\t\tdelete data.metadata;\r\n\t\t\t\t\tvalues.push( data );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn values;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( isRoot ) {\r\n\t\r\n\t\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\t\tvar images = extractFromCache( meta.images );\r\n\t\r\n\t\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\t\tif ( images.length > 0 ) data.images = images;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn data;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.name = source.name;\r\n\t\r\n\t\t\tthis.side = source.side;\r\n\t\r\n\t\t\tthis.opacity = source.opacity;\r\n\t\t\tthis.transparent = source.transparent;\r\n\t\r\n\t\t\tthis.blending = source.blending;\r\n\t\r\n\t\t\tthis.blendSrc = source.blendSrc;\r\n\t\t\tthis.blendDst = source.blendDst;\r\n\t\t\tthis.blendEquation = source.blendEquation;\r\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\r\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\r\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\r\n\t\r\n\t\t\tthis.depthFunc = source.depthFunc;\r\n\t\t\tthis.depthTest = source.depthTest;\r\n\t\t\tthis.depthWrite = source.depthWrite;\r\n\t\r\n\t\t\tthis.colorWrite = source.colorWrite;\r\n\t\r\n\t\t\tthis.precision = source.precision;\r\n\t\r\n\t\t\tthis.polygonOffset = source.polygonOffset;\r\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\r\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\r\n\t\r\n\t\t\tthis.alphaTest = source.alphaTest;\r\n\t\r\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\r\n\t\r\n\t\t\tthis.overdraw = source.overdraw;\r\n\t\r\n\t\t\tthis.visible = source.visible;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tupdate: function () {\r\n\t\r\n\t\t\tthis.dispatchEvent( { type: 'update' } );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdispose: function () {\r\n\t\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.Material.prototype );\r\n\t\r\n\tTHREE.MaterialIdCount = 0;\r\n\t\r\n\t// File:src/materials/LineBasicMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  linewidth: <float>,\r\n\t *  linecap: \"round\",\r\n\t *  linejoin: \"round\",\r\n\t *\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  vertexColors: <bool>\r\n\t *\r\n\t *  fog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.LineBasicMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'LineBasicMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff );\r\n\t\r\n\t\tthis.linewidth = 1;\r\n\t\tthis.linecap = 'round';\r\n\t\tthis.linejoin = 'round';\r\n\t\r\n\t\tthis.blending = THREE.NormalBlending;\r\n\t\r\n\t\tthis.vertexColors = THREE.NoColors;\r\n\t\r\n\t\tthis.fog = true;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;\r\n\t\r\n\tTHREE.LineBasicMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\r\n\t\tthis.linewidth = source.linewidth;\r\n\t\tthis.linecap = source.linecap;\r\n\t\tthis.linejoin = source.linejoin;\r\n\t\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/LineDashedMaterial.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  linewidth: <float>,\r\n\t *\r\n\t *  scale: <float>,\r\n\t *  dashSize: <float>,\r\n\t *  gapSize: <float>,\r\n\t *\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  vertexColors: THREE.NoColors / THREE.FaceColors / THREE.VertexColors\r\n\t *\r\n\t *  fog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.LineDashedMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'LineDashedMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff );\r\n\t\r\n\t\tthis.linewidth = 1;\r\n\t\r\n\t\tthis.scale = 1;\r\n\t\tthis.dashSize = 3;\r\n\t\tthis.gapSize = 1;\r\n\t\r\n\t\tthis.blending = THREE.NormalBlending;\r\n\t\r\n\t\tthis.vertexColors = THREE.NoColors;\r\n\t\r\n\t\tthis.fog = true;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;\r\n\t\r\n\tTHREE.LineDashedMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\r\n\t\tthis.linewidth = source.linewidth;\r\n\t\r\n\t\tthis.scale = source.scale;\r\n\t\tthis.dashSize = source.dashSize;\r\n\t\tthis.gapSize = source.gapSize;\r\n\t\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/MeshBasicMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.Multiply,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  shading: THREE.SmoothShading,\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *\r\n\t *  fog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.MeshBasicMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'MeshBasicMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff ); // emissive\r\n\t\r\n\t\tthis.map = null;\r\n\t\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\t\r\n\t\tthis.specularMap = null;\r\n\t\r\n\t\tthis.alphaMap = null;\r\n\t\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = THREE.MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\t\r\n\t\tthis.fog = true;\r\n\t\r\n\t\tthis.shading = THREE.SmoothShading;\r\n\t\tthis.blending = THREE.NormalBlending;\r\n\t\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\t\r\n\t\tthis.vertexColors = THREE.NoColors;\r\n\t\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;\r\n\t\r\n\tTHREE.MeshBasicMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\r\n\t\tthis.map = source.map;\r\n\t\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\t\r\n\t\tthis.specularMap = source.specularMap;\r\n\t\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\t\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\tthis.shading = source.shading;\r\n\t\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\t\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\t\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/MeshLambertMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissive: <hex>,\r\n\t *  emissiveIntensity: <float>\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.Multiply,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>,\r\n\t *\r\n\t *\tfog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.MeshLambertMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'MeshLambertMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\t\r\n\t\tthis.map = null;\r\n\t\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\t\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\t\r\n\t\tthis.emissive = new THREE.Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\t\r\n\t\tthis.specularMap = null;\r\n\t\r\n\t\tthis.alphaMap = null;\r\n\t\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = THREE.MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\t\r\n\t\tthis.fog = true;\r\n\t\r\n\t\tthis.blending = THREE.NormalBlending;\r\n\t\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\t\r\n\t\tthis.vertexColors = THREE.NoColors;\r\n\t\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;\r\n\t\r\n\tTHREE.MeshLambertMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\r\n\t\tthis.map = source.map;\r\n\t\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\t\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\t\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\t\r\n\t\tthis.specularMap = source.specularMap;\r\n\t\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\t\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\t\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\t\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/MeshPhongMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  specular: <hex>,\r\n\t *  shininess: <float>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissive: <hex>,\r\n\t *  emissiveIntensity: <float>\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  specularMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  combine: THREE.Multiply,\r\n\t *  reflectivity: <float>,\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  shading: THREE.SmoothShading,\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>,\r\n\t *\r\n\t *\tfog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.MeshPhongMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'MeshPhongMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\t\tthis.specular = new THREE.Color( 0x111111 );\r\n\t\tthis.shininess = 30;\r\n\t\r\n\t\tthis.map = null;\r\n\t\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\t\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\t\r\n\t\tthis.emissive = new THREE.Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\t\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\t\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalScale = new THREE.Vector2( 1, 1 );\r\n\t\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\t\r\n\t\tthis.specularMap = null;\r\n\t\r\n\t\tthis.alphaMap = null;\r\n\t\r\n\t\tthis.envMap = null;\r\n\t\tthis.combine = THREE.MultiplyOperation;\r\n\t\tthis.reflectivity = 1;\r\n\t\tthis.refractionRatio = 0.98;\r\n\t\r\n\t\tthis.fog = true;\r\n\t\r\n\t\tthis.shading = THREE.SmoothShading;\r\n\t\tthis.blending = THREE.NormalBlending;\r\n\t\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\t\r\n\t\tthis.vertexColors = THREE.NoColors;\r\n\t\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;\r\n\t\r\n\tTHREE.MeshPhongMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.specular.copy( source.specular );\r\n\t\tthis.shininess = source.shininess;\r\n\t\r\n\t\tthis.map = source.map;\r\n\t\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\t\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\t\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\t\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\t\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\t\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\t\r\n\t\tthis.specularMap = source.specularMap;\r\n\t\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\t\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\tthis.shading = source.shading;\r\n\t\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\t\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\t\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/MeshStandardMaterial.js\r\n\t\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  roughness: <float>,\r\n\t *  metalness: <float>,\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  lightMap: new THREE.Texture( <Image> ),\r\n\t *  lightMapIntensity: <float>\r\n\t *\r\n\t *  aoMap: new THREE.Texture( <Image> ),\r\n\t *  aoMapIntensity: <float>\r\n\t *\r\n\t *  emissive: <hex>,\r\n\t *  emissiveIntensity: <float>\r\n\t *  emissiveMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  bumpMap: new THREE.Texture( <Image> ),\r\n\t *  bumpScale: <float>,\r\n\t *\r\n\t *  normalMap: new THREE.Texture( <Image> ),\r\n\t *  normalScale: <Vector2>,\r\n\t *\r\n\t *  displacementMap: new THREE.Texture( <Image> ),\r\n\t *  displacementScale: <float>,\r\n\t *  displacementBias: <float>,\r\n\t *\r\n\t *  roughnessMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  metalnessMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  alphaMap: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n\t *  envMapIntensity: <float>\r\n\t *\r\n\t *  refractionRatio: <float>,\r\n\t *\r\n\t *  shading: THREE.SmoothShading,\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>,\r\n\t *\r\n\t *\tfog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.MeshStandardMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'MeshStandardMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\t\tthis.roughness = 0.5;\r\n\t\tthis.metalness = 0.5;\r\n\t\r\n\t\tthis.map = null;\r\n\t\r\n\t\tthis.lightMap = null;\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\t\r\n\t\tthis.aoMap = null;\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\t\r\n\t\tthis.emissive = new THREE.Color( 0x000000 );\r\n\t\tthis.emissiveIntensity = 1.0;\r\n\t\tthis.emissiveMap = null;\r\n\t\r\n\t\tthis.bumpMap = null;\r\n\t\tthis.bumpScale = 1;\r\n\t\r\n\t\tthis.normalMap = null;\r\n\t\tthis.normalScale = new THREE.Vector2( 1, 1 );\r\n\t\r\n\t\tthis.displacementMap = null;\r\n\t\tthis.displacementScale = 1;\r\n\t\tthis.displacementBias = 0;\r\n\t\r\n\t\tthis.roughnessMap = null;\r\n\t\r\n\t\tthis.metalnessMap = null;\r\n\t\r\n\t\tthis.alphaMap = null;\r\n\t\r\n\t\tthis.envMap = null;\r\n\t\tthis.envMapIntensity = 1.0;\r\n\t\r\n\t\tthis.refractionRatio = 0.98;\r\n\t\r\n\t\tthis.fog = true;\r\n\t\r\n\t\tthis.shading = THREE.SmoothShading;\r\n\t\tthis.blending = THREE.NormalBlending;\r\n\t\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\tthis.wireframeLinecap = 'round';\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\t\r\n\t\tthis.vertexColors = THREE.NoColors;\r\n\t\r\n\t\tthis.skinning = false;\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.morphNormals = false;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MeshStandardMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;\r\n\t\r\n\tTHREE.MeshStandardMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.roughness = source.roughness;\r\n\t\tthis.metalness = source.metalness;\r\n\t\r\n\t\tthis.map = source.map;\r\n\t\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\t\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\t\r\n\t\tthis.emissive.copy( source.emissive );\r\n\t\tthis.emissiveMap = source.emissiveMap;\r\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\t\r\n\t\tthis.bumpMap = source.bumpMap;\r\n\t\tthis.bumpScale = source.bumpScale;\r\n\t\r\n\t\tthis.normalMap = source.normalMap;\r\n\t\tthis.normalScale.copy( source.normalScale );\r\n\t\r\n\t\tthis.displacementMap = source.displacementMap;\r\n\t\tthis.displacementScale = source.displacementScale;\r\n\t\tthis.displacementBias = source.displacementBias;\r\n\t\r\n\t\tthis.roughnessMap = source.roughnessMap;\r\n\t\r\n\t\tthis.metalnessMap = source.metalnessMap;\r\n\t\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\t\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.envMapIntensity = source.envMapIntensity;\r\n\t\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\tthis.shading = source.shading;\r\n\t\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\t\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\t\r\n\t\tthis.skinning = source.skinning;\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/MeshDepthMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.MeshDepthMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'MeshDepthMaterial';\r\n\t\r\n\t\tthis.morphTargets = false;\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;\r\n\t\r\n\tTHREE.MeshDepthMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/MeshNormalMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  opacity: <float>,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.MeshNormalMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this, parameters );\r\n\t\r\n\t\tthis.type = 'MeshNormalMaterial';\r\n\t\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\r\n\t\tthis.morphTargets = false;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;\r\n\t\r\n\tTHREE.MeshNormalMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/MultiMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.MultiMaterial = function ( materials ) {\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.type = 'MultiMaterial';\r\n\t\r\n\t\tthis.materials = materials instanceof Array ? materials : [];\r\n\t\r\n\t\tthis.visible = true;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MultiMaterial.prototype = {\r\n\t\r\n\t\tconstructor: THREE.MultiMaterial,\r\n\t\r\n\t\ttoJSON: function ( meta ) {\r\n\t\r\n\t\t\tvar output = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.2,\r\n\t\t\t\t\ttype: 'material',\r\n\t\t\t\t\tgenerator: 'MaterialExporter'\r\n\t\t\t\t},\r\n\t\t\t\tuuid: this.uuid,\r\n\t\t\t\ttype: this.type,\r\n\t\t\t\tmaterials: []\r\n\t\t\t};\r\n\t\r\n\t\t\tvar materials = this.materials;\r\n\t\r\n\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar material = materials[ i ].toJSON( meta );\r\n\t\t\t\tdelete material.metadata;\r\n\t\r\n\t\t\t\toutput.materials.push( material );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\toutput.visible = this.visible;\r\n\t\r\n\t\t\treturn output;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\tvar material = new this.constructor();\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\r\n\t\r\n\t\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tmaterial.visible = this.visible;\r\n\t\r\n\t\t\treturn material;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/PointsMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *  size: <float>,\r\n\t *  sizeAttenuation: <bool>,\r\n\t *\r\n\t *  blending: THREE.NormalBlending,\r\n\t *  depthTest: <bool>,\r\n\t *  depthWrite: <bool>,\r\n\t *\r\n\t *  vertexColors: <bool>,\r\n\t *\r\n\t *  fog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.PointsMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'PointsMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff );\r\n\t\r\n\t\tthis.map = null;\r\n\t\r\n\t\tthis.size = 1;\r\n\t\tthis.sizeAttenuation = true;\r\n\t\r\n\t\tthis.blending = THREE.NormalBlending;\r\n\t\r\n\t\tthis.vertexColors = THREE.NoColors;\r\n\t\r\n\t\tthis.fog = true;\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;\r\n\t\r\n\tTHREE.PointsMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\r\n\t\tthis.map = source.map;\r\n\t\r\n\t\tthis.size = source.size;\r\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\t\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/ShaderMaterial.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  defines: { \"label\" : \"value\" },\r\n\t *  uniforms: { \"parameter1\": { type: \"f\", value: 1.0 }, \"parameter2\": { type: \"i\" value2: 2 } },\r\n\t *\r\n\t *  fragmentShader: <string>,\r\n\t *  vertexShader: <string>,\r\n\t *\r\n\t *  shading: THREE.SmoothShading,\r\n\t *\r\n\t *  wireframe: <boolean>,\r\n\t *  wireframeLinewidth: <float>,\r\n\t *\r\n\t *  lights: <bool>,\r\n\t *\r\n\t *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n\t *\r\n\t *  skinning: <bool>,\r\n\t *  morphTargets: <bool>,\r\n\t *  morphNormals: <bool>,\r\n\t *\r\n\t *\tfog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.ShaderMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'ShaderMaterial';\r\n\t\r\n\t\tthis.defines = {};\r\n\t\tthis.uniforms = {};\r\n\t\r\n\t\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\r\n\t\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\r\n\t\r\n\t\tthis.shading = THREE.SmoothShading;\r\n\t\r\n\t\tthis.linewidth = 1;\r\n\t\r\n\t\tthis.wireframe = false;\r\n\t\tthis.wireframeLinewidth = 1;\r\n\t\r\n\t\tthis.fog = false; // set to use scene fog\r\n\t\r\n\t\tthis.lights = false; // set to use scene lights\r\n\t\r\n\t\tthis.vertexColors = THREE.NoColors; // set to use \"color\" attribute stream\r\n\t\r\n\t\tthis.skinning = false; // set to use skinning attribute streams\r\n\t\r\n\t\tthis.morphTargets = false; // set to use morph targets\r\n\t\tthis.morphNormals = false; // set to use morph normals\r\n\t\r\n\t\tthis.extensions = {\r\n\t\t\tderivatives: false, // set to use derivatives\r\n\t\t\tfragDepth: false, // set to use fragment depth values\r\n\t\t\tdrawBuffers: false, // set to use draw buffers\r\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\r\n\t\t};\r\n\t\r\n\t\t// When rendered geometry doesn't include these attributes but the material does,\r\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\r\n\t\tthis.defaultAttributeValues = {\r\n\t\t\t'color': [ 1, 1, 1 ],\r\n\t\t\t'uv': [ 0, 0 ],\r\n\t\t\t'uv2': [ 0, 0 ]\r\n\t\t};\r\n\t\r\n\t\tthis.index0AttributeName = undefined;\r\n\t\r\n\t\tif ( parameters !== undefined ) {\r\n\t\r\n\t\t\tif ( parameters.attributes !== undefined ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.setValues( parameters );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;\r\n\t\r\n\tTHREE.ShaderMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.fragmentShader = source.fragmentShader;\r\n\t\tthis.vertexShader = source.vertexShader;\r\n\t\r\n\t\tthis.uniforms = THREE.UniformsUtils.clone( source.uniforms );\r\n\t\r\n\t\tthis.defines = source.defines;\r\n\t\r\n\t\tthis.shading = source.shading;\r\n\t\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\tthis.lights = source.lights;\r\n\t\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\t\r\n\t\tthis.skinning = source.skinning;\r\n\t\r\n\t\tthis.morphTargets = source.morphTargets;\r\n\t\tthis.morphNormals = source.morphNormals;\r\n\t\r\n\t\tthis.extensions = source.extensions;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ShaderMaterial.prototype.toJSON = function ( meta ) {\r\n\t\r\n\t\tvar data = THREE.Material.prototype.toJSON.call( this, meta );\r\n\t\r\n\t\tdata.uniforms = this.uniforms;\r\n\t\tdata.vertexShader = this.vertexShader;\r\n\t\tdata.fragmentShader = this.fragmentShader;\r\n\t\r\n\t\treturn data;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/materials/RawShaderMaterial.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.RawShaderMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.ShaderMaterial.call( this, parameters );\r\n\t\r\n\t\tthis.type = 'RawShaderMaterial';\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\r\n\tTHREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;\r\n\t\r\n\t// File:src/materials/SpriteMaterial.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * parameters = {\r\n\t *  color: <hex>,\r\n\t *  opacity: <float>,\r\n\t *  map: new THREE.Texture( <Image> ),\r\n\t *\r\n\t *\tuvOffset: new THREE.Vector2(),\r\n\t *\tuvScale: new THREE.Vector2(),\r\n\t *\r\n\t *  fog: <bool>\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.SpriteMaterial = function ( parameters ) {\r\n\t\r\n\t\tTHREE.Material.call( this );\r\n\t\r\n\t\tthis.type = 'SpriteMaterial';\r\n\t\r\n\t\tthis.color = new THREE.Color( 0xffffff );\r\n\t\tthis.map = null;\r\n\t\r\n\t\tthis.rotation = 0;\r\n\t\r\n\t\tthis.fog = false;\r\n\t\r\n\t\t// set parameters\r\n\t\r\n\t\tthis.setValues( parameters );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\r\n\tTHREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;\r\n\t\r\n\tTHREE.SpriteMaterial.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Material.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.map = source.map;\r\n\t\r\n\t\tthis.rotation = source.rotation;\r\n\t\r\n\t\tthis.fog = source.fog;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/textures/Texture.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t */\r\n\t\r\n\tTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\t\r\n\t\tObject.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.name = '';\r\n\t\tthis.sourceFile = '';\r\n\t\r\n\t\tthis.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\r\n\t\tthis.mipmaps = [];\r\n\t\r\n\t\tthis.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\r\n\t\r\n\t\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\r\n\t\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\r\n\t\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\r\n\t\r\n\t\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\r\n\t\r\n\t\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\r\n\t\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\r\n\t\r\n\t\tthis.offset = new THREE.Vector2( 0, 0 );\r\n\t\tthis.repeat = new THREE.Vector2( 1, 1 );\r\n\t\r\n\t\tthis.generateMipmaps = true;\r\n\t\tthis.premultiplyAlpha = false;\r\n\t\tthis.flipY = true;\r\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\t\r\n\t\r\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\r\n\t\t//\r\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\r\n\t\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\r\n\t\tthis.encoding = THREE.LinearEncoding;\r\n\t\r\n\t\tthis.version = 0;\r\n\t\tthis.onUpdate = null;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Texture.DEFAULT_IMAGE = undefined;\r\n\tTHREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;\r\n\t\r\n\tTHREE.Texture.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Texture,\r\n\t\r\n\t\tset needsUpdate ( value ) {\r\n\t\r\n\t\t\tif ( value === true ) this.version ++;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.image = source.image;\r\n\t\t\tthis.mipmaps = source.mipmaps.slice( 0 );\r\n\t\r\n\t\t\tthis.mapping = source.mapping;\r\n\t\r\n\t\t\tthis.wrapS = source.wrapS;\r\n\t\t\tthis.wrapT = source.wrapT;\r\n\t\r\n\t\t\tthis.magFilter = source.magFilter;\r\n\t\t\tthis.minFilter = source.minFilter;\r\n\t\r\n\t\t\tthis.anisotropy = source.anisotropy;\r\n\t\r\n\t\t\tthis.format = source.format;\r\n\t\t\tthis.type = source.type;\r\n\t\r\n\t\t\tthis.offset.copy( source.offset );\r\n\t\t\tthis.repeat.copy( source.repeat );\r\n\t\r\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\r\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\r\n\t\t\tthis.flipY = source.flipY;\r\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\r\n\t\t\tthis.encoding = source.encoding;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttoJSON: function ( meta ) {\r\n\t\r\n\t\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\r\n\t\r\n\t\t\t\treturn meta.textures[ this.uuid ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction getDataURL( image ) {\r\n\t\r\n\t\t\t\tvar canvas;\r\n\t\r\n\t\t\t\tif ( image.toDataURL !== undefined ) {\r\n\t\r\n\t\t\t\t\tcanvas = image;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tcanvas = document.createElement( 'canvas' );\r\n\t\t\t\t\tcanvas.width = image.width;\r\n\t\t\t\t\tcanvas.height = image.height;\r\n\t\r\n\t\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\r\n\t\r\n\t\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\treturn canvas.toDataURL( 'image/png' );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar output = {\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.4,\r\n\t\t\t\t\ttype: 'Texture',\r\n\t\t\t\t\tgenerator: 'Texture.toJSON'\r\n\t\t\t\t},\r\n\t\r\n\t\t\t\tuuid: this.uuid,\r\n\t\t\t\tname: this.name,\r\n\t\r\n\t\t\t\tmapping: this.mapping,\r\n\t\r\n\t\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\r\n\t\t\t\toffset: [ this.offset.x, this.offset.y ],\r\n\t\t\t\twrap: [ this.wrapS, this.wrapT ],\r\n\t\r\n\t\t\t\tminFilter: this.minFilter,\r\n\t\t\t\tmagFilter: this.magFilter,\r\n\t\t\t\tanisotropy: this.anisotropy\r\n\t\t\t};\r\n\t\r\n\t\t\tif ( this.image !== undefined ) {\r\n\t\r\n\t\t\t\t// TODO: Move to THREE.Image\r\n\t\r\n\t\t\t\tvar image = this.image;\r\n\t\r\n\t\t\t\tif ( image.uuid === undefined ) {\r\n\t\r\n\t\t\t\t\timage.uuid = THREE.Math.generateUUID(); // UGH\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\r\n\t\r\n\t\t\t\t\tmeta.images[ image.uuid ] = {\r\n\t\t\t\t\t\tuuid: image.uuid,\r\n\t\t\t\t\t\turl: getDataURL( image )\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\toutput.image = image.uuid;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tmeta.textures[ this.uuid ] = output;\r\n\t\r\n\t\t\treturn output;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdispose: function () {\r\n\t\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttransformUv: function ( uv ) {\r\n\t\r\n\t\t\tif ( this.mapping !== THREE.UVMapping )  return;\r\n\t\r\n\t\t\tuv.multiply( this.repeat );\r\n\t\t\tuv.add( this.offset );\r\n\t\r\n\t\t\tif ( uv.x < 0 || uv.x > 1 ) {\r\n\t\r\n\t\t\t\tswitch ( this.wrapS ) {\r\n\t\r\n\t\t\t\t\tcase THREE.RepeatWrapping:\r\n\t\r\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.ClampToEdgeWrapping:\r\n\t\r\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.MirroredRepeatWrapping:\r\n\t\r\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\r\n\t\r\n\t\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( uv.y < 0 || uv.y > 1 ) {\r\n\t\r\n\t\t\t\tswitch ( this.wrapT ) {\r\n\t\r\n\t\t\t\t\tcase THREE.RepeatWrapping:\r\n\t\r\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.ClampToEdgeWrapping:\r\n\t\r\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.MirroredRepeatWrapping:\r\n\t\r\n\t\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\r\n\t\r\n\t\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.flipY ) {\r\n\t\r\n\t\t\t\tuv.y = 1 - uv.y;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.Texture.prototype );\r\n\t\r\n\tTHREE.TextureIdCount = 0;\r\n\t\r\n\t// File:src/textures/CanvasTexture.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\t\r\n\t\tTHREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\t\r\n\t\tthis.needsUpdate = true;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\tTHREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;\r\n\t\r\n\t// File:src/textures/CubeTexture.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\t\r\n\t\timages = images !== undefined ? images : [];\r\n\t\tmapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;\r\n\t\r\n\t\tTHREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\t\r\n\t\tthis.flipY = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\tTHREE.CubeTexture.prototype.constructor = THREE.CubeTexture;\r\n\t\r\n\tObject.defineProperty( THREE.CubeTexture.prototype, 'images', {\r\n\t\r\n\t\tget: function () {\r\n\t\r\n\t\t\treturn this.image;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tset: function ( value ) {\r\n\t\r\n\t\t\tthis.image = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t} );\r\n\t\r\n\t// File:src/textures/CompressedTexture.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\t\r\n\t\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\t\r\n\t\tthis.image = { width: width, height: height };\r\n\t\tthis.mipmaps = mipmaps;\r\n\t\r\n\t\t// no flipping for cube textures\r\n\t\t// (also flipping doesn't work for compressed textures )\r\n\t\r\n\t\tthis.flipY = false;\r\n\t\r\n\t\t// can't generate mipmaps for compressed textures\r\n\t\t// mips must be embedded in DDS files\r\n\t\r\n\t\tthis.generateMipmaps = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\tTHREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;\r\n\t\r\n\t// File:src/textures/DataTexture.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\t\r\n\t\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\t\r\n\t\tthis.image = { data: data, width: width, height: height };\r\n\t\r\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\r\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\r\n\t\r\n\t\tthis.flipY = false;\r\n\t\tthis.generateMipmaps  = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\tTHREE.DataTexture.prototype.constructor = THREE.DataTexture;\r\n\t\r\n\t// File:src/textures/VideoTexture.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\t\r\n\t\tTHREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\t\r\n\t\tthis.generateMipmaps = false;\r\n\t\r\n\t\tvar scope = this;\r\n\t\r\n\t\tfunction update() {\r\n\t\r\n\t\t\trequestAnimationFrame( update );\r\n\t\r\n\t\t\tif ( video.readyState === video.HAVE_ENOUGH_DATA ) {\r\n\t\r\n\t\t\t\tscope.needsUpdate = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tupdate();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );\r\n\tTHREE.VideoTexture.prototype.constructor = THREE.VideoTexture;\r\n\t\r\n\t// File:src/objects/Group.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Group = function () {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Group';\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Group.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Group.prototype.constructor = THREE.Group;\r\n\t\r\n\t// File:src/objects/Points.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Points = function ( geometry, material ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Points';\r\n\t\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\r\n\t\tthis.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Points.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Points.prototype.constructor = THREE.Points;\r\n\t\r\n\tTHREE.Points.prototype.raycast = ( function () {\r\n\t\r\n\t\tvar inverseMatrix = new THREE.Matrix4();\r\n\t\tvar ray = new THREE.Ray();\r\n\t\tvar sphere = new THREE.Sphere();\r\n\t\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\t\r\n\t\t\tvar object = this;\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\t\t\tvar threshold = raycaster.params.Points.threshold;\r\n\t\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\t\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\t\r\n\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\tsphere.applyMatrix4( matrixWorld );\r\n\t\r\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\t\r\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\r\n\t\t\tvar position = new THREE.Vector3();\r\n\t\r\n\t\t\tfunction testPoint( point, index ) {\r\n\t\r\n\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\r\n\t\r\n\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\r\n\t\r\n\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\r\n\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\r\n\t\r\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\r\n\t\r\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\r\n\t\r\n\t\t\t\t\tintersects.push( {\r\n\t\r\n\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\r\n\t\t\t\t\t\tpoint: intersectPoint.clone(),\r\n\t\t\t\t\t\tindex: index,\r\n\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\tobject: object\r\n\t\r\n\t\t\t\t\t} );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\t\r\n\t\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\t\tvar indices = index.array;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar a = indices[ i ];\r\n\t\r\n\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\r\n\t\r\n\t\t\t\t\t\ttestPoint( position, a );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\r\n\t\r\n\t\t\t\t\t\ttestPoint( position, i );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\ttestPoint( vertices[ i ], i );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t}() );\r\n\t\r\n\tTHREE.Points.prototype.clone = function () {\r\n\t\r\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/objects/Line.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Line = function ( geometry, material, mode ) {\r\n\t\r\n\t\tif ( mode === 1 ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\r\n\t\t\treturn new THREE.LineSegments( geometry, material );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Line';\r\n\t\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\r\n\t\tthis.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Line.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Line.prototype.constructor = THREE.Line;\r\n\t\r\n\tTHREE.Line.prototype.raycast = ( function () {\r\n\t\r\n\t\tvar inverseMatrix = new THREE.Matrix4();\r\n\t\tvar ray = new THREE.Ray();\r\n\t\tvar sphere = new THREE.Sphere();\r\n\t\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\t\r\n\t\t\tvar precision = raycaster.linePrecision;\r\n\t\t\tvar precisionSq = precision * precision;\r\n\t\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\t\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\t\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\t\r\n\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\tsphere.applyMatrix4( matrixWorld );\r\n\t\r\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\t\r\n\t\t\tvar vStart = new THREE.Vector3();\r\n\t\t\tvar vEnd = new THREE.Vector3();\r\n\t\t\tvar interSegment = new THREE.Vector3();\r\n\t\t\tvar interRay = new THREE.Vector3();\r\n\t\t\tvar step = this instanceof THREE.LineSegments ? 2 : 1;\r\n\t\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\t\r\n\t\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\t\tvar indices = index.array;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\r\n\t\r\n\t\t\t\t\t\tvar a = indices[ i ];\r\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\r\n\t\r\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\r\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\r\n\t\r\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\t\r\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\t\r\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\t\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\t\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\t\r\n\t\t\t\t\t\tintersects.push( {\r\n\t\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\tobject: this\r\n\t\r\n\t\t\t\t\t\t} );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\r\n\t\r\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\r\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\r\n\t\r\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\t\r\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\t\r\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\t\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\t\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\t\r\n\t\t\t\t\t\tintersects.push( {\r\n\t\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\tobject: this\r\n\t\r\n\t\t\t\t\t\t} );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar nbVertices = vertices.length;\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\r\n\t\r\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\r\n\t\r\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\t\r\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\t\r\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\t\r\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\t\r\n\t\t\t\t\tintersects.push( {\r\n\t\r\n\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\tobject: this\r\n\t\r\n\t\t\t\t\t} );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t}() );\r\n\t\r\n\tTHREE.Line.prototype.clone = function () {\r\n\t\r\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\t\r\n\t};\r\n\t\r\n\t// DEPRECATED\r\n\t\r\n\tTHREE.LineStrip = 0;\r\n\tTHREE.LinePieces = 1;\r\n\t\r\n\t// File:src/objects/LineSegments.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.LineSegments = function ( geometry, material ) {\r\n\t\r\n\t\tTHREE.Line.call( this, geometry, material );\r\n\t\r\n\t\tthis.type = 'LineSegments';\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LineSegments.prototype = Object.create( THREE.Line.prototype );\r\n\tTHREE.LineSegments.prototype.constructor = THREE.LineSegments;\r\n\t\r\n\t// File:src/objects/Mesh.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author jonobr1 / http://jonobr1.com/\r\n\t */\r\n\t\r\n\tTHREE.Mesh = function ( geometry, material ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Mesh';\r\n\t\r\n\t\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\r\n\t\tthis.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\t\r\n\t\tthis.drawMode = THREE.TrianglesDrawMode;\r\n\t\r\n\t\tthis.updateMorphTargets();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Mesh.prototype.constructor = THREE.Mesh;\r\n\t\r\n\tTHREE.Mesh.prototype.setDrawMode = function ( value ) {\r\n\t\r\n\t\tthis.drawMode = value;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Mesh.prototype.updateMorphTargets = function () {\r\n\t\r\n\t\tif ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {\r\n\t\r\n\t\t\tthis.morphTargetBase = - 1;\r\n\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\tthis.morphTargetDictionary = {};\r\n\t\r\n\t\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\r\n\t\r\n\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {\r\n\t\r\n\t\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\r\n\t\r\n\t\t\treturn this.morphTargetDictionary[ name ];\r\n\t\r\n\t\t}\r\n\t\r\n\t\tconsole.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );\r\n\t\r\n\t\treturn 0;\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.Mesh.prototype.raycast = ( function () {\r\n\t\r\n\t\tvar inverseMatrix = new THREE.Matrix4();\r\n\t\tvar ray = new THREE.Ray();\r\n\t\tvar sphere = new THREE.Sphere();\r\n\t\r\n\t\tvar vA = new THREE.Vector3();\r\n\t\tvar vB = new THREE.Vector3();\r\n\t\tvar vC = new THREE.Vector3();\r\n\t\r\n\t\tvar tempA = new THREE.Vector3();\r\n\t\tvar tempB = new THREE.Vector3();\r\n\t\tvar tempC = new THREE.Vector3();\r\n\t\r\n\t\tvar uvA = new THREE.Vector2();\r\n\t\tvar uvB = new THREE.Vector2();\r\n\t\tvar uvC = new THREE.Vector2();\r\n\t\r\n\t\tvar barycoord = new THREE.Vector3();\r\n\t\r\n\t\tvar intersectionPoint = new THREE.Vector3();\r\n\t\tvar intersectionPointWorld = new THREE.Vector3();\r\n\t\r\n\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\r\n\t\r\n\t\t\tTHREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\r\n\t\r\n\t\t\tuv1.multiplyScalar( barycoord.x );\r\n\t\t\tuv2.multiplyScalar( barycoord.y );\r\n\t\t\tuv3.multiplyScalar( barycoord.z );\r\n\t\r\n\t\t\tuv1.add( uv2 ).add( uv3 );\r\n\t\r\n\t\t\treturn uv1.clone();\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\r\n\t\r\n\t\t\tvar intersect;\r\n\t\t\tvar material = object.material;\r\n\t\r\n\t\t\tif ( material.side === THREE.BackSide ) {\r\n\t\r\n\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( intersect === null ) return null;\r\n\t\r\n\t\t\tintersectionPointWorld.copy( point );\r\n\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\t\r\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\r\n\t\r\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\r\n\t\r\n\t\t\treturn {\r\n\t\t\t\tdistance: distance,\r\n\t\t\t\tpoint: intersectionPointWorld.clone(),\r\n\t\t\t\tobject: object\r\n\t\t\t};\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\r\n\t\r\n\t\t\tvA.fromArray( positions, a * 3 );\r\n\t\t\tvB.fromArray( positions, b * 3 );\r\n\t\t\tvC.fromArray( positions, c * 3 );\r\n\t\r\n\t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\r\n\t\r\n\t\t\tif ( intersection ) {\r\n\t\r\n\t\t\t\tif ( uvs ) {\r\n\t\r\n\t\t\t\t\tuvA.fromArray( uvs, a * 2 );\r\n\t\t\t\t\tuvB.fromArray( uvs, b * 2 );\r\n\t\t\t\t\tuvC.fromArray( uvs, c * 2 );\r\n\t\r\n\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tintersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );\r\n\t\t\t\tintersection.faceIndex = a;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn intersection;\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\t\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar material = this.material;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\t\r\n\t\t\tif ( material === undefined ) return;\r\n\t\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\t\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\t\r\n\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\tsphere.applyMatrix4( matrixWorld );\r\n\t\r\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\t\r\n\t\t\t// Check boundingBox before continuing\r\n\t\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\t\r\n\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar uvs, intersection;\r\n\t\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\t\tvar a, b, c;\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\t\r\n\t\t\t\tif ( attributes.uv !== undefined ) {\r\n\t\r\n\t\t\t\t\tuvs = attributes.uv.array;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\t\tvar indices = index.array;\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\ta = indices[ i ];\r\n\t\t\t\t\t\tb = indices[ i + 1 ];\r\n\t\t\t\t\t\tc = indices[ i + 2 ];\r\n\t\r\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\r\n\t\r\n\t\t\t\t\t\tif ( intersection ) {\r\n\t\r\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\r\n\t\t\t\t\t\t\tintersects.push( intersection );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\r\n\t\r\n\t\t\t\t\t\ta = i / 3;\r\n\t\t\t\t\t\tb = a + 1;\r\n\t\t\t\t\t\tc = a + 2;\r\n\t\r\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\r\n\t\r\n\t\t\t\t\t\tif ( intersection ) {\r\n\t\r\n\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\r\n\t\t\t\t\t\t\tintersects.push( intersection );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\t\tvar fvA, fvB, fvC;\r\n\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\r\n\t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\r\n\t\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\r\n\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\r\n\t\r\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\t\r\n\t\t\t\t\tvar face = faces[ f ];\r\n\t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\r\n\t\r\n\t\t\t\t\tif ( faceMaterial === undefined ) continue;\r\n\t\r\n\t\t\t\t\tfvA = vertices[ face.a ];\r\n\t\t\t\t\tfvB = vertices[ face.b ];\r\n\t\t\t\t\tfvC = vertices[ face.c ];\r\n\t\r\n\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\r\n\t\r\n\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\r\n\t\r\n\t\t\t\t\t\tvA.set( 0, 0, 0 );\r\n\t\t\t\t\t\tvB.set( 0, 0, 0 );\r\n\t\t\t\t\t\tvC.set( 0, 0, 0 );\r\n\t\r\n\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\r\n\t\r\n\t\t\t\t\t\t\tif ( influence === 0 ) continue;\r\n\t\r\n\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\r\n\t\r\n\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\r\n\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\r\n\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tvA.add( fvA );\r\n\t\t\t\t\t\tvB.add( fvB );\r\n\t\t\t\t\t\tvC.add( fvC );\r\n\t\r\n\t\t\t\t\t\tfvA = vA;\r\n\t\t\t\t\t\tfvB = vB;\r\n\t\t\t\t\t\tfvC = vC;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\r\n\t\r\n\t\t\t\t\tif ( intersection ) {\r\n\t\r\n\t\t\t\t\t\tif ( uvs ) {\r\n\t\r\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\r\n\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\r\n\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\r\n\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\r\n\t\r\n\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tintersection.face = face;\r\n\t\t\t\t\t\tintersection.faceIndex = f;\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t}() );\r\n\t\r\n\tTHREE.Mesh.prototype.clone = function () {\r\n\t\r\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/objects/Bone.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\t\r\n\tTHREE.Bone = function ( skin ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Bone';\r\n\t\r\n\t\tthis.skin = skin;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Bone.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Bone.prototype.constructor = THREE.Bone;\r\n\t\r\n\tTHREE.Bone.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.skin = source.skin;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/objects/Skeleton.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author michael guerrero / http://realitymeltdown.com\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\t\r\n\tTHREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {\r\n\t\r\n\t\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\r\n\t\r\n\t\tthis.identityMatrix = new THREE.Matrix4();\r\n\t\r\n\t\t// copy the bone array\r\n\t\r\n\t\tbones = bones || [];\r\n\t\r\n\t\tthis.bones = bones.slice( 0 );\r\n\t\r\n\t\t// create a bone texture or an array of floats\r\n\t\r\n\t\tif ( this.useVertexTexture ) {\r\n\t\r\n\t\t\t// layout (1 matrix = 4 pixels)\r\n\t\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\r\n\t\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\r\n\t\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\r\n\t\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\r\n\t\r\n\t\t\t\r\n\t\t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\r\n\t\t\tsize = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );\r\n\t\t\tsize = Math.max( size, 4 );\r\n\t\r\n\t\t\tthis.boneTextureWidth = size;\r\n\t\t\tthis.boneTextureHeight = size;\r\n\t\r\n\t\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\r\n\t\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// use the supplied bone inverses or calculate the inverses\r\n\t\r\n\t\tif ( boneInverses === undefined ) {\r\n\t\r\n\t\t\tthis.calculateInverses();\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tif ( this.bones.length === boneInverses.length ) {\r\n\t\r\n\t\t\t\tthis.boneInverses = boneInverses.slice( 0 );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\r\n\t\r\n\t\t\t\tthis.boneInverses = [];\r\n\t\r\n\t\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\t\r\n\t\t\t\t\tthis.boneInverses.push( new THREE.Matrix4() );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Skeleton.prototype.calculateInverses = function () {\r\n\t\r\n\t\tthis.boneInverses = [];\r\n\t\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\t\r\n\t\t\tvar inverse = new THREE.Matrix4();\r\n\t\r\n\t\t\tif ( this.bones[ b ] ) {\r\n\t\r\n\t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.boneInverses.push( inverse );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Skeleton.prototype.pose = function () {\r\n\t\r\n\t\tvar bone;\r\n\t\r\n\t\t// recover the bind-time world matrices\r\n\t\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\t\r\n\t\t\tbone = this.bones[ b ];\r\n\t\r\n\t\t\tif ( bone ) {\r\n\t\r\n\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// compute the local matrices, positions, rotations and scales\r\n\t\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\t\r\n\t\t\tbone = this.bones[ b ];\r\n\t\r\n\t\t\tif ( bone ) {\r\n\t\r\n\t\t\t\tif ( bone.parent ) {\r\n\t\r\n\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\r\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Skeleton.prototype.update = ( function () {\r\n\t\r\n\t\tvar offsetMatrix = new THREE.Matrix4();\r\n\t\r\n\t\treturn function update() {\r\n\t\r\n\t\t\t// flatten bone matrices to array\r\n\t\r\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\t\r\n\t\t\t\t// compute the offset between the current and the original transform\r\n\t\r\n\t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\r\n\t\r\n\t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\r\n\t\t\t\toffsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( this.useVertexTexture ) {\r\n\t\r\n\t\t\t\tthis.boneTexture.needsUpdate = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t} )();\r\n\t\r\n\tTHREE.Skeleton.prototype.clone = function () {\r\n\t\r\n\t\treturn new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/objects/SkinnedMesh.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\t\r\n\tTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\r\n\t\r\n\t\tTHREE.Mesh.call( this, geometry, material );\r\n\t\r\n\t\tthis.type = 'SkinnedMesh';\r\n\t\r\n\t\tthis.bindMode = \"attached\";\r\n\t\tthis.bindMatrix = new THREE.Matrix4();\r\n\t\tthis.bindMatrixInverse = new THREE.Matrix4();\r\n\t\r\n\t\t// init bones\r\n\t\r\n\t\t// TODO: remove bone creation as there is no reason (other than\r\n\t\t// convenience) for THREE.SkinnedMesh to do this.\r\n\t\r\n\t\tvar bones = [];\r\n\t\r\n\t\tif ( this.geometry && this.geometry.bones !== undefined ) {\r\n\t\r\n\t\t\tvar bone, gbone;\r\n\t\r\n\t\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\r\n\t\r\n\t\t\t\tgbone = this.geometry.bones[ b ];\r\n\t\r\n\t\t\t\tbone = new THREE.Bone( this );\r\n\t\t\t\tbones.push( bone );\r\n\t\r\n\t\t\t\tbone.name = gbone.name;\r\n\t\t\t\tbone.position.fromArray( gbone.pos );\r\n\t\t\t\tbone.quaternion.fromArray( gbone.rotq );\r\n\t\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\r\n\t\r\n\t\t\t\tgbone = this.geometry.bones[ b ];\r\n\t\r\n\t\t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null ) {\r\n\t\r\n\t\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthis.add( bones[ b ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.normalizeSkinWeights();\r\n\t\r\n\t\tthis.updateMatrixWorld( true );\r\n\t\tthis.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );\r\n\tTHREE.SkinnedMesh.prototype.constructor = THREE.SkinnedMesh;\r\n\t\r\n\tTHREE.SkinnedMesh.prototype.bind = function( skeleton, bindMatrix ) {\r\n\t\r\n\t\tthis.skeleton = skeleton;\r\n\t\r\n\t\tif ( bindMatrix === undefined ) {\r\n\t\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\t\r\n\t\t\tthis.skeleton.calculateInverses();\r\n\t\r\n\t\t\tbindMatrix = this.matrixWorld;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.bindMatrix.copy( bindMatrix );\r\n\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SkinnedMesh.prototype.pose = function () {\r\n\t\r\n\t\tthis.skeleton.pose();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {\r\n\t\r\n\t\tif ( this.geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\r\n\t\r\n\t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\r\n\t\r\n\t\t\t\tif ( scale !== Infinity ) {\r\n\t\r\n\t\t\t\t\tsw.multiplyScalar( scale );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t} else if ( this.geometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\tvar vec = new THREE.Vector4();\r\n\t\r\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\r\n\t\r\n\t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\r\n\t\r\n\t\t\t\tvec.x = skinWeight.getX( i );\r\n\t\t\t\tvec.y = skinWeight.getY( i );\r\n\t\t\t\tvec.z = skinWeight.getZ( i );\r\n\t\t\t\tvec.w = skinWeight.getW( i );\r\n\t\r\n\t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\r\n\t\r\n\t\t\t\tif ( scale !== Infinity ) {\r\n\t\r\n\t\t\t\t\tvec.multiplyScalar( scale );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SkinnedMesh.prototype.updateMatrixWorld = function( force ) {\r\n\t\r\n\t\tTHREE.Mesh.prototype.updateMatrixWorld.call( this, true );\r\n\t\r\n\t\tif ( this.bindMode === \"attached\" ) {\r\n\t\r\n\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\r\n\t\r\n\t\t} else if ( this.bindMode === \"detached\" ) {\r\n\t\r\n\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SkinnedMesh.prototype.clone = function() {\r\n\t\r\n\t\treturn new this.constructor( this.geometry, this.material, this.useVertexTexture ).copy( this );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/objects/LOD.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.LOD = function () {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'LOD';\r\n\t\r\n\t\tObject.defineProperties( this, {\r\n\t\t\tlevels: {\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: []\r\n\t\t\t},\r\n\t\t\tobjects: {\r\n\t\t\t\tget: function () {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\r\n\t\t\t\t\treturn this.levels;\r\n\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.LOD.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.LOD.prototype.constructor = THREE.LOD;\r\n\t\r\n\tTHREE.LOD.prototype.addLevel = function ( object, distance ) {\r\n\t\r\n\t\tif ( distance === undefined ) distance = 0;\r\n\t\r\n\t\tdistance = Math.abs( distance );\r\n\t\r\n\t\tvar levels = this.levels;\r\n\t\r\n\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\t\r\n\t\t\tif ( distance < levels[ l ].distance ) {\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\r\n\t\r\n\t\tthis.add( object );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LOD.prototype.getObjectForDistance = function ( distance ) {\r\n\t\r\n\t\tvar levels = this.levels;\r\n\t\r\n\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tif ( distance < levels[ i ].distance ) {\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn levels[ i - 1 ].object;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LOD.prototype.raycast = ( function () {\r\n\t\r\n\t\tvar matrixPosition = new THREE.Vector3();\r\n\t\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\t\r\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\r\n\t\r\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\r\n\t\r\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\r\n\t\r\n\t\t};\r\n\t\r\n\t}() );\r\n\t\r\n\tTHREE.LOD.prototype.update = function () {\r\n\t\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\t\r\n\t\treturn function update( camera ) {\r\n\t\r\n\t\t\tvar levels = this.levels;\r\n\t\r\n\t\t\tif ( levels.length > 1 ) {\r\n\t\r\n\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\r\n\t\r\n\t\t\t\tvar distance = v1.distanceTo( v2 );\r\n\t\r\n\t\t\t\tlevels[ 0 ].object.visible = true;\r\n\t\r\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\r\n\t\r\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\r\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( ; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tlevels[ i ].object.visible = false;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\tTHREE.LOD.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source, false );\r\n\t\r\n\t\tvar levels = source.levels;\r\n\t\r\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tvar level = levels[ i ];\r\n\t\r\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LOD.prototype.toJSON = function ( meta ) {\r\n\t\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\t\r\n\t\tdata.object.levels = [];\r\n\t\r\n\t\tvar levels = this.levels;\r\n\t\r\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tvar level = levels[ i ];\r\n\t\r\n\t\t\tdata.object.levels.push( {\r\n\t\t\t\tobject: level.object.uuid,\r\n\t\t\t\tdistance: level.distance\r\n\t\t\t} );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn data;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/objects/Sprite.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Sprite = ( function () {\r\n\t\r\n\t\tvar indices = new Uint16Array( [ 0, 1, 2,  0, 2, 3 ] );\r\n\t\tvar vertices = new Float32Array( [ - 0.5, - 0.5, 0,   0.5, - 0.5, 0,   0.5, 0.5, 0,   - 0.5, 0.5, 0 ] );\r\n\t\tvar uvs = new Float32Array( [ 0, 0,   1, 0,   1, 1,   0, 1 ] );\r\n\t\r\n\t\tvar geometry = new THREE.BufferGeometry();\r\n\t\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\t\r\n\t\treturn function Sprite( material ) {\r\n\t\r\n\t\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\t\tthis.type = 'Sprite';\r\n\t\r\n\t\t\tthis.geometry = geometry;\r\n\t\t\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\r\n\t\r\n\t\t};\r\n\t\r\n\t} )();\r\n\t\r\n\tTHREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Sprite.prototype.constructor = THREE.Sprite;\r\n\t\r\n\tTHREE.Sprite.prototype.raycast = ( function () {\r\n\t\r\n\t\tvar matrixPosition = new THREE.Vector3();\r\n\t\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\t\r\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\r\n\t\r\n\t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\r\n\t\t\tvar guessSizeSq = this.scale.x * this.scale.y;\r\n\t\r\n\t\t\tif ( distanceSq > guessSizeSq ) {\r\n\t\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tintersects.push( {\r\n\t\r\n\t\t\t\tdistance: Math.sqrt( distanceSq ),\r\n\t\t\t\tpoint: this.position,\r\n\t\t\t\tface: null,\r\n\t\t\t\tobject: this\r\n\t\r\n\t\t\t} );\r\n\t\r\n\t\t};\r\n\t\r\n\t}() );\r\n\t\r\n\tTHREE.Sprite.prototype.clone = function () {\r\n\t\r\n\t\treturn new this.constructor( this.material ).copy( this );\r\n\t\r\n\t};\r\n\t\r\n\t// Backwards compatibility\r\n\t\r\n\tTHREE.Particle = THREE.Sprite;\r\n\t\r\n\t// File:src/objects/LensFlare.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.lensFlares = [];\r\n\t\r\n\t\tthis.positionScreen = new THREE.Vector3();\r\n\t\tthis.customUpdateCallback = undefined;\r\n\t\r\n\t\tif ( texture !== undefined ) {\r\n\t\r\n\t\t\tthis.add( texture, size, distance, blending, color );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.LensFlare.prototype.constructor = THREE.LensFlare;\r\n\t\r\n\t\r\n\t/*\r\n\t * Add: adds another flare\r\n\t */\r\n\t\r\n\tTHREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {\r\n\t\r\n\t\tif ( size === undefined ) size = - 1;\r\n\t\tif ( distance === undefined ) distance = 0;\r\n\t\tif ( opacity === undefined ) opacity = 1;\r\n\t\tif ( color === undefined ) color = new THREE.Color( 0xffffff );\r\n\t\tif ( blending === undefined ) blending = THREE.NormalBlending;\r\n\t\r\n\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\r\n\t\r\n\t\tthis.lensFlares.push( {\r\n\t\t\ttexture: texture,\t// THREE.Texture\r\n\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\r\n\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\r\n\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\r\n\t\t\tscale: 1, \t\t// scale\r\n\t\t\trotation: 0, \t\t// rotation\r\n\t\t\topacity: opacity,\t// opacity\r\n\t\t\tcolor: color,\t\t// color\r\n\t\t\tblending: blending\t// blending\r\n\t\t} );\r\n\t\r\n\t};\r\n\t\r\n\t/*\r\n\t * Update lens flares update positions on all flares based on the screen position\r\n\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\r\n\t */\r\n\t\r\n\tTHREE.LensFlare.prototype.updateLensFlares = function () {\r\n\t\r\n\t\tvar f, fl = this.lensFlares.length;\r\n\t\tvar flare;\r\n\t\tvar vecX = - this.positionScreen.x * 2;\r\n\t\tvar vecY = - this.positionScreen.y * 2;\r\n\t\r\n\t\tfor ( f = 0; f < fl; f ++ ) {\r\n\t\r\n\t\t\tflare = this.lensFlares[ f ];\r\n\t\r\n\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\r\n\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\r\n\t\r\n\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\r\n\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LensFlare.prototype.copy = function ( source ) {\r\n\t\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\t\r\n\t\tthis.positionScreen.copy( source.positionScreen );\r\n\t\tthis.customUpdateCallback = source.customUpdateCallback;\r\n\t\r\n\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/scenes/Scene.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Scene = function () {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.type = 'Scene';\r\n\t\r\n\t\tthis.fog = null;\r\n\t\tthis.overrideMaterial = null;\r\n\t\r\n\t\tthis.autoUpdate = true; // checked by the renderer\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.Scene.prototype.constructor = THREE.Scene;\r\n\t\r\n\tTHREE.Scene.prototype.copy = function ( source, recursive ) {\r\n\t\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source, recursive );\r\n\t\r\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\r\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\r\n\t\r\n\t\tthis.autoUpdate = source.autoUpdate;\r\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/scenes/Fog.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.Fog = function ( color, near, far ) {\r\n\t\r\n\t\tthis.name = '';\r\n\t\r\n\t\tthis.color = new THREE.Color( color );\r\n\t\r\n\t\tthis.near = ( near !== undefined ) ? near : 1;\r\n\t\tthis.far = ( far !== undefined ) ? far : 1000;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Fog.prototype.clone = function () {\r\n\t\r\n\t\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/scenes/FogExp2.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.FogExp2 = function ( color, density ) {\r\n\t\r\n\t\tthis.name = '';\r\n\t\r\n\t\tthis.color = new THREE.Color( color );\r\n\t\tthis.density = ( density !== undefined ) ? density : 0.00025;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.FogExp2.prototype.clone = function () {\r\n\t\r\n\t\treturn new THREE.FogExp2( this.color.getHex(), this.density );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk.js\r\n\t\r\n\tTHREE.ShaderChunk = {};\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'alphamap_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'alphamap_pars_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tuniform sampler2D alphaMap;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'alphatest_fragment' ] = \"#ifdef ALPHATEST\\n\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'aomap_fragment' ] = \"#ifdef USE_AOMAP\\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\t#endif\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'aomap_pars_fragment' ] = \"#ifdef USE_AOMAP\\n\tuniform sampler2D aoMap;\\n\tuniform float aoMapIntensity;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'begin_vertex' ] = \"\\nvec3 transformed = vec3( position );\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'beginnormal_vertex' ] = \"\\nvec3 objectNormal = vec3( normal );\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/bsdfs.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'bsdfs' ] = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\t\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\t\t}\\n\t\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\treturn 1.0 / ( gl * gv );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat alpha = pow2( roughness );\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_GGX_Smith( alpha, dotNL, dotNV );\\n\tfloat D = D_GGX( alpha, dotNH );\\n\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\tvec4 r = roughness * c0 + c1;\\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_BlinnPhong_Implicit( );\\n\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'bumpmap_pars_fragment' ] = \"#ifdef USE_BUMPMAP\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\tvec2 dHdxy_fwd() {\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\t\treturn vec2( dBx, dBy );\\n\t}\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\t}\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'color_fragment' ] = \"#ifdef USE_COLOR\\n\tdiffuseColor.rgb *= vColor;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'color_pars_fragment' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'color_pars_vertex' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'color_vertex' ] = \"#ifdef USE_COLOR\\n\tvColor.xyz = color.xyz;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/common.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'common' ] = \"#define PI 3.14159\\n#define PI2 6.28318\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nstruct IncidentLight {\\n\tvec3 color;\\n\tvec3 direction;\\n\tbool visible;\\n};\\nstruct ReflectedLight {\\n\tvec3 directDiffuse;\\n\tvec3 directSpecular;\\n\tvec3 indirectDiffuse;\\n\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\tvec3 position;\\n\tvec3 normal;\\n\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'cube_uv_reflection_fragment' ] = \"#ifdef ENVMAP_TYPE_CUBE_UV\\nconst float cubeUV_textureSize = 1024.0;\\nint getFaceFromDirection(vec3 direction) {\\n    vec3 absDirection = abs(direction);\\n    int face = -1;\\n    if( absDirection.x > absDirection.z ) {\\n        if(absDirection.x > absDirection.y )\\n            face = direction.x > 0.0 ? 0 : 3;\\n        else\\n            face = direction.y > 0.0 ? 1 : 4;\\n    }\\n    else {\\n        if(absDirection.z > absDirection.y )\\n            face = direction.z > 0.0 ? 2 : 5;\\n        else\\n            face = direction.y > 0.0 ? 1 : 4;\\n    }\\n    return face;\\n}\\nconst float cubeUV_maxLods1 = log2(cubeUV_textureSize*0.25) - 1.0;\\nconst float cubeUV_rangeClamp = exp2((6.0 - 1.0) * 2.0);\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n    float scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n    float dxRoughness = dFdx(roughness);\\n    float dyRoughness = dFdy(roughness);\\n    vec3 dx = dFdx( vec * scale * dxRoughness );\\n    vec3 dy = dFdy( vec * scale * dyRoughness );\\n    float d = max( dot( dx, dx ), dot( dy, dy ) );\\n    d = clamp(d, 1.0, cubeUV_rangeClamp);\\n    float mipLevel = 0.5 * log2(d);\\n    return vec2(floor(mipLevel), fract(mipLevel));\\n}\\nconst float cubeUV_maxLods2 = log2(cubeUV_textureSize*0.25) - 2.0;\\nconst float cubeUV_rcpTextureSize = 1.0 / cubeUV_textureSize;\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n    mipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n    float a = 16.0 * cubeUV_rcpTextureSize;\\n    vec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n    vec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n    float powScale = exp2_packed.x * exp2_packed.y;\\n    float scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n    float mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n    bool bRes = mipLevel == 0.0;\\n    scale =  bRes && (scale < a) ? a : scale;\\n    vec3 r;\\n    vec2 offset;\\n    int face = getFaceFromDirection(direction);\\n    float rcpPowScale = 1.0 / powScale;\\n    if( face == 0) {\\n        r = vec3(direction.x, -direction.z, direction.y);\\n        offset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n        offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n    }\\n    else if( face == 1) {\\n        r = vec3(direction.y, direction.x, direction.z);\\n        offset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n        offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n    }\\n    else if( face == 2) {\\n        r = vec3(direction.z, direction.x, direction.y);\\n        offset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n        offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n    }\\n    else if( face == 3) {\\n        r = vec3(direction.x, direction.z, direction.y);\\n        offset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n        offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n    }\\n    else if( face == 4) {\\n        r = vec3(direction.y, direction.x, -direction.z);\\n        offset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n        offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n    }\\n    else {\\n        r = vec3(direction.z, -direction.x, direction.y);\\n        offset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n        offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n    }\\n    r = normalize(r);\\n    float texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n    vec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n    vec2 base = offset + vec2( texelOffset );\\n    return base + s * ( scale - 2.0 * texelOffset );\\n}\\nconst float cubeUV_maxLods3 = log2(cubeUV_textureSize*0.25) - 3.0;\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n    float roughnessVal = roughness* cubeUV_maxLods3;\\n    float r1 = floor(roughnessVal);\\n    float r2 = r1 + 1.0;\\n    float t = fract(roughnessVal);\\n    vec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n    float s = mipInfo.y;\\n    float level0 = mipInfo.x;\\n    float level1 = level0 + 1.0;\\n    level1 = level1 > 5.0 ? 5.0 : level1;\\n    level0 += min( floor( s + 0.5 ), 5.0 );\\n    vec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n    vec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n    vec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n    vec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n    vec4 result = mix(color10, color20, t);\\n    return vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'defaultnormal_vertex' ] = \"#ifdef FLIP_SIDED\\n\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'displacementmap_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'displacementmap_pars_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\tuniform sampler2D displacementMap;\\n\tuniform float displacementScale;\\n\tuniform float displacementBias;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'emissivemap_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'emissivemap_pars_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tuniform sampler2D emissiveMap;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'encodings_pars_fragment' ] = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/encodings_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'encodings_fragment' ] = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'envmap_fragment' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#else\\n\t\tvec3 reflectVec = vReflect;\\n\t#endif\\n\t#ifdef DOUBLE_SIDED\\n\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t#else\\n\t\tfloat flipNormal = 1.0;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\tvec2 sampleUV;\\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\\n\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\t#endif\\n\tenvColor = envMapTexelToLinear( envColor );\\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_MIX )\\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_ADD )\\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\t#endif\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'envmap_pars_fragment' ] = \"#if defined( USE_ENVMAP ) || defined( STANDARD )\\n\tuniform float reflectivity;\\n\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tuniform samplerCube envMap;\\n\t#else\\n\t\tuniform sampler2D envMap;\\n\t#endif\\n\tuniform float flipEnvMap;\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( STANDARD )\\n\t\tuniform float refractionRatio;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t#endif\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'envmap_pars_vertex' ] = \"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\\n\tvarying vec3 vReflect;\\n\tuniform float refractionRatio;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'envmap_vertex' ] = \"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\t#else\\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t#endif\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'fog_fragment' ] = \"#ifdef USE_FOG\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\t#else\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\t#endif\\n\t#ifdef FOG_EXP2\\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\t#else\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\t#endif\\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'fog_pars_fragment' ] = \"#ifdef USE_FOG\\n\tuniform vec3 fogColor;\\n\t#ifdef FOG_EXP2\\n\t\tuniform float fogDensity;\\n\t#else\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lightmap_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lightmap_pars_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\tuniform sampler2D lightMap;\\n\tuniform float lightMapIntensity;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lights_lambert_vertex' ] = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tdirectLight = getPointDirectLightIrradiance( pointLights[ i ], geometry );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tdirectLight = getSpotDirectLightIrradiance( spotLights[ i ], geometry );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectLight = getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\t\t#endif\\n\t}\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lights_pars.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lights_pars' ] = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\tvec3 irradiance = ambientLightColor;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\tstruct DirectionalLight {\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\tIncidentLight getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry ) {\\n\t\tIncidentLight directLight;\\n\t\tdirectLight.color = directionalLight.color;\\n\t\tdirectLight.direction = directionalLight.direction;\\n\t\tdirectLight.visible = true;\\n\t\treturn directLight;\\n\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\tstruct PointLight {\\n\t\tvec3 position;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\tIncidentLight getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry ) {\\n\t\tIncidentLight directLight;\\n\t\tvec3 lVector = pointLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\t\t\tdirectLight.color = pointLight.color;\\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t\treturn directLight;\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tstruct SpotLight {\\n\t\tvec3 position;\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tfloat coneCos;\\n\t\tfloat penumbraCos;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\tIncidentLight getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry ) {\\n\t\tIncidentLight directLight;\\n\t\tvec3 lVector = spotLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\t\t\tdirectLight.color = spotLight.color;\\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t\treturn directLight;\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tstruct HemisphereLight {\\n\t\tvec3 direction;\\n\t\tvec3 skyColor;\\n\t\tvec3 groundColor;\\n\t};\\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tirradiance *= PI;\\n\t\t#endif\\n\t\treturn irradiance;\\n\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t\t#else\\n\t\t\tfloat flipNormal = 1.0;\\n\t\t#endif\\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#endif\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\t\t#else\\n\t\t\tvec4 envMapColor = vec4( 0.0 );\\n\t\t#endif\\n\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\\n\t}\\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\t}\\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\t\t#endif\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t\t#else\\n\t\t\tfloat flipNormal = 1.0;\\n\t\t#endif\\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#endif\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\t\tvec2 sampleUV;\\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#endif\\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#endif\\n\t\t#endif\\n\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\treturn envMapColor.rgb * envMapIntensity;\\n\t}\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lights_phong_fragment' ] = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lights_phong_pars_fragment' ] = \"#ifdef USE_ENVMAP\\n\tvarying vec3 vWorldPosition;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\tvec3\tdiffuseColor;\\n\tvec3\tspecularColor;\\n\tfloat\tspecularShininess;\\n\tfloat\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\t(0)\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lights_phong_pars_vertex' ] = \"#ifdef USE_ENVMAP\\n\tvarying vec3 vWorldPosition;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lights_phong_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lights_phong_vertex' ] = \"#ifdef USE_ENVMAP\\n\tvWorldPosition = worldPosition.xyz;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lights_standard_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lights_standard_fragment' ] = \"StandardMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\nmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lights_standard_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lights_standard_pars_fragment' ] = \"struct StandardMaterial {\\n\tvec3\tdiffuseColor;\\n\tfloat\tspecularRoughness;\\n\tvec3\tspecularColor;\\n};\\nvoid RE_Direct_Standard( const in IncidentLight directLight, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n}\\nvoid RE_IndirectDiffuse_Standard( const in vec3 irradiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Standard( const in vec3 radiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_Standard\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Standard\\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Standard\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/lights_template.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'lights_template' ] = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tdirectLight = getPointDirectLightIrradiance( pointLight, geometry );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tdirectLight = getSpotDirectLightIrradiance( spotLight, geometry );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tdirectLight = getDirectionalDirectLightIrradiance( directionalLight, geometry );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\t#ifdef USE_LIGHTMAP\\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tlightMapIrradiance *= PI;\\n\t\t#endif\\n\t\tirradiance += lightMapIrradiance;\\n\t#endif\\n\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t}\\n\t#endif\\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\t#endif\\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\tRE_IndirectSpecular( radiance, geometry, material, reflectedLight );\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'logdepthbuf_fragment' ] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'logdepthbuf_pars_fragment' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tuniform float logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'logdepthbuf_pars_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n\tuniform float logDepthBufFC;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'logdepthbuf_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\t#else\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\t#endif\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'map_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 texelColor = texture2D( map, vUv );\\n\ttexelColor = mapTexelToLinear( texelColor );\\n\tdiffuseColor *= texelColor;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'map_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform sampler2D map;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'map_particle_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'map_particle_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform vec4 offsetRepeat;\\n\tuniform sampler2D map;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'metalnessmap_fragment' ] = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'metalnessmap_pars_fragment' ] = \"#ifdef USE_METALNESSMAP\\n\tuniform sampler2D metalnessMap;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'morphnormal_vertex' ] = \"#ifdef USE_MORPHNORMALS\\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'morphtarget_pars_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\t#ifndef USE_MORPHNORMALS\\n\tuniform float morphTargetInfluences[ 8 ];\\n\t#else\\n\tuniform float morphTargetInfluences[ 4 ];\\n\t#endif\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'morphtarget_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\t#ifndef USE_MORPHNORMALS\\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\t#endif\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'normal_fragment' ] = \"#ifdef FLAT_SHADED\\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\tvec3 normal = normalize( vNormal );\\n\t#ifdef DOUBLE_SIDED\\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\\n\t#endif\\n#endif\\n#ifdef USE_NORMALMAP\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'normalmap_pars_fragment' ] = \"#ifdef USE_NORMALMAP\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\t}\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'premultiplied_alpha_fragment' ] = \"#ifdef PREMULTIPLIED_ALPHA\\n\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'project_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'roughnessmap_fragment' ] = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'roughnessmap_pars_fragment' ] = \"#ifdef USE_ROUGHNESSMAP\\n\tuniform sampler2D roughnessMap;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'shadowmap_pars_fragment' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\\n\t\treturn dot( rgba_depth, bit_shift );\\n\t}\\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\t\treturn step( compare, unpackDepth( texture2D( depths, uv ) ) );\\n\t}\\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\t\tvec2 f = fract( uv * size + 0.5 );\\n\t\tfloat a = mix( lb, lt, f.y );\\n\t\tfloat b = mix( rb, rt, f.y );\\n\t\tfloat c = mix( a, b, f.x );\\n\t\treturn c;\\n\t}\\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tshadowCoord.xyz /= shadowCoord.w;\\n\t\tshadowCoord.z += shadowBias;\\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\tbool inFrustum = all( inFrustumVec );\\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\t\tbool frustumTest = all( frustumTestVec );\\n\t\tif ( frustumTest ) {\\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\t\t#endif\\n\t\t}\\n\t\treturn 1.0;\\n\t}\\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\t\tvec3 absV = abs( v );\\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\t\tabsV *= scaleToCube;\\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\t\tvec2 planar = v.xy;\\n\t\tfloat almostATexel = 1.5 * texelSizeY;\\n\t\tfloat almostOne = 1.0 - almostATexel;\\n\t\tif ( absV.z >= almostOne ) {\\n\t\t\tif ( v.z > 0.0 )\\n\t\t\t\tplanar.x = 4.0 - v.x;\\n\t\t} else if ( absV.x >= almostOne ) {\\n\t\t\tfloat signX = sign( v.x );\\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\\n\t\t} else if ( absV.y >= almostOne ) {\\n\t\t\tfloat signY = sign( v.y );\\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\t\t\tplanar.y = v.z * signY - 2.0;\\n\t\t}\\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\t}\\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\t\tvec3 lightToPosition = shadowCoord.xyz;\\n\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\t\t#endif\\n\t}\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'shadowmap_pars_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'shadowmap_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'shadowmask_pars_fragment' ] = \"float getShadowMask() {\\n\tfloat shadow = 1.0;\\n\t#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#endif\\n\treturn shadow;\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'skinbase_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'skinning_pars_vertex' ] = \"#ifdef USE_SKINNING\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\t#ifdef BONE_TEXTURE\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\t\t\ty = dy * ( y + 0.5 );\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\t\t\treturn bone;\\n\t\t}\\n\t#else\\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\t\t}\\n\t#endif\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'skinning_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'skinnormal_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'specularmap_fragment' ] = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n#else\\n\tspecularStrength = 1.0;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'specularmap_pars_fragment' ] = \"#ifdef USE_SPECULARMAP\\n\tuniform sampler2D specularMap;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'tonemapping_fragment' ] = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'tonemapping_pars_fragment' ] = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'uv2_pars_fragment' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvarying vec2 vUv2;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'uv2_pars_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tattribute vec2 uv2;\\n\tvarying vec2 vUv2;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'uv2_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvUv2 = uv2;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'uv_pars_fragment' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'uv_pars_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'uv_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'worldpos_vertex' ] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( STANDARD ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\t#ifdef USE_SKINNING\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\t#else\\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\t#endif\\n#endif\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/UniformsUtils.js\r\n\t\r\n\t/**\r\n\t * Uniform Utilities\r\n\t */\r\n\t\r\n\tTHREE.UniformsUtils = {\r\n\t\r\n\t\tmerge: function ( uniforms ) {\r\n\t\r\n\t\t\tvar merged = {};\r\n\t\r\n\t\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\r\n\t\r\n\t\t\t\tvar tmp = this.clone( uniforms[ u ] );\r\n\t\r\n\t\t\t\tfor ( var p in tmp ) {\r\n\t\r\n\t\t\t\t\tmerged[ p ] = tmp[ p ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn merged;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function ( uniforms_src ) {\r\n\t\r\n\t\t\tvar uniforms_dst = {};\r\n\t\r\n\t\t\tfor ( var u in uniforms_src ) {\r\n\t\r\n\t\t\t\tuniforms_dst[ u ] = {};\r\n\t\r\n\t\t\t\tfor ( var p in uniforms_src[ u ] ) {\r\n\t\r\n\t\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\r\n\t\r\n\t\t\t\t\tif ( parameter_src instanceof THREE.Color ||\r\n\t\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\r\n\t\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\r\n\t\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\r\n\t\t\t\t\t\t parameter_src instanceof THREE.Matrix3 ||\r\n\t\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\r\n\t\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\r\n\t\r\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\r\n\t\r\n\t\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\r\n\t\r\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn uniforms_dst;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/shaders/UniformsLib.js\r\n\t\r\n\t/**\r\n\t * Uniforms library for shared webgl shaders\r\n\t */\r\n\t\r\n\tTHREE.UniformsLib = {\r\n\t\r\n\t\tcommon: {\r\n\t\r\n\t\t\t\"diffuse\": { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\t\"opacity\": { type: \"f\", value: 1.0 },\r\n\t\r\n\t\t\t\"map\": { type: \"t\", value: null },\r\n\t\t\t\"offsetRepeat\": { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) },\r\n\t\r\n\t\t\t\"specularMap\": { type: \"t\", value: null },\r\n\t\t\t\"alphaMap\": { type: \"t\", value: null },\r\n\t\r\n\t\t\t\"envMap\": { type: \"t\", value: null },\r\n\t\t\t\"flipEnvMap\": { type: \"f\", value: - 1 },\r\n\t\t\t\"reflectivity\": { type: \"f\", value: 1.0 },\r\n\t\t\t\"refractionRatio\": { type: \"f\", value: 0.98 }\r\n\t\r\n\t\t},\r\n\t\r\n\t\taomap: {\r\n\t\r\n\t\t\t\"aoMap\": { type: \"t\", value: null },\r\n\t\t\t\"aoMapIntensity\": { type: \"f\", value: 1 }\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlightmap: {\r\n\t\r\n\t\t\t\"lightMap\": { type: \"t\", value: null },\r\n\t\t\t\"lightMapIntensity\": { type: \"f\", value: 1 }\r\n\t\r\n\t\t},\r\n\t\r\n\t\temissivemap: {\r\n\t\r\n\t\t\t\"emissiveMap\": { type: \"t\", value: null }\r\n\t\r\n\t\t},\r\n\t\r\n\t\tbumpmap: {\r\n\t\r\n\t\t\t\"bumpMap\": { type: \"t\", value: null },\r\n\t\t\t\"bumpScale\": { type: \"f\", value: 1 }\r\n\t\r\n\t\t},\r\n\t\r\n\t\tnormalmap: {\r\n\t\r\n\t\t\t\"normalMap\": { type: \"t\", value: null },\r\n\t\t\t\"normalScale\": { type: \"v2\", value: new THREE.Vector2( 1, 1 ) }\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdisplacementmap: {\r\n\t\r\n\t\t\t\"displacementMap\": { type: \"t\", value: null },\r\n\t\t\t\"displacementScale\": { type: \"f\", value: 1 },\r\n\t\t\t\"displacementBias\": { type: \"f\", value: 0 }\r\n\t\r\n\t\t},\r\n\t\r\n\t\troughnessmap: {\r\n\t\r\n\t\t\t\"roughnessMap\": { type: \"t\", value: null }\r\n\t\r\n\t\t},\r\n\t\r\n\t\tmetalnessmap: {\r\n\t\r\n\t\t\t\"metalnessMap\": { type: \"t\", value: null }\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfog: {\r\n\t\r\n\t\t\t\"fogDensity\": { type: \"f\", value: 0.00025 },\r\n\t\t\t\"fogNear\": { type: \"f\", value: 1 },\r\n\t\t\t\"fogFar\": { type: \"f\", value: 2000 },\r\n\t\t\t\"fogColor\": { type: \"c\", value: new THREE.Color( 0xffffff ) }\r\n\t\r\n\t\t},\r\n\t\r\n\t\tlights: {\r\n\t\r\n\t\t\t\"ambientLightColor\": { type: \"fv\", value: [] },\r\n\t\r\n\t\t\t\"directionalLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\t\"direction\": { type: \"v3\" },\r\n\t\t\t\t\"color\": { type: \"c\" },\r\n\t\r\n\t\t\t\t\"shadow\": { type: \"i\" },\r\n\t\t\t\t\"shadowBias\": { type: \"f\" },\r\n\t\t\t\t\"shadowRadius\": { type: \"f\" },\r\n\t\t\t\t\"shadowMapSize\": { type: \"v2\" }\r\n\t\t\t} },\r\n\t\r\n\t\t\t\"directionalShadowMap\": { type: \"tv\", value: [] },\r\n\t\t\t\"directionalShadowMatrix\": { type: \"m4v\", value: [] },\r\n\t\r\n\t\t\t\"spotLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\t\"color\": { type: \"c\" },\r\n\t\t\t\t\"position\": { type: \"v3\" },\r\n\t\t\t\t\"direction\": { type: \"v3\" },\r\n\t\t\t\t\"distance\": { type: \"f\" },\r\n\t\t\t\t\"coneCos\": { type: \"f\" },\r\n\t\t\t\t\"penumbraCos\": { type: \"f\" },\r\n\t\t\t\t\"decay\": { type: \"f\" },\r\n\t\r\n\t\t\t\t\"shadow\": { type: \"i\" },\r\n\t\t\t\t\"shadowBias\": { type: \"f\" },\r\n\t\t\t\t\"shadowRadius\": { type: \"f\" },\r\n\t\t\t\t\"shadowMapSize\": { type: \"v2\" }\r\n\t\t\t} },\r\n\t\r\n\t\t\t\"spotShadowMap\": { type: \"tv\", value: [] },\r\n\t\t\t\"spotShadowMatrix\": { type: \"m4v\", value: [] },\r\n\t\r\n\t\t\t\"pointLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\t\"color\": { type: \"c\" },\r\n\t\t\t\t\"position\": { type: \"v3\" },\r\n\t\t\t\t\"decay\": { type: \"f\" },\r\n\t\t\t\t\"distance\": { type: \"f\" },\r\n\t\r\n\t\t\t\t\"shadow\": { type: \"i\" },\r\n\t\t\t\t\"shadowBias\": { type: \"f\" },\r\n\t\t\t\t\"shadowRadius\": { type: \"f\" },\r\n\t\t\t\t\"shadowMapSize\": { type: \"v2\" }\r\n\t\t\t} },\r\n\t\r\n\t\t\t\"pointShadowMap\": { type: \"tv\", value: [] },\r\n\t\t\t\"pointShadowMatrix\": { type: \"m4v\", value: [] },\r\n\t\r\n\t\t\t\"hemisphereLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\t\"direction\": { type: \"v3\" },\r\n\t\t\t\t\"skyColor\": { type: \"c\" },\r\n\t\t\t\t\"groundColor\": { type: \"c\" }\r\n\t\t\t} }\r\n\t\r\n\t\t},\r\n\t\r\n\t\tpoints: {\r\n\t\r\n\t\t\t\"diffuse\": { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\t\"opacity\": { type: \"f\", value: 1.0 },\r\n\t\t\t\"size\": { type: \"f\", value: 1.0 },\r\n\t\t\t\"scale\": { type: \"f\", value: 1.0 },\r\n\t\t\t\"map\": { type: \"t\", value: null },\r\n\t\t\t\"offsetRepeat\": { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) }\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/cube_frag.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'cube_frag' ] = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/cube_vert.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'cube_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\t#include <logdepthbuf_vertex>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/depth_frag.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'depth_frag' ] = \"uniform float mNear;\\nuniform float mFar;\\nuniform float opacity;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\t#include <logdepthbuf_fragment>\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\t#else\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\t#endif\\n\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );\\n\tgl_FragColor = vec4( vec3( color ), opacity );\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/depth_vert.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'depth_vert' ] = \"#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/depthRGBA_frag.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'depthRGBA_frag' ] = \"#include <common>\\n#include <logdepthbuf_pars_fragment>\\nvec4 pack_depth( const in float depth ) {\\n\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\\n\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\\n\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\\n\tres -= res.xxyz * bit_mask;\\n\treturn res;\\n}\\nvoid main() {\\n\t#include <logdepthbuf_fragment>\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );\\n\t#else\\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\\n\t#endif\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/depthRGBA_vert.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'depthRGBA_vert' ] = \"#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'distanceRGBA_frag' ] = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\nvec4 pack1K ( float depth ) {\\n\tdepth /= 1000.0;\\n\tconst vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\\n\tconst vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\\n\tvec4 res = mod( depth * bitSh * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\\n\tres -= res.xxyz * bitMsk;\\n\treturn res;\\n}\\nfloat unpack1K ( vec4 color ) {\\n\tconst vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\\n\treturn dot( color, bitSh ) * 1000.0;\\n}\\nvoid main () {\\n\tgl_FragColor = pack1K( length( vWorldPosition.xyz - lightPos.xyz ) );\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'distanceRGBA_vert' ] = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\nvoid main() {\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\tvWorldPosition = worldPosition;\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/equirect_frag.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'equirect_frag' ] = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tvec3 direction = normalize( vWorldPosition );\\n\tvec2 sampleUV;\\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/equirect_vert.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'equirect_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\t#include <logdepthbuf_vertex>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/linedashed_frag.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'linedashed_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\t\tdiscard;\\n\t}\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <color_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/linedashed_vert.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'linedashed_vert' ] = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\tvLineDistance = scale * lineDistance;\\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\tgl_Position = projectionMatrix * mvPosition;\\n\t#include <logdepthbuf_vertex>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/meshbasic_frag.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'meshbasic_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\tReflectedLight reflectedLight;\\n\treflectedLight.directDiffuse = vec3( 0.0 );\\n\treflectedLight.directSpecular = vec3( 0.0 );\\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/meshbasic_vert.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'meshbasic_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <skinbase_vertex>\\n\t#ifdef USE_ENVMAP\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#endif\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/meshlambert_frag.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'meshlambert_frag' ] = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <emissivemap_fragment>\\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\t#include <lightmap_fragment>\\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\t#ifdef DOUBLE_SIDED\\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\t#else\\n\t\treflectedLight.directDiffuse = vLightFront;\\n\t#endif\\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/meshlambert_vert.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'meshlambert_vert' ] = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <lights_lambert_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/meshphong_frag.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'meshphong_frag' ] = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_phong_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/meshphong_vert.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'meshphong_vert' ] = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <lights_phong_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <lights_phong_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/meshstandard_frag.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'meshstandard_frag' ] = \"#define STANDARD\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_standard_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <roughnessmap_fragment>\\n\t#include <metalnessmap_fragment>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_standard_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/meshstandard_vert.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'meshstandard_vert' ] = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/normal_frag.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'normal_frag' ] = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tgl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/normal_vert.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'normal_vert' ] = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\tvNormal = normalize( normalMatrix * normal );\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/points_frag.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'points_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_particle_fragment>\\n\t#include <color_fragment>\\n\t#include <alphatest_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib/points_vert.glsl\r\n\t\r\n\tTHREE.ShaderChunk[ 'points_vert' ] = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#ifdef USE_SIZEATTENUATION\\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\t#else\\n\t\tgl_PointSize = size;\\n\t#endif\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\t\r\n\t// File:src/renderers/shaders/ShaderLib.js\r\n\t\r\n\t/**\r\n\t * Webgl Shader Library for three.js\r\n\t *\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t */\r\n\t\r\n\t\r\n\tTHREE.ShaderLib = {\r\n\t\r\n\t\t'basic': {\r\n\t\r\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\t\r\n\t\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"aomap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"fog\" ]\r\n\t\r\n\t\t\t] ),\r\n\t\r\n\t\t\tvertexShader: THREE.ShaderChunk['meshbasic_vert'],\r\n\t\t\tfragmentShader: THREE.ShaderChunk['meshbasic_frag']\r\n\t\r\n\t\t},\r\n\t\r\n\t\t'lambert': {\r\n\t\r\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\t\r\n\t\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"aomap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"lightmap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"emissivemap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\r\n\t\t\t\t{\r\n\t\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) }\r\n\t\t\t\t}\r\n\t\r\n\t\t\t] ),\r\n\t\r\n\t\t\tvertexShader: THREE.ShaderChunk['meshlambert_vert'],\r\n\t\t\tfragmentShader: THREE.ShaderChunk['meshlambert_frag']\r\n\t\r\n\t\t},\r\n\t\r\n\t\t'phong': {\r\n\t\r\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\t\r\n\t\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"aomap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"lightmap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"emissivemap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"bumpmap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"normalmap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"displacementmap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\r\n\t\t\t\t{\r\n\t\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\t\"specular\" : { type: \"c\", value: new THREE.Color( 0x111111 ) },\r\n\t\t\t\t\t\"shininess\": { type: \"f\", value: 30 }\r\n\t\t\t\t}\r\n\t\r\n\t\t\t] ),\r\n\t\r\n\t\t\tvertexShader: THREE.ShaderChunk['meshphong_vert'],\r\n\t\t\tfragmentShader: THREE.ShaderChunk['meshphong_frag']\r\n\t\r\n\t\t},\r\n\t\r\n\t\t'standard': {\r\n\t\r\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\t\r\n\t\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"aomap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"lightmap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"emissivemap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"bumpmap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"normalmap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"displacementmap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"roughnessmap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"metalnessmap\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\r\n\t\t\t\t{\r\n\t\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\t\"roughness\": { type: \"f\", value: 0.5 },\r\n\t\t\t\t\t\"metalness\": { type: \"f\", value: 0 },\r\n\t\t\t\t\t\"envMapIntensity\" : { type: \"f\", value: 1 } // temporary\r\n\t\t\t\t}\r\n\t\r\n\t\t\t] ),\r\n\t\r\n\t\t\tvertexShader: THREE.ShaderChunk['meshstandard_vert'],\r\n\t\t\tfragmentShader: THREE.ShaderChunk['meshstandard_frag']\r\n\t\r\n\t\t},\r\n\t\r\n\t\t'points': {\r\n\t\r\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\t\r\n\t\t\t\tTHREE.UniformsLib[ \"points\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"fog\" ]\r\n\t\r\n\t\t\t] ),\r\n\t\r\n\t\t\tvertexShader: THREE.ShaderChunk['points_vert'],\r\n\t\t\tfragmentShader: THREE.ShaderChunk['points_frag']\r\n\t\r\n\t\t},\r\n\t\r\n\t\t'dashed': {\r\n\t\r\n\t\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\t\r\n\t\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\r\n\t\t\t\t{\r\n\t\t\t\t\t\"scale\"    : { type: \"f\", value: 1 },\r\n\t\t\t\t\t\"dashSize\" : { type: \"f\", value: 1 },\r\n\t\t\t\t\t\"totalSize\": { type: \"f\", value: 2 }\r\n\t\t\t\t}\r\n\t\r\n\t\t\t] ),\r\n\t\r\n\t\t\tvertexShader: THREE.ShaderChunk['linedashed_vert'],\r\n\t\t\tfragmentShader: THREE.ShaderChunk['linedashed_frag']\r\n\t\r\n\t\t},\r\n\t\r\n\t\t'depth': {\r\n\t\r\n\t\t\tuniforms: {\r\n\t\r\n\t\t\t\t\"mNear\": { type: \"f\", value: 1.0 },\r\n\t\t\t\t\"mFar\" : { type: \"f\", value: 2000.0 },\r\n\t\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tvertexShader: THREE.ShaderChunk['depth_vert'],\r\n\t\t\tfragmentShader: THREE.ShaderChunk['depth_frag']\r\n\t\r\n\t\t},\r\n\t\r\n\t\t'normal': {\r\n\t\r\n\t\t\tuniforms: {\r\n\t\r\n\t\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tvertexShader: THREE.ShaderChunk['normal_vert'],\r\n\t\t\tfragmentShader: THREE.ShaderChunk['normal_frag']\r\n\t\r\n\t\t},\r\n\t\r\n\t\t/* -------------------------------------------------------------------------\r\n\t\t//\tCube map shader\r\n\t\t ------------------------------------------------------------------------- */\r\n\t\r\n\t\t'cube': {\r\n\t\r\n\t\t\tuniforms: {\r\n\t\t\t\t\"tCube\": { type: \"t\", value: null },\r\n\t\t\t\t\"tFlip\": { type: \"f\", value: - 1 }\r\n\t\t\t},\r\n\t\r\n\t\t\tvertexShader: THREE.ShaderChunk['cube_vert'],\r\n\t\t\tfragmentShader: THREE.ShaderChunk['cube_frag']\r\n\t\r\n\t\t},\r\n\t\r\n\t\t/* -------------------------------------------------------------------------\r\n\t\t//\tCube map shader\r\n\t\t ------------------------------------------------------------------------- */\r\n\t\r\n\t\t'equirect': {\r\n\t\r\n\t\t\tuniforms: {\r\n\t\t\t\t\"tEquirect\": { type: \"t\", value: null },\r\n\t\t\t\t\"tFlip\": { type: \"f\", value: - 1 }\r\n\t\t\t},\r\n\t\r\n\t\t\tvertexShader: THREE.ShaderChunk['equirect_vert'],\r\n\t\t\tfragmentShader: THREE.ShaderChunk['equirect_frag']\r\n\t\r\n\t\t},\r\n\t\r\n\t\t/* Depth encoding into RGBA texture\r\n\t\t *\r\n\t\t * based on SpiderGL shadow map example\r\n\t\t * http://spidergl.org/example.php?id=6\r\n\t\t *\r\n\t\t * originally from\r\n\t\t * http://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD\r\n\t\t *\r\n\t\t * see also\r\n\t\t * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\r\n\t\t */\r\n\t\r\n\t\t'depthRGBA': {\r\n\t\r\n\t\t\tuniforms: {},\r\n\t\r\n\t\t\tvertexShader: THREE.ShaderChunk['depthRGBA_vert'],\r\n\t\t\tfragmentShader: THREE.ShaderChunk['depthRGBA_frag']\r\n\t\r\n\t\t},\r\n\t\r\n\t\r\n\t\t'distanceRGBA': {\r\n\t\r\n\t\t\tuniforms: {\r\n\t\r\n\t\t\t\t\"lightPos\": { type: \"v3\", value: new THREE.Vector3( 0, 0, 0 ) }\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tvertexShader: THREE.ShaderChunk['distanceRGBA_vert'],\r\n\t\t\tfragmentShader: THREE.ShaderChunk['distanceRGBA_frag']\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/WebGLRenderer.js\r\n\t\r\n\t/**\r\n\t * @author supereggbert / http://www.paulbrunt.co.uk/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author szimek / https://github.com/szimek/\r\n\t */\r\n\t\r\n\tTHREE.WebGLRenderer = function ( parameters ) {\r\n\t\r\n\t\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\r\n\t\r\n\t\tparameters = parameters || {};\r\n\t\r\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),\r\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\r\n\t\r\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\r\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\r\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\r\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\r\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\r\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\r\n\t\r\n\t\tvar lights = [];\r\n\t\r\n\t\tvar opaqueObjects = [];\r\n\t\tvar opaqueObjectsLastIndex = - 1;\r\n\t\tvar transparentObjects = [];\r\n\t\tvar transparentObjectsLastIndex = - 1;\r\n\t\r\n\t\tvar morphInfluences = new Float32Array( 8 );\r\n\t\r\n\t\tvar sprites = [];\r\n\t\tvar lensFlares = [];\r\n\t\r\n\t\t// public properties\r\n\t\r\n\t\tthis.domElement = _canvas;\r\n\t\tthis.context = null;\r\n\t\r\n\t\t// clearing\r\n\t\r\n\t\tthis.autoClear = true;\r\n\t\tthis.autoClearColor = true;\r\n\t\tthis.autoClearDepth = true;\r\n\t\tthis.autoClearStencil = true;\r\n\t\r\n\t\t// scene graph\r\n\t\r\n\t\tthis.sortObjects = true;\r\n\t\r\n\t\t// physically based shading\r\n\t\r\n\t\tthis.gammaFactor = 2.0;\t// for backwards compatibility\r\n\t\tthis.gammaInput = false;\r\n\t\tthis.gammaOutput = false;\r\n\t\r\n\t\t// physical lights\r\n\t\r\n\t\tthis.physicallyCorrectLights = false;\r\n\t\r\n\t\t// tone mapping\r\n\t\r\n\t\tthis.toneMapping = THREE.LinearToneMapping;\r\n\t\tthis.toneMappingExposure = 1.0;\r\n\t\tthis.toneMappingWhitePoint = 1.0;\r\n\t\r\n\t\t// morphs\r\n\t\r\n\t\tthis.maxMorphTargets = 8;\r\n\t\tthis.maxMorphNormals = 4;\r\n\t\r\n\t\t// flags\r\n\t\r\n\t\tthis.autoScaleCubemaps = true;\r\n\t\r\n\t\t// internal properties\r\n\t\r\n\t\tvar _this = this,\r\n\t\r\n\t\t// internal state cache\r\n\t\r\n\t\t_currentProgram = null,\r\n\t\t_currentRenderTarget = null,\r\n\t\t_currentFramebuffer = null,\r\n\t\t_currentMaterialId = - 1,\r\n\t\t_currentGeometryProgram = '',\r\n\t\t_currentCamera = null,\r\n\t\r\n\t\t_currentScissor = new THREE.Vector4(),\r\n\t\t_currentScissorTest = null,\r\n\t\r\n\t\t_currentViewport = new THREE.Vector4(),\r\n\t\r\n\t\t//\r\n\t\r\n\t\t_usedTextureUnits = 0,\r\n\t\r\n\t\t//\r\n\t\r\n\t\t_clearColor = new THREE.Color( 0x000000 ),\r\n\t\t_clearAlpha = 0,\r\n\t\r\n\t\t_width = _canvas.width,\r\n\t\t_height = _canvas.height,\r\n\t\r\n\t\t_pixelRatio = 1,\r\n\t\r\n\t\t_scissor = new THREE.Vector4( 0, 0, _width, _height ),\r\n\t\t_scissorTest = false,\r\n\t\r\n\t\t_viewport = new THREE.Vector4( 0, 0, _width, _height ),\r\n\t\r\n\t\t// frustum\r\n\t\r\n\t\t_frustum = new THREE.Frustum(),\r\n\t\r\n\t\t// camera matrices cache\r\n\t\r\n\t\t_projScreenMatrix = new THREE.Matrix4(),\r\n\t\r\n\t\t_vector3 = new THREE.Vector3(),\r\n\t\r\n\t\t// light arrays cache\r\n\t\r\n\t\t_lights = {\r\n\t\r\n\t\t\thash: '',\r\n\t\r\n\t\t\tambient: [ 0, 0, 0 ],\r\n\t\t\tdirectional: [],\r\n\t\t\tdirectionalShadowMap: [],\r\n\t\t\tdirectionalShadowMatrix: [],\r\n\t\t\tspot: [],\r\n\t\t\tspotShadowMap: [],\r\n\t\t\tspotShadowMatrix: [],\r\n\t\t\tpoint: [],\r\n\t\t\tpointShadowMap: [],\r\n\t\t\tpointShadowMatrix: [],\r\n\t\t\themi: [],\r\n\t\r\n\t\t\tshadows: [],\r\n\t\t\tshadowsPointLight: 0\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// info\r\n\t\r\n\t\t_infoMemory = {\r\n\t\r\n\t\t\tgeometries: 0,\r\n\t\t\ttextures: 0\r\n\t\r\n\t\t},\r\n\t\r\n\t\t_infoRender = {\r\n\t\r\n\t\t\tcalls: 0,\r\n\t\t\tvertices: 0,\r\n\t\t\tfaces: 0,\r\n\t\t\tpoints: 0\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.info = {\r\n\t\r\n\t\t\trender: _infoRender,\r\n\t\t\tmemory: _infoMemory,\r\n\t\t\tprograms: null\r\n\t\r\n\t\t};\r\n\t\r\n\t\r\n\t\t// initialize\r\n\t\r\n\t\tvar _gl;\r\n\t\r\n\t\ttry {\r\n\t\r\n\t\t\tvar attributes = {\r\n\t\t\t\talpha: _alpha,\r\n\t\t\t\tdepth: _depth,\r\n\t\t\t\tstencil: _stencil,\r\n\t\t\t\tantialias: _antialias,\r\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\r\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\r\n\t\t\t};\r\n\t\r\n\t\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\r\n\t\r\n\t\t\tif ( _gl === null ) {\r\n\t\r\n\t\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\r\n\t\r\n\t\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tthrow 'Error creating WebGL context.';\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\r\n\t\r\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\r\n\t\r\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\r\n\t\r\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\r\n\t\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\r\n\t\r\n\t\t} catch ( error ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar extensions = new THREE.WebGLExtensions( _gl );\r\n\t\r\n\t\textensions.get( 'OES_texture_float' );\r\n\t\textensions.get( 'OES_texture_float_linear' );\r\n\t\textensions.get( 'OES_texture_half_float' );\r\n\t\textensions.get( 'OES_texture_half_float_linear' );\r\n\t\textensions.get( 'OES_standard_derivatives' );\r\n\t\textensions.get( 'ANGLE_instanced_arrays' );\r\n\t\r\n\t\tif ( extensions.get( 'OES_element_index_uint' ) ) {\r\n\t\r\n\t\t\tTHREE.BufferGeometry.MaxIndex = 4294967296;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );\r\n\t\r\n\t\tvar state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );\r\n\t\tvar properties = new THREE.WebGLProperties();\r\n\t\tvar objects = new THREE.WebGLObjects( _gl, properties, this.info );\r\n\t\tvar programCache = new THREE.WebGLPrograms( this, capabilities );\r\n\t\tvar lightCache = new THREE.WebGLLights();\r\n\t\r\n\t\tthis.info.programs = programCache.programs;\r\n\t\r\n\t\tvar bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );\r\n\t\tvar indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\r\n\t\r\n\t\t//\r\n\t\r\n\t\tfunction getTargetPixelRatio() {\r\n\t\r\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction glClearColor( r, g, b, a ) {\r\n\t\r\n\t\t\tif ( _premultipliedAlpha === true ) {\r\n\t\r\n\t\t\t\tr *= a; g *= a; b *= a;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tstate.clearColor( r, g, b, a );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setDefaultGLState() {\r\n\t\r\n\t\t\tstate.init();\r\n\t\r\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\r\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\r\n\t\r\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction resetGLState() {\r\n\t\r\n\t\t\t_currentProgram = null;\r\n\t\t\t_currentCamera = null;\r\n\t\r\n\t\t\t_currentGeometryProgram = '';\r\n\t\t\t_currentMaterialId = - 1;\r\n\t\r\n\t\t\tstate.reset();\r\n\t\r\n\t\t}\r\n\t\r\n\t\tsetDefaultGLState();\r\n\t\r\n\t\tthis.context = _gl;\r\n\t\tthis.capabilities = capabilities;\r\n\t\tthis.extensions = extensions;\r\n\t\tthis.properties = properties;\r\n\t\tthis.state = state;\r\n\t\r\n\t\t// shadow map\r\n\t\r\n\t\tvar shadowMap = new THREE.WebGLShadowMap( this, _lights, objects );\r\n\t\r\n\t\tthis.shadowMap = shadowMap;\r\n\t\r\n\t\r\n\t\t// Plugins\r\n\t\r\n\t\tvar spritePlugin = new THREE.SpritePlugin( this, sprites );\r\n\t\tvar lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );\r\n\t\r\n\t\t// API\r\n\t\r\n\t\tthis.getContext = function () {\r\n\t\r\n\t\t\treturn _gl;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getContextAttributes = function () {\r\n\t\r\n\t\t\treturn _gl.getContextAttributes();\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.forceContextLoss = function () {\r\n\t\r\n\t\t\textensions.get( 'WEBGL_lose_context' ).loseContext();\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getMaxAnisotropy = ( function () {\r\n\t\r\n\t\t\tvar value;\r\n\t\r\n\t\t\treturn function getMaxAnisotropy() {\r\n\t\r\n\t\t\t\tif ( value !== undefined ) return value;\r\n\t\r\n\t\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\t\r\n\t\t\t\tif ( extension !== null ) {\r\n\t\r\n\t\t\t\t\tvalue = _gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tvalue = 0;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn value;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t} )();\r\n\t\r\n\t\tthis.getPrecision = function () {\r\n\t\r\n\t\t\treturn capabilities.precision;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getPixelRatio = function () {\r\n\t\r\n\t\t\treturn _pixelRatio;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setPixelRatio = function ( value ) {\r\n\t\r\n\t\t\tif ( value === undefined ) return;\r\n\t\r\n\t\t\t_pixelRatio = value;\r\n\t\r\n\t\t\tthis.setSize( _viewport.z, _viewport.w, false );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getSize = function () {\r\n\t\r\n\t\t\treturn {\r\n\t\t\t\twidth: _width,\r\n\t\t\t\theight: _height\r\n\t\t\t};\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setSize = function ( width, height, updateStyle ) {\r\n\t\r\n\t\t\t_width = width;\r\n\t\t\t_height = height;\r\n\t\r\n\t\t\t_canvas.width = width * _pixelRatio;\r\n\t\t\t_canvas.height = height * _pixelRatio;\r\n\t\r\n\t\t\tif ( updateStyle !== false ) {\r\n\t\r\n\t\t\t\t_canvas.style.width = width + 'px';\r\n\t\t\t\t_canvas.style.height = height + 'px';\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.setViewport( 0, 0, width, height );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setViewport = function ( x, y, width, height ) {\r\n\t\r\n\t\t\tstate.viewport( _viewport.set( x, y, width, height ) );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setScissor = function ( x, y, width, height ) {\r\n\t\r\n\t\t\tstate.scissor( _scissor.set( x, y, width, height ) );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setScissorTest = function ( boolean ) {\r\n\t\r\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// Clearing\r\n\t\r\n\t\tthis.getClearColor = function () {\r\n\t\r\n\t\t\treturn _clearColor;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setClearColor = function ( color, alpha ) {\r\n\t\r\n\t\t\t_clearColor.set( color );\r\n\t\r\n\t\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\r\n\t\r\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getClearAlpha = function () {\r\n\t\r\n\t\t\treturn _clearAlpha;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setClearAlpha = function ( alpha ) {\r\n\t\r\n\t\t\t_clearAlpha = alpha;\r\n\t\r\n\t\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.clear = function ( color, depth, stencil ) {\r\n\t\r\n\t\t\tvar bits = 0;\r\n\t\r\n\t\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\r\n\t\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\r\n\t\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\r\n\t\r\n\t\t\t_gl.clear( bits );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.clearColor = function () {\r\n\t\r\n\t\t\tthis.clear( true, false, false );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.clearDepth = function () {\r\n\t\r\n\t\t\tthis.clear( false, true, false );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.clearStencil = function () {\r\n\t\r\n\t\t\tthis.clear( false, false, true );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\r\n\t\r\n\t\t\tthis.setRenderTarget( renderTarget );\r\n\t\t\tthis.clear( color, depth, stencil );\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// Reset\r\n\t\r\n\t\tthis.resetGLState = resetGLState;\r\n\t\r\n\t\tthis.dispose = function() {\r\n\t\r\n\t\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// Events\r\n\t\r\n\t\tfunction onContextLost( event ) {\r\n\t\r\n\t\t\tevent.preventDefault();\r\n\t\r\n\t\t\tresetGLState();\r\n\t\t\tsetDefaultGLState();\r\n\t\r\n\t\t\tproperties.clear();\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction onTextureDispose( event ) {\r\n\t\r\n\t\t\tvar texture = event.target;\r\n\t\r\n\t\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\t\r\n\t\t\tdeallocateTexture( texture );\r\n\t\r\n\t\t\t_infoMemory.textures --;\r\n\t\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction onRenderTargetDispose( event ) {\r\n\t\r\n\t\t\tvar renderTarget = event.target;\r\n\t\r\n\t\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\r\n\t\r\n\t\t\tdeallocateRenderTarget( renderTarget );\r\n\t\r\n\t\t\t_infoMemory.textures --;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction onMaterialDispose( event ) {\r\n\t\r\n\t\t\tvar material = event.target;\r\n\t\r\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\r\n\t\r\n\t\t\tdeallocateMaterial( material );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Buffer deallocation\r\n\t\r\n\t\tfunction deallocateTexture( texture ) {\r\n\t\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\t\r\n\t\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\r\n\t\r\n\t\t\t\t// cube texture\r\n\t\r\n\t\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// 2D texture\r\n\t\r\n\t\t\t\tif ( textureProperties.__webglInit === undefined ) return;\r\n\t\r\n\t\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// remove all webgl properties\r\n\t\t\tproperties.delete( texture );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction deallocateRenderTarget( renderTarget ) {\r\n\t\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\t\r\n\t\t\tif ( ! renderTarget || textureProperties.__webglTexture === undefined ) return;\r\n\t\r\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\t\r\n\t\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t\t_gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\t_gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tproperties.delete( renderTarget.texture );\r\n\t\t\tproperties.delete( renderTarget );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction deallocateMaterial( material ) {\r\n\t\r\n\t\t\treleaseMaterialProgramReference( material );\r\n\t\r\n\t\t\tproperties.delete( material );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\tfunction releaseMaterialProgramReference( material ) {\r\n\t\r\n\t\t\tvar programInfo = properties.get( material ).program;\r\n\t\r\n\t\t\tmaterial.program = undefined;\r\n\t\r\n\t\t\tif ( programInfo !== undefined ) {\r\n\t\r\n\t\t\t\tprogramCache.releaseProgram( programInfo );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Buffer rendering\r\n\t\r\n\t\tthis.renderBufferImmediate = function ( object, program, material ) {\r\n\t\r\n\t\t\tstate.initAttributes();\r\n\t\r\n\t\t\tvar buffers = properties.get( object );\r\n\t\r\n\t\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\r\n\t\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\r\n\t\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\r\n\t\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\r\n\t\r\n\t\t\tvar attributes = program.getAttributes();\r\n\t\r\n\t\t\tif ( object.hasPositions ) {\r\n\t\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\r\n\t\r\n\t\t\t\tstate.enableAttribute( attributes.position );\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( object.hasNormals ) {\r\n\t\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\r\n\t\r\n\t\t\t\tif ( material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.shading === THREE.FlatShading ) {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\r\n\t\r\n\t\t\t\t\t\tvar array = object.normalArray;\r\n\t\r\n\t\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\r\n\t\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\r\n\t\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\r\n\t\r\n\t\t\t\t\t\tarray[ i + 0 ] = nx;\r\n\t\t\t\t\t\tarray[ i + 1 ] = ny;\r\n\t\t\t\t\t\tarray[ i + 2 ] = nz;\r\n\t\r\n\t\t\t\t\t\tarray[ i + 3 ] = nx;\r\n\t\t\t\t\t\tarray[ i + 4 ] = ny;\r\n\t\t\t\t\t\tarray[ i + 5 ] = nz;\r\n\t\r\n\t\t\t\t\t\tarray[ i + 6 ] = nx;\r\n\t\t\t\t\t\tarray[ i + 7 ] = ny;\r\n\t\t\t\t\t\tarray[ i + 8 ] = nz;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\r\n\t\r\n\t\t\t\tstate.enableAttribute( attributes.normal );\r\n\t\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( object.hasUvs && material.map ) {\r\n\t\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\r\n\t\r\n\t\t\t\tstate.enableAttribute( attributes.uv );\r\n\t\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\r\n\t\r\n\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\r\n\t\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\r\n\t\r\n\t\t\t\tstate.enableAttribute( attributes.color );\r\n\t\r\n\t\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tstate.disableUnusedAttributes();\r\n\t\r\n\t\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\r\n\t\r\n\t\t\tobject.count = 0;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\r\n\t\r\n\t\t\tsetMaterial( material );\r\n\t\r\n\t\t\tvar program = setProgram( camera, fog, material, object );\r\n\t\r\n\t\t\tvar updateBuffers = false;\r\n\t\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\r\n\t\r\n\t\t\tif ( geometryProgram !== _currentGeometryProgram ) {\r\n\t\r\n\t\t\t\t_currentGeometryProgram = geometryProgram;\r\n\t\t\t\tupdateBuffers = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// morph targets\r\n\t\r\n\t\t\tvar morphTargetInfluences = object.morphTargetInfluences;\r\n\t\r\n\t\t\tif ( morphTargetInfluences !== undefined ) {\r\n\t\r\n\t\t\t\tvar activeInfluences = [];\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar influence = morphTargetInfluences[ i ];\r\n\t\t\t\t\tactiveInfluences.push( [ influence, i ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tactiveInfluences.sort( absNumericalSort );\r\n\t\r\n\t\t\t\tif ( activeInfluences.length > 8 ) {\r\n\t\r\n\t\t\t\t\tactiveInfluences.length = 8;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar influence = activeInfluences[ i ];\r\n\t\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\r\n\t\r\n\t\t\t\t\tif ( influence[ 0 ] !== 0 ) {\r\n\t\r\n\t\t\t\t\t\tvar index = influence[ 1 ];\r\n\t\r\n\t\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\r\n\t\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\r\n\t\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar uniforms = program.getUniforms();\r\n\t\r\n\t\t\t\tif ( uniforms.morphTargetInfluences !== null ) {\r\n\t\r\n\t\t\t\t\t_gl.uniform1fv( uniforms.morphTargetInfluences, morphInfluences );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tupdateBuffers = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar position = geometry.attributes.position;\r\n\t\r\n\t\t\tif ( material.wireframe === true ) {\r\n\t\r\n\t\t\t\tindex = objects.getWireframeAttribute( geometry );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar renderer;\r\n\t\r\n\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\trenderer = indexedBufferRenderer;\r\n\t\t\t\trenderer.setIndex( index );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\trenderer = bufferRenderer;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( updateBuffers ) {\r\n\t\r\n\t\t\t\tsetupVertexAttributes( material, program, geometry );\r\n\t\r\n\t\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tvar dataStart = 0;\r\n\t\t\tvar dataCount = Infinity;\r\n\t\r\n\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\tdataCount = index.count;\r\n\t\r\n\t\t\t} else if ( position !== undefined ) {\r\n\t\r\n\t\t\t\tdataCount = position.count;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar rangeStart = geometry.drawRange.start;\r\n\t\t\tvar rangeCount = geometry.drawRange.count;\r\n\t\r\n\t\t\tvar groupStart = group !== null ? group.start : 0;\r\n\t\t\tvar groupCount = group !== null ? group.count : Infinity;\r\n\t\r\n\t\t\tvar drawStart = Math.max( dataStart, rangeStart, groupStart );\r\n\t\t\tvar drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\r\n\t\r\n\t\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tif ( object instanceof THREE.Mesh ) {\r\n\t\r\n\t\t\t\tif ( material.wireframe === true ) {\r\n\t\r\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\r\n\t\t\t\t\trenderer.setMode( _gl.LINES );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tswitch ( object.drawMode ) {\r\n\t\r\n\t\t\t\t\t\tcase THREE.TrianglesDrawMode:\r\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.TriangleStripDrawMode:\r\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.TriangleFanDrawMode:\r\n\t\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t} else if ( object instanceof THREE.Line ) {\r\n\t\r\n\t\t\t\tvar lineWidth = material.linewidth;\r\n\t\r\n\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\r\n\t\r\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\r\n\t\r\n\t\t\t\tif ( object instanceof THREE.LineSegments ) {\r\n\t\r\n\t\t\t\t\trenderer.setMode( _gl.LINES );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( object instanceof THREE.Points ) {\r\n\t\r\n\t\t\t\trenderer.setMode( _gl.POINTS );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\r\n\t\r\n\t\t\t\tif ( geometry.maxInstancedCount > 0 ) {\r\n\t\r\n\t\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\trenderer.render( drawStart, drawCount );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\r\n\t\r\n\t\t\tvar extension;\r\n\t\r\n\t\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\r\n\t\r\n\t\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\r\n\t\t\t\tif ( extension === null ) {\r\n\t\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( startIndex === undefined ) startIndex = 0;\r\n\t\r\n\t\t\tstate.initAttributes();\r\n\t\r\n\t\t\tvar geometryAttributes = geometry.attributes;\r\n\t\r\n\t\t\tvar programAttributes = program.getAttributes();\r\n\t\r\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\r\n\t\r\n\t\t\tfor ( var name in programAttributes ) {\r\n\t\r\n\t\t\t\tvar programAttribute = programAttributes[ name ];\r\n\t\r\n\t\t\t\tif ( programAttribute >= 0 ) {\r\n\t\r\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\r\n\t\r\n\t\t\t\t\tif ( geometryAttribute !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\r\n\t\t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\r\n\t\r\n\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\t\r\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\r\n\t\t\t\t\t\t\tvar stride = data.stride;\r\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\r\n\t\r\n\t\t\t\t\t\t\tif ( data instanceof THREE.InstancedInterleavedBuffer ) {\r\n\t\r\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\r\n\t\r\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {\r\n\t\r\n\t\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\r\n\t\r\n\t\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\r\n\t\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, 0, startIndex * size * 4 ); // 4 bytes per Float32\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\r\n\t\r\n\t\t\t\t\t\tif ( value !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t\tswitch ( value.length ) {\r\n\t\r\n\t\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tstate.disableUnusedAttributes();\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Sorting\r\n\t\r\n\t\tfunction absNumericalSort( a, b ) {\r\n\t\r\n\t\t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction painterSortStable ( a, b ) {\r\n\t\r\n\t\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\r\n\t\r\n\t\t\t\treturn a.object.renderOrder - b.object.renderOrder;\r\n\t\r\n\t\t\t} else if ( a.material.id !== b.material.id ) {\r\n\t\r\n\t\t\t\treturn a.material.id - b.material.id;\r\n\t\r\n\t\t\t} else if ( a.z !== b.z ) {\r\n\t\r\n\t\t\t\treturn a.z - b.z;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\treturn a.id - b.id;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction reversePainterSortStable ( a, b ) {\r\n\t\r\n\t\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\r\n\t\r\n\t\t\t\treturn a.object.renderOrder - b.object.renderOrder;\r\n\t\r\n\t\t\t} if ( a.z !== b.z ) {\r\n\t\r\n\t\t\t\treturn b.z - a.z;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\treturn a.id - b.id;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Rendering\r\n\t\r\n\t\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\r\n\t\r\n\t\t\tif ( camera instanceof THREE.Camera === false ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar fog = scene.fog;\r\n\t\r\n\t\t\t// reset caching for this frame\r\n\t\r\n\t\t\t_currentGeometryProgram = '';\r\n\t\t\t_currentMaterialId = - 1;\r\n\t\t\t_currentCamera = null;\r\n\t\r\n\t\t\t// update scene graph\r\n\t\r\n\t\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\r\n\t\r\n\t\t\t// update camera matrices and frustum\r\n\t\r\n\t\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\r\n\t\r\n\t\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\t\r\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\t\r\n\t\t\tlights.length = 0;\r\n\t\r\n\t\t\topaqueObjectsLastIndex = - 1;\r\n\t\t\ttransparentObjectsLastIndex = - 1;\r\n\t\r\n\t\t\tsprites.length = 0;\r\n\t\t\tlensFlares.length = 0;\r\n\t\r\n\t\t\tprojectObject( scene, camera );\r\n\t\r\n\t\t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\r\n\t\t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\r\n\t\r\n\t\t\tif ( _this.sortObjects === true ) {\r\n\t\r\n\t\t\t\topaqueObjects.sort( painterSortStable );\r\n\t\t\t\ttransparentObjects.sort( reversePainterSortStable );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tsetupLights( lights, camera );\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tshadowMap.render( scene, camera );\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\t_infoRender.calls = 0;\r\n\t\t\t_infoRender.vertices = 0;\r\n\t\t\t_infoRender.faces = 0;\r\n\t\t\t_infoRender.points = 0;\r\n\t\r\n\t\t\tif ( renderTarget === undefined ) {\r\n\t\r\n\t\t\t\trenderTarget = null;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.setRenderTarget( renderTarget );\r\n\t\r\n\t\t\tif ( this.autoClear || forceClear ) {\r\n\t\r\n\t\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tif ( scene.overrideMaterial ) {\r\n\t\r\n\t\t\t\tvar overrideMaterial = scene.overrideMaterial;\r\n\t\r\n\t\t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\r\n\t\t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// opaque pass (front-to-back order)\r\n\t\r\n\t\t\t\tstate.setBlending( THREE.NoBlending );\r\n\t\t\t\trenderObjects( opaqueObjects, camera, fog );\r\n\t\r\n\t\t\t\t// transparent pass (back-to-front order)\r\n\t\r\n\t\t\t\trenderObjects( transparentObjects, camera, fog );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// custom render plugins (post pass)\r\n\t\r\n\t\t\tspritePlugin.render( scene, camera );\r\n\t\t\tlensFlarePlugin.render( scene, camera, _currentViewport );\r\n\t\r\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\r\n\t\r\n\t\t\tif ( renderTarget ) {\r\n\t\r\n\t\t\t\tvar texture = renderTarget.texture;\r\n\t\r\n\t\t\t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\r\n\t\t\t\t\t\ttexture.minFilter !== THREE.NearestFilter &&\r\n\t\t\t\t\t\ttexture.minFilter !== THREE.LinearFilter ) {\r\n\t\r\n\t\t\t\t\tupdateRenderTargetMipmap( renderTarget );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\r\n\t\r\n\t\t\tstate.setDepthTest( true );\r\n\t\t\tstate.setDepthWrite( true );\r\n\t\t\tstate.setColorWrite( true );\r\n\t\r\n\t\t\t// _gl.finish();\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction pushRenderItem( object, geometry, material, z, group ) {\r\n\t\r\n\t\t\tvar array, index;\r\n\t\r\n\t\t\t// allocate the next position in the appropriate array\r\n\t\r\n\t\t\tif ( material.transparent ) {\r\n\t\r\n\t\t\t\tarray = transparentObjects;\r\n\t\t\t\tindex = ++ transparentObjectsLastIndex;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tarray = opaqueObjects;\r\n\t\t\t\tindex = ++ opaqueObjectsLastIndex;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// recycle existing render item or grow the array\r\n\t\r\n\t\t\tvar renderItem = array[ index ];\r\n\t\r\n\t\t\tif ( renderItem !== undefined ) {\r\n\t\r\n\t\t\t\trenderItem.id = object.id;\r\n\t\t\t\trenderItem.object = object;\r\n\t\t\t\trenderItem.geometry = geometry;\r\n\t\t\t\trenderItem.material = material;\r\n\t\t\t\trenderItem.z = _vector3.z;\r\n\t\t\t\trenderItem.group = group;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\trenderItem = {\r\n\t\t\t\t\tid: object.id,\r\n\t\t\t\t\tobject: object,\r\n\t\t\t\t\tgeometry: geometry,\r\n\t\t\t\t\tmaterial: material,\r\n\t\t\t\t\tz: _vector3.z,\r\n\t\t\t\t\tgroup: group\r\n\t\t\t\t};\r\n\t\r\n\t\t\t\t// assert( index === array.length );\r\n\t\t\t\tarray.push( renderItem );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction projectObject( object, camera ) {\r\n\t\r\n\t\t\tif ( object.visible === false ) return;\r\n\t\r\n\t\t\tif ( object.layers.test( camera.layers ) ) {\r\n\t\r\n\t\t\t\tif ( object instanceof THREE.Light ) {\r\n\t\r\n\t\t\t\t\tlights.push( object );\r\n\t\r\n\t\t\t\t} else if ( object instanceof THREE.Sprite ) {\r\n\t\r\n\t\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\r\n\t\r\n\t\t\t\t\t\tsprites.push( object );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else if ( object instanceof THREE.LensFlare ) {\r\n\t\r\n\t\t\t\t\tlensFlares.push( object );\r\n\t\r\n\t\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject ) {\r\n\t\r\n\t\t\t\t\tif ( _this.sortObjects === true ) {\r\n\t\r\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\r\n\t\r\n\t\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\r\n\t\r\n\t\t\t\t\tif ( object instanceof THREE.SkinnedMesh ) {\r\n\t\r\n\t\t\t\t\t\tobject.skeleton.update();\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\r\n\t\r\n\t\t\t\t\t\tvar material = object.material;\r\n\t\r\n\t\t\t\t\t\tif ( material.visible === true ) {\r\n\t\r\n\t\t\t\t\t\t\tif ( _this.sortObjects === true ) {\r\n\t\r\n\t\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\tvar geometry = objects.update( object );\r\n\t\r\n\t\t\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\r\n\t\r\n\t\t\t\t\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\t\t\t\t\tvar materials = material.materials;\r\n\t\r\n\t\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\r\n\t\r\n\t\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\r\n\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar children = object.children;\r\n\t\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tprojectObject( children[ i ], camera );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\r\n\t\r\n\t\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar renderItem = renderList[ i ];\r\n\t\r\n\t\t\t\tvar object = renderItem.object;\r\n\t\t\t\tvar geometry = renderItem.geometry;\r\n\t\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\r\n\t\t\t\tvar group = renderItem.group;\r\n\t\r\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\r\n\t\r\n\t\t\t\tif ( object instanceof THREE.ImmediateRenderObject ) {\r\n\t\r\n\t\t\t\t\tsetMaterial( material );\r\n\t\r\n\t\t\t\t\tvar program = setProgram( camera, fog, material, object );\r\n\t\r\n\t\t\t\t\t_currentGeometryProgram = '';\r\n\t\r\n\t\t\t\t\tobject.render( function ( object ) {\r\n\t\r\n\t\t\t\t\t\t_this.renderBufferImmediate( object, program, material );\r\n\t\r\n\t\t\t\t\t} );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction initMaterial( material, fog, object ) {\r\n\t\r\n\t\t\tvar materialProperties = properties.get( material );\r\n\t\r\n\t\t\tvar parameters = programCache.getParameters( material, _lights, fog, object );\r\n\t\t\tvar code = programCache.getProgramCode( material, parameters );\r\n\t\r\n\t\t\tvar program = materialProperties.program;\r\n\t\t\tvar programChange = true;\r\n\t\r\n\t\t\tif ( program === undefined ) {\r\n\t\r\n\t\t\t\t// new material\r\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\r\n\t\r\n\t\t\t} else if ( program.code !== code ) {\r\n\t\r\n\t\t\t\t// changed glsl or parameters\r\n\t\t\t\treleaseMaterialProgramReference( material );\r\n\t\r\n\t\t\t} else if ( parameters.shaderID !== undefined ) {\r\n\t\r\n\t\t\t\t// same glsl and uniform list\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// only rebuild uniform list\r\n\t\t\t\tprogramChange = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( programChange ) {\r\n\t\r\n\t\t\t\tif ( parameters.shaderID ) {\r\n\t\r\n\t\t\t\t\tvar shader = THREE.ShaderLib[ parameters.shaderID ];\r\n\t\r\n\t\t\t\t\tmaterialProperties.__webglShader = {\r\n\t\t\t\t\t\tname: material.type,\r\n\t\t\t\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\r\n\t\t\t\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\t\t\t\tfragmentShader: shader.fragmentShader\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tmaterialProperties.__webglShader = {\r\n\t\t\t\t\t\tname: material.type,\r\n\t\t\t\t\t\tuniforms: material.uniforms,\r\n\t\t\t\t\t\tvertexShader: material.vertexShader,\r\n\t\t\t\t\t\tfragmentShader: material.fragmentShader\r\n\t\t\t\t\t};\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tmaterial.__webglShader = materialProperties.__webglShader;\r\n\t\r\n\t\t\t\tprogram = programCache.acquireProgram( material, parameters, code );\r\n\t\r\n\t\t\t\tmaterialProperties.program = program;\r\n\t\t\t\tmaterial.program = program;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar attributes = program.getAttributes();\r\n\t\r\n\t\t\tif ( material.morphTargets ) {\r\n\t\r\n\t\t\t\tmaterial.numSupportedMorphTargets = 0;\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\r\n\t\r\n\t\t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\r\n\t\r\n\t\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.morphNormals ) {\r\n\t\r\n\t\t\t\tmaterial.numSupportedMorphNormals = 0;\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\r\n\t\r\n\t\t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\r\n\t\r\n\t\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tmaterialProperties.uniformsList = [];\r\n\t\r\n\t\t\tvar uniforms = materialProperties.__webglShader.uniforms,\r\n\t\t\t\tuniformLocations = materialProperties.program.getUniforms();\r\n\t\r\n\t\t\tfor ( var u in uniforms ) {\r\n\t\r\n\t\t\t\tvar location = uniformLocations[ u ];\r\n\t\r\n\t\t\t\tif ( location ) {\r\n\t\r\n\t\t\t\t\tmaterialProperties.uniformsList.push( [ materialProperties.__webglShader.uniforms[ u ], location ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t\tmaterial instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t\tmaterial instanceof THREE.MeshStandardMaterial ||\r\n\t\t\t\t\tmaterial.lights ) {\r\n\t\r\n\t\t\t\t// store the light setup it was created for\r\n\t\r\n\t\t\t\tmaterialProperties.lightsHash = _lights.hash;\r\n\t\r\n\t\t\t\t// wire up the material to this renderer's lighting state\r\n\t\r\n\t\t\t\tuniforms.ambientLightColor.value = _lights.ambient;\r\n\t\t\t\tuniforms.directionalLights.value = _lights.directional;\r\n\t\t\t\tuniforms.spotLights.value = _lights.spot;\r\n\t\t\t\tuniforms.pointLights.value = _lights.point;\r\n\t\t\t\tuniforms.hemisphereLights.value = _lights.hemi;\r\n\t\r\n\t\t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\r\n\t\t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\r\n\t\t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\r\n\t\t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\r\n\t\t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\r\n\t\t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// detect dynamic uniforms\r\n\t\r\n\t\t\tmaterialProperties.hasDynamicUniforms = false;\r\n\t\r\n\t\t\tfor ( var j = 0, jl = materialProperties.uniformsList.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\tvar uniform = materialProperties.uniformsList[ j ][ 0 ];\r\n\t\r\n\t\t\t\tif ( uniform.dynamic === true ) {\r\n\t\r\n\t\t\t\t\tmaterialProperties.hasDynamicUniforms = true;\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setMaterial( material ) {\r\n\t\r\n\t\t\tsetMaterialFaces( material );\r\n\t\r\n\t\t\tif ( material.transparent === true ) {\r\n\t\r\n\t\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tstate.setBlending( THREE.NoBlending );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tstate.setDepthFunc( material.depthFunc );\r\n\t\t\tstate.setDepthTest( material.depthTest );\r\n\t\t\tstate.setDepthWrite( material.depthWrite );\r\n\t\t\tstate.setColorWrite( material.colorWrite );\r\n\t\t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setMaterialFaces( material ) {\r\n\t\r\n\t\t\tmaterial.side !== THREE.DoubleSide ? state.enable( _gl.CULL_FACE ) : state.disable( _gl.CULL_FACE );\r\n\t\t\tstate.setFlipSided( material.side === THREE.BackSide );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setProgram( camera, fog, material, object ) {\r\n\t\r\n\t\t\t_usedTextureUnits = 0;\r\n\t\r\n\t\t\tvar materialProperties = properties.get( material );\r\n\t\r\n\t\t\tif ( materialProperties.program === undefined ) {\r\n\t\r\n\t\t\t\tmaterial.needsUpdate = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( materialProperties.lightsHash !== undefined &&\r\n\t\t\t\tmaterialProperties.lightsHash !== _lights.hash ) {\r\n\t\r\n\t\t\t\tmaterial.needsUpdate = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.needsUpdate ) {\r\n\t\r\n\t\t\t\tinitMaterial( material, fog, object );\r\n\t\t\t\tmaterial.needsUpdate = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar refreshProgram = false;\r\n\t\t\tvar refreshMaterial = false;\r\n\t\t\tvar refreshLights = false;\r\n\t\r\n\t\t\tvar program = materialProperties.program,\r\n\t\t\t\tp_uniforms = program.getUniforms(),\r\n\t\t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\r\n\t\r\n\t\t\tif ( program.id !== _currentProgram ) {\r\n\t\r\n\t\t\t\t_gl.useProgram( program.program );\r\n\t\t\t\t_currentProgram = program.id;\r\n\t\r\n\t\t\t\trefreshProgram = true;\r\n\t\t\t\trefreshMaterial = true;\r\n\t\t\t\trefreshLights = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.id !== _currentMaterialId ) {\r\n\t\r\n\t\t\t\t_currentMaterialId = material.id;\r\n\t\r\n\t\t\t\trefreshMaterial = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( refreshProgram || camera !== _currentCamera ) {\r\n\t\r\n\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\t\r\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\r\n\t\r\n\t\t\t\t\t_gl.uniform1f( p_uniforms.logDepthBufFC, 2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\tif ( camera !== _currentCamera ) {\r\n\t\r\n\t\t\t\t\t_currentCamera = camera;\r\n\t\r\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\r\n\t\t\t\t\t// now, in case this material supports lights - or later, when\r\n\t\t\t\t\t// the next material that does gets activated:\r\n\t\r\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\r\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// load material specific uniforms\r\n\t\t\t\t// (shader material also gets them for the sake of genericity)\r\n\t\r\n\t\t\t\tif ( material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\r\n\t\t\t\t\t material.envMap ) {\r\n\t\r\n\t\t\t\t\tif ( p_uniforms.cameraPosition !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\t\t\t_gl.uniform3f( p_uniforms.cameraPosition, _vector3.x, _vector3.y, _vector3.z );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\r\n\t\t\t\t\t material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t\t material.skinning ) {\r\n\t\r\n\t\t\t\t\tif ( p_uniforms.viewMatrix !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\tif ( p_uniforms.toneMappingExposure !== undefined ) {\r\n\t\r\n\t\t\t\t\t_gl.uniform1f( p_uniforms.toneMappingExposure, _this.toneMappingExposure );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( p_uniforms.toneMappingWhitePoint !== undefined ) {\r\n\t\r\n\t\t\t\t\t_gl.uniform1f( p_uniforms.toneMappingWhitePoint, _this.toneMappingWhitePoint );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// skinning uniforms must be set even if material didn't change\r\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\r\n\t\t\t// not sure why, but otherwise weird things happen\r\n\t\r\n\t\t\tif ( material.skinning ) {\r\n\t\r\n\t\t\t\tif ( object.bindMatrix && p_uniforms.bindMatrix !== undefined ) {\r\n\t\r\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.bindMatrix, false, object.bindMatrix.elements );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( object.bindMatrixInverse && p_uniforms.bindMatrixInverse !== undefined ) {\r\n\t\r\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.bindMatrixInverse, false, object.bindMatrixInverse.elements );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( capabilities.floatVertexTextures && object.skeleton && object.skeleton.useVertexTexture ) {\r\n\t\r\n\t\t\t\t\tif ( p_uniforms.boneTexture !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tvar textureUnit = getTextureUnit();\r\n\t\r\n\t\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTexture, textureUnit );\r\n\t\t\t\t\t\t_this.setTexture( object.skeleton.boneTexture, textureUnit );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( p_uniforms.boneTextureWidth !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTextureWidth, object.skeleton.boneTextureWidth );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( p_uniforms.boneTextureHeight !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTextureHeight, object.skeleton.boneTextureHeight );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else if ( object.skeleton && object.skeleton.boneMatrices ) {\r\n\t\r\n\t\t\t\t\tif ( p_uniforms.boneGlobalMatrices !== undefined ) {\r\n\t\r\n\t\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.skeleton.boneMatrices );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( refreshMaterial ) {\r\n\t\r\n\t\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\r\n\t\t\t\t\t material.lights ) {\r\n\t\r\n\t\t\t\t\t// the current material requires lighting info\r\n\t\r\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\r\n\t\t\t\t\t// they simply reference the renderer's state for their\r\n\t\t\t\t\t// values\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\r\n\t\t\t\t\t// the GL state when required\r\n\t\r\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// refresh uniforms common to several materials\r\n\t\r\n\t\t\t\tif ( fog && material.fog ) {\r\n\t\r\n\t\t\t\t\trefreshUniformsFog( m_uniforms, fog );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t\t material instanceof THREE.MeshStandardMaterial ) {\r\n\t\r\n\t\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// refresh single material specific uniforms\r\n\t\r\n\t\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\r\n\t\r\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\t\r\n\t\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\r\n\t\r\n\t\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\t\t\t\t\trefreshUniformsDash( m_uniforms, material );\r\n\t\r\n\t\t\t\t} else if ( material instanceof THREE.PointsMaterial ) {\r\n\t\r\n\t\t\t\t\trefreshUniformsPoints( m_uniforms, material );\r\n\t\r\n\t\t\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\r\n\t\r\n\t\t\t\t\trefreshUniformsLambert( m_uniforms, material );\r\n\t\r\n\t\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\r\n\t\r\n\t\t\t\t\trefreshUniformsPhong( m_uniforms, material );\r\n\t\r\n\t\t\t\t} else if ( material instanceof THREE.MeshStandardMaterial ) {\r\n\t\r\n\t\t\t\t\trefreshUniformsStandard( m_uniforms, material );\r\n\t\r\n\t\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\r\n\t\r\n\t\t\t\t\tm_uniforms.mNear.value = camera.near;\r\n\t\t\t\t\tm_uniforms.mFar.value = camera.far;\r\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\t\r\n\t\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\t\r\n\t\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// load common uniforms\r\n\t\r\n\t\t\t\tloadUniformsGeneric( materialProperties.uniformsList );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tloadUniformsMatrices( p_uniforms, object );\r\n\t\r\n\t\t\tif ( p_uniforms.modelMatrix !== undefined ) {\r\n\t\r\n\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( materialProperties.hasDynamicUniforms === true ) {\r\n\t\r\n\t\t\t\tupdateDynamicUniforms( materialProperties.uniformsList, object, camera );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn program;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction updateDynamicUniforms ( uniforms, object, camera ) {\r\n\t\r\n\t\t\tvar dynamicUniforms = [];\r\n\t\r\n\t\t\tfor ( var j = 0, jl = uniforms.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\tvar uniform = uniforms[ j ][ 0 ];\r\n\t\t\t\tvar onUpdateCallback = uniform.onUpdateCallback;\r\n\t\r\n\t\t\t\tif ( onUpdateCallback !== undefined ) {\r\n\t\r\n\t\t\t\t\tonUpdateCallback.bind( uniform )( object, camera );\r\n\t\t\t\t\tdynamicUniforms.push( uniforms[ j ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tloadUniformsGeneric( dynamicUniforms );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Uniforms (refresh uniforms objects)\r\n\t\r\n\t\tfunction refreshUniformsCommon ( uniforms, material ) {\r\n\t\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\t\r\n\t\t\tuniforms.diffuse.value = material.color;\r\n\t\r\n\t\t\tif ( material.emissive ) {\r\n\t\r\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tuniforms.map.value = material.map;\r\n\t\t\tuniforms.specularMap.value = material.specularMap;\r\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\t\r\n\t\t\tif ( material.aoMap ) {\r\n\t\r\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\r\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// uv repeat and offset setting priorities\r\n\t\t\t// 1. color map\r\n\t\t\t// 2. specular map\r\n\t\t\t// 3. normal map\r\n\t\t\t// 4. bump map\r\n\t\t\t// 5. alpha map\r\n\t\t\t// 6. emissive map\r\n\t\r\n\t\t\tvar uvScaleMap;\r\n\t\r\n\t\t\tif ( material.map ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.map;\r\n\t\r\n\t\t\t} else if ( material.specularMap ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.specularMap;\r\n\t\r\n\t\t\t} else if ( material.displacementMap ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.displacementMap;\r\n\t\r\n\t\t\t} else if ( material.normalMap ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.normalMap;\r\n\t\r\n\t\t\t} else if ( material.bumpMap ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.bumpMap;\r\n\t\r\n\t\t\t} else if ( material.roughnessMap ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.roughnessMap;\r\n\t\r\n\t\t\t} else if ( material.metalnessMap ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.metalnessMap;\r\n\t\r\n\t\t\t} else if ( material.alphaMap ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.alphaMap;\r\n\t\r\n\t\t\t} else if ( material.emissiveMap ) {\r\n\t\r\n\t\t\t\tuvScaleMap = material.emissiveMap;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( uvScaleMap !== undefined ) {\r\n\t\r\n\t\t\t\tif ( uvScaleMap instanceof THREE.WebGLRenderTarget ) {\r\n\t\r\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar offset = uvScaleMap.offset;\r\n\t\t\t\tvar repeat = uvScaleMap.repeat;\r\n\t\r\n\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tuniforms.envMap.value = material.envMap;\r\n\t\t\tuniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : - 1;\r\n\t\r\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction refreshUniformsLine ( uniforms, material ) {\r\n\t\r\n\t\t\tuniforms.diffuse.value = material.color;\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction refreshUniformsDash ( uniforms, material ) {\r\n\t\r\n\t\t\tuniforms.dashSize.value = material.dashSize;\r\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\r\n\t\t\tuniforms.scale.value = material.scale;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction refreshUniformsPoints ( uniforms, material ) {\r\n\t\r\n\t\t\tuniforms.diffuse.value = material.color;\r\n\t\t\tuniforms.opacity.value = material.opacity;\r\n\t\t\tuniforms.size.value = material.size * _pixelRatio;\r\n\t\t\tuniforms.scale.value = _canvas.clientHeight / 2.0; // TODO: Cache this.\r\n\t\r\n\t\t\tuniforms.map.value = material.map;\r\n\t\r\n\t\t\tif ( material.map !== null ) {\r\n\t\r\n\t\t\t\tvar offset = material.map.offset;\r\n\t\t\t\tvar repeat = material.map.repeat;\r\n\t\r\n\t\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction refreshUniformsFog ( uniforms, fog ) {\r\n\t\r\n\t\t\tuniforms.fogColor.value = fog.color;\r\n\t\r\n\t\t\tif ( fog instanceof THREE.Fog ) {\r\n\t\r\n\t\t\t\tuniforms.fogNear.value = fog.near;\r\n\t\t\t\tuniforms.fogFar.value = fog.far;\r\n\t\r\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\t\r\n\t\t\t\tuniforms.fogDensity.value = fog.density;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction refreshUniformsLambert ( uniforms, material ) {\r\n\t\r\n\t\t\tif ( material.lightMap ) {\r\n\t\r\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.emissiveMap ) {\r\n\t\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction refreshUniformsPhong ( uniforms, material ) {\r\n\t\r\n\t\t\tuniforms.specular.value = material.specular;\r\n\t\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\r\n\t\r\n\t\t\tif ( material.lightMap ) {\r\n\t\r\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.emissiveMap ) {\r\n\t\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.bumpMap ) {\r\n\t\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.normalMap ) {\r\n\t\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.displacementMap ) {\r\n\t\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction refreshUniformsStandard ( uniforms, material ) {\r\n\t\r\n\t\t\tuniforms.roughness.value = material.roughness;\r\n\t\t\tuniforms.metalness.value = material.metalness;\r\n\t\r\n\t\t\tif ( material.roughnessMap ) {\r\n\t\r\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.metalnessMap ) {\r\n\t\r\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.lightMap ) {\r\n\t\r\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.emissiveMap ) {\r\n\t\r\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.bumpMap ) {\r\n\t\r\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.normalMap ) {\r\n\t\r\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.displacementMap ) {\r\n\t\r\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.envMap ) {\r\n\t\r\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\r\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\r\n\t\r\n\t\tfunction markUniformsLightsNeedsUpdate ( uniforms, value ) {\r\n\t\r\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\r\n\t\r\n\t\t\tuniforms.directionalLights.needsUpdate = value;\r\n\t\t\tuniforms.pointLights.needsUpdate = value;\r\n\t\t\tuniforms.spotLights.needsUpdate = value;\r\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Uniforms (load to GPU)\r\n\t\r\n\t\tfunction loadUniformsMatrices ( uniforms, object ) {\r\n\t\r\n\t\t\t_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object.modelViewMatrix.elements );\r\n\t\r\n\t\t\tif ( uniforms.normalMatrix ) {\r\n\t\r\n\t\t\t\t_gl.uniformMatrix3fv( uniforms.normalMatrix, false, object.normalMatrix.elements );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getTextureUnit() {\r\n\t\r\n\t\t\tvar textureUnit = _usedTextureUnits;\r\n\t\r\n\t\t\tif ( textureUnit >= capabilities.maxTextures ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t_usedTextureUnits += 1;\r\n\t\r\n\t\t\treturn textureUnit;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction loadUniform( uniform, type, location, value ) {\r\n\t\r\n\t\t\tvar texture, textureUnit;\r\n\t\r\n\t\t\tif ( type === '1i' ) {\r\n\t\r\n\t\t\t\t_gl.uniform1i( location, value );\r\n\t\r\n\t\t\t} else if ( type === '1f' ) {\r\n\t\r\n\t\t\t\t_gl.uniform1f( location, value );\r\n\t\r\n\t\t\t} else if ( type === '2f' ) {\r\n\t\r\n\t\t\t\t_gl.uniform2f( location, value[ 0 ], value[ 1 ] );\r\n\t\r\n\t\t\t} else if ( type === '3f' ) {\r\n\t\r\n\t\t\t\t_gl.uniform3f( location, value[ 0 ], value[ 1 ], value[ 2 ] );\r\n\t\r\n\t\t\t} else if ( type === '4f' ) {\r\n\t\r\n\t\t\t\t_gl.uniform4f( location, value[ 0 ], value[ 1 ], value[ 2 ], value[ 3 ] );\r\n\t\r\n\t\t\t} else if ( type === '1iv' ) {\r\n\t\r\n\t\t\t\t_gl.uniform1iv( location, value );\r\n\t\r\n\t\t\t} else if ( type === '3iv' ) {\r\n\t\r\n\t\t\t\t_gl.uniform3iv( location, value );\r\n\t\r\n\t\t\t} else if ( type === '1fv' ) {\r\n\t\r\n\t\t\t\t_gl.uniform1fv( location, value );\r\n\t\r\n\t\t\t} else if ( type === '2fv' ) {\r\n\t\r\n\t\t\t\t_gl.uniform2fv( location, value );\r\n\t\r\n\t\t\t} else if ( type === '3fv' ) {\r\n\t\r\n\t\t\t\t_gl.uniform3fv( location, value );\r\n\t\r\n\t\t\t} else if ( type === '4fv' ) {\r\n\t\r\n\t\t\t\t_gl.uniform4fv( location, value );\r\n\t\r\n\t\t\t} else if ( type === 'Matrix2fv' ) {\r\n\t\r\n\t\t\t\t_gl.uniformMatrix2fv( location, false, value );\r\n\t\r\n\t\t\t} else if ( type === 'Matrix3fv' ) {\r\n\t\r\n\t\t\t\t_gl.uniformMatrix3fv( location, false, value );\r\n\t\r\n\t\t\t} else if ( type === 'Matrix4fv' ) {\r\n\t\r\n\t\t\t\t_gl.uniformMatrix4fv( location, false, value );\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\t} else if ( type === 'i' ) {\r\n\t\r\n\t\t\t\t// single integer\r\n\t\t\t\t_gl.uniform1i( location, value );\r\n\t\r\n\t\t\t} else if ( type === 'f' ) {\r\n\t\r\n\t\t\t\t// single float\r\n\t\t\t\t_gl.uniform1f( location, value );\r\n\t\r\n\t\t\t} else if ( type === 'v2' ) {\r\n\t\r\n\t\t\t\t// single THREE.Vector2\r\n\t\t\t\t_gl.uniform2f( location, value.x, value.y );\r\n\t\r\n\t\t\t} else if ( type === 'v3' ) {\r\n\t\r\n\t\t\t\t// single THREE.Vector3\r\n\t\t\t\t_gl.uniform3f( location, value.x, value.y, value.z );\r\n\t\r\n\t\t\t} else if ( type === 'v4' ) {\r\n\t\r\n\t\t\t\t// single THREE.Vector4\r\n\t\t\t\t_gl.uniform4f( location, value.x, value.y, value.z, value.w );\r\n\t\r\n\t\t\t} else if ( type === 'c' ) {\r\n\t\r\n\t\t\t\t// single THREE.Color\r\n\t\t\t\t_gl.uniform3f( location, value.r, value.g, value.b );\r\n\t\r\n\t\t\t} else if ( type === 's' ) {\r\n\t\r\n\t\t\t\t// TODO: Optimize this\r\n\t\r\n\t\t\t\tvar properties = uniform.properties;\r\n\t\r\n\t\t\t\tfor ( var name in properties ) {\r\n\t\r\n\t\t\t\t\tvar property = properties[ name ];\r\n\t\t\t\t\tvar locationProperty = location[ name ];\r\n\t\t\t\t\tvar valueProperty = value[ name ];\r\n\t\r\n\t\t\t\t\tloadUniform( property, property.type, locationProperty, valueProperty );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( type === 'sa' ) {\r\n\t\r\n\t\t\t\t// TODO: Optimize this\r\n\t\r\n\t\t\t\tvar properties = uniform.properties;\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = value.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tfor ( var name in properties ) {\r\n\t\r\n\t\t\t\t\t\tvar property = properties[ name ];\r\n\t\t\t\t\t\tvar locationProperty =  location[ i ][ name ];\r\n\t\t\t\t\t\tvar valueProperty = value[ i ][ name ];\r\n\t\r\n\t\t\t\t\t\tloadUniform( property, property.type, locationProperty, valueProperty );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( type === 'iv1' ) {\r\n\t\r\n\t\t\t\t// flat array of integers (JS or typed array)\r\n\t\t\t\t_gl.uniform1iv( location, value );\r\n\t\r\n\t\t\t} else if ( type === 'iv' ) {\r\n\t\r\n\t\t\t\t// flat array of integers with 3 x N size (JS or typed array)\r\n\t\t\t\t_gl.uniform3iv( location, value );\r\n\t\r\n\t\t\t} else if ( type === 'fv1' ) {\r\n\t\r\n\t\t\t\t// flat array of floats (JS or typed array)\r\n\t\t\t\t_gl.uniform1fv( location, value );\r\n\t\r\n\t\t\t} else if ( type === 'fv' ) {\r\n\t\r\n\t\t\t\t// flat array of floats with 3 x N size (JS or typed array)\r\n\t\t\t\t_gl.uniform3fv( location, value );\r\n\t\r\n\t\t\t} else if ( type === 'v2v' ) {\r\n\t\r\n\t\t\t\t// array of THREE.Vector2\r\n\t\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\t\r\n\t\t\t\t\tuniform._array = new Float32Array( 2 * value.length );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var i = 0, i2 = 0, il = value.length; i < il; i ++, i2 += 2 ) {\r\n\t\r\n\t\t\t\t\tuniform._array[ i2 + 0 ] = value[ i ].x;\r\n\t\t\t\t\tuniform._array[ i2 + 1 ] = value[ i ].y;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_gl.uniform2fv( location, uniform._array );\r\n\t\r\n\t\t\t} else if ( type === 'v3v' ) {\r\n\t\r\n\t\t\t\t// array of THREE.Vector3\r\n\t\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\t\r\n\t\t\t\t\tuniform._array = new Float32Array( 3 * value.length );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var i = 0, i3 = 0, il = value.length; i < il; i ++, i3 += 3 ) {\r\n\t\r\n\t\t\t\t\tuniform._array[ i3 + 0 ] = value[ i ].x;\r\n\t\t\t\t\tuniform._array[ i3 + 1 ] = value[ i ].y;\r\n\t\t\t\t\tuniform._array[ i3 + 2 ] = value[ i ].z;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_gl.uniform3fv( location, uniform._array );\r\n\t\r\n\t\t\t} else if ( type === 'v4v' ) {\r\n\t\r\n\t\t\t\t// array of THREE.Vector4\r\n\t\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\t\r\n\t\t\t\t\tuniform._array = new Float32Array( 4 * value.length );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var i = 0, i4 = 0, il = value.length; i < il; i ++, i4 += 4 ) {\r\n\t\r\n\t\t\t\t\tuniform._array[ i4 + 0 ] = value[ i ].x;\r\n\t\t\t\t\tuniform._array[ i4 + 1 ] = value[ i ].y;\r\n\t\t\t\t\tuniform._array[ i4 + 2 ] = value[ i ].z;\r\n\t\t\t\t\tuniform._array[ i4 + 3 ] = value[ i ].w;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_gl.uniform4fv( location, uniform._array );\r\n\t\r\n\t\t\t} else if ( type === 'm2' ) {\r\n\t\r\n\t\t\t\t// single THREE.Matrix2\r\n\t\t\t\t_gl.uniformMatrix2fv( location, false, value.elements );\r\n\t\r\n\t\t\t} else if ( type === 'm3' ) {\r\n\t\r\n\t\t\t\t// single THREE.Matrix3\r\n\t\t\t\t_gl.uniformMatrix3fv( location, false, value.elements );\r\n\t\r\n\t\t\t} else if ( type === 'm3v' ) {\r\n\t\r\n\t\t\t\t// array of THREE.Matrix3\r\n\t\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\t\r\n\t\t\t\t\tuniform._array = new Float32Array( 9 * value.length );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var i = 0, il = value.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tvalue[ i ].flattenToArrayOffset( uniform._array, i * 9 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_gl.uniformMatrix3fv( location, false, uniform._array );\r\n\t\r\n\t\t\t} else if ( type === 'm4' ) {\r\n\t\r\n\t\t\t\t// single THREE.Matrix4\r\n\t\t\t\t_gl.uniformMatrix4fv( location, false, value.elements );\r\n\t\r\n\t\t\t} else if ( type === 'm4v' ) {\r\n\t\r\n\t\t\t\t// array of THREE.Matrix4\r\n\t\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\t\r\n\t\t\t\t\tuniform._array = new Float32Array( 16 * value.length );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var i = 0, il = value.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tvalue[ i ].flattenToArrayOffset( uniform._array, i * 16 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_gl.uniformMatrix4fv( location, false, uniform._array );\r\n\t\r\n\t\t\t} else if ( type === 't' ) {\r\n\t\r\n\t\t\t\t// single THREE.Texture (2d or cube)\r\n\t\r\n\t\t\t\ttexture = value;\r\n\t\t\t\ttextureUnit = getTextureUnit();\r\n\t\r\n\t\t\t\t_gl.uniform1i( location, textureUnit );\r\n\t\r\n\t\t\t\tif ( ! texture ) return;\r\n\t\r\n\t\t\t\tif ( texture instanceof THREE.CubeTexture ||\r\n\t\t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\r\n\t\r\n\t\t\t\t\t// CompressedTexture can have Array in image :/\r\n\t\r\n\t\t\t\t\tsetCubeTexture( texture, textureUnit );\r\n\t\r\n\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {\r\n\t\r\n\t\t\t\t\tsetCubeTextureDynamic( texture.texture, textureUnit );\r\n\t\r\n\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTarget ) {\r\n\t\r\n\t\t\t\t\t_this.setTexture( texture.texture, textureUnit );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t_this.setTexture( texture, textureUnit );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( type === 'tv' ) {\r\n\t\r\n\t\t\t\t// array of THREE.Texture (2d or cube)\r\n\t\r\n\t\t\t\tif ( uniform._array === undefined ) {\r\n\t\r\n\t\t\t\t\tuniform._array = [];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var i = 0, il = uniform.value.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tuniform._array[ i ] = getTextureUnit();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_gl.uniform1iv( location, uniform._array );\r\n\t\r\n\t\t\t\tfor ( var i = 0, il = uniform.value.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\ttexture = uniform.value[ i ];\r\n\t\t\t\t\ttextureUnit = uniform._array[ i ];\r\n\t\r\n\t\t\t\t\tif ( ! texture ) continue;\r\n\t\r\n\t\t\t\t\tif ( texture instanceof THREE.CubeTexture ||\r\n\t\t\t\t\t\t ( texture.image instanceof Array && texture.image.length === 6 ) ) {\r\n\t\r\n\t\t\t\t\t\t// CompressedTexture can have Array in image :/\r\n\t\r\n\t\t\t\t\t\tsetCubeTexture( texture, textureUnit );\r\n\t\r\n\t\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTarget ) {\r\n\t\r\n\t\t\t\t\t\t_this.setTexture( texture.texture, textureUnit );\r\n\t\r\n\t\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {\r\n\t\r\n\t\t\t\t\t\tsetCubeTextureDynamic( texture.texture, textureUnit );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t_this.setTexture( texture, textureUnit );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Unknown uniform type: ' + type );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction loadUniformsGeneric( uniforms ) {\r\n\t\r\n\t\t\tfor ( var i = 0, l = uniforms.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar uniform = uniforms[ i ][ 0 ];\r\n\t\r\n\t\t\t\t// needsUpdate property is not added to all uniforms.\r\n\t\t\t\tif ( uniform.needsUpdate === false ) continue;\r\n\t\r\n\t\t\t\tvar type = uniform.type;\r\n\t\t\t\tvar location = uniforms[ i ][ 1 ];\r\n\t\t\t\tvar value = uniform.value;\r\n\t\r\n\t\t\t\tloadUniform( uniform, type, location, value );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setupLights ( lights, camera ) {\r\n\t\r\n\t\t\tvar l, ll, light,\r\n\t\t\tr = 0, g = 0, b = 0,\r\n\t\t\tcolor,\r\n\t\t\tintensity,\r\n\t\t\tdistance,\r\n\t\r\n\t\t\tviewMatrix = camera.matrixWorldInverse,\r\n\t\r\n\t\t\tdirectionalLength = 0,\r\n\t\t\tpointLength = 0,\r\n\t\t\tspotLength = 0,\r\n\t\t\themiLength = 0,\r\n\t\r\n\t\t\tshadowsLength = 0;\r\n\t\r\n\t\t\t_lights.shadowsPointLight = 0;\r\n\t\r\n\t\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\t\r\n\t\t\t\tlight = lights[ l ];\r\n\t\r\n\t\t\t\tcolor = light.color;\r\n\t\t\t\tintensity = light.intensity;\r\n\t\t\t\tdistance = light.distance;\r\n\t\r\n\t\t\t\tif ( light instanceof THREE.AmbientLight ) {\r\n\t\r\n\t\t\t\t\tr += color.r * intensity;\r\n\t\t\t\t\tg += color.g * intensity;\r\n\t\t\t\t\tb += color.b * intensity;\r\n\t\r\n\t\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\t\r\n\t\t\t\t\tvar uniforms = lightCache.get( light );\r\n\t\r\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\tuniforms.direction.sub( _vector3 );\r\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\t\r\n\t\t\t\t\tuniforms.shadow = light.castShadow;\r\n\t\r\n\t\t\t\t\tif ( light.castShadow ) {\r\n\t\r\n\t\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\r\n\t\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\r\n\t\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\r\n\t\r\n\t\t\t\t\t\t_lights.shadows[ shadowsLength ++ ] = light;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t_lights.directionalShadowMap[ directionalLength ] = light.shadow.map;\r\n\t\t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\r\n\t\t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\r\n\t\r\n\t\t\t\t} else if ( light instanceof THREE.SpotLight ) {\r\n\t\r\n\t\t\t\t\tvar uniforms = lightCache.get( light );\r\n\t\r\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\t\r\n\t\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\r\n\t\t\t\t\tuniforms.distance = distance;\r\n\t\r\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\tuniforms.direction.sub( _vector3 );\r\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\t\r\n\t\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\r\n\t\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\r\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\r\n\t\r\n\t\t\t\t\tuniforms.shadow = light.castShadow;\r\n\t\r\n\t\t\t\t\tif ( light.castShadow ) {\r\n\t\r\n\t\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\r\n\t\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\r\n\t\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\r\n\t\r\n\t\t\t\t\t\t_lights.shadows[ shadowsLength ++ ] = light;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t_lights.spotShadowMap[ spotLength ] = light.shadow.map;\r\n\t\t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\r\n\t\t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\r\n\t\r\n\t\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\t\r\n\t\t\t\t\tvar uniforms = lightCache.get( light );\r\n\t\r\n\t\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\t\r\n\t\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\t\tuniforms.distance = light.distance;\r\n\t\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\r\n\t\r\n\t\t\t\t\tuniforms.shadow = light.castShadow;\r\n\t\r\n\t\t\t\t\tif ( light.castShadow ) {\r\n\t\r\n\t\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\r\n\t\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\r\n\t\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\r\n\t\r\n\t\t\t\t\t\t_lights.shadows[ shadowsLength ++ ] = light;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t_lights.pointShadowMap[ pointLength ] = light.shadow.map;\r\n\t\r\n\t\t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\r\n\t\r\n\t\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new THREE.Matrix4();\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\r\n\t\t\t\t\t// equal to inverse of the light's position\r\n\t\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\r\n\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\r\n\t\r\n\t\t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\r\n\t\r\n\t\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\r\n\t\r\n\t\t\t\t\tvar uniforms = lightCache.get( light );\r\n\t\r\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\t\t\t\t\tuniforms.direction.normalize();\r\n\t\r\n\t\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\r\n\t\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\r\n\t\r\n\t\t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t_lights.ambient[ 0 ] = r;\r\n\t\t\t_lights.ambient[ 1 ] = g;\r\n\t\t\t_lights.ambient[ 2 ] = b;\r\n\t\r\n\t\t\t_lights.directional.length = directionalLength;\r\n\t\t\t_lights.spot.length = spotLength;\r\n\t\t\t_lights.point.length = pointLength;\r\n\t\t\t_lights.hemi.length = hemiLength;\r\n\t\r\n\t\t\t_lights.shadows.length = shadowsLength;\r\n\t\r\n\t\t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + shadowsLength;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// GL state setting\r\n\t\r\n\t\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\r\n\t\r\n\t\t\tif ( cullFace === THREE.CullFaceNone ) {\r\n\t\r\n\t\t\t\tstate.disable( _gl.CULL_FACE );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tif ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {\r\n\t\r\n\t\t\t\t\t_gl.frontFace( _gl.CW );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t_gl.frontFace( _gl.CCW );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( cullFace === THREE.CullFaceBack ) {\r\n\t\r\n\t\t\t\t\t_gl.cullFace( _gl.BACK );\r\n\t\r\n\t\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\r\n\t\r\n\t\t\t\t\t_gl.cullFace( _gl.FRONT );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t_gl.cullFace( _gl.FRONT_AND_BACK );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tstate.enable( _gl.CULL_FACE );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// Textures\r\n\t\r\n\t\tfunction setTextureParameters ( textureType, texture, isPowerOfTwoImage ) {\r\n\t\r\n\t\t\tvar extension;\r\n\t\r\n\t\t\tif ( isPowerOfTwoImage ) {\r\n\t\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\r\n\t\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\t\r\n\t\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\r\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\r\n\t\r\n\t\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\t\r\n\t\t\tif ( extension ) {\r\n\t\r\n\t\t\t\tif ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\r\n\t\t\t\tif ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\r\n\t\r\n\t\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\r\n\t\r\n\t\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _this.getMaxAnisotropy() ) );\r\n\t\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction uploadTexture( textureProperties, texture, slot ) {\r\n\t\r\n\t\t\tif ( textureProperties.__webglInit === undefined ) {\r\n\t\r\n\t\t\t\ttextureProperties.__webglInit = true;\r\n\t\r\n\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\t\r\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\t\r\n\t\t\t\t_infoMemory.textures ++;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\t\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\r\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\r\n\t\r\n\t\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\r\n\t\r\n\t\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\r\n\t\r\n\t\t\t\timage = makePowerOfTwo( image );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\r\n\t\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\t\tglType = paramThreeToGL( texture.type );\r\n\t\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\r\n\t\r\n\t\t\tvar mipmap, mipmaps = texture.mipmaps;\r\n\t\r\n\t\t\tif ( texture instanceof THREE.DataTexture ) {\r\n\t\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\t\r\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\r\n\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\r\n\t\r\n\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\r\n\t\r\n\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// regular Texture (image, video, canvas)\r\n\t\r\n\t\t\t\t// use manually created mipmaps if available\r\n\t\t\t\t// if there are no manual mipmaps\r\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\t\r\n\t\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\ttexture.generateMipmaps = false;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\t\r\n\t\t\ttextureProperties.__version = texture.version;\r\n\t\r\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.setTexture = function ( texture, slot ) {\r\n\t\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\t\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\t\r\n\t\t\t\tvar image = texture.image;\r\n\t\r\n\t\t\t\tif ( image === undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\r\n\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( image.complete === false ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\r\n\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\t\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction clampToMaxSize ( image, maxSize ) {\r\n\t\r\n\t\t\tif ( image.width > maxSize || image.height > maxSize ) {\r\n\t\r\n\t\t\t\t// Warning: Scaling through the canvas will only work with images that use\r\n\t\t\t\t// premultiplied alpha.\r\n\t\r\n\t\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\r\n\t\r\n\t\t\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\t\tcanvas.width = Math.floor( image.width * scale );\r\n\t\t\t\tcanvas.height = Math.floor( image.height * scale );\r\n\t\r\n\t\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\r\n\t\r\n\t\t\t\treturn canvas;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn image;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction isPowerOfTwo( image ) {\r\n\t\r\n\t\t\treturn THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction textureNeedsPowerOfTwo( texture ) {\r\n\t\r\n\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;\r\n\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;\r\n\t\r\n\t\t\treturn false;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction makePowerOfTwo( image ) {\r\n\t\r\n\t\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\r\n\t\r\n\t\t\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\t\tcanvas.width = THREE.Math.nearestPowerOfTwo( image.width );\r\n\t\t\t\tcanvas.height = THREE.Math.nearestPowerOfTwo( image.height );\r\n\t\r\n\t\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\r\n\t\r\n\t\t\t\treturn canvas;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn image;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setCubeTexture ( texture, slot ) {\r\n\t\r\n\t\t\tvar textureProperties = properties.get( texture );\r\n\t\r\n\t\t\tif ( texture.image.length === 6 ) {\r\n\t\r\n\t\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\t\r\n\t\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\r\n\t\r\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\t\r\n\t\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\r\n\t\r\n\t\t\t\t\t\t_infoMemory.textures ++;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\r\n\t\r\n\t\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\r\n\t\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\r\n\t\t\t\t\tvar isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;\r\n\t\r\n\t\t\t\t\tvar cubeImage = [];\r\n\t\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tif ( _this.autoScaleCubemaps && ! isCompressed && ! isDataTexture ) {\r\n\t\r\n\t\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tvar image = cubeImage[ 0 ],\r\n\t\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\r\n\t\t\t\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\t\t\t\tglType = paramThreeToGL( texture.type );\r\n\t\r\n\t\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\r\n\t\r\n\t\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tif ( ! isCompressed ) {\r\n\t\r\n\t\t\t\t\t\t\tif ( isDataTexture ) {\r\n\t\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\r\n\t\r\n\t\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\r\n\t\r\n\t\t\t\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\t\r\n\t\t\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()\" );\r\n\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\r\n\t\r\n\t\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\ttextureProperties.__version = texture.version;\r\n\t\r\n\t\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction setCubeTextureDynamic ( texture, slot ) {\r\n\t\r\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Render targets\r\n\t\r\n\t\t// Setup storage for target texture and bind it to correct framebuffer\r\n\t\tfunction setupFrameBufferTexture ( framebuffer, renderTarget, attachment, textureTarget ) {\r\n\t\r\n\t\t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\r\n\t\t\tvar glType = paramThreeToGL( renderTarget.texture.type );\r\n\t\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\r\n\t\tfunction setupRenderBufferStorage ( renderbuffer, renderTarget ) {\r\n\t\r\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\r\n\t\r\n\t\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\t\r\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\r\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\t\r\n\t\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\t\r\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\r\n\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// FIXME: We don't support !depth !stencil\r\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Setup GL resources for a non-texture depth buffer\r\n\t\tfunction setupDepthRenderbuffer( renderTarget ) {\r\n\t\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\r\n\t\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\t\r\n\t\t\tif ( isCube ) {\r\n\t\r\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\r\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\r\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Set up GL resources for the render target\r\n\t\tfunction setupRenderTarget( renderTarget ) {\r\n\t\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\t\r\n\t\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\r\n\t\r\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\t\r\n\t\t\t_infoMemory.textures ++;\r\n\t\r\n\t\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\t\t\tvar isTargetPowerOfTwo = THREE.Math.isPowerOfTwo( renderTarget.width ) && THREE.Math.isPowerOfTwo( renderTarget.height );\r\n\t\r\n\t\t\t// Setup framebuffer\r\n\t\r\n\t\t\tif ( isCube ) {\r\n\t\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// Setup color buffer\r\n\t\r\n\t\t\tif ( isCube ) {\r\n\t\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\t\r\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\r\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\r\n\t\r\n\t\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// Setup depth and stencil buffers\r\n\t\r\n\t\t\tif ( renderTarget.depthBuffer ) {\r\n\t\r\n\t\t\t\tsetupDepthRenderbuffer( renderTarget );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.getCurrentRenderTarget = function() {\r\n\t\r\n\t\t\treturn _currentRenderTarget;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.setRenderTarget = function ( renderTarget ) {\r\n\t\r\n\t\t\t_currentRenderTarget = renderTarget;\r\n\t\r\n\t\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\r\n\t\r\n\t\t\t\tsetupRenderTarget( renderTarget );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\t\t\tvar framebuffer;\r\n\t\r\n\t\t\tif ( renderTarget ) {\r\n\t\r\n\t\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\r\n\t\t\t\tif ( isCube ) {\r\n\t\r\n\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\r\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\r\n\t\r\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tframebuffer = null;\r\n\t\r\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\r\n\t\t\t\t_currentScissorTest = _scissorTest;\r\n\t\r\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( _currentFramebuffer !== framebuffer ) {\r\n\t\r\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t\t\t_currentFramebuffer = framebuffer;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tstate.scissor( _currentScissor );\r\n\t\t\tstate.setScissorTest( _currentScissorTest );\r\n\t\r\n\t\t\tstate.viewport( _currentViewport );\r\n\t\r\n\t\t\tif ( isCube ) {\r\n\t\r\n\t\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\r\n\t\r\n\t\t\tif ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\t\r\n\t\t\tif ( framebuffer ) {\r\n\t\r\n\t\t\t\tvar restore = false;\r\n\t\r\n\t\t\t\tif ( framebuffer !== _currentFramebuffer ) {\r\n\t\r\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\r\n\t\t\t\t\trestore = true;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\ttry {\r\n\t\r\n\t\t\t\t\tvar texture = renderTarget.texture;\r\n\t\r\n\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat\r\n\t\t\t\t\t\t&& paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\r\n\t\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\r\n\t\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( texture.type !== THREE.UnsignedByteType\r\n\t\t\t\t\t\t&& paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE )\r\n\t\t\t\t\t\t&& ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) )\r\n\t\t\t\t\t\t&& ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\r\n\t\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\r\n\t\t\t\t\t\treturn;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\r\n\t\r\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} finally {\r\n\t\r\n\t\t\t\t\tif ( restore ) {\r\n\t\r\n\t\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction updateRenderTargetMipmap( renderTarget ) {\r\n\t\r\n\t\t\tvar target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\r\n\t\t\tvar texture = properties.get( renderTarget.texture ).__webglTexture;\r\n\t\r\n\t\t\tstate.bindTexture( target, texture );\r\n\t\t\t_gl.generateMipmap( target );\r\n\t\t\tstate.bindTexture( target, null );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Fallback filters for non-power-of-2 textures\r\n\t\r\n\t\tfunction filterFallback ( f ) {\r\n\t\r\n\t\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\r\n\t\r\n\t\t\t\treturn _gl.NEAREST;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn _gl.LINEAR;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Map three.js constants to WebGL constants\r\n\t\r\n\t\tfunction paramThreeToGL ( p ) {\r\n\t\r\n\t\t\tvar extension;\r\n\t\r\n\t\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\r\n\t\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\r\n\t\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\r\n\t\r\n\t\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\r\n\t\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\r\n\t\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\r\n\t\r\n\t\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\r\n\t\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\r\n\t\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\r\n\t\r\n\t\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\r\n\t\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\r\n\t\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\r\n\t\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\r\n\t\r\n\t\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\r\n\t\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\r\n\t\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\r\n\t\t\tif ( p === THREE.IntType ) return _gl.INT;\r\n\t\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\r\n\t\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\r\n\t\r\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\r\n\t\r\n\t\t\tif ( extension !== null ) {\r\n\t\r\n\t\t\t\tif ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\r\n\t\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\r\n\t\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\r\n\t\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\r\n\t\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\r\n\t\r\n\t\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\r\n\t\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\r\n\t\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\r\n\t\r\n\t\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\r\n\t\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\r\n\t\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\r\n\t\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\r\n\t\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\r\n\t\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\r\n\t\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\r\n\t\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\r\n\t\r\n\t\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\r\n\t\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\r\n\t\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\r\n\t\r\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\t\r\n\t\t\tif ( extension !== null ) {\r\n\t\r\n\t\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n\t\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n\t\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n\t\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\t\r\n\t\t\tif ( extension !== null ) {\r\n\t\r\n\t\t\t\tif ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n\t\t\t\tif ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n\t\t\t\tif ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n\t\t\t\tif ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\r\n\t\r\n\t\t\tif ( extension !== null ) {\r\n\t\r\n\t\t\t\tif ( p === THREE.RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\textension = extensions.get( 'EXT_blend_minmax' );\r\n\t\r\n\t\t\tif ( extension !== null ) {\r\n\t\r\n\t\t\t\tif ( p === THREE.MinEquation ) return extension.MIN_EXT;\r\n\t\t\t\tif ( p === THREE.MaxEquation ) return extension.MAX_EXT;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn 0;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/WebGLRenderTarget.js\r\n\t\r\n\t/**\r\n\t * @author szimek / https://github.com/szimek/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author Marius Kintel / https://github.com/kintel\r\n\t */\r\n\t\r\n\t/*\r\n\t In options, we can specify:\r\n\t * Texture parameters for an auto-generated target texture\r\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\r\n\t*/\r\n\tTHREE.WebGLRenderTarget = function ( width, height, options ) {\r\n\t\r\n\t\tthis.uuid = THREE.Math.generateUUID();\r\n\t\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\r\n\t\tthis.scissor = new THREE.Vector4( 0, 0, width, height );\r\n\t\tthis.scissorTest = false;\r\n\t\r\n\t\tthis.viewport = new THREE.Vector4( 0, 0, width, height );\r\n\t\r\n\t\toptions = options || {};\r\n\t\r\n\t\tif ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;\r\n\t\r\n\t\tthis.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy );\r\n\t\r\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\r\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.WebGLRenderTarget.prototype = {\r\n\t\r\n\t\tconstructor: THREE.WebGLRenderTarget,\r\n\t\r\n\t\tsetSize: function ( width, height ) {\r\n\t\r\n\t\t\tif ( this.width !== width || this.height !== height ) {\r\n\t\r\n\t\t\t\tthis.width = width;\r\n\t\t\t\tthis.height = height;\r\n\t\r\n\t\t\t\tthis.dispose();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.viewport.set( 0, 0, width, height );\r\n\t\t\tthis.scissor.set( 0, 0, width, height );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tclone: function () {\r\n\t\r\n\t\t\treturn new this.constructor().copy( this );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcopy: function ( source ) {\r\n\t\r\n\t\t\tthis.width = source.width;\r\n\t\t\tthis.height = source.height;\r\n\t\r\n\t\t\tthis.viewport.copy( source.viewport );\r\n\t\r\n\t\t\tthis.texture = source.texture.clone();\r\n\t\r\n\t\t\tthis.depthBuffer = source.depthBuffer;\r\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdispose: function () {\r\n\t\r\n\t\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EventDispatcher.prototype.apply( THREE.WebGLRenderTarget.prototype );\r\n\t\r\n\t// File:src/renderers/WebGLRenderTargetCube.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com\r\n\t */\r\n\t\r\n\tTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\r\n\t\r\n\t\tTHREE.WebGLRenderTarget.call( this, width, height, options );\r\n\t\r\n\t\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\r\n\t\tthis.activeMipMapLevel = 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\r\n\tTHREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;\r\n\t\r\n\t// File:src/renderers/webgl/WebGLBufferRenderer.js\r\n\t\r\n\t/**\r\n\t* @author mrdoob / http://mrdoob.com/\r\n\t*/\r\n\t\r\n\tTHREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {\r\n\t\r\n\t\tvar mode;\r\n\t\r\n\t\tfunction setMode( value ) {\r\n\t\r\n\t\t\tmode = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction render( start, count ) {\r\n\t\r\n\t\t\t_gl.drawArrays( mode, start, count );\r\n\t\r\n\t\t\t_infoRender.calls ++;\r\n\t\t\t_infoRender.vertices += count;\r\n\t\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction renderInstances( geometry ) {\r\n\t\r\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\r\n\t\t\tif ( extension === null ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar position = geometry.attributes.position;\r\n\t\r\n\t\t\tvar count = 0;\r\n\t\r\n\t\t\tif ( position instanceof THREE.InterleavedBufferAttribute ) {\r\n\t\r\n\t\t\t\tcount = position.data.count;\r\n\t\r\n\t\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tcount = position.count;\r\n\t\r\n\t\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t_infoRender.calls ++;\r\n\t\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\r\n\t\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.setMode = setMode;\r\n\t\tthis.render = render;\r\n\t\tthis.renderInstances = renderInstances;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js\r\n\t\r\n\t/**\r\n\t* @author mrdoob / http://mrdoob.com/\r\n\t*/\r\n\t\r\n\tTHREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {\r\n\t\r\n\t\tvar mode;\r\n\t\r\n\t\tfunction setMode( value ) {\r\n\t\r\n\t\t\tmode = value;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar type, size;\r\n\t\r\n\t\tfunction setIndex( index ) {\r\n\t\r\n\t\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\r\n\t\r\n\t\t\t\ttype = _gl.UNSIGNED_INT;\r\n\t\t\t\tsize = 4;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\ttype = _gl.UNSIGNED_SHORT;\r\n\t\t\t\tsize = 2;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction render( start, count ) {\r\n\t\r\n\t\t\t_gl.drawElements( mode, count, type, start * size );\r\n\t\r\n\t\t\t_infoRender.calls ++;\r\n\t\t\t_infoRender.vertices += count;\r\n\t\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction renderInstances( geometry, start, count ) {\r\n\t\r\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\r\n\t\t\tif ( extension === null ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\treturn;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\r\n\t\r\n\t\t\t_infoRender.calls ++;\r\n\t\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\r\n\t\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\r\n\t\t}\r\n\t\r\n\t\tthis.setMode = setMode;\r\n\t\tthis.setIndex = setIndex;\r\n\t\tthis.render = render;\r\n\t\tthis.renderInstances = renderInstances;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLExtensions.js\r\n\t\r\n\t/**\r\n\t* @author mrdoob / http://mrdoob.com/\r\n\t*/\r\n\t\r\n\tTHREE.WebGLExtensions = function ( gl ) {\r\n\t\r\n\t\tvar extensions = {};\r\n\t\r\n\t\tthis.get = function ( name ) {\r\n\t\r\n\t\t\tif ( extensions[ name ] !== undefined ) {\r\n\t\r\n\t\t\t\treturn extensions[ name ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar extension;\r\n\t\r\n\t\t\tswitch ( name ) {\r\n\t\r\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\r\n\t\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\r\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\r\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase 'WEBGL_compressed_texture_etc1':\r\n\t\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\textension = gl.getExtension( name );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( extension === null ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\textensions[ name ] = extension;\r\n\t\r\n\t\t\treturn extension;\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLCapabilities.js\r\n\t\r\n\tTHREE.WebGLCapabilities = function ( gl, extensions, parameters ) {\r\n\t\r\n\t\tfunction getMaxPrecision( precision ) {\r\n\t\r\n\t\t\tif ( precision === 'highp' ) {\r\n\t\r\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\r\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\r\n\t\r\n\t\t\t\t\treturn 'highp';\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tprecision = 'mediump';\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( precision === 'mediump' ) {\r\n\t\r\n\t\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\r\n\t\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\r\n\t\r\n\t\t\t\t\treturn 'mediump';\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn 'lowp';\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.getMaxPrecision = getMaxPrecision;\r\n\t\r\n\t\tthis.precision = parameters.precision !== undefined ? parameters.precision : 'highp',\r\n\t\tthis.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;\r\n\t\r\n\t\tthis.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\t\tthis.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n\t\tthis.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\r\n\t\tthis.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\t\r\n\t\tthis.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n\t\tthis.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n\t\tthis.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\r\n\t\tthis.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\r\n\t\r\n\t\tthis.vertexTextures = this.maxVertexTextures > 0;\r\n\t\tthis.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\r\n\t\tthis.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\r\n\t\r\n\t\tvar _maxPrecision = getMaxPrecision( this.precision );\r\n\t\r\n\t\tif ( _maxPrecision !== this.precision ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );\r\n\t\t\tthis.precision = _maxPrecision;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tif ( this.logarithmicDepthBuffer ) {\r\n\t\r\n\t\t\tthis.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLGeometries.js\r\n\t\r\n\t/**\r\n\t* @author mrdoob / http://mrdoob.com/\r\n\t*/\r\n\t\r\n\tTHREE.WebGLGeometries = function ( gl, properties, info ) {\r\n\t\r\n\t\tvar geometries = {};\r\n\t\r\n\t\tfunction get( object ) {\r\n\t\r\n\t\t\tvar geometry = object.geometry;\r\n\t\r\n\t\t\tif ( geometries[ geometry.id ] !== undefined ) {\r\n\t\r\n\t\t\t\treturn geometries[ geometry.id ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\r\n\t\r\n\t\t\tvar buffergeometry;\r\n\t\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\t\tbuffergeometry = geometry;\r\n\t\r\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\t\tif ( geometry._bufferGeometry === undefined ) {\r\n\t\r\n\t\t\t\t\tgeometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tbuffergeometry = geometry._bufferGeometry;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tgeometries[ geometry.id ] = buffergeometry;\r\n\t\r\n\t\t\tinfo.memory.geometries ++;\r\n\t\r\n\t\t\treturn buffergeometry;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction onGeometryDispose( event ) {\r\n\t\r\n\t\t\tvar geometry = event.target;\r\n\t\t\tvar buffergeometry = geometries[ geometry.id ];\r\n\t\r\n\t\t\tif ( buffergeometry.index !== null ) {\r\n\t\r\n\t\t\t\tdeleteAttribute( buffergeometry.index );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tdeleteAttributes( buffergeometry.attributes );\r\n\t\r\n\t\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\r\n\t\r\n\t\t\tdelete geometries[ geometry.id ];\r\n\t\r\n\t\t\t// TODO\r\n\t\r\n\t\t\tvar property = properties.get( geometry );\r\n\t\r\n\t\t\tif ( property.wireframe ) {\r\n\t\r\n\t\t\t\tdeleteAttribute( property.wireframe );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tproperties.delete( geometry );\r\n\t\r\n\t\t\tvar bufferproperty = properties.get( buffergeometry );\r\n\t\r\n\t\t\tif ( bufferproperty.wireframe ) {\r\n\t\r\n\t\t\t\tdeleteAttribute( bufferproperty.wireframe );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tproperties.delete( buffergeometry );\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tinfo.memory.geometries --;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getAttributeBuffer( attribute ) {\r\n\t\r\n\t\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\t\r\n\t\t\t\treturn properties.get( attribute.data ).__webglBuffer;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn properties.get( attribute ).__webglBuffer;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction deleteAttribute( attribute ) {\r\n\t\r\n\t\t\tvar buffer = getAttributeBuffer( attribute );\r\n\t\r\n\t\t\tif ( buffer !== undefined ) {\r\n\t\r\n\t\t\t\tgl.deleteBuffer( buffer );\r\n\t\t\t\tremoveAttributeBuffer( attribute );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction deleteAttributes( attributes ) {\r\n\t\r\n\t\t\tfor ( var name in attributes ) {\r\n\t\r\n\t\t\t\tdeleteAttribute( attributes[ name ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction removeAttributeBuffer( attribute ) {\r\n\t\r\n\t\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\t\r\n\t\t\t\tproperties.delete( attribute.data );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tproperties.delete( attribute );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.get = get;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLLights.js\r\n\t\r\n\t/**\r\n\t* @author mrdoob / http://mrdoob.com/\r\n\t*/\r\n\t\r\n\tTHREE.WebGLLights = function () {\r\n\t\r\n\t\tvar lights = {};\r\n\t\r\n\t\tthis.get = function ( light ) {\r\n\t\r\n\t\t\tif ( lights[ light.id ] !== undefined ) {\r\n\t\r\n\t\t\t\treturn lights[ light.id ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar uniforms;\r\n\t\r\n\t\t\tswitch ( light.type ) {\r\n\t\r\n\t\t\t\tcase 'DirectionalLight':\r\n\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\tdirection: new THREE.Vector3(),\r\n\t\t\t\t\t\tcolor: new THREE.Color(),\r\n\t\r\n\t\t\t\t\t\tshadow: false,\r\n\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\tshadowMapSize: new THREE.Vector2()\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase 'SpotLight':\r\n\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\tposition: new THREE.Vector3(),\r\n\t\t\t\t\t\tdirection: new THREE.Vector3(),\r\n\t\t\t\t\t\tcolor: new THREE.Color(),\r\n\t\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\t\tconeCos: 0,\r\n\t\t\t\t\t\tpenumbraCos: 0,\r\n\t\t\t\t\t\tdecay: 0,\r\n\t\r\n\t\t\t\t\t\tshadow: false,\r\n\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\tshadowMapSize: new THREE.Vector2()\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase 'PointLight':\r\n\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\tposition: new THREE.Vector3(),\r\n\t\t\t\t\t\tcolor: new THREE.Color(),\r\n\t\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\t\tdecay: 0,\r\n\t\r\n\t\t\t\t\t\tshadow: false,\r\n\t\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\t\tshadowMapSize: new THREE.Vector2()\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase 'HemisphereLight':\r\n\t\t\t\t\tuniforms = {\r\n\t\t\t\t\t\tdirection: new THREE.Vector3(),\r\n\t\t\t\t\t\tskyColor: new THREE.Color(),\r\n\t\t\t\t\t\tgroundColor: new THREE.Color()\r\n\t\t\t\t\t};\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tlights[ light.id ] = uniforms;\r\n\t\r\n\t\t\treturn uniforms;\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLObjects.js\r\n\t\r\n\t/**\r\n\t* @author mrdoob / http://mrdoob.com/\r\n\t*/\r\n\t\r\n\tTHREE.WebGLObjects = function ( gl, properties, info ) {\r\n\t\r\n\t\tvar geometries = new THREE.WebGLGeometries( gl, properties, info );\r\n\t\r\n\t\t//\r\n\t\r\n\t\tfunction update( object ) {\r\n\t\r\n\t\t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\r\n\t\r\n\t\t\tvar geometry = geometries.get( object );\r\n\t\r\n\t\t\tif ( object.geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\t\tgeometry.updateFromObject( object );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\t\r\n\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var name in attributes ) {\r\n\t\r\n\t\t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// morph targets\r\n\t\r\n\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\t\r\n\t\t\tfor ( var name in morphAttributes ) {\r\n\t\r\n\t\t\t\tvar array = morphAttributes[ name ];\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn geometry;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction updateAttribute( attribute, bufferType ) {\r\n\t\r\n\t\t\tvar data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;\r\n\t\r\n\t\t\tvar attributeProperties = properties.get( data );\r\n\t\r\n\t\t\tif ( attributeProperties.__webglBuffer === undefined ) {\r\n\t\r\n\t\t\t\tcreateBuffer( attributeProperties, data, bufferType );\r\n\t\r\n\t\t\t} else if ( attributeProperties.version !== data.version ) {\r\n\t\r\n\t\t\t\tupdateBuffer( attributeProperties, data, bufferType );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction createBuffer( attributeProperties, data, bufferType ) {\r\n\t\r\n\t\t\tattributeProperties.__webglBuffer = gl.createBuffer();\r\n\t\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\r\n\t\r\n\t\t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\r\n\t\r\n\t\t\tgl.bufferData( bufferType, data.array, usage );\r\n\t\r\n\t\t\tattributeProperties.version = data.version;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction updateBuffer( attributeProperties, data, bufferType ) {\r\n\t\r\n\t\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\r\n\t\r\n\t\t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\r\n\t\r\n\t\t\t\t// Not using update ranges\r\n\t\r\n\t\t\t\tgl.bufferSubData( bufferType, 0, data.array );\r\n\t\r\n\t\t\t} else if ( data.updateRange.count === 0 ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\r\n\t\t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\r\n\t\r\n\t\t\t\tdata.updateRange.count = 0; // reset range\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tattributeProperties.version = data.version;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getAttributeBuffer( attribute ) {\r\n\t\r\n\t\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\t\r\n\t\t\t\treturn properties.get( attribute.data ).__webglBuffer;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn properties.get( attribute ).__webglBuffer;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getWireframeAttribute( geometry ) {\r\n\t\r\n\t\t\tvar property = properties.get( geometry );\r\n\t\r\n\t\t\tif ( property.wireframe !== undefined ) {\r\n\t\r\n\t\t\t\treturn property.wireframe;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar indices = [];\r\n\t\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\t\t\tvar position = attributes.position;\r\n\t\r\n\t\t\t// console.time( 'wireframe' );\r\n\t\r\n\t\t\tif ( index !== null ) {\r\n\t\r\n\t\t\t\tvar edges = {};\r\n\t\t\t\tvar array = index.array;\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\t\r\n\t\t\t\t\tvar a = array[ i + 0 ];\r\n\t\t\t\t\tvar b = array[ i + 1 ];\r\n\t\t\t\t\tvar c = array[ i + 2 ];\r\n\t\r\n\t\t\t\t\tif ( checkEdge( edges, a, b ) ) indices.push( a, b );\r\n\t\t\t\t\tif ( checkEdge( edges, b, c ) ) indices.push( b, c );\r\n\t\t\t\t\tif ( checkEdge( edges, c, a ) ) indices.push( c, a );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tvar array = attributes.position.array;\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\r\n\t\r\n\t\t\t\t\tvar a = i + 0;\r\n\t\t\t\t\tvar b = i + 1;\r\n\t\t\t\t\tvar c = i + 2;\r\n\t\r\n\t\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// console.timeEnd( 'wireframe' );\r\n\t\r\n\t\t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\r\n\t\t\tvar attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );\r\n\t\r\n\t\t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\r\n\t\r\n\t\t\tproperty.wireframe = attribute;\r\n\t\r\n\t\t\treturn attribute;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction checkEdge( edges, a, b ) {\r\n\t\r\n\t\t\tif ( a > b ) {\r\n\t\r\n\t\t\t\tvar tmp = a;\r\n\t\t\t\ta = b;\r\n\t\t\t\tb = tmp;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar list = edges[ a ];\r\n\t\r\n\t\t\tif ( list === undefined ) {\r\n\t\r\n\t\t\t\tedges[ a ] = [ b ];\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t} else if ( list.indexOf( b ) === -1 ) {\r\n\t\r\n\t\t\t\tlist.push( b );\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn false;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.getAttributeBuffer = getAttributeBuffer;\r\n\t\tthis.getWireframeAttribute = getWireframeAttribute;\r\n\t\r\n\t\tthis.update = update;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLProgram.js\r\n\t\r\n\tTHREE.WebGLProgram = ( function () {\r\n\t\r\n\t\tvar programIdCount = 0;\r\n\t\r\n\t\t// TODO: Combine the regex\r\n\t\tvar structRe = /^([\\w\\d_]+)\\.([\\w\\d_]+)$/;\r\n\t\tvar arrayStructRe = /^([\\w\\d_]+)\\[(\\d+)\\]\\.([\\w\\d_]+)$/;\r\n\t\tvar arrayRe = /^([\\w\\d_]+)\\[0\\]$/;\r\n\t\r\n\t\tfunction getEncodingComponents( encoding ) {\r\n\t\r\n\t\t\tswitch ( encoding ) {\r\n\t\r\n\t\t\t\tcase THREE.LinearEncoding:\r\n\t\t\t\t\treturn [ 'Linear','( value )' ];\r\n\t\t\t\tcase THREE.sRGBEncoding:\r\n\t\t\t\t\treturn [ 'sRGB','( value )' ];\r\n\t\t\t\tcase THREE.RGBEEncoding:\r\n\t\t\t\t\treturn [ 'RGBE','( value )' ];\r\n\t\t\t\tcase THREE.RGBM7Encoding:\r\n\t\t\t\t\treturn [ 'RGBM','( value, 7.0 )' ];\r\n\t\t\t\tcase THREE.RGBM16Encoding:\r\n\t\t\t\t\treturn [ 'RGBM','( value, 16.0 )' ];\r\n\t\t\t\tcase THREE.RGBDEncoding:\r\n\t\t\t\t\treturn [ 'RGBD','( value, 256.0 )' ];\r\n\t\t\t\tcase THREE.GammaEncoding:\r\n\t\t\t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getTexelDecodingFunction( functionName, encoding ) {\r\n\t\r\n\t\t\tvar components = getEncodingComponents( encoding );\r\n\t\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getTexelEncodingFunction( functionName, encoding ) {\r\n\t\r\n\t\t\tvar components = getEncodingComponents( encoding );\r\n\t\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getToneMappingFunction( functionName, toneMapping ) {\r\n\t\r\n\t\t\tvar toneMappingName;\r\n\t\r\n\t\t\tswitch ( toneMapping ) {\r\n\t\r\n\t\t\t\tcase THREE.LinearToneMapping:\r\n\t\t\t\t\ttoneMappingName = \"Linear\";\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase THREE.ReinhardToneMapping:\r\n\t\t\t\t\ttoneMappingName = \"Reinhard\";\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase THREE.Uncharted2ToneMapping:\r\n\t\t\t\t\ttoneMappingName = \"Uncharted2\";\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tcase THREE.CineonToneMapping:\r\n\t\t\t\t\ttoneMappingName = \"OptimizedCineon\";\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\r\n\t\r\n\t\t\textensions = extensions || {};\r\n\t\r\n\t\t\tvar chunks = [\r\n\t\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\r\n\t\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\r\n\t\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\r\n\t\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\r\n\t\t\t];\r\n\t\r\n\t\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction generateDefines( defines ) {\r\n\t\r\n\t\t\tvar chunks = [];\r\n\t\r\n\t\t\tfor ( var name in defines ) {\r\n\t\r\n\t\t\t\tvar value = defines[ name ];\r\n\t\r\n\t\t\t\tif ( value === false ) continue;\r\n\t\r\n\t\t\t\tchunks.push( '#define ' + name + ' ' + value );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn chunks.join( '\\n' );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction fetchUniformLocations( gl, program, identifiers ) {\r\n\t\r\n\t\t\tvar uniforms = {};\r\n\t\r\n\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\r\n\t\r\n\t\t\tfor ( var i = 0; i < n; i ++ ) {\r\n\t\r\n\t\t\t\tvar info = gl.getActiveUniform( program, i );\r\n\t\t\t\tvar name = info.name;\r\n\t\t\t\tvar location = gl.getUniformLocation( program, name );\r\n\t\r\n\t\t\t\t//console.log(\"THREE.WebGLProgram: ACTIVE UNIFORM:\", name);\r\n\t\r\n\t\t\t\tvar matches = structRe.exec( name );\r\n\t\t\t\tif ( matches ) {\r\n\t\r\n\t\t\t\t\tvar structName = matches[ 1 ];\r\n\t\t\t\t\tvar structProperty = matches[ 2 ];\r\n\t\r\n\t\t\t\t\tvar uniformsStruct = uniforms[ structName ];\r\n\t\r\n\t\t\t\t\tif ( ! uniformsStruct ) {\r\n\t\r\n\t\t\t\t\t\tuniformsStruct = uniforms[ structName ] = {};\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tuniformsStruct[ structProperty ] = location;\r\n\t\r\n\t\t\t\t\tcontinue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tmatches = arrayStructRe.exec( name );\r\n\t\r\n\t\t\t\tif ( matches ) {\r\n\t\r\n\t\t\t\t\tvar arrayName = matches[ 1 ];\r\n\t\t\t\t\tvar arrayIndex = matches[ 2 ];\r\n\t\t\t\t\tvar arrayProperty = matches[ 3 ];\r\n\t\r\n\t\t\t\t\tvar uniformsArray = uniforms[ arrayName ];\r\n\t\r\n\t\t\t\t\tif ( ! uniformsArray ) {\r\n\t\r\n\t\t\t\t\t\tuniformsArray = uniforms[ arrayName ] = [];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tvar uniformsArrayIndex = uniformsArray[ arrayIndex ];\r\n\t\r\n\t\t\t\t\tif ( ! uniformsArrayIndex ) {\r\n\t\r\n\t\t\t\t\t\tuniformsArrayIndex = uniformsArray[ arrayIndex ] = {};\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tuniformsArrayIndex[ arrayProperty ] = location;\r\n\t\r\n\t\t\t\t\tcontinue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tmatches = arrayRe.exec( name );\r\n\t\r\n\t\t\t\tif ( matches ) {\r\n\t\r\n\t\t\t\t\tvar arrayName = matches[ 1 ];\r\n\t\r\n\t\t\t\t\tuniforms[ arrayName ] = location;\r\n\t\r\n\t\t\t\t\tcontinue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tuniforms[ name ] = location;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn uniforms;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction fetchAttributeLocations( gl, program, identifiers ) {\r\n\t\r\n\t\t\tvar attributes = {};\r\n\t\r\n\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\r\n\t\r\n\t\t\tfor ( var i = 0; i < n; i ++ ) {\r\n\t\r\n\t\t\t\tvar info = gl.getActiveAttrib( program, i );\r\n\t\t\t\tvar name = info.name;\r\n\t\r\n\t\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\r\n\t\r\n\t\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn attributes;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction filterEmptyLine( string ) {\r\n\t\r\n\t\t\treturn string !== '';\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction replaceLightNums( string, parameters ) {\r\n\t\r\n\t\t\treturn string\r\n\t\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\r\n\t\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\r\n\t\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\r\n\t\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction parseIncludes( string ) {\r\n\t\r\n\t\t\tvar pattern = /#include +<([\\w\\d.]+)>/g;\r\n\t\r\n\t\t\tfunction replace( match, include ) {\r\n\t\r\n\t\t\t\tvar replace = THREE.ShaderChunk[ include ];\r\n\t\r\n\t\t\t\tif ( replace === undefined ) {\r\n\t\r\n\t\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn parseIncludes( replace );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn string.replace( pattern, replace );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction unrollLoops( string ) {\r\n\t\r\n\t\t\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\r\n\t\r\n\t\t\tfunction replace( match, start, end, snippet ) {\r\n\t\r\n\t\t\t\tvar unroll = '';\r\n\t\r\n\t\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\r\n\t\r\n\t\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn unroll;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn string.replace( pattern, replace );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn function WebGLProgram( renderer, code, material, parameters ) {\r\n\t\r\n\t\t\tvar gl = renderer.context;\r\n\t\r\n\t\t\tvar extensions = material.extensions;\r\n\t\t\tvar defines = material.defines;\r\n\t\r\n\t\t\tvar vertexShader = material.__webglShader.vertexShader;\r\n\t\t\tvar fragmentShader = material.__webglShader.fragmentShader;\r\n\t\r\n\t\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\r\n\t\r\n\t\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\r\n\t\r\n\t\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\r\n\t\r\n\t\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\r\n\t\r\n\t\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\r\n\t\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\t\r\n\t\t\tif ( parameters.envMap ) {\r\n\t\r\n\t\t\t\tswitch ( material.envMap.mapping ) {\r\n\t\r\n\t\t\t\t\tcase THREE.CubeReflectionMapping:\r\n\t\t\t\t\tcase THREE.CubeRefractionMapping:\r\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.CubeUVReflectionMapping:\r\n\t\t\t\t\tcase THREE.CubeUVRefractionMapping:\r\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.EquirectangularReflectionMapping:\r\n\t\t\t\t\tcase THREE.EquirectangularRefractionMapping:\r\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.SphericalReflectionMapping:\r\n\t\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tswitch ( material.envMap.mapping ) {\r\n\t\r\n\t\t\t\t\tcase THREE.CubeRefractionMapping:\r\n\t\t\t\t\tcase THREE.EquirectangularRefractionMapping:\r\n\t\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tswitch ( material.combine ) {\r\n\t\r\n\t\t\t\t\tcase THREE.MultiplyOperation:\r\n\t\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.MixOperation:\r\n\t\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\tcase THREE.AddOperation:\r\n\t\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\r\n\t\r\n\t\t\t// console.log( 'building new program ' );\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\r\n\t\r\n\t\t\tvar customDefines = generateDefines( defines );\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tvar program = gl.createProgram();\r\n\t\r\n\t\t\tvar prefixVertex, prefixFragment;\r\n\t\r\n\t\t\tif ( material instanceof THREE.RawShaderMaterial ) {\r\n\t\r\n\t\t\t\tprefixVertex = '';\r\n\t\t\t\tprefixFragment = '';\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tprefixVertex = [\r\n\t\r\n\t\t\t\t\t'precision ' + parameters.precision + ' float;',\r\n\t\t\t\t\t'precision ' + parameters.precision + ' int;',\r\n\t\r\n\t\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\r\n\t\r\n\t\t\t\t\tcustomDefines,\r\n\t\r\n\t\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\r\n\t\r\n\t\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\t\r\n\t\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\r\n\t\r\n\t\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\r\n\t\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\t\r\n\t\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\t\r\n\t\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\r\n\t\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\r\n\t\r\n\t\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\r\n\t\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\r\n\t\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\t\r\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\t\t\t\t\tparameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',\r\n\t\r\n\t\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\r\n\t\r\n\t\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\t\r\n\t\r\n\t\t\t\t\t'uniform mat4 modelMatrix;',\r\n\t\t\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t\t'uniform mat3 normalMatrix;',\r\n\t\t\t\t\t'uniform vec3 cameraPosition;',\r\n\t\r\n\t\t\t\t\t'attribute vec3 position;',\r\n\t\t\t\t\t'attribute vec3 normal;',\r\n\t\t\t\t\t'attribute vec2 uv;',\r\n\t\r\n\t\t\t\t\t'#ifdef USE_COLOR',\r\n\t\r\n\t\t\t\t\t'\tattribute vec3 color;',\r\n\t\r\n\t\t\t\t\t'#endif',\r\n\t\r\n\t\t\t\t\t'#ifdef USE_MORPHTARGETS',\r\n\t\r\n\t\t\t\t\t'\tattribute vec3 morphTarget0;',\r\n\t\t\t\t\t'\tattribute vec3 morphTarget1;',\r\n\t\t\t\t\t'\tattribute vec3 morphTarget2;',\r\n\t\t\t\t\t'\tattribute vec3 morphTarget3;',\r\n\t\r\n\t\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\r\n\t\r\n\t\t\t\t\t'\t\tattribute vec3 morphNormal0;',\r\n\t\t\t\t\t'\t\tattribute vec3 morphNormal1;',\r\n\t\t\t\t\t'\t\tattribute vec3 morphNormal2;',\r\n\t\t\t\t\t'\t\tattribute vec3 morphNormal3;',\r\n\t\r\n\t\t\t\t\t'\t#else',\r\n\t\r\n\t\t\t\t\t'\t\tattribute vec3 morphTarget4;',\r\n\t\t\t\t\t'\t\tattribute vec3 morphTarget5;',\r\n\t\t\t\t\t'\t\tattribute vec3 morphTarget6;',\r\n\t\t\t\t\t'\t\tattribute vec3 morphTarget7;',\r\n\t\r\n\t\t\t\t\t'\t#endif',\r\n\t\r\n\t\t\t\t\t'#endif',\r\n\t\r\n\t\t\t\t\t'#ifdef USE_SKINNING',\r\n\t\r\n\t\t\t\t\t'\tattribute vec4 skinIndex;',\r\n\t\t\t\t\t'\tattribute vec4 skinWeight;',\r\n\t\r\n\t\t\t\t\t'#endif',\r\n\t\r\n\t\t\t\t\t'\\n'\r\n\t\r\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\t\r\n\t\t\t\tprefixFragment = [\r\n\t\r\n\t\t\t\t\tcustomExtensions,\r\n\t\r\n\t\t\t\t\t'precision ' + parameters.precision + ' float;',\r\n\t\t\t\t\t'precision ' + parameters.precision + ' int;',\r\n\t\r\n\t\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\r\n\t\r\n\t\t\t\t\tcustomDefines,\r\n\t\r\n\t\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\r\n\t\r\n\t\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\t\r\n\t\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\r\n\t\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\r\n\t\r\n\t\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\r\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\r\n\t\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\t\r\n\t\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\t\r\n\t\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\t\r\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\t\t\t\t\tparameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',\r\n\t\r\n\t\t\t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\r\n\t\r\n\t\t\t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\r\n\t\r\n\t\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\t\r\n\t\t\t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\r\n\t\r\n\t\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t\t'uniform vec3 cameraPosition;',\r\n\t\r\n\t\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\r\n\t\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? THREE.ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\r\n\t\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\r\n\t\r\n\t\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? THREE.ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\r\n\t\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\r\n\t\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\r\n\t\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\r\n\t\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\r\n\t\r\n\t\t\t\t\t'\\n'\r\n\t\r\n\t\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvertexShader = parseIncludes( vertexShader, parameters );\r\n\t\t\tvertexShader = replaceLightNums( vertexShader, parameters );\r\n\t\r\n\t\t\tfragmentShader = parseIncludes( fragmentShader, parameters );\r\n\t\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\r\n\t\r\n\t\t\tif ( material instanceof THREE.ShaderMaterial === false ) {\r\n\t\r\n\t\t\t\tvertexShader = unrollLoops( vertexShader );\r\n\t\t\t\tfragmentShader = unrollLoops( fragmentShader );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar vertexGlsl = prefixVertex + vertexShader;\r\n\t\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\r\n\t\r\n\t\t\t// console.log( '*VERTEX*', vertexGlsl );\r\n\t\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\r\n\t\r\n\t\t\tvar glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\r\n\t\t\tvar glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\r\n\t\r\n\t\t\tgl.attachShader( program, glVertexShader );\r\n\t\t\tgl.attachShader( program, glFragmentShader );\r\n\t\r\n\t\t\t// Force a particular attribute to index 0.\r\n\t\r\n\t\t\tif ( material.index0AttributeName !== undefined ) {\r\n\t\r\n\t\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\r\n\t\r\n\t\t\t} else if ( parameters.morphTargets === true ) {\r\n\t\r\n\t\t\t\t// programs with morphTargets displace position out of attribute 0\r\n\t\t\t\tgl.bindAttribLocation( program, 0, 'position' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tgl.linkProgram( program );\r\n\t\r\n\t\t\tvar programLog = gl.getProgramInfoLog( program );\r\n\t\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\r\n\t\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\r\n\t\r\n\t\t\tvar runnable = true;\r\n\t\t\tvar haveDiagnostics = true;\r\n\t\r\n\t\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\r\n\t\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\r\n\t\r\n\t\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\r\n\t\r\n\t\t\t\trunnable = false;\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\r\n\t\r\n\t\t\t} else if ( programLog !== '' ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\r\n\t\r\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\r\n\t\r\n\t\t\t\thaveDiagnostics = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( haveDiagnostics ) {\r\n\t\r\n\t\t\t\tthis.diagnostics = {\r\n\t\r\n\t\t\t\t\trunnable: runnable,\r\n\t\t\t\t\tmaterial: material,\r\n\t\r\n\t\t\t\t\tprogramLog: programLog,\r\n\t\r\n\t\t\t\t\tvertexShader: {\r\n\t\r\n\t\t\t\t\t\tlog: vertexLog,\r\n\t\t\t\t\t\tprefix: prefixVertex\r\n\t\r\n\t\t\t\t\t},\r\n\t\r\n\t\t\t\t\tfragmentShader: {\r\n\t\r\n\t\t\t\t\t\tlog: fragmentLog,\r\n\t\t\t\t\t\tprefix: prefixFragment\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// clean up\r\n\t\r\n\t\t\tgl.deleteShader( glVertexShader );\r\n\t\t\tgl.deleteShader( glFragmentShader );\r\n\t\r\n\t\t\t// set up caching for uniform locations\r\n\t\r\n\t\t\tvar cachedUniforms;\r\n\t\r\n\t\t\tthis.getUniforms = function() {\r\n\t\r\n\t\t\t\tif ( cachedUniforms === undefined ) {\r\n\t\r\n\t\t\t\t\tcachedUniforms = fetchUniformLocations( gl, program );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn cachedUniforms;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\t// set up caching for attribute locations\r\n\t\r\n\t\t\tvar cachedAttributes;\r\n\t\r\n\t\t\tthis.getAttributes = function() {\r\n\t\r\n\t\t\t\tif ( cachedAttributes === undefined ) {\r\n\t\r\n\t\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn cachedAttributes;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\t// free resource\r\n\t\r\n\t\t\tthis.destroy = function() {\r\n\t\r\n\t\t\t\tgl.deleteProgram( program );\r\n\t\t\t\tthis.program = undefined;\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\t// DEPRECATED\r\n\t\r\n\t\t\tObject.defineProperties( this, {\r\n\t\r\n\t\t\t\tuniforms: {\r\n\t\t\t\t\tget: function() {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\r\n\t\t\t\t\t\treturn this.getUniforms();\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\r\n\t\t\t\tattributes: {\r\n\t\t\t\t\tget: function() {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\r\n\t\t\t\t\t\treturn this.getAttributes();\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} );\r\n\t\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tthis.id = programIdCount ++;\r\n\t\t\tthis.code = code;\r\n\t\t\tthis.usedTimes = 1;\r\n\t\t\tthis.program = program;\r\n\t\t\tthis.vertexShader = glVertexShader;\r\n\t\t\tthis.fragmentShader = glFragmentShader;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t};\r\n\t\r\n\t} )();\r\n\t\r\n\t// File:src/renderers/webgl/WebGLPrograms.js\r\n\t\r\n\tTHREE.WebGLPrograms = function ( renderer, capabilities ) {\r\n\t\r\n\t\tvar programs = [];\r\n\t\r\n\t\tvar shaderIDs = {\r\n\t\t\tMeshDepthMaterial: 'depth',\r\n\t\t\tMeshNormalMaterial: 'normal',\r\n\t\t\tMeshBasicMaterial: 'basic',\r\n\t\t\tMeshLambertMaterial: 'lambert',\r\n\t\t\tMeshPhongMaterial: 'phong',\r\n\t\t\tMeshStandardMaterial: 'standard',\r\n\t\t\tLineBasicMaterial: 'basic',\r\n\t\t\tLineDashedMaterial: 'dashed',\r\n\t\t\tPointsMaterial: 'points'\r\n\t\t};\r\n\t\r\n\t\tvar parameterNames = [\r\n\t\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\r\n\t\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\r\n\t\t\t\"roughnessMap\", \"metalnessMap\",\r\n\t\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\r\n\t\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\r\n\t\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\r\n\t\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\r\n\t\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\r\n\t\t\t\"shadowMapEnabled\", \"pointLightShadows\", \"toneMapping\", 'physicallyCorrectLights',\r\n\t\t\t\"shadowMapType\",\r\n\t\t\t\"alphaTest\", \"doubleSided\", \"flipSided\"\r\n\t\t];\r\n\t\r\n\t\r\n\t\tfunction allocateBones ( object ) {\r\n\t\r\n\t\t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\r\n\t\r\n\t\t\t\treturn 1024;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// default for when object is not specified\r\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\r\n\t\t\t\t//\r\n\t\t\t\t//  - leave some extra space for other uniforms\r\n\t\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\r\n\t\t\t\t//    (up to 54 should be safe)\r\n\t\r\n\t\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\r\n\t\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\r\n\t\r\n\t\t\t\tvar maxBones = nVertexMatrices;\r\n\t\r\n\t\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\r\n\t\r\n\t\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\r\n\t\r\n\t\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\r\n\t\r\n\t\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn maxBones;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\r\n\t\r\n\t\t\tvar encoding;\r\n\t\r\n\t\t\tif ( ! map ) {\r\n\t\r\n\t\t\t\tencoding = THREE.LinearEncoding;\r\n\t\r\n\t\t\t} else if ( map instanceof THREE.Texture ) {\r\n\t\r\n\t\t\t\tencoding = map.encoding;\r\n\t\r\n\t\t\t} else if ( map instanceof THREE.WebGLRenderTarget ) {\r\n\t\r\n\t\t\t\tencoding = map.texture.encoding;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\r\n\t\t\tif ( encoding === THREE.LinearEncoding && gammaOverrideLinear ) {\r\n\t\r\n\t\t\t\tencoding = THREE.GammaEncoding;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn encoding;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.getParameters = function ( material, lights, fog, object ) {\r\n\t\r\n\t\t\tvar shaderID = shaderIDs[ material.type ];\r\n\t\r\n\t\t\t// heuristics to create shader parameters according to lights in the scene\r\n\t\t\t// (not to blow over maxLights budget)\r\n\t\r\n\t\t\tvar maxBones = allocateBones( object );\r\n\t\t\tvar precision = renderer.getPrecision();\r\n\t\r\n\t\t\tif ( material.precision !== null ) {\r\n\t\r\n\t\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\r\n\t\r\n\t\t\t\tif ( precision !== material.precision ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar parameters = {\r\n\t\r\n\t\t\t\tshaderID: shaderID,\r\n\t\r\n\t\t\t\tprecision: precision,\r\n\t\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\r\n\t\t\t\toutputEncoding: getTextureEncodingFromMap( renderer.getCurrentRenderTarget(), renderer.gammaOutput ),\r\n\t\t\t\tmap: !! material.map,\r\n\t\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\r\n\t\t\t\tenvMap: !! material.envMap,\r\n\t\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\r\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\r\n\t\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === THREE.CubeUVReflectionMapping ) || ( material.envMap.mapping === THREE.CubeUVRefractionMapping ) ),\r\n\t\t\t\tlightMap: !! material.lightMap,\r\n\t\t\t\taoMap: !! material.aoMap,\r\n\t\t\t\temissiveMap: !! material.emissiveMap,\r\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\r\n\t\t\t\tbumpMap: !! material.bumpMap,\r\n\t\t\t\tnormalMap: !! material.normalMap,\r\n\t\t\t\tdisplacementMap: !! material.displacementMap,\r\n\t\t\t\troughnessMap: !! material.roughnessMap,\r\n\t\t\t\tmetalnessMap: !! material.metalnessMap,\r\n\t\t\t\tspecularMap: !! material.specularMap,\r\n\t\t\t\talphaMap: !! material.alphaMap,\r\n\t\r\n\t\t\t\tcombine: material.combine,\r\n\t\r\n\t\t\t\tvertexColors: material.vertexColors,\r\n\t\r\n\t\t\t\tfog: fog,\r\n\t\t\t\tuseFog: material.fog,\r\n\t\t\t\tfogExp: fog instanceof THREE.FogExp2,\r\n\t\r\n\t\t\t\tflatShading: material.shading === THREE.FlatShading,\r\n\t\r\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\r\n\t\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\r\n\t\r\n\t\t\t\tskinning: material.skinning,\r\n\t\t\t\tmaxBones: maxBones,\r\n\t\t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\r\n\t\r\n\t\t\t\tmorphTargets: material.morphTargets,\r\n\t\t\t\tmorphNormals: material.morphNormals,\r\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\r\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\r\n\t\r\n\t\t\t\tnumDirLights: lights.directional.length,\r\n\t\t\t\tnumPointLights: lights.point.length,\r\n\t\t\t\tnumSpotLights: lights.spot.length,\r\n\t\t\t\tnumHemiLights: lights.hemi.length,\r\n\t\r\n\t\t\t\tpointLightShadows: lights.shadowsPointLight,\r\n\t\r\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\r\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\r\n\t\r\n\t\t\t\ttoneMapping: renderer.toneMapping,\r\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\r\n\t\r\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\r\n\t\r\n\t\t\t\talphaTest: material.alphaTest,\r\n\t\t\t\tdoubleSided: material.side === THREE.DoubleSide,\r\n\t\t\t\tflipSided: material.side === THREE.BackSide\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t\treturn parameters;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getProgramCode = function ( material, parameters ) {\r\n\t\r\n\t\t\tvar chunks = [];\r\n\t\r\n\t\t\tif ( parameters.shaderID ) {\r\n\t\r\n\t\t\t\tchunks.push( parameters.shaderID );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tchunks.push( material.fragmentShader );\r\n\t\t\t\tchunks.push( material.vertexShader );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( material.defines !== undefined ) {\r\n\t\r\n\t\t\t\tfor ( var name in material.defines ) {\r\n\t\r\n\t\t\t\t\tchunks.push( name );\r\n\t\t\t\t\tchunks.push( material.defines[ name ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\r\n\t\r\n\t\t\t\tvar parameterName = parameterNames[ i ];\r\n\t\t\t\tchunks.push( parameterName );\r\n\t\t\t\tchunks.push( parameters[ parameterName ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn chunks.join();\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.acquireProgram = function ( material, parameters, code ) {\r\n\t\r\n\t\t\tvar program;\r\n\t\r\n\t\t\t// Check if code has been already compiled\r\n\t\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\r\n\t\r\n\t\t\t\tvar programInfo = programs[ p ];\r\n\t\r\n\t\t\t\tif ( programInfo.code === code ) {\r\n\t\r\n\t\t\t\t\tprogram = programInfo;\r\n\t\t\t\t\t++ program.usedTimes;\r\n\t\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( program === undefined ) {\r\n\t\r\n\t\t\t\tprogram = new THREE.WebGLProgram( renderer, code, material, parameters );\r\n\t\t\t\tprograms.push( program );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn program;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.releaseProgram = function( program ) {\r\n\t\r\n\t\t\tif ( -- program.usedTimes === 0 ) {\r\n\t\r\n\t\t\t\t// Remove from unordered set\r\n\t\t\t\tvar i = programs.indexOf( program );\r\n\t\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\r\n\t\t\t\tprograms.pop();\r\n\t\r\n\t\t\t\t// Free WebGL resources\r\n\t\t\t\tprogram.destroy();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\r\n\t\tthis.programs = programs;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLProperties.js\r\n\t\r\n\t/**\r\n\t* @author fordacious / fordacious.github.io\r\n\t*/\r\n\t\r\n\tTHREE.WebGLProperties = function () {\r\n\t\r\n\t\tvar properties = {};\r\n\t\r\n\t\tthis.get = function ( object ) {\r\n\t\r\n\t\t\tvar uuid = object.uuid;\r\n\t\t\tvar map = properties[ uuid ];\r\n\t\r\n\t\t\tif ( map === undefined ) {\r\n\t\r\n\t\t\t\tmap = {};\r\n\t\t\t\tproperties[ uuid ] = map;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn map;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.delete = function ( object ) {\r\n\t\r\n\t\t\tdelete properties[ object.uuid ];\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.clear = function () {\r\n\t\r\n\t\t\tproperties = {};\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLShader.js\r\n\t\r\n\tTHREE.WebGLShader = ( function () {\r\n\t\r\n\t\tfunction addLineNumbers( string ) {\r\n\t\r\n\t\t\tvar lines = string.split( '\\n' );\r\n\t\r\n\t\t\tfor ( var i = 0; i < lines.length; i ++ ) {\r\n\t\r\n\t\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn lines.join( '\\n' );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn function WebGLShader( gl, type, string ) {\r\n\t\r\n\t\t\tvar shader = gl.createShader( type );\r\n\t\r\n\t\t\tgl.shaderSource( shader, string );\r\n\t\t\tgl.compileShader( shader );\r\n\t\r\n\t\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\r\n\t\r\n\t\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\r\n\t\r\n\t\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// --enable-privileged-webgl-extension\r\n\t\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\r\n\t\r\n\t\t\treturn shader;\r\n\t\r\n\t\t};\r\n\t\r\n\t} )();\r\n\t\r\n\t// File:src/renderers/webgl/WebGLShadowMap.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.WebGLShadowMap = function ( _renderer, _lights, _objects ) {\r\n\t\r\n\t\tvar _gl = _renderer.context,\r\n\t\t_state = _renderer.state,\r\n\t\t_frustum = new THREE.Frustum(),\r\n\t\t_projScreenMatrix = new THREE.Matrix4(),\r\n\t\r\n\t\t_shadowMapSize = new THREE.Vector2(),\r\n\t\r\n\t\t_lookTarget = new THREE.Vector3(),\r\n\t\t_lightPositionWorld = new THREE.Vector3(),\r\n\t\r\n\t\t_renderList = [],\r\n\t\r\n\t\t_MorphingFlag = 1,\r\n\t\t_SkinningFlag = 2,\r\n\t\r\n\t\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\r\n\t\r\n\t\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\r\n\t\t_distanceMaterials = new Array( _NumberOfMaterialVariants );\r\n\t\r\n\t\tvar cubeDirections = [\r\n\t\t\tnew THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),\r\n\t\t\tnew THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )\r\n\t\t];\r\n\t\r\n\t\tvar cubeUps = [\r\n\t\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),\r\n\t\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),\tnew THREE.Vector3( 0, 0, - 1 )\r\n\t\t];\r\n\t\r\n\t\tvar cube2DViewPorts = [\r\n\t\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),\r\n\t\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()\r\n\t\t];\r\n\t\r\n\t\t// init\r\n\t\r\n\t\tvar depthShader = THREE.ShaderLib[ \"depthRGBA\" ];\r\n\t\tvar depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );\r\n\t\r\n\t\tvar distanceShader = THREE.ShaderLib[ \"distanceRGBA\" ];\r\n\t\tvar distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );\r\n\t\r\n\t\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\r\n\t\r\n\t\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\r\n\t\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\r\n\t\r\n\t\t\tvar depthMaterial = new THREE.ShaderMaterial( {\r\n\t\t\t\tuniforms: depthUniforms,\r\n\t\t\t\tvertexShader: depthShader.vertexShader,\r\n\t\t\t\tfragmentShader: depthShader.fragmentShader,\r\n\t\t\t\tmorphTargets: useMorphing,\r\n\t\t\t\tskinning: useSkinning\r\n\t\t\t} );\r\n\t\r\n\t\t\t_depthMaterials[ i ] = depthMaterial;\r\n\t\r\n\t\t\tvar distanceMaterial = new THREE.ShaderMaterial( {\r\n\t\t\t\tdefines: {\r\n\t\t\t\t\t'USE_SHADOWMAP': ''\r\n\t\t\t\t},\r\n\t\t\t\tuniforms: distanceUniforms,\r\n\t\t\t\tvertexShader: distanceShader.vertexShader,\r\n\t\t\t\tfragmentShader: distanceShader.fragmentShader,\r\n\t\t\t\tmorphTargets: useMorphing,\r\n\t\t\t\tskinning: useSkinning\r\n\t\t\t} );\r\n\t\r\n\t\t\t_distanceMaterials[ i ] = distanceMaterial;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t//\r\n\t\r\n\t\tvar scope = this;\r\n\t\r\n\t\tthis.enabled = false;\r\n\t\r\n\t\tthis.autoUpdate = true;\r\n\t\tthis.needsUpdate = false;\r\n\t\r\n\t\tthis.type = THREE.PCFShadowMap;\r\n\t\tthis.cullFace = THREE.CullFaceFront;\r\n\t\r\n\t\tthis.render = function ( scene, camera ) {\r\n\t\r\n\t\t\tvar faceCount, isPointLight;\r\n\t\t\tvar shadows = _lights.shadows;\r\n\t\r\n\t\t\tif ( shadows.length === 0 ) return;\r\n\t\r\n\t\t\tif ( scope.enabled === false ) return;\r\n\t\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\r\n\t\r\n\t\t\t// Set GL state for depth map.\r\n\t\t\t_state.clearColor( 1, 1, 1, 1 );\r\n\t\t\t_state.disable( _gl.BLEND );\r\n\t\t\t_state.enable( _gl.CULL_FACE );\r\n\t\t\t_gl.frontFace( _gl.CCW );\r\n\t\t\t_gl.cullFace( scope.cullFace === THREE.CullFaceFront ? _gl.FRONT : _gl.BACK );\r\n\t\t\t_state.setDepthTest( true );\r\n\t\t\t_state.setScissorTest( false );\r\n\t\r\n\t\t\t// render depth map\r\n\t\r\n\t\t\tfor ( var i = 0, il = shadows.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvar light = shadows[ i ];\r\n\t\r\n\t\t\t\tvar shadow = light.shadow;\r\n\t\t\t\tvar shadowCamera = shadow.camera;\r\n\t\r\n\t\t\t\t_shadowMapSize.copy( shadow.mapSize );\r\n\t\r\n\t\t\t\tif ( light instanceof THREE.PointLight ) {\r\n\t\r\n\t\t\t\t\tfaceCount = 6;\r\n\t\t\t\t\tisPointLight = true;\r\n\t\r\n\t\t\t\t\tvar vpWidth = _shadowMapSize.x;\r\n\t\t\t\t\tvar vpHeight = _shadowMapSize.y;\r\n\t\r\n\t\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\r\n\t\t\t\t\t// following orientation:\r\n\t\t\t\t\t//\r\n\t\t\t\t\t//  xzXZ\r\n\t\t\t\t\t//   y Y\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// X - Positive x direction\r\n\t\t\t\t\t// x - Negative x direction\r\n\t\t\t\t\t// Y - Positive y direction\r\n\t\t\t\t\t// y - Negative y direction\r\n\t\t\t\t\t// Z - Positive z direction\r\n\t\t\t\t\t// z - Negative z direction\r\n\t\r\n\t\t\t\t\t// positive X\r\n\t\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t// negative X\r\n\t\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t// positive Z\r\n\t\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t// negative Z\r\n\t\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t\t// positive Y\r\n\t\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\r\n\t\t\t\t\t// negative Y\r\n\t\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\r\n\t\r\n\t\t\t\t\t_shadowMapSize.x *= 4.0;\r\n\t\t\t\t\t_shadowMapSize.y *= 2.0;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tfaceCount = 1;\r\n\t\t\t\t\tisPointLight = false;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( shadow.map === null ) {\r\n\t\r\n\t\t\t\t\tvar pars = { minFilter: THREE.NearestFilter, magFilter: THREE.NearestFilter, format: THREE.RGBAFormat };\r\n\t\r\n\t\t\t\t\tshadow.map = new THREE.WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\r\n\t\r\n\t\t\t\t\t//\r\n\t\r\n\t\t\t\t\tif ( light instanceof THREE.SpotLight ) {\r\n\t\r\n\t\t\t\t\t\tshadowCamera.aspect = _shadowMapSize.x / _shadowMapSize.y;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tshadowCamera.updateProjectionMatrix();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar shadowMap = shadow.map;\r\n\t\t\t\tvar shadowMatrix = shadow.matrix;\r\n\t\r\n\t\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tshadowCamera.position.copy( _lightPositionWorld );\r\n\t\r\n\t\t\t\t_renderer.setRenderTarget( shadowMap );\r\n\t\t\t\t_renderer.clear();\r\n\t\r\n\t\t\t\t// render shadow map for each cube face (if omni-directional) or\r\n\t\t\t\t// run a single pass if not\r\n\t\r\n\t\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\r\n\t\r\n\t\t\t\t\tif ( isPointLight ) {\r\n\t\r\n\t\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\r\n\t\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\r\n\t\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\r\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\r\n\t\r\n\t\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\r\n\t\t\t\t\t\t_state.viewport( vpDimensions );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tshadowCamera.updateMatrixWorld();\r\n\t\t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\r\n\t\r\n\t\t\t\t\t// compute shadow matrix\r\n\t\r\n\t\t\t\t\tshadowMatrix.set(\r\n\t\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\r\n\t\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\r\n\t\r\n\t\t\t\t\t// update camera matrices and frustum\r\n\t\r\n\t\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\r\n\t\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\t\r\n\t\t\t\t\t// set object matrices & frustum culling\r\n\t\r\n\t\t\t\t\t_renderList.length = 0;\r\n\t\r\n\t\t\t\t\tprojectObject( scene, camera, shadowCamera );\r\n\t\r\n\t\t\t\t\t// render shadow map\r\n\t\t\t\t\t// render regular objects\r\n\t\r\n\t\t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar object = _renderList[ j ];\r\n\t\t\t\t\t\tvar geometry = _objects.update( object );\r\n\t\t\t\t\t\tvar material = object.material;\r\n\t\r\n\t\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\r\n\t\r\n\t\t\t\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\t\t\t\tvar materials = material.materials;\r\n\t\r\n\t\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tvar group = groups[ k ];\r\n\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\r\n\t\r\n\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\r\n\t\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\r\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// Restore GL state.\r\n\t\t\tvar clearColor = _renderer.getClearColor(),\r\n\t\t\tclearAlpha = _renderer.getClearAlpha();\r\n\t\t\t_renderer.setClearColor( clearColor, clearAlpha );\r\n\t\r\n\t\t\t_state.enable( _gl.BLEND );\r\n\t\r\n\t\t\tif ( scope.cullFace === THREE.CullFaceFront ) {\r\n\t\r\n\t\t\t\t_gl.cullFace( _gl.BACK );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tscope.needsUpdate = false;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\r\n\t\r\n\t\t\tvar geometry = object.geometry;\r\n\t\r\n\t\t\tvar newMaterial = null;\r\n\t\r\n\t\t\tvar materialVariants = _depthMaterials;\r\n\t\t\tvar customMaterial = object.customDepthMaterial;\r\n\t\r\n\t\t\tif ( isPointLight ) {\r\n\t\r\n\t\t\t\tmaterialVariants = _distanceMaterials;\r\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( ! customMaterial ) {\r\n\t\r\n\t\t\t\tvar useMorphing = geometry.morphTargets !== undefined &&\r\n\t\t\t\t\t\tgeometry.morphTargets.length > 0 && material.morphTargets;\r\n\t\r\n\t\t\t\tvar useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;\r\n\t\r\n\t\t\t\tvar variantIndex = 0;\r\n\t\r\n\t\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\r\n\t\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\r\n\t\r\n\t\t\t\tnewMaterial = materialVariants[ variantIndex ];\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tnewMaterial = customMaterial;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tnewMaterial.visible = material.visible;\r\n\t\t\tnewMaterial.wireframe = material.wireframe;\r\n\t\t\tnewMaterial.wireframeLinewidth = material.wireframeLinewidth;\r\n\t\r\n\t\t\tif ( isPointLight && newMaterial.uniforms.lightPos !== undefined ) {\r\n\t\r\n\t\t\t\tnewMaterial.uniforms.lightPos.value.copy( lightPositionWorld );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn newMaterial;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction projectObject( object, camera, shadowCamera ) {\r\n\t\r\n\t\t\tif ( object.visible === false ) return;\r\n\t\r\n\t\t\tif ( object.layers.test( camera.layers ) && ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) ) {\r\n\t\r\n\t\t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\r\n\t\r\n\t\t\t\t\tvar material = object.material;\r\n\t\r\n\t\t\t\t\tif ( material.visible === true ) {\r\n\t\r\n\t\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\t\t\t\t_renderList.push( object );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar children = object.children;\r\n\t\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tprojectObject( children[ i ], camera, shadowCamera );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/WebGLState.js\r\n\t\r\n\t/**\r\n\t* @author mrdoob / http://mrdoob.com/\r\n\t*/\r\n\t\r\n\tTHREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {\r\n\t\r\n\t\tvar _this = this;\r\n\t\r\n\t\tvar color = new THREE.Vector4();\r\n\t\r\n\t\tvar newAttributes = new Uint8Array( 16 );\r\n\t\tvar enabledAttributes = new Uint8Array( 16 );\r\n\t\tvar attributeDivisors = new Uint8Array( 16 );\r\n\t\r\n\t\tvar capabilities = {};\r\n\t\r\n\t\tvar compressedTextureFormats = null;\r\n\t\r\n\t\tvar currentBlending = null;\r\n\t\tvar currentBlendEquation = null;\r\n\t\tvar currentBlendSrc = null;\r\n\t\tvar currentBlendDst = null;\r\n\t\tvar currentBlendEquationAlpha = null;\r\n\t\tvar currentBlendSrcAlpha = null;\r\n\t\tvar currentBlendDstAlpha = null;\r\n\t\tvar currentPremultipledAlpha = false;\r\n\t\r\n\t\tvar currentDepthFunc = null;\r\n\t\tvar currentDepthWrite = null;\r\n\t\r\n\t\tvar currentColorWrite = null;\r\n\t\r\n\t\tvar currentStencilWrite = null;\r\n\t\tvar currentStencilFunc = null;\r\n\t\tvar currentStencilRef = null;\r\n\t\tvar currentStencilMask = null;\r\n\t\tvar currentStencilFail  = null;\r\n\t\tvar currentStencilZFail = null;\r\n\t\tvar currentStencilZPass = null;\r\n\t\r\n\t\tvar currentFlipSided = null;\r\n\t\r\n\t\tvar currentLineWidth = null;\r\n\t\r\n\t\tvar currentPolygonOffsetFactor = null;\r\n\t\tvar currentPolygonOffsetUnits = null;\r\n\t\r\n\t\tvar currentScissorTest = null;\r\n\t\r\n\t\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\t\r\n\t\tvar currentTextureSlot = undefined;\r\n\t\tvar currentBoundTextures = {};\r\n\t\r\n\t\tvar currentClearColor = new THREE.Vector4();\r\n\t\tvar currentClearDepth = null;\r\n\t\tvar currentClearStencil = null;\r\n\t\r\n\t\tvar currentScissor = new THREE.Vector4();\r\n\t\tvar currentViewport = new THREE.Vector4();\r\n\t\r\n\t\tvar emptyTexture = gl.createTexture();\r\n\t\tgl.bindTexture( gl.TEXTURE_2D, emptyTexture );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR );\r\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, new Uint8Array( 3 ) );\r\n\t\r\n\t\tthis.init = function () {\r\n\t\r\n\t\t\tthis.clearColor( 0, 0, 0, 1 );\r\n\t\t\tthis.clearDepth( 1 );\r\n\t\t\tthis.clearStencil( 0 );\r\n\t\r\n\t\t\tthis.enable( gl.DEPTH_TEST );\r\n\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\t\r\n\t\t\tgl.frontFace( gl.CCW );\r\n\t\t\tgl.cullFace( gl.BACK );\r\n\t\t\tthis.enable( gl.CULL_FACE );\r\n\t\r\n\t\t\tthis.enable( gl.BLEND );\r\n\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.initAttributes = function () {\r\n\t\r\n\t\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tnewAttributes[ i ] = 0;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.enableAttribute = function ( attribute ) {\r\n\t\r\n\t\t\tnewAttributes[ attribute ] = 1;\r\n\t\r\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\t\r\n\t\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\t\tenabledAttributes[ attribute ] = 1;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\r\n\t\r\n\t\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\r\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\r\n\t\t\t\tattributeDivisors[ attribute ] = 0;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {\r\n\t\r\n\t\t\tnewAttributes[ attribute ] = 1;\r\n\t\r\n\t\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\t\r\n\t\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\t\tenabledAttributes[ attribute ] = 1;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\r\n\t\r\n\t\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\r\n\t\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.disableUnusedAttributes = function () {\r\n\t\r\n\t\t\tfor ( var i = 0, l = enabledAttributes.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\r\n\t\r\n\t\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\t\tenabledAttributes[ i ] = 0;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.enable = function ( id ) {\r\n\t\r\n\t\t\tif ( capabilities[ id ] !== true ) {\r\n\t\r\n\t\t\t\tgl.enable( id );\r\n\t\t\t\tcapabilities[ id ] = true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.disable = function ( id ) {\r\n\t\r\n\t\t\tif ( capabilities[ id ] !== false ) {\r\n\t\r\n\t\t\t\tgl.disable( id );\r\n\t\t\t\tcapabilities[ id ] = false;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getCompressedTextureFormats = function () {\r\n\t\r\n\t\t\tif ( compressedTextureFormats === null ) {\r\n\t\r\n\t\t\t\tcompressedTextureFormats = [];\r\n\t\r\n\t\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\r\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\r\n\t\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\r\n\t\r\n\t\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\r\n\t\r\n\t\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\r\n\t\r\n\t\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn compressedTextureFormats;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\r\n\t\r\n\t\t\tif ( blending === THREE.NoBlending ) {\r\n\t\r\n\t\t\t\tthis.disable( gl.BLEND );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.enable( gl.BLEND );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\r\n\t\r\n\t\t\t\tif ( blending === THREE.AdditiveBlending ) {\r\n\t\r\n\t\t\t\t\tif ( premultipliedAlpha ) {\r\n\t\r\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\r\n\t\r\n\t\t\t\t\tif ( premultipliedAlpha ) {\r\n\t\r\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\r\n\t\r\n\t\t\t\t\tif ( premultipliedAlpha ) {\r\n\t\r\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.SRC_COLOR, gl.SRC_ALPHA );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tif ( premultipliedAlpha ) {\r\n\t\r\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tcurrentBlending = blending;\r\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( blending === THREE.CustomBlending ) {\r\n\t\r\n\t\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\r\n\t\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\r\n\t\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\r\n\t\r\n\t\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\r\n\t\r\n\t\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\r\n\t\r\n\t\t\t\t\tcurrentBlendEquation = blendEquation;\r\n\t\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\r\n\t\r\n\t\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\r\n\t\r\n\t\t\t\t\tcurrentBlendSrc = blendSrc;\r\n\t\t\t\t\tcurrentBlendDst = blendDst;\r\n\t\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\r\n\t\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tcurrentBlendEquation = null;\r\n\t\t\t\tcurrentBlendSrc = null;\r\n\t\t\t\tcurrentBlendDst = null;\r\n\t\t\t\tcurrentBlendEquationAlpha = null;\r\n\t\t\t\tcurrentBlendSrcAlpha = null;\r\n\t\t\t\tcurrentBlendDstAlpha = null;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setDepthFunc = function ( depthFunc ) {\r\n\t\r\n\t\t\tif ( currentDepthFunc !== depthFunc ) {\r\n\t\r\n\t\t\t\tif ( depthFunc ) {\r\n\t\r\n\t\t\t\t\tswitch ( depthFunc ) {\r\n\t\r\n\t\t\t\t\t\tcase THREE.NeverDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.AlwaysDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.LessDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.LessEqualDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.EqualDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.GreaterEqualDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.GreaterDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tcase THREE.NotEqualDepth:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\r\n\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\tdefault:\r\n\t\r\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tcurrentDepthFunc = depthFunc;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setDepthTest = function ( depthTest ) {\r\n\t\r\n\t\t\tif ( depthTest ) {\r\n\t\r\n\t\t\t\tthis.enable( gl.DEPTH_TEST );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.disable( gl.DEPTH_TEST );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setDepthWrite = function ( depthWrite ) {\r\n\t\r\n\t\t\t// TODO: Rename to setDepthMask\r\n\t\r\n\t\t\tif ( currentDepthWrite !== depthWrite ) {\r\n\t\r\n\t\t\t\tgl.depthMask( depthWrite );\r\n\t\t\t\tcurrentDepthWrite = depthWrite;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setColorWrite = function ( colorWrite ) {\r\n\t\r\n\t\t\t// TODO: Rename to setColorMask\r\n\t\r\n\t\t\tif ( currentColorWrite !== colorWrite ) {\r\n\t\r\n\t\t\t\tgl.colorMask( colorWrite, colorWrite, colorWrite, colorWrite );\r\n\t\t\t\tcurrentColorWrite = colorWrite;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setStencilFunc = function ( stencilFunc, stencilRef, stencilMask ) {\r\n\t\r\n\t\t\tif ( currentStencilFunc !== stencilFunc ||\r\n\t\t\t\t\t currentStencilRef \t!== stencilRef \t||\r\n\t\t\t\t\t currentStencilMask !== stencilMask ) {\r\n\t\r\n\t\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\r\n\t\r\n\t\t\t\tcurrentStencilFunc = stencilFunc;\r\n\t\t\t\tcurrentStencilRef  = stencilRef;\r\n\t\t\t\tcurrentStencilMask = stencilMask;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setStencilOp = function ( stencilFail, stencilZFail, stencilZPass ) {\r\n\t\r\n\t\t\tif ( currentStencilFail\t !== stencilFail \t||\r\n\t\t\t\t\t currentStencilZFail !== stencilZFail ||\r\n\t\t\t\t\t currentStencilZPass !== stencilZPass ) {\r\n\t\r\n\t\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\r\n\t\r\n\t\t\t\tcurrentStencilFail  = stencilFail;\r\n\t\t\t\tcurrentStencilZFail = stencilZFail;\r\n\t\t\t\tcurrentStencilZPass = stencilZPass;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setStencilTest = function ( stencilTest ) {\r\n\t\r\n\t\t\tif ( stencilTest ) {\r\n\t\r\n\t\t\t\tthis.enable( gl.STENCIL_TEST );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.disable( gl.STENCIL_TEST );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setStencilWrite = function ( stencilWrite ) {\r\n\t\r\n\t\t\t// TODO: Rename to setStencilMask\r\n\t\r\n\t\t\tif ( currentStencilWrite !== stencilWrite ) {\r\n\t\r\n\t\t\t\tgl.stencilMask( stencilWrite );\r\n\t\t\t\tcurrentStencilWrite = stencilWrite;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setFlipSided = function ( flipSided ) {\r\n\t\r\n\t\t\tif ( currentFlipSided !== flipSided ) {\r\n\t\r\n\t\t\t\tif ( flipSided ) {\r\n\t\r\n\t\t\t\t\tgl.frontFace( gl.CW );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tgl.frontFace( gl.CCW );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tcurrentFlipSided = flipSided;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setLineWidth = function ( width ) {\r\n\t\r\n\t\t\tif ( width !== currentLineWidth ) {\r\n\t\r\n\t\t\t\tgl.lineWidth( width );\r\n\t\r\n\t\t\t\tcurrentLineWidth = width;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setPolygonOffset = function ( polygonOffset, factor, units ) {\r\n\t\r\n\t\t\tif ( polygonOffset ) {\r\n\t\r\n\t\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( polygonOffset && ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) ) {\r\n\t\r\n\t\t\t\tgl.polygonOffset( factor, units );\r\n\t\r\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\r\n\t\t\t\tcurrentPolygonOffsetUnits = units;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.getScissorTest = function () {\r\n\t\r\n\t\t\treturn currentScissorTest;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.setScissorTest = function ( scissorTest ) {\r\n\t\r\n\t\t\tcurrentScissorTest = scissorTest;\r\n\t\r\n\t\t\tif ( scissorTest ) {\r\n\t\r\n\t\t\t\tthis.enable( gl.SCISSOR_TEST );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.disable( gl.SCISSOR_TEST );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// texture\r\n\t\r\n\t\tthis.activeTexture = function ( webglSlot ) {\r\n\t\r\n\t\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\r\n\t\r\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\r\n\t\r\n\t\t\t\tgl.activeTexture( webglSlot );\r\n\t\t\t\tcurrentTextureSlot = webglSlot;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.bindTexture = function ( webglType, webglTexture ) {\r\n\t\r\n\t\t\tif ( currentTextureSlot === undefined ) {\r\n\t\r\n\t\t\t\t_this.activeTexture();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\t\r\n\t\t\tif ( boundTexture === undefined ) {\r\n\t\r\n\t\t\t\tboundTexture = { type: undefined, texture: undefined };\r\n\t\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\r\n\t\r\n\t\t\t\tgl.bindTexture( webglType, webglTexture || emptyTexture );\r\n\t\r\n\t\t\t\tboundTexture.type = webglType;\r\n\t\t\t\tboundTexture.texture = webglTexture;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.compressedTexImage2D = function () {\r\n\t\r\n\t\t\ttry {\r\n\t\r\n\t\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\r\n\t\r\n\t\t\t} catch ( error ) {\r\n\t\r\n\t\t\t\tconsole.error( error );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.texImage2D = function () {\r\n\t\r\n\t\t\ttry {\r\n\t\r\n\t\t\t\tgl.texImage2D.apply( gl, arguments );\r\n\t\r\n\t\t\t} catch ( error ) {\r\n\t\r\n\t\t\t\tconsole.error( error );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// clear values\r\n\t\r\n\t\tthis.clearColor = function ( r, g, b, a ) {\r\n\t\r\n\t\t\tcolor.set( r, g, b, a );\r\n\t\r\n\t\t\tif ( currentClearColor.equals( color ) === false ) {\r\n\t\r\n\t\t\t\tgl.clearColor( r, g, b, a );\r\n\t\t\t\tcurrentClearColor.copy( color );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.clearDepth = function ( depth ) {\r\n\t\r\n\t\t\tif ( currentClearDepth !== depth ) {\r\n\t\r\n\t\t\t\tgl.clearDepth( depth );\r\n\t\t\t\tcurrentClearDepth = depth;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.clearStencil = function ( stencil ) {\r\n\t\r\n\t\t\tif ( currentClearStencil !== stencil ) {\r\n\t\r\n\t\t\t\tgl.clearStencil( stencil );\r\n\t\t\t\tcurrentClearStencil = stencil;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\t//\r\n\t\r\n\t\tthis.scissor = function ( scissor ) {\r\n\t\r\n\t\t\tif ( currentScissor.equals( scissor ) === false ) {\r\n\t\r\n\t\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\r\n\t\t\t\tcurrentScissor.copy( scissor );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.viewport = function ( viewport ) {\r\n\t\r\n\t\t\tif ( currentViewport.equals( viewport ) === false ) {\r\n\t\r\n\t\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\r\n\t\t\t\tcurrentViewport.copy( viewport );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t\t//\r\n\t\r\n\t\tthis.reset = function () {\r\n\t\r\n\t\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\r\n\t\r\n\t\t\t\tif ( enabledAttributes[ i ] === 1 ) {\r\n\t\r\n\t\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\t\tenabledAttributes[ i ] = 0;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tcapabilities = {};\r\n\t\r\n\t\t\tcompressedTextureFormats = null;\r\n\t\r\n\t\t\tcurrentTextureSlot = undefined;\r\n\t\t\tcurrentBoundTextures = {};\r\n\t\r\n\t\t\tcurrentBlending = null;\r\n\t\r\n\t\t\tcurrentColorWrite = null;\r\n\t\t\tcurrentDepthWrite = null;\r\n\t\t\tcurrentStencilWrite = null;\r\n\t\r\n\t\t\tcurrentFlipSided = null;\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/plugins/LensFlarePlugin.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.LensFlarePlugin = function ( renderer, flares ) {\r\n\t\r\n\t\tvar gl = renderer.context;\r\n\t\tvar state = renderer.state;\r\n\t\r\n\t\tvar vertexBuffer, elementBuffer;\r\n\t\tvar program, attributes, uniforms;\r\n\t\tvar hasVertexTexture;\r\n\t\r\n\t\tvar tempTexture, occlusionTexture;\r\n\t\r\n\t\tfunction init() {\r\n\t\r\n\t\t\tvar vertices = new Float32Array( [\r\n\t\t\t\t- 1, - 1,  0, 0,\r\n\t\t\t\t 1, - 1,  1, 0,\r\n\t\t\t\t 1,  1,  1, 1,\r\n\t\t\t\t- 1,  1,  0, 1\r\n\t\t\t] );\r\n\t\r\n\t\t\tvar faces = new Uint16Array( [\r\n\t\t\t\t0, 1, 2,\r\n\t\t\t\t0, 2, 3\r\n\t\t\t] );\r\n\t\r\n\t\t\t// buffers\r\n\t\r\n\t\t\tvertexBuffer     = gl.createBuffer();\r\n\t\t\telementBuffer    = gl.createBuffer();\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\r\n\t\r\n\t\t\t// textures\r\n\t\r\n\t\t\ttempTexture      = gl.createTexture();\r\n\t\t\tocclusionTexture = gl.createTexture();\r\n\t\r\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\t\r\n\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\r\n\t\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\t\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\t\r\n\t\t\thasVertexTexture = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) > 0;\r\n\t\r\n\t\t\tvar shader;\r\n\t\r\n\t\t\tif ( hasVertexTexture ) {\r\n\t\r\n\t\t\t\tshader = {\r\n\t\r\n\t\t\t\t\tvertexShader: [\r\n\t\r\n\t\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\t\r\n\t\t\t\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\t\t\t\"uniform float rotation;\",\r\n\t\r\n\t\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\t\r\n\t\t\t\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\t\t\t\"attribute vec2 uv;\",\r\n\t\r\n\t\t\t\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\t\t\t\"varying float vVisibility;\",\r\n\t\r\n\t\t\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\t\t\t\"vUV = uv;\",\r\n\t\r\n\t\t\t\t\t\t\t\"vec2 pos = position;\",\r\n\t\r\n\t\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\r\n\t\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\r\n\t\t\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\r\n\t\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\t\r\n\t\t\t\t\t\t\t\"}\",\r\n\t\r\n\t\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\t\r\n\t\t\t\t\t\t\"}\"\r\n\t\r\n\t\t\t\t\t].join( \"\\n\" ),\r\n\t\r\n\t\t\t\t\tfragmentShader: [\r\n\t\r\n\t\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\t\r\n\t\t\t\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\t\t\t\"uniform float opacity;\",\r\n\t\t\t\t\t\t\"uniform vec3 color;\",\r\n\t\r\n\t\t\t\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\t\t\t\"varying float vVisibility;\",\r\n\t\r\n\t\t\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\t\t\t// pink square\r\n\t\r\n\t\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\r\n\t\r\n\t\t\t\t\t\t\t// restore\r\n\t\r\n\t\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\t\r\n\t\t\t\t\t\t\t// flare\r\n\t\r\n\t\t\t\t\t\t\t\"} else {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\r\n\t\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\t\r\n\t\t\t\t\t\t\t\"}\",\r\n\t\r\n\t\t\t\t\t\t\"}\"\r\n\t\r\n\t\t\t\t\t].join( \"\\n\" )\r\n\t\r\n\t\t\t\t};\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tshader = {\r\n\t\r\n\t\t\t\t\tvertexShader: [\r\n\t\r\n\t\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\t\r\n\t\t\t\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\t\t\t\"uniform float rotation;\",\r\n\t\r\n\t\t\t\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\t\t\t\"attribute vec2 uv;\",\r\n\t\r\n\t\t\t\t\t\t\"varying vec2 vUV;\",\r\n\t\r\n\t\t\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\t\t\t\"vUV = uv;\",\r\n\t\r\n\t\t\t\t\t\t\t\"vec2 pos = position;\",\r\n\t\r\n\t\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\t\r\n\t\t\t\t\t\t\t\"}\",\r\n\t\r\n\t\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\t\r\n\t\t\t\t\t\t\"}\"\r\n\t\r\n\t\t\t\t\t].join( \"\\n\" ),\r\n\t\r\n\t\t\t\t\tfragmentShader: [\r\n\t\r\n\t\t\t\t\t\t\"precision mediump float;\",\r\n\t\r\n\t\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\t\r\n\t\t\t\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\t\t\t\t\t\t\"uniform float opacity;\",\r\n\t\t\t\t\t\t\"uniform vec3 color;\",\r\n\t\r\n\t\t\t\t\t\t\"varying vec2 vUV;\",\r\n\t\r\n\t\t\t\t\t\t\"void main() {\",\r\n\t\r\n\t\t\t\t\t\t\t// pink square\r\n\t\r\n\t\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\",\r\n\t\r\n\t\t\t\t\t\t\t// restore\r\n\t\r\n\t\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\t\r\n\t\t\t\t\t\t\t// flare\r\n\t\r\n\t\t\t\t\t\t\t\"} else {\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\",\r\n\t\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\",\r\n\t\t\t\t\t\t\t\t\"visibility = ( 1.0 - visibility / 4.0 );\",\r\n\t\r\n\t\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\t\t\t\"texture.a *= opacity * visibility;\",\r\n\t\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\t\r\n\t\t\t\t\t\t\t\"}\",\r\n\t\r\n\t\t\t\t\t\t\"}\"\r\n\t\r\n\t\t\t\t\t].join( \"\\n\" )\r\n\t\r\n\t\t\t\t};\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tprogram = createProgram( shader );\r\n\t\r\n\t\t\tattributes = {\r\n\t\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\r\n\t\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\r\n\t\t\t};\r\n\t\r\n\t\t\tuniforms = {\r\n\t\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\r\n\t\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\r\n\t\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\r\n\t\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\r\n\t\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\r\n\t\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\r\n\t\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\r\n\t\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\r\n\t\t\t};\r\n\t\r\n\t\t}\r\n\t\r\n\t\t/*\r\n\t\t * Render lens flares\r\n\t\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\r\n\t\t *         reads these back and calculates occlusion.\r\n\t\t */\r\n\t\r\n\t\tthis.render = function ( scene, camera, viewport ) {\r\n\t\r\n\t\t\tif ( flares.length === 0 ) return;\r\n\t\r\n\t\t\tvar tempPosition = new THREE.Vector3();\r\n\t\r\n\t\t\tvar invAspect = viewport.w / viewport.z,\r\n\t\t\t\thalfViewportWidth = viewport.z * 0.5,\r\n\t\t\t\thalfViewportHeight = viewport.w * 0.5;\r\n\t\r\n\t\t\tvar size = 16 / viewport.w,\r\n\t\t\t\tscale = new THREE.Vector2( size * invAspect, size );\r\n\t\r\n\t\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\r\n\t\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\r\n\t\r\n\t\t\tif ( program === undefined ) {\r\n\t\r\n\t\t\t\tinit();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tgl.useProgram( program );\r\n\t\r\n\t\t\tstate.initAttributes();\r\n\t\t\tstate.enableAttribute( attributes.vertex );\r\n\t\t\tstate.enableAttribute( attributes.uv );\r\n\t\t\tstate.disableUnusedAttributes();\r\n\t\r\n\t\t\t// loop through all lens flares to update their occlusion and positions\r\n\t\t\t// setup gl and common used attribs/uniforms\r\n\t\r\n\t\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\r\n\t\t\tgl.uniform1i( uniforms.map, 1 );\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\r\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\r\n\t\t\tstate.disable( gl.CULL_FACE );\r\n\t\t\tstate.setDepthWrite( false );\r\n\t\r\n\t\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tsize = 16 / viewport.w;\r\n\t\t\t\tscale.set( size * invAspect, size );\r\n\t\r\n\t\t\t\t// calc object screen position\r\n\t\r\n\t\t\t\tvar flare = flares[ i ];\r\n\t\r\n\t\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\r\n\t\r\n\t\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\r\n\t\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\r\n\t\r\n\t\t\t\t// setup arrays for gl programs\r\n\t\r\n\t\t\t\tscreenPosition.copy( tempPosition );\r\n\t\r\n\t\t\t\tscreenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;\r\n\t\t\t\tscreenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;\r\n\t\r\n\t\t\t\t// screen cull\r\n\t\r\n\t\t\t\tif ( hasVertexTexture || (\r\n\t\t\t\t\tscreenPositionPixels.x > 0 &&\r\n\t\t\t\t\tscreenPositionPixels.x < viewport.z &&\r\n\t\t\t\t\tscreenPositionPixels.y > 0 &&\r\n\t\t\t\t\tscreenPositionPixels.y < viewport.w ) ) {\r\n\t\r\n\t\t\t\t\t// save current RGB to temp texture\r\n\t\r\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\r\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\r\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, viewport.x + screenPositionPixels.x - 8, viewport.y + screenPositionPixels.y - 8, 16, 16, 0 );\r\n\t\r\n\t\r\n\t\t\t\t\t// render pink quad\r\n\t\r\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\r\n\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\t\r\n\t\t\t\t\tstate.disable( gl.BLEND );\r\n\t\t\t\t\tstate.enable( gl.DEPTH_TEST );\r\n\t\r\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\t\r\n\t\r\n\t\t\t\t\t// copy result to occlusionMap\r\n\t\r\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\r\n\t\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, viewport.x + screenPositionPixels.x - 8, viewport.y + screenPositionPixels.y - 8, 16, 16, 0 );\r\n\t\r\n\t\r\n\t\t\t\t\t// restore graphics\r\n\t\r\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\r\n\t\t\t\t\tstate.disable( gl.DEPTH_TEST );\r\n\t\r\n\t\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\r\n\t\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\t\r\n\t\r\n\t\t\t\t\t// update object positions\r\n\t\r\n\t\t\t\t\tflare.positionScreen.copy( screenPosition );\r\n\t\r\n\t\t\t\t\tif ( flare.customUpdateCallback ) {\r\n\t\r\n\t\t\t\t\t\tflare.customUpdateCallback( flare );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tflare.updateLensFlares();\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// render flares\r\n\t\r\n\t\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\r\n\t\t\t\t\tstate.enable( gl.BLEND );\r\n\t\r\n\t\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\r\n\t\r\n\t\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\r\n\t\r\n\t\t\t\t\t\t\tscreenPosition.x = sprite.x;\r\n\t\t\t\t\t\t\tscreenPosition.y = sprite.y;\r\n\t\t\t\t\t\t\tscreenPosition.z = sprite.z;\r\n\t\r\n\t\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\r\n\t\r\n\t\t\t\t\t\t\tscale.x = size * invAspect;\r\n\t\t\t\t\t\t\tscale.y = size;\r\n\t\r\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\t\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\r\n\t\r\n\t\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\r\n\t\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\r\n\t\r\n\t\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\r\n\t\t\t\t\t\t\trenderer.setTexture( sprite.texture, 1 );\r\n\t\r\n\t\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// restore gl\r\n\t\r\n\t\t\tstate.enable( gl.CULL_FACE );\r\n\t\t\tstate.enable( gl.DEPTH_TEST );\r\n\t\t\tstate.setDepthWrite( true );\r\n\t\r\n\t\t\trenderer.resetGLState();\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction createProgram ( shader ) {\r\n\t\r\n\t\t\tvar program = gl.createProgram();\r\n\t\r\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\r\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\r\n\t\r\n\t\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\r\n\t\r\n\t\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\r\n\t\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\r\n\t\r\n\t\t\tgl.compileShader( fragmentShader );\r\n\t\t\tgl.compileShader( vertexShader );\r\n\t\r\n\t\t\tgl.attachShader( program, fragmentShader );\r\n\t\t\tgl.attachShader( program, vertexShader );\r\n\t\r\n\t\t\tgl.linkProgram( program );\r\n\t\r\n\t\t\treturn program;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/renderers/webgl/plugins/SpritePlugin.js\r\n\t\r\n\t/**\r\n\t * @author mikael emtinger / http://gomo.se/\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.SpritePlugin = function ( renderer, sprites ) {\r\n\t\r\n\t\tvar gl = renderer.context;\r\n\t\tvar state = renderer.state;\r\n\t\r\n\t\tvar vertexBuffer, elementBuffer;\r\n\t\tvar program, attributes, uniforms;\r\n\t\r\n\t\tvar texture;\r\n\t\r\n\t\t// decompose matrixWorld\r\n\t\r\n\t\tvar spritePosition = new THREE.Vector3();\r\n\t\tvar spriteRotation = new THREE.Quaternion();\r\n\t\tvar spriteScale = new THREE.Vector3();\r\n\t\r\n\t\tfunction init() {\r\n\t\r\n\t\t\tvar vertices = new Float32Array( [\r\n\t\t\t\t- 0.5, - 0.5,  0, 0,\r\n\t\t\t\t  0.5, - 0.5,  1, 0,\r\n\t\t\t\t  0.5,   0.5,  1, 1,\r\n\t\t\t\t- 0.5,   0.5,  0, 1\r\n\t\t\t] );\r\n\t\r\n\t\t\tvar faces = new Uint16Array( [\r\n\t\t\t\t0, 1, 2,\r\n\t\t\t\t0, 2, 3\r\n\t\t\t] );\r\n\t\r\n\t\t\tvertexBuffer  = gl.createBuffer();\r\n\t\t\telementBuffer = gl.createBuffer();\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\r\n\t\r\n\t\t\tprogram = createProgram();\r\n\t\r\n\t\t\tattributes = {\r\n\t\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\r\n\t\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\r\n\t\t\t};\r\n\t\r\n\t\t\tuniforms = {\r\n\t\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\r\n\t\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\r\n\t\r\n\t\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\r\n\t\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\r\n\t\r\n\t\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\r\n\t\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\r\n\t\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\r\n\t\r\n\t\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\r\n\t\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\r\n\t\r\n\t\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\r\n\t\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\r\n\t\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\r\n\t\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\r\n\t\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\r\n\t\r\n\t\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\r\n\t\t\t};\r\n\t\r\n\t\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\tcanvas.width = 8;\r\n\t\t\tcanvas.height = 8;\r\n\t\r\n\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\tcontext.fillStyle = 'white';\r\n\t\t\tcontext.fillRect( 0, 0, 8, 8 );\r\n\t\r\n\t\t\ttexture = new THREE.Texture( canvas );\r\n\t\t\ttexture.needsUpdate = true;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.render = function ( scene, camera ) {\r\n\t\r\n\t\t\tif ( sprites.length === 0 ) return;\r\n\t\r\n\t\t\t// setup gl\r\n\t\r\n\t\t\tif ( program === undefined ) {\r\n\t\r\n\t\t\t\tinit();\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tgl.useProgram( program );\r\n\t\r\n\t\t\tstate.initAttributes();\r\n\t\t\tstate.enableAttribute( attributes.position );\r\n\t\t\tstate.enableAttribute( attributes.uv );\r\n\t\t\tstate.disableUnusedAttributes();\r\n\t\r\n\t\t\tstate.disable( gl.CULL_FACE );\r\n\t\t\tstate.enable( gl.BLEND );\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\r\n\t\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\r\n\t\r\n\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\r\n\t\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\t\r\n\t\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\t\tgl.uniform1i( uniforms.map, 0 );\r\n\t\r\n\t\t\tvar oldFogType = 0;\r\n\t\t\tvar sceneFogType = 0;\r\n\t\t\tvar fog = scene.fog;\r\n\t\r\n\t\t\tif ( fog ) {\r\n\t\r\n\t\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\r\n\t\r\n\t\t\t\tif ( fog instanceof THREE.Fog ) {\r\n\t\r\n\t\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\r\n\t\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\r\n\t\r\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\r\n\t\t\t\t\toldFogType = 1;\r\n\t\t\t\t\tsceneFogType = 1;\r\n\t\r\n\t\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\t\r\n\t\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\r\n\t\r\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\r\n\t\t\t\t\toldFogType = 2;\r\n\t\t\t\t\tsceneFogType = 2;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tgl.uniform1i( uniforms.fogType, 0 );\r\n\t\t\t\toldFogType = 0;\r\n\t\t\t\tsceneFogType = 0;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\r\n\t\t\t// update positions and sort\r\n\t\r\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar sprite = sprites[ i ];\r\n\t\r\n\t\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\r\n\t\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tsprites.sort( painterSortStable );\r\n\t\r\n\t\t\t// render all sprites\r\n\t\r\n\t\t\tvar scale = [];\r\n\t\r\n\t\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar sprite = sprites[ i ];\r\n\t\t\t\tvar material = sprite.material;\r\n\t\r\n\t\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\r\n\t\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\r\n\t\r\n\t\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\r\n\t\r\n\t\t\t\tscale[ 0 ] = spriteScale.x;\r\n\t\t\t\tscale[ 1 ] = spriteScale.y;\r\n\t\r\n\t\t\t\tvar fogType = 0;\r\n\t\r\n\t\t\t\tif ( scene.fog && material.fog ) {\r\n\t\r\n\t\t\t\t\tfogType = sceneFogType;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( oldFogType !== fogType ) {\r\n\t\r\n\t\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\r\n\t\t\t\t\toldFogType = fogType;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( material.map !== null ) {\r\n\t\r\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\r\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\r\n\t\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\r\n\t\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\r\n\t\r\n\t\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\r\n\t\t\t\tgl.uniform2fv( uniforms.scale, scale );\r\n\t\r\n\t\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\t\t\t\tstate.setDepthTest( material.depthTest );\r\n\t\t\t\tstate.setDepthWrite( material.depthWrite );\r\n\t\r\n\t\t\t\tif ( material.map && material.map.image && material.map.image.width ) {\r\n\t\r\n\t\t\t\t\trenderer.setTexture( material.map, 0 );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\trenderer.setTexture( texture, 0 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// restore gl\r\n\t\r\n\t\t\tstate.enable( gl.CULL_FACE );\r\n\t\r\n\t\t\trenderer.resetGLState();\r\n\t\r\n\t\t};\r\n\t\r\n\t\tfunction createProgram () {\r\n\t\r\n\t\t\tvar program = gl.createProgram();\r\n\t\r\n\t\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\r\n\t\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\r\n\t\r\n\t\t\tgl.shaderSource( vertexShader, [\r\n\t\r\n\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\r\n\t\r\n\t\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t\t'uniform float rotation;',\r\n\t\t\t\t'uniform vec2 scale;',\r\n\t\t\t\t'uniform vec2 uvOffset;',\r\n\t\t\t\t'uniform vec2 uvScale;',\r\n\t\r\n\t\t\t\t'attribute vec2 position;',\r\n\t\t\t\t'attribute vec2 uv;',\r\n\t\r\n\t\t\t\t'varying vec2 vUV;',\r\n\t\r\n\t\t\t\t'void main() {',\r\n\t\r\n\t\t\t\t\t'vUV = uvOffset + uv * uvScale;',\r\n\t\r\n\t\t\t\t\t'vec2 alignedPosition = position * scale;',\r\n\t\r\n\t\t\t\t\t'vec2 rotatedPosition;',\r\n\t\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\r\n\t\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\r\n\t\r\n\t\t\t\t\t'vec4 finalPosition;',\r\n\t\r\n\t\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\r\n\t\t\t\t\t'finalPosition.xy += rotatedPosition;',\r\n\t\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\r\n\t\r\n\t\t\t\t\t'gl_Position = finalPosition;',\r\n\t\r\n\t\t\t\t'}'\r\n\t\r\n\t\t\t].join( '\\n' ) );\r\n\t\r\n\t\t\tgl.shaderSource( fragmentShader, [\r\n\t\r\n\t\t\t\t'precision ' + renderer.getPrecision() + ' float;',\r\n\t\r\n\t\t\t\t'uniform vec3 color;',\r\n\t\t\t\t'uniform sampler2D map;',\r\n\t\t\t\t'uniform float opacity;',\r\n\t\r\n\t\t\t\t'uniform int fogType;',\r\n\t\t\t\t'uniform vec3 fogColor;',\r\n\t\t\t\t'uniform float fogDensity;',\r\n\t\t\t\t'uniform float fogNear;',\r\n\t\t\t\t'uniform float fogFar;',\r\n\t\t\t\t'uniform float alphaTest;',\r\n\t\r\n\t\t\t\t'varying vec2 vUV;',\r\n\t\r\n\t\t\t\t'void main() {',\r\n\t\r\n\t\t\t\t\t'vec4 texture = texture2D( map, vUV );',\r\n\t\r\n\t\t\t\t\t'if ( texture.a < alphaTest ) discard;',\r\n\t\r\n\t\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\r\n\t\r\n\t\t\t\t\t'if ( fogType > 0 ) {',\r\n\t\r\n\t\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\r\n\t\t\t\t\t\t'float fogFactor = 0.0;',\r\n\t\r\n\t\t\t\t\t\t'if ( fogType == 1 ) {',\r\n\t\r\n\t\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\r\n\t\r\n\t\t\t\t\t\t'} else {',\r\n\t\r\n\t\t\t\t\t\t\t'const float LOG2 = 1.442695;',\r\n\t\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\r\n\t\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\r\n\t\r\n\t\t\t\t\t\t'}',\r\n\t\r\n\t\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\r\n\t\r\n\t\t\t\t\t'}',\r\n\t\r\n\t\t\t\t'}'\r\n\t\r\n\t\t\t].join( '\\n' ) );\r\n\t\r\n\t\t\tgl.compileShader( vertexShader );\r\n\t\t\tgl.compileShader( fragmentShader );\r\n\t\r\n\t\t\tgl.attachShader( program, vertexShader );\r\n\t\t\tgl.attachShader( program, fragmentShader );\r\n\t\r\n\t\t\tgl.linkProgram( program );\r\n\t\r\n\t\t\treturn program;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction painterSortStable ( a, b ) {\r\n\t\t\t\r\n\t\t\tif ( a.renderOrder !== b.renderOrder ) {\r\n\t\r\n\t\t\t\treturn a.renderOrder - b.renderOrder;\r\n\t\r\n\t\t\t} else if ( a.z !== b.z ) {\r\n\t\r\n\t\t\t\treturn b.z - a.z;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\treturn b.id - a.id;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/Three.Legacy.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tObject.defineProperties( THREE.Box2.prototype, {\r\n\t\tempty: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\r\n\t\t\t\treturn this.isEmpty();\r\n\t\t\t}\r\n\t\t},\r\n\t\tisIntersectionBox: {\r\n\t\t\tvalue: function ( box ) {\r\n\t\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\t\treturn this.intersectsBox( box );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\tObject.defineProperties( THREE.Box3.prototype, {\r\n\t\tempty: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\r\n\t\t\t\treturn this.isEmpty();\r\n\t\t\t}\r\n\t\t},\r\n\t\tisIntersectionBox: {\r\n\t\t\tvalue: function ( box ) {\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\t\treturn this.intersectsBox( box );\r\n\t\t\t}\r\n\t\t},\r\n\t\tisIntersectionSphere: {\r\n\t\t\tvalue: function ( sphere ) {\r\n\t\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\t\t\treturn this.intersectsSphere( sphere );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\tObject.defineProperties( THREE.Matrix3.prototype, {\r\n\t\tmultiplyVector3: {\r\n\t\t\tvalue: function ( vector ) {\r\n\t\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\r\n\t\t\t\treturn vector.applyMatrix3( this );\r\n\t\t\t}\r\n\t\t},\r\n\t\tmultiplyVector3Array: {\r\n\t\t\tvalue: function ( a ) {\r\n\t\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\r\n\t\t\t\treturn this.applyToVector3Array( a );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\tObject.defineProperties( THREE.Matrix4.prototype, {\r\n\t\textractPosition: {\r\n\t\t\tvalue: function ( m ) {\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\r\n\t\t\t\treturn this.copyPosition( m );\r\n\t\t\t}\r\n\t\t},\r\n\t\tsetRotationFromQuaternion: {\r\n\t\t\tvalue: function ( q ) {\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\r\n\t\t\t\treturn this.makeRotationFromQuaternion( q );\r\n\t\t\t}\r\n\t\t},\r\n\t\tmultiplyVector3: {\r\n\t\t\tvalue: function ( vector ) {\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\r\n\t\t\t\treturn vector.applyProjection( this );\r\n\t\t\t}\r\n\t\t},\r\n\t\tmultiplyVector4: {\r\n\t\t\tvalue: function ( vector ) {\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\t\treturn vector.applyMatrix4( this );\r\n\t\t\t}\r\n\t\t},\r\n\t\tmultiplyVector3Array: {\r\n\t\t\tvalue: function ( a ) {\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\r\n\t\t\t\treturn this.applyToVector3Array( a );\r\n\t\t\t}\r\n\t\t},\r\n\t\trotateAxis: {\r\n\t\t\tvalue: function ( v ) {\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\r\n\t\t\t\tv.transformDirection( this );\r\n\t\t\t}\r\n\t\t},\r\n\t\tcrossVector: {\r\n\t\t\tvalue: function ( vector ) {\r\n\t\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\t\treturn vector.applyMatrix4( this );\r\n\t\t\t}\r\n\t\t},\r\n\t\ttranslate: {\r\n\t\t\tvalue: function ( v ) {\r\n\t\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\trotateX: {\r\n\t\t\tvalue: function ( angle ) {\r\n\t\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\trotateY: {\r\n\t\t\tvalue: function ( angle ) {\r\n\t\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\trotateZ: {\r\n\t\t\tvalue: function ( angle ) {\r\n\t\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\trotateByAxis: {\r\n\t\t\tvalue: function ( axis, angle ) {\r\n\t\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\tObject.defineProperties( THREE.Plane.prototype, {\r\n\t\tisIntersectionLine: {\r\n\t\t\tvalue: function ( line ) {\r\n\t\t\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\r\n\t\t\t\treturn this.intersectsLine( line );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\tObject.defineProperties( THREE.Quaternion.prototype, {\r\n\t\tmultiplyVector3: {\r\n\t\t\tvalue: function ( vector ) {\r\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\r\n\t\t\t\treturn vector.applyQuaternion( this );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\tObject.defineProperties( THREE.Ray.prototype, {\r\n\t\tisIntersectionBox: {\r\n\t\t\tvalue: function ( box ) {\r\n\t\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\t\treturn this.intersectsBox( box );\r\n\t\t\t}\r\n\t\t},\r\n\t\tisIntersectionPlane: {\r\n\t\t\tvalue: function ( plane ) {\r\n\t\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\r\n\t\t\t\treturn this.intersectsPlane( plane );\r\n\t\t\t}\r\n\t\t},\r\n\t\tisIntersectionSphere: {\r\n\t\t\tvalue: function ( sphere ) {\r\n\t\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\t\t\treturn this.intersectsSphere( sphere );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\tObject.defineProperties( THREE.Vector3.prototype, {\r\n\t\tsetEulerFromRotationMatrix: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tsetEulerFromQuaternion: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tgetPositionFromMatrix: {\r\n\t\t\tvalue: function ( m ) {\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\r\n\t\t\t\treturn this.setFromMatrixPosition( m );\r\n\t\t\t}\r\n\t\t},\r\n\t\tgetScaleFromMatrix: {\r\n\t\t\tvalue: function ( m ) {\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\r\n\t\t\t\treturn this.setFromMatrixScale( m );\r\n\t\t\t}\r\n\t\t},\r\n\t\tgetColumnFromMatrix: {\r\n\t\t\tvalue: function ( index, matrix ) {\r\n\t\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\r\n\t\t\t\treturn this.setFromMatrixColumn( index, matrix );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\t//\r\n\t\r\n\tTHREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {\r\n\t\r\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\r\n\t\treturn new THREE.Face3( a, b, c, normal, color, materialIndex );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Vertex = function ( x, y, z ) {\r\n\t\r\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\r\n\t\treturn new THREE.Vector3( x, y, z );\r\n\t\r\n\t};\r\n\t\r\n\t//\r\n\t\r\n\tObject.defineProperties( THREE.Object3D.prototype, {\r\n\t\teulerOrder: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\t\treturn this.rotation.order;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\t\tthis.rotation.order = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tgetChildByName: {\r\n\t\t\tvalue: function ( name ) {\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\r\n\t\t\t\treturn this.getObjectByName( name );\r\n\t\t\t}\r\n\t\t},\r\n\t\trenderDepth: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\ttranslate: {\r\n\t\t\tvalue: function ( distance, axis ) {\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\r\n\t\t\t\treturn this.translateOnAxis( axis, distance );\r\n\t\t\t}\r\n\t\t},\r\n\t\tuseQuaternion: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\t//\r\n\t\r\n\tObject.defineProperties( THREE, {\r\n\t\tPointCloud: {\r\n\t\t\tvalue: function ( geometry, material ) {\r\n\t\t\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\r\n\t\t\t\treturn new THREE.Points( geometry, material );\r\n\t\t\t}\r\n\t\t},\r\n\t\tParticleSystem: {\r\n\t\t\tvalue: function ( geometry, material ) {\r\n\t\t\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\r\n\t\t\t\treturn new THREE.Points( geometry, material );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\t//\r\n\t\r\n\tObject.defineProperties( THREE.Light.prototype, {\r\n\t\tonlyShadow: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraFov: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\r\n\t\t\t\tthis.shadow.camera.fov = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraLeft: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\r\n\t\t\t\tthis.shadow.camera.left = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraRight: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\r\n\t\t\t\tthis.shadow.camera.right = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraTop: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\r\n\t\t\t\tthis.shadow.camera.top = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraBottom: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\r\n\t\t\t\tthis.shadow.camera.bottom = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraNear: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\r\n\t\t\t\tthis.shadow.camera.near = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraFar: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\r\n\t\t\t\tthis.shadow.camera.far = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowCameraVisible: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowBias: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\r\n\t\t\t\tthis.shadow.bias = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowDarkness: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapWidth: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\r\n\t\t\t\tthis.shadow.mapSize.width = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapHeight: {\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\r\n\t\t\t\tthis.shadow.mapSize.height = value;\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\t//\r\n\t\r\n\tObject.defineProperties( THREE.BufferAttribute.prototype, {\r\n\t\tlength: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\r\n\t\t\t\treturn this.array.length;\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\tObject.defineProperties( THREE.BufferGeometry.prototype, {\r\n\t\tdrawcalls: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\r\n\t\t\t\treturn this.groups;\r\n\t\t\t}\r\n\t\t},\r\n\t\toffsets: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\r\n\t\t\t\treturn this.groups;\r\n\t\t\t}\r\n\t\t},\r\n\t\taddIndex: {\r\n\t\t\tvalue: function ( index ) {\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\r\n\t\t\t\tthis.setIndex( index );\r\n\t\t\t}\r\n\t\t},\r\n\t\taddDrawCall: {\r\n\t\t\tvalue: function ( start, count, indexOffset ) {\r\n\t\t\t\tif ( indexOffset !== undefined ) {\r\n\t\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\r\n\t\t\t\t}\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\r\n\t\t\t\tthis.addGroup( start, count );\r\n\t\t\t}\r\n\t\t},\r\n\t\tclearDrawCalls: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\r\n\t\t\t\tthis.clearGroups();\r\n\t\t\t}\r\n\t\t},\r\n\t\tcomputeTangents: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tcomputeOffsets: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\t//\r\n\t\r\n\tObject.defineProperties( THREE.Material.prototype, {\r\n\t\twrapAround: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\twrapRGB: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\r\n\t\t\t\treturn new THREE.Color();\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\tObject.defineProperties( THREE, {\r\n\t\tPointCloudMaterial: {\r\n\t\t\tvalue: function ( parameters ) {\r\n\t\t\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\t\t\treturn new THREE.PointsMaterial( parameters );\r\n\t\t\t}\r\n\t\t},\r\n\t\tParticleBasicMaterial: {\r\n\t\t\tvalue: function ( parameters ) {\r\n\t\t\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\t\t\treturn new THREE.PointsMaterial( parameters );\r\n\t\t\t}\r\n\t\t},\r\n\t\tParticleSystemMaterial:{\r\n\t\t\tvalue: function ( parameters ) {\r\n\t\t\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\t\t\treturn new THREE.PointsMaterial( parameters );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\tObject.defineProperties( THREE.MeshPhongMaterial.prototype, {\r\n\t\tmetal: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\tObject.defineProperties( THREE.ShaderMaterial.prototype, {\r\n\t\tderivatives: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\t\treturn this.extensions.derivatives;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\t\tthis.extensions.derivatives = value;\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\t//\r\n\t\r\n\tObject.defineProperties( THREE.WebGLRenderer.prototype, {\r\n\t\tsupportsFloatTextures: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\r\n\t\t\t\treturn this.extensions.get( 'OES_texture_float' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tsupportsHalfFloatTextures: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\r\n\t\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tsupportsStandardDerivatives: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\r\n\t\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tsupportsCompressedTextureS3TC: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\r\n\t\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tsupportsCompressedTexturePVRTC: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\r\n\t\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tsupportsBlendMinMax: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\r\n\t\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tsupportsVertexTextures: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\treturn this.capabilities.vertexTextures;\r\n\t\t\t}\r\n\t\t},\r\n\t\tsupportsInstancedArrays: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\r\n\t\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tenableScissorTest: {\r\n\t\t\tvalue: function ( boolean ) {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\r\n\t\t\t\tthis.setScissorTest( boolean );\r\n\t\t\t}\r\n\t\t},\r\n\t\tinitMaterial: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\taddPrePlugin: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\taddPostPlugin: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tupdateShadowMap: {\r\n\t\t\tvalue: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapEnabled: {\r\n\t\t\tget: function () {\r\n\t\t\t\treturn this.shadowMap.enabled;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\r\n\t\t\t\tthis.shadowMap.enabled = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapType: {\r\n\t\t\tget: function () {\r\n\t\t\t\treturn this.shadowMap.type;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\r\n\t\t\t\tthis.shadowMap.type = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tshadowMapCullFace: {\r\n\t\t\tget: function () {\r\n\t\t\t\treturn this.shadowMap.cullFace;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\r\n\t\t\t\tthis.shadowMap.cullFace = value;\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\t//\r\n\t\r\n\tObject.defineProperties( THREE.WebGLRenderTarget.prototype, {\r\n\t\twrapS: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\t\treturn this.texture.wrapS;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\t\tthis.texture.wrapS = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\twrapT: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\t\treturn this.texture.wrapT;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\t\tthis.texture.wrapT = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tmagFilter: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\t\treturn this.texture.magFilter;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\t\tthis.texture.magFilter = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tminFilter: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\t\treturn this.texture.minFilter;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\t\tthis.texture.minFilter = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tanisotropy: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\t\treturn this.texture.anisotropy;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\t\tthis.texture.anisotropy = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\toffset: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\t\treturn this.texture.offset;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\t\tthis.texture.offset = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\trepeat: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\t\treturn this.texture.repeat;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\t\tthis.texture.repeat = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tformat: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\t\treturn this.texture.format;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\t\tthis.texture.format = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\ttype: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\t\treturn this.texture.type;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\t\tthis.texture.type = value;\r\n\t\t\t}\r\n\t\t},\r\n\t\tgenerateMipmaps: {\r\n\t\t\tget: function () {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\t\treturn this.texture.generateMipmaps;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\t\tthis.texture.generateMipmaps = value;\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\t//\r\n\t\r\n\tTHREE.GeometryUtils = {\r\n\t\r\n\t\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\r\n\t\r\n\t\t\tvar matrix;\r\n\t\r\n\t\t\tif ( geometry2 instanceof THREE.Mesh ) {\r\n\t\r\n\t\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\r\n\t\r\n\t\t\t\tmatrix = geometry2.matrix;\r\n\t\t\t\tgeometry2 = geometry2.geometry;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tcenter: function ( geometry ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\r\n\t\t\treturn geometry.center();\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ImageUtils = {\r\n\t\r\n\t\tcrossOrigin: undefined,\r\n\t\r\n\t\tloadTexture: function ( url, mapping, onLoad, onError ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\r\n\t\r\n\t\t\tvar loader = new THREE.TextureLoader();\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\r\n\t\t\tvar texture = loader.load( url, onLoad, undefined, onError );\r\n\t\r\n\t\t\tif ( mapping ) texture.mapping = mapping;\r\n\t\r\n\t\t\treturn texture;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\r\n\t\r\n\t\t\tvar loader = new THREE.CubeTextureLoader();\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\r\n\t\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\r\n\t\r\n\t\t\tif ( mapping ) texture.mapping = mapping;\r\n\t\r\n\t\t\treturn texture;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tloadCompressedTexture: function () {\r\n\t\r\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tloadCompressedTextureCube: function () {\r\n\t\r\n\t\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t//\r\n\t\r\n\tTHREE.Projector = function () {\r\n\t\r\n\t\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\r\n\t\r\n\t\tthis.projectVector = function ( vector, camera ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\r\n\t\t\tvector.project( camera );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.unprojectVector = function ( vector, camera ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\r\n\t\t\tvector.unproject( camera );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.pickingRay = function ( vector, camera ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\t//\r\n\t\r\n\tTHREE.CanvasRenderer = function () {\r\n\t\r\n\t\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\r\n\t\r\n\t\tthis.domElement = document.createElement( 'canvas' );\r\n\t\tthis.clear = function () {};\r\n\t\tthis.render = function () {};\r\n\t\tthis.setClearColor = function () {};\r\n\t\tthis.setSize = function () {};\r\n\t\r\n\t};\r\n\t\r\n\t//\r\n\t\r\n\tTHREE.MeshFaceMaterial = THREE.MultiMaterial;\r\n\t\r\n\t// File:src/extras/CurveUtils.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\t\r\n\tTHREE.CurveUtils = {\r\n\t\r\n\t\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\r\n\t\r\n\t\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Puay Bing, thanks for helping with this derivative!\r\n\t\r\n\t\ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\r\n\t\r\n\t\t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\r\n\t\t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\r\n\t\t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\r\n\t\t\t\t3 * t * t * p3;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\r\n\t\r\n\t\t\t// To check if my formulas are correct\r\n\t\r\n\t\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\r\n\t\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\r\n\t\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\r\n\t\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\r\n\t\r\n\t\t\treturn h00 + h10 + h01 + h11;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Catmull-Rom\r\n\t\r\n\t\tinterpolate: function( p0, p1, p2, p3, t ) {\r\n\t\r\n\t\t\tvar v0 = ( p2 - p0 ) * 0.5;\r\n\t\t\tvar v1 = ( p3 - p1 ) * 0.5;\r\n\t\t\tvar t2 = t * t;\r\n\t\t\tvar t3 = t * t2;\r\n\t\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/SceneUtils.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.SceneUtils = {\r\n\t\r\n\t\tcreateMultiMaterialObject: function ( geometry, materials ) {\r\n\t\r\n\t\t\tvar group = new THREE.Group();\r\n\t\r\n\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn group;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tdetach: function ( child, parent, scene ) {\r\n\t\r\n\t\t\tchild.applyMatrix( parent.matrixWorld );\r\n\t\t\tparent.remove( child );\r\n\t\t\tscene.add( child );\r\n\t\r\n\t\t},\r\n\t\r\n\t\tattach: function ( child, scene, parent ) {\r\n\t\r\n\t\t\tvar matrixWorldInverse = new THREE.Matrix4();\r\n\t\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\r\n\t\t\tchild.applyMatrix( matrixWorldInverse );\r\n\t\r\n\t\t\tscene.remove( child );\r\n\t\t\tparent.add( child );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/ShapeUtils.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t */\r\n\t\r\n\tTHREE.ShapeUtils = {\r\n\t\r\n\t\t// calculate area of the contour polygon\r\n\t\r\n\t\tarea: function ( contour ) {\r\n\t\r\n\t\t\tvar n = contour.length;\r\n\t\t\tvar a = 0.0;\r\n\t\r\n\t\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\r\n\t\r\n\t\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn a * 0.5;\r\n\t\r\n\t\t},\r\n\t\r\n\t\ttriangulate: ( function () {\r\n\t\r\n\t\t\t/**\r\n\t\t\t * This code is a quick port of code written in C++ which was submitted to\r\n\t\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\r\n\t\t\t * See original code and more information here:\r\n\t\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\r\n\t\t\t *\r\n\t\t\t * ported to actionscript by Zevan Rosser\r\n\t\t\t * www.actionsnippet.com\r\n\t\t\t *\r\n\t\t\t * ported to javascript by Joshua Koo\r\n\t\t\t * http://www.lab4games.net/zz85/blog\r\n\t\t\t *\r\n\t\t\t */\r\n\t\r\n\t\t\tfunction snip( contour, u, v, w, n, verts ) {\r\n\t\r\n\t\t\t\tvar p;\r\n\t\t\t\tvar ax, ay, bx, by;\r\n\t\t\t\tvar cx, cy, px, py;\r\n\t\r\n\t\t\t\tax = contour[ verts[ u ] ].x;\r\n\t\t\t\tay = contour[ verts[ u ] ].y;\r\n\t\r\n\t\t\t\tbx = contour[ verts[ v ] ].x;\r\n\t\t\t\tby = contour[ verts[ v ] ].y;\r\n\t\r\n\t\t\t\tcx = contour[ verts[ w ] ].x;\r\n\t\t\t\tcy = contour[ verts[ w ] ].y;\r\n\t\r\n\t\t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\r\n\t\r\n\t\t\t\tvar aX, aY, bX, bY, cX, cY;\r\n\t\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\r\n\t\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\r\n\t\r\n\t\t\t\taX = cx - bx;  aY = cy - by;\r\n\t\t\t\tbX = ax - cx;  bY = ay - cy;\r\n\t\t\t\tcX = bx - ax;  cY = by - ay;\r\n\t\r\n\t\t\t\tfor ( p = 0; p < n; p ++ ) {\r\n\t\r\n\t\t\t\t\tpx = contour[ verts[ p ] ].x;\r\n\t\t\t\t\tpy = contour[ verts[ p ] ].y;\r\n\t\r\n\t\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\r\n\t\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\r\n\t\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\r\n\t\r\n\t\t\t\t\tapx = px - ax;  apy = py - ay;\r\n\t\t\t\t\tbpx = px - bx;  bpy = py - by;\r\n\t\t\t\t\tcpx = px - cx;  cpy = py - cy;\r\n\t\r\n\t\t\t\t\t// see if p is inside triangle abc\r\n\t\r\n\t\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\r\n\t\t\t\t\tcCROSSap = cX * apy - cY * apx;\r\n\t\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\r\n\t\r\n\t\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn true;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// takes in an contour array and returns\r\n\t\r\n\t\t\treturn function ( contour, indices ) {\r\n\t\r\n\t\t\t\tvar n = contour.length;\r\n\t\r\n\t\t\t\tif ( n < 3 ) return null;\r\n\t\r\n\t\t\t\tvar result = [],\r\n\t\t\t\t\tverts = [],\r\n\t\t\t\t\tvertIndices = [];\r\n\t\r\n\t\t\t\t/* we want a counter-clockwise polygon in verts */\r\n\t\r\n\t\t\t\tvar u, v, w;\r\n\t\r\n\t\t\t\tif ( THREE.ShapeUtils.area( contour ) > 0.0 ) {\r\n\t\r\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar nv = n;\r\n\t\r\n\t\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\r\n\t\r\n\t\t\t\tvar count = 2 * nv;   /* error detection */\r\n\t\r\n\t\t\t\tfor ( v = nv - 1; nv > 2; ) {\r\n\t\r\n\t\t\t\t\t/* if we loop, it is probably a non-simple polygon */\r\n\t\r\n\t\t\t\t\tif ( ( count -- ) <= 0 ) {\r\n\t\r\n\t\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\r\n\t\r\n\t\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\r\n\t\t\t\t\t\t//return null;\r\n\t\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\r\n\t\r\n\t\t\t\t\t\tif ( indices ) return vertIndices;\r\n\t\t\t\t\t\treturn result;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\r\n\t\r\n\t\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\r\n\t\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\r\n\t\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\r\n\t\r\n\t\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\r\n\t\r\n\t\t\t\t\t\tvar a, b, c, s, t;\r\n\t\r\n\t\t\t\t\t\t/* true names of the vertices */\r\n\t\r\n\t\t\t\t\t\ta = verts[ u ];\r\n\t\t\t\t\t\tb = verts[ v ];\r\n\t\t\t\t\t\tc = verts[ w ];\r\n\t\r\n\t\t\t\t\t\t/* output Triangle */\r\n\t\r\n\t\t\t\t\t\tresult.push( [ contour[ a ],\r\n\t\t\t\t\t\t\tcontour[ b ],\r\n\t\t\t\t\t\t\tcontour[ c ] ] );\r\n\t\r\n\t\r\n\t\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\r\n\t\r\n\t\t\t\t\t\t/* remove v from the remaining polygon */\r\n\t\r\n\t\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tverts[ s ] = verts[ t ];\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tnv --;\r\n\t\r\n\t\t\t\t\t\t/* reset error detection counter */\r\n\t\r\n\t\t\t\t\t\tcount = 2 * nv;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( indices ) return vertIndices;\r\n\t\t\t\treturn result;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t} )(),\r\n\t\r\n\t\ttriangulateShape: function ( contour, holes ) {\r\n\t\r\n\t\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\r\n\t\r\n\t\t\t\t// inOtherPt needs to be collinear to the inSegment\r\n\t\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\r\n\t\r\n\t\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\r\n\t\r\n\t\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\r\n\t\r\n\t\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\r\n\t\r\n\t\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\r\n\t\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\r\n\t\r\n\t\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\r\n\t\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\r\n\t\r\n\t\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\r\n\t\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\r\n\t\r\n\t\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\r\n\t\r\n\t\t\t\t\t// not parallel\r\n\t\r\n\t\t\t\t\tvar perpSeg2;\r\n\t\t\t\t\tif ( limit > 0 ) {\r\n\t\r\n\t\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\r\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\r\n\t\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\r\n\t\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\r\n\t\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// i.e. to reduce rounding errors\r\n\t\t\t\t\t// intersection at endpoint of segment#1?\r\n\t\t\t\t\tif ( perpSeg2 === 0 ) {\r\n\t\r\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\r\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\r\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( perpSeg2 === limit ) {\r\n\t\r\n\t\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\r\n\t\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\r\n\t\t\t\t\t\treturn [ inSeg1Pt2 ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// intersection at endpoint of segment#2?\r\n\t\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\r\n\t\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\r\n\t\r\n\t\t\t\t\t// return real intersection point\r\n\t\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\r\n\t\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\r\n\t\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// parallel or collinear\r\n\t\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\r\n\t\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\r\n\t\r\n\t\t\t\t\t// they are collinear or degenerate\r\n\t\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\r\n\t\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\r\n\t\t\t\t\t// both segments are points\r\n\t\t\t\t\tif ( seg1Pt && seg2Pt ) {\r\n\t\r\n\t\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\r\n\t\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\r\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// segment#1  is a single point\r\n\t\t\t\t\tif ( seg1Pt ) {\r\n\t\r\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\r\n\t\t\t\t\t\treturn [ inSeg1Pt1 ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// segment#2  is a single point\r\n\t\t\t\t\tif ( seg2Pt ) {\r\n\t\r\n\t\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\r\n\t\t\t\t\t\treturn [ inSeg2Pt1 ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// they are collinear segments, which might overlap\r\n\t\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\r\n\t\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\r\n\t\t\t\t\tif ( seg1dx !== 0 ) {\r\n\t\r\n\t\t\t\t\t\t// the segments are NOT on a vertical line\r\n\t\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\r\n\t\r\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\r\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\r\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\r\n\t\r\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\r\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\r\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t// the segments are on a vertical line\r\n\t\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\r\n\t\r\n\t\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\r\n\t\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\r\n\t\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\r\n\t\r\n\t\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\r\n\t\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\r\n\t\r\n\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\r\n\t\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( seg1minVal <= seg2minVal ) {\r\n\t\r\n\t\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\r\n\t\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\r\n\t\r\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\r\n\t\t\t\t\t\t\treturn [ seg2min ];\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\r\n\t\t\t\t\t\treturn\t[ seg2min, seg2max ];\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\r\n\t\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\r\n\t\r\n\t\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\r\n\t\t\t\t\t\t\treturn [ seg1min ];\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\r\n\t\t\t\t\t\treturn\t[ seg1min, seg2max ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\r\n\t\r\n\t\t\t\t// The order of legs is important\r\n\t\r\n\t\t\t\t// translation of all points, so that Vertex is at (0,0)\r\n\t\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\r\n\t\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\r\n\t\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\r\n\t\r\n\t\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\r\n\t\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\r\n\t\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\r\n\t\r\n\t\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\r\n\t\r\n\t\t\t\t\t// angle != 180 deg.\r\n\t\r\n\t\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\r\n\t\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\r\n\t\r\n\t\t\t\t\tif ( from2toAngle > 0 ) {\r\n\t\r\n\t\t\t\t\t\t// main angle < 180 deg.\r\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t// main angle > 180 deg.\r\n\t\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// angle == 180 deg.\r\n\t\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\r\n\t\t\t\t\treturn\t( from2otherAngle > 0 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\r\n\t\t\tfunction removeHoles( contour, holes ) {\r\n\t\r\n\t\t\t\tvar shape = contour.concat(); // work on this shape\r\n\t\t\t\tvar hole;\r\n\t\r\n\t\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\r\n\t\r\n\t\t\t\t\t// Check if hole point lies within angle around shape point\r\n\t\t\t\t\tvar lastShapeIdx = shape.length - 1;\r\n\t\r\n\t\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\r\n\t\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\r\n\t\r\n\t\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\r\n\t\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\r\n\t\r\n\t\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\r\n\t\t\t\t\tif ( ! insideAngle ) {\r\n\t\r\n\t\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\r\n\t\t\t\t\t\treturn\tfalse;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// Check if shape point lies within angle around hole point\r\n\t\t\t\t\tvar lastHoleIdx = hole.length - 1;\r\n\t\r\n\t\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\r\n\t\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\r\n\t\r\n\t\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\r\n\t\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\r\n\t\r\n\t\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\r\n\t\t\t\t\tif ( ! insideAngle ) {\r\n\t\r\n\t\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\r\n\t\t\t\t\t\treturn\tfalse;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\treturn\ttrue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\r\n\t\r\n\t\t\t\t\t// checks for intersections with shape edges\r\n\t\t\t\t\tvar sIdx, nextIdx, intersection;\r\n\t\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\r\n\t\r\n\t\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\r\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\r\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\treturn\tfalse;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar indepHoles = [];\r\n\t\r\n\t\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\r\n\t\r\n\t\t\t\t\t// checks for intersections with hole edges\r\n\t\t\t\t\tvar ihIdx, chkHole,\r\n\t\t\t\t\t\thIdx, nextIdx, intersection;\r\n\t\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\r\n\t\r\n\t\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\r\n\t\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\r\n\t\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\r\n\t\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn\tfalse;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar holeIndex, shapeIndex,\r\n\t\t\t\t\tshapePt, holePt,\r\n\t\t\t\t\tholeIdx, cutKey, failedCuts = [],\r\n\t\t\t\t\ttmpShape1, tmpShape2,\r\n\t\t\t\t\ttmpHole1, tmpHole2;\r\n\t\r\n\t\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\t\t\tindepHoles.push( h );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar minShapeIndex = 0;\r\n\t\t\t\tvar counter = indepHoles.length * 2;\r\n\t\t\t\twhile ( indepHoles.length > 0 ) {\r\n\t\r\n\t\t\t\t\tcounter --;\r\n\t\t\t\t\tif ( counter < 0 ) {\r\n\t\r\n\t\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\r\n\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t// search for shape-vertex and hole-vertex,\r\n\t\t\t\t\t// which can be connected without intersections\r\n\t\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\r\n\t\r\n\t\t\t\t\t\tshapePt = shape[ shapeIndex ];\r\n\t\t\t\t\t\tholeIndex\t= - 1;\r\n\t\r\n\t\t\t\t\t\t// search for hole which can be reached without intersections\r\n\t\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tholeIdx = indepHoles[ h ];\r\n\t\r\n\t\t\t\t\t\t\t// prevent multiple checks\r\n\t\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\r\n\t\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\r\n\t\r\n\t\t\t\t\t\t\thole = holes[ holeIdx ];\r\n\t\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\tholePt = hole[ h2 ];\r\n\t\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\r\n\t\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\r\n\t\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\r\n\t\r\n\t\t\t\t\t\t\t\tholeIndex = h2;\r\n\t\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\r\n\t\r\n\t\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\r\n\t\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\r\n\t\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\r\n\t\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\r\n\t\r\n\t\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\r\n\t\r\n\t\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\r\n\t\r\n\t\t\t\t\t\t\t\t// Debug only, to show the selected cuts\r\n\t\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\r\n\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\r\n\t\r\n\t\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn shape; \t\t\t/* shape with no holes */\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\r\n\t\t\tvar i, il, f, face,\r\n\t\t\t\tkey, index,\r\n\t\t\t\tallPointsMap = {};\r\n\t\r\n\t\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\r\n\t\r\n\t\t\tvar allpoints = contour.concat();\r\n\t\r\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\r\n\t\r\n\t\t\t// prepare all points map\r\n\t\r\n\t\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\r\n\t\r\n\t\t\t\tif ( allPointsMap[ key ] !== undefined ) {\r\n\t\r\n\t\t\t\t\tconsole.warn( \"THREE.Shape: Duplicate point\", key );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tallPointsMap[ key ] = i;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// remove holes by cutting paths to holes and adding them to the shape\r\n\t\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\r\n\t\r\n\t\t\tvar triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\r\n\t\t\t//console.log( \"triangles\",triangles, triangles.length );\r\n\t\r\n\t\t\t// check all face vertices against all points map\r\n\t\r\n\t\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tface = triangles[ i ];\r\n\t\r\n\t\t\t\tfor ( f = 0; f < 3; f ++ ) {\r\n\t\r\n\t\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\r\n\t\r\n\t\t\t\t\tindex = allPointsMap[ key ];\r\n\t\r\n\t\t\t\t\tif ( index !== undefined ) {\r\n\t\r\n\t\t\t\t\t\tface[ f ] = index;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn triangles.concat();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tisClockWise: function ( pts ) {\r\n\t\r\n\t\t\treturn THREE.ShapeUtils.area( pts ) < 0;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Bezier Curves formulas obtained from\r\n\t\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\r\n\t\r\n\t\t// Quad Bezier Functions\r\n\t\r\n\t\tb2: ( function () {\r\n\t\r\n\t\t\tfunction b2p0( t, p ) {\r\n\t\r\n\t\t\t\tvar k = 1 - t;\r\n\t\t\t\treturn k * k * p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction b2p1( t, p ) {\r\n\t\r\n\t\t\t\treturn 2 * ( 1 - t ) * t * p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction b2p2( t, p ) {\r\n\t\r\n\t\t\t\treturn t * t * p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn function ( t, p0, p1, p2 ) {\r\n\t\r\n\t\t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t} )(),\r\n\t\r\n\t\t// Cubic Bezier Functions\r\n\t\r\n\t\tb3: ( function () {\r\n\t\r\n\t\t\tfunction b3p0( t, p ) {\r\n\t\r\n\t\t\t\tvar k = 1 - t;\r\n\t\t\t\treturn k * k * k * p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction b3p1( t, p ) {\r\n\t\r\n\t\t\t\tvar k = 1 - t;\r\n\t\t\t\treturn 3 * k * k * t * p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction b3p2( t, p ) {\r\n\t\r\n\t\t\t\tvar k = 1 - t;\r\n\t\t\t\treturn 3 * k * t * t * p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction b3p3( t, p ) {\r\n\t\r\n\t\t\t\treturn t * t * t * p;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn function ( t, p0, p1, p2, p3 ) {\r\n\t\r\n\t\t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\r\n\t\r\n\t\t\t};\r\n\t\r\n\t\t} )()\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/core/Curve.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Extensible curve object\r\n\t *\r\n\t * Some common of Curve methods\r\n\t * .getPoint(t), getTangent(t)\r\n\t * .getPointAt(u), getTagentAt(u)\r\n\t * .getPoints(), .getSpacedPoints()\r\n\t * .getLength()\r\n\t * .updateArcLengths()\r\n\t *\r\n\t * This following classes subclasses THREE.Curve:\r\n\t *\r\n\t * -- 2d classes --\r\n\t * THREE.LineCurve\r\n\t * THREE.QuadraticBezierCurve\r\n\t * THREE.CubicBezierCurve\r\n\t * THREE.SplineCurve\r\n\t * THREE.ArcCurve\r\n\t * THREE.EllipseCurve\r\n\t *\r\n\t * -- 3d classes --\r\n\t * THREE.LineCurve3\r\n\t * THREE.QuadraticBezierCurve3\r\n\t * THREE.CubicBezierCurve3\r\n\t * THREE.SplineCurve3\r\n\t * THREE.ClosedSplineCurve3\r\n\t *\r\n\t * A series of curves can be represented as a THREE.CurvePath\r\n\t *\r\n\t **/\r\n\t\r\n\t/**************************************************************\r\n\t *\tAbstract Curve base class\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.Curve = function () {\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Curve.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Curve,\r\n\t\r\n\t\t// Virtual base class method to overwrite and implement in subclasses\r\n\t\t//\t- t [0 .. 1]\r\n\t\r\n\t\tgetPoint: function ( t ) {\r\n\t\r\n\t\t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\r\n\t\t\treturn null;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Get point at relative position in curve according to arc length\r\n\t\t// - u [0 .. 1]\r\n\t\r\n\t\tgetPointAt: function ( u ) {\r\n\t\r\n\t\t\tvar t = this.getUtoTmapping( u );\r\n\t\t\treturn this.getPoint( t );\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Get sequence of points using getPoint( t )\r\n\t\r\n\t\tgetPoints: function ( divisions ) {\r\n\t\r\n\t\t\tif ( ! divisions ) divisions = 5;\r\n\t\r\n\t\t\tvar d, pts = [];\r\n\t\r\n\t\t\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\t\r\n\t\t\t\tpts.push( this.getPoint( d / divisions ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn pts;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Get sequence of points using getPointAt( u )\r\n\t\r\n\t\tgetSpacedPoints: function ( divisions ) {\r\n\t\r\n\t\t\tif ( ! divisions ) divisions = 5;\r\n\t\r\n\t\t\tvar d, pts = [];\r\n\t\r\n\t\t\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\t\r\n\t\t\t\tpts.push( this.getPointAt( d / divisions ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn pts;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Get total curve arc length\r\n\t\r\n\t\tgetLength: function () {\r\n\t\r\n\t\t\tvar lengths = this.getLengths();\r\n\t\t\treturn lengths[ lengths.length - 1 ];\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Get list of cumulative segment lengths\r\n\t\r\n\t\tgetLengths: function ( divisions ) {\r\n\t\r\n\t\t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\r\n\t\r\n\t\t\tif ( this.cacheArcLengths\r\n\t\t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\r\n\t\t\t\t&& ! this.needsUpdate ) {\r\n\t\r\n\t\t\t\t//console.log( \"cached\", this.cacheArcLengths );\r\n\t\t\t\treturn this.cacheArcLengths;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.needsUpdate = false;\r\n\t\r\n\t\t\tvar cache = [];\r\n\t\t\tvar current, last = this.getPoint( 0 );\r\n\t\t\tvar p, sum = 0;\r\n\t\r\n\t\t\tcache.push( 0 );\r\n\t\r\n\t\t\tfor ( p = 1; p <= divisions; p ++ ) {\r\n\t\r\n\t\t\t\tcurrent = this.getPoint ( p / divisions );\r\n\t\t\t\tsum += current.distanceTo( last );\r\n\t\t\t\tcache.push( sum );\r\n\t\t\t\tlast = current;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.cacheArcLengths = cache;\r\n\t\r\n\t\t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\r\n\t\r\n\t\t},\r\n\t\r\n\t\tupdateArcLengths: function() {\r\n\t\r\n\t\t\tthis.needsUpdate = true;\r\n\t\t\tthis.getLengths();\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\r\n\t\r\n\t\tgetUtoTmapping: function ( u, distance ) {\r\n\t\r\n\t\t\tvar arcLengths = this.getLengths();\r\n\t\r\n\t\t\tvar i = 0, il = arcLengths.length;\r\n\t\r\n\t\t\tvar targetArcLength; // The targeted u distance value to get\r\n\t\r\n\t\t\tif ( distance ) {\r\n\t\r\n\t\t\t\ttargetArcLength = distance;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//var time = Date.now();\r\n\t\r\n\t\t\t// binary search for the index with largest value smaller than target u distance\r\n\t\r\n\t\t\tvar low = 0, high = il - 1, comparison;\r\n\t\r\n\t\t\twhile ( low <= high ) {\r\n\t\r\n\t\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\t\r\n\t\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\r\n\t\r\n\t\t\t\tif ( comparison < 0 ) {\r\n\t\r\n\t\t\t\t\tlow = i + 1;\r\n\t\r\n\t\t\t\t} else if ( comparison > 0 ) {\r\n\t\r\n\t\t\t\t\thigh = i - 1;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\thigh = i;\r\n\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t// DONE\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\ti = high;\r\n\t\r\n\t\t\t//console.log('b' , i, low, high, Date.now()- time);\r\n\t\r\n\t\t\tif ( arcLengths[ i ] === targetArcLength ) {\r\n\t\r\n\t\t\t\tvar t = i / ( il - 1 );\r\n\t\t\t\treturn t;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// we could get finer grain at lengths, or use simple interpolation between two points\r\n\t\r\n\t\t\tvar lengthBefore = arcLengths[ i ];\r\n\t\t\tvar lengthAfter = arcLengths[ i + 1 ];\r\n\t\r\n\t\t\tvar segmentLength = lengthAfter - lengthBefore;\r\n\t\r\n\t\t\t// determine where we are between the 'before' and 'after' points\r\n\t\r\n\t\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\r\n\t\r\n\t\t\t// add that fractional amount to t\r\n\t\r\n\t\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\r\n\t\r\n\t\t\treturn t;\r\n\t\r\n\t\t},\r\n\t\r\n\t\t// Returns a unit vector tangent at t\r\n\t\t// In case any sub curve does not implement its tangent derivation,\r\n\t\t// 2 points a small delta apart will be used to find its gradient\r\n\t\t// which seems to give a reasonable approximation\r\n\t\r\n\t\tgetTangent: function( t ) {\r\n\t\r\n\t\t\tvar delta = 0.0001;\r\n\t\t\tvar t1 = t - delta;\r\n\t\t\tvar t2 = t + delta;\r\n\t\r\n\t\t\t// Capping in case of danger\r\n\t\r\n\t\t\tif ( t1 < 0 ) t1 = 0;\r\n\t\t\tif ( t2 > 1 ) t2 = 1;\r\n\t\r\n\t\t\tvar pt1 = this.getPoint( t1 );\r\n\t\t\tvar pt2 = this.getPoint( t2 );\r\n\t\r\n\t\t\tvar vec = pt2.clone().sub( pt1 );\r\n\t\t\treturn vec.normalize();\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgetTangentAt: function ( u ) {\r\n\t\r\n\t\t\tvar t = this.getUtoTmapping( u );\r\n\t\t\treturn this.getTangent( t );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// TODO: Transformation for Curves?\r\n\t\r\n\t/**************************************************************\r\n\t *\t3D Curves\r\n\t **************************************************************/\r\n\t\r\n\t// A Factory method for creating new curve subclasses\r\n\t\r\n\tTHREE.Curve.create = function ( constructor, getPointFunc ) {\r\n\t\r\n\t\tconstructor.prototype = Object.create( THREE.Curve.prototype );\r\n\t\tconstructor.prototype.constructor = constructor;\r\n\t\tconstructor.prototype.getPoint = getPointFunc;\r\n\t\r\n\t\treturn constructor;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/core/CurvePath.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t **/\r\n\t\r\n\t/**************************************************************\r\n\t *\tCurved Path - a curve path is simply a array of connected\r\n\t *  curves, but retains the api of a curve\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.CurvePath = function () {\r\n\t\r\n\t\tthis.curves = [];\r\n\t\r\n\t\tthis.autoClose = false; // Automatically closes the path\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );\r\n\tTHREE.CurvePath.prototype.constructor = THREE.CurvePath;\r\n\t\r\n\tTHREE.CurvePath.prototype.add = function ( curve ) {\r\n\t\r\n\t\tthis.curves.push( curve );\r\n\t\r\n\t};\r\n\t\r\n\t/*\r\n\tTHREE.CurvePath.prototype.checkConnection = function() {\r\n\t\t// TODO\r\n\t\t// If the ending of curve is not connected to the starting\r\n\t\t// or the next curve, then, this is not a real path\r\n\t};\r\n\t*/\r\n\t\r\n\tTHREE.CurvePath.prototype.closePath = function() {\r\n\t\r\n\t\t// TODO Test\r\n\t\t// and verify for vector3 (needs to implement equals)\r\n\t\t// Add a line curve if start and end of lines are not connected\r\n\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\r\n\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\r\n\t\r\n\t\tif ( ! startPoint.equals( endPoint ) ) {\r\n\t\r\n\t\t\tthis.curves.push( new THREE.LineCurve( endPoint, startPoint ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// To get accurate point with reference to\r\n\t// entire path distance at time t,\r\n\t// following has to be done:\r\n\t\r\n\t// 1. Length of each sub path have to be known\r\n\t// 2. Locate and identify type of curve\r\n\t// 3. Get t for the curve\r\n\t// 4. Return curve.getPointAt(t')\r\n\t\r\n\tTHREE.CurvePath.prototype.getPoint = function( t ) {\r\n\t\r\n\t\tvar d = t * this.getLength();\r\n\t\tvar curveLengths = this.getCurveLengths();\r\n\t\tvar i = 0;\r\n\t\r\n\t\t// To think about boundaries points.\r\n\t\r\n\t\twhile ( i < curveLengths.length ) {\r\n\t\r\n\t\t\tif ( curveLengths[ i ] >= d ) {\r\n\t\r\n\t\t\t\tvar diff = curveLengths[ i ] - d;\r\n\t\t\t\tvar curve = this.curves[ i ];\r\n\t\r\n\t\t\t\tvar u = 1 - diff / curve.getLength();\r\n\t\r\n\t\t\t\treturn curve.getPointAt( u );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\ti ++;\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn null;\r\n\t\r\n\t\t// loop where sum != 0, sum > d , sum+1 <d\r\n\t\r\n\t};\r\n\t\r\n\t/*\r\n\tTHREE.CurvePath.prototype.getTangent = function( t ) {\r\n\t};\r\n\t*/\r\n\t\r\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\r\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\r\n\t// getPoint() depends on getLength\r\n\t\r\n\tTHREE.CurvePath.prototype.getLength = function() {\r\n\t\r\n\t\tvar lens = this.getCurveLengths();\r\n\t\treturn lens[ lens.length - 1 ];\r\n\t\r\n\t};\r\n\t\r\n\t// Compute lengths and cache them\r\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\t\r\n\tTHREE.CurvePath.prototype.getCurveLengths = function() {\r\n\t\r\n\t\t// We use cache values if curves and cache array are same length\r\n\t\r\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\r\n\t\r\n\t\t\treturn this.cacheLengths;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Get length of sub-curve\r\n\t\t// Push sums into cached array\r\n\t\r\n\t\tvar lengths = [], sums = 0;\r\n\t\r\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tsums += this.curves[ i ].getLength();\r\n\t\t\tlengths.push( sums );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.cacheLengths = lengths;\r\n\t\r\n\t\treturn lengths;\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\t\r\n\t/**************************************************************\r\n\t *\tCreate Geometries Helpers\r\n\t **************************************************************/\r\n\t\r\n\t/// Generate geometry from path points (for Line or Points objects)\r\n\t\r\n\tTHREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {\r\n\t\r\n\t\tvar pts = this.getPoints( divisions );\r\n\t\treturn this.createGeometry( pts );\r\n\t\r\n\t};\r\n\t\r\n\t// Generate geometry from equidistant sampling along the path\r\n\t\r\n\tTHREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {\r\n\t\r\n\t\tvar pts = this.getSpacedPoints( divisions );\r\n\t\treturn this.createGeometry( pts );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CurvePath.prototype.createGeometry = function( points ) {\r\n\t\r\n\t\tvar geometry = new THREE.Geometry();\r\n\t\r\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tvar point = points[ i ];\r\n\t\t\tgeometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn geometry;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/core/Font.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.Font = function ( data ) {\r\n\t\r\n\t\tthis.data = data;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Font.prototype = {\r\n\t\r\n\t\tconstructor: THREE.Font,\r\n\t\r\n\t\tgenerateShapes: function ( text, size, divisions ) {\r\n\t\r\n\t\t\tfunction createPaths( text ) {\r\n\t\r\n\t\t\t\tvar chars = String( text ).split( '' );\r\n\t\t\t\tvar scale = size / data.resolution;\r\n\t\t\t\tvar offset = 0;\r\n\t\r\n\t\t\t\tvar paths = [];\r\n\t\r\n\t\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\r\n\t\t\t\t\toffset += ret.offset;\r\n\t\r\n\t\t\t\t\tpaths.push( ret.path );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn paths;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfunction createPath( c, scale, offset ) {\r\n\t\r\n\t\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\r\n\t\r\n\t\t\t\tif ( ! glyph ) return;\r\n\t\r\n\t\t\t\tvar path = new THREE.Path();\r\n\t\r\n\t\t\t\tvar pts = [], b2 = THREE.ShapeUtils.b2, b3 = THREE.ShapeUtils.b3;\r\n\t\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\r\n\t\r\n\t\t\t\tif ( glyph.o ) {\r\n\t\r\n\t\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\r\n\t\r\n\t\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\r\n\t\r\n\t\t\t\t\t\tvar action = outline[ i ++ ];\r\n\t\r\n\t\t\t\t\t\tswitch ( action ) {\r\n\t\r\n\t\t\t\t\t\t\tcase 'm': // moveTo\r\n\t\r\n\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\r\n\t\r\n\t\t\t\t\t\t\t\tpath.moveTo( x, y );\r\n\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t\tcase 'l': // lineTo\r\n\t\r\n\t\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\r\n\t\r\n\t\t\t\t\t\t\t\tpath.lineTo( x, y );\r\n\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t\tcase 'q': // quadraticCurveTo\r\n\t\r\n\t\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\r\n\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\r\n\t\r\n\t\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\r\n\t\r\n\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\r\n\t\r\n\t\t\t\t\t\t\t\tif ( laste ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\r\n\t\r\n\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\r\n\t\t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\r\n\t\t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\r\n\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t\tcase 'b': // bezierCurveTo\r\n\t\r\n\t\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\r\n\t\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\r\n\t\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\r\n\t\r\n\t\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\r\n\t\r\n\t\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\r\n\t\r\n\t\t\t\t\t\t\t\tif ( laste ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\t\t\t\t\tcpy0 = laste.y;\r\n\t\r\n\t\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\r\n\t\r\n\t\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\r\n\t\t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\r\n\t\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\treturn { offset: glyph.ha * scale, path: path };\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tif ( size === undefined ) size = 100;\r\n\t\t\tif ( divisions === undefined ) divisions = 4;\r\n\t\r\n\t\t\tvar data = this.data;\r\n\t\r\n\t\t\tvar paths = createPaths( text );\r\n\t\t\tvar shapes = [];\r\n\t\r\n\t\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\r\n\t\r\n\t\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn shapes;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/core/Path.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Creates free form 2d path using series of points, lines or curves.\r\n\t *\r\n\t **/\r\n\t\r\n\tTHREE.Path = function ( points ) {\r\n\t\r\n\t\tTHREE.CurvePath.call( this );\r\n\t\r\n\t\tthis.actions = [];\r\n\t\r\n\t\tif ( points ) {\r\n\t\r\n\t\t\tthis.fromPoints( points );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Path.prototype = Object.create( THREE.CurvePath.prototype );\r\n\tTHREE.Path.prototype.constructor = THREE.Path;\r\n\t\r\n\t// TODO Clean up PATH API\r\n\t\r\n\t// Create path using straight lines to connect all points\r\n\t// - vectors: array of Vector2\r\n\t\r\n\tTHREE.Path.prototype.fromPoints = function ( vectors ) {\r\n\t\r\n\t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\r\n\t\r\n\t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// startPath() endPath()?\r\n\t\r\n\tTHREE.Path.prototype.moveTo = function ( x, y ) {\r\n\t\r\n\t\tthis.actions.push( { action: 'moveTo', args: [ x, y ] } );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Path.prototype.lineTo = function ( x, y ) {\r\n\t\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\t\r\n\t\tvar curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );\r\n\t\tthis.curves.push( curve );\r\n\t\r\n\t\tthis.actions.push( { action: 'lineTo', args: [ x, y ] } );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {\r\n\t\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\t\r\n\t\tvar curve = new THREE.QuadraticBezierCurve(\r\n\t\t\tnew THREE.Vector2( x0, y0 ),\r\n\t\t\tnew THREE.Vector2( aCPx, aCPy ),\r\n\t\t\tnew THREE.Vector2( aX, aY )\r\n\t\t);\r\n\t\r\n\t\tthis.curves.push( curve );\r\n\t\r\n\t\tthis.actions.push( { action: 'quadraticCurveTo', args: [ aCPx, aCPy, aX, aY ] } );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\t\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\t\r\n\t\tvar curve = new THREE.CubicBezierCurve(\r\n\t\t\tnew THREE.Vector2( x0, y0 ),\r\n\t\t\tnew THREE.Vector2( aCP1x, aCP1y ),\r\n\t\t\tnew THREE.Vector2( aCP2x, aCP2y ),\r\n\t\t\tnew THREE.Vector2( aX, aY )\r\n\t\t);\r\n\t\r\n\t\tthis.curves.push( curve );\r\n\t\r\n\t\tthis.actions.push( { action: 'bezierCurveTo', args: [ aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ] } );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {\r\n\t\r\n\t\tvar args = Array.prototype.slice.call( arguments );\r\n\t\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\t\r\n\t\tvar npts = [ new THREE.Vector2( x0, y0 ) ];\r\n\t\tArray.prototype.push.apply( npts, pts );\r\n\t\r\n\t\tvar curve = new THREE.SplineCurve( npts );\r\n\t\tthis.curves.push( curve );\r\n\t\r\n\t\tthis.actions.push( { action: 'splineThru', args: args } );\r\n\t\r\n\t};\r\n\t\r\n\t// FUTURE: Change the API or follow canvas API?\r\n\t\r\n\tTHREE.Path.prototype.arc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\t\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\t\r\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\r\n\t\t\taStartAngle, aEndAngle, aClockwise );\r\n\t\r\n\t };\r\n\t\r\n\t THREE.Path.prototype.absarc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\t\r\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\t\r\n\t };\r\n\t\r\n\tTHREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\t\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\t\r\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\t\r\n\t };\r\n\t\r\n\t\r\n\tTHREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\t\r\n\t\tvar args = [\r\n\t\t\taX, aY,\r\n\t\t\txRadius, yRadius,\r\n\t\t\taStartAngle, aEndAngle,\r\n\t\t\taClockwise,\r\n\t\t\taRotation || 0 // aRotation is optional.\r\n\t\t];\r\n\t\r\n\t\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\t\tthis.curves.push( curve );\r\n\t\r\n\t\tvar lastPoint = curve.getPoint( 1 );\r\n\t\targs.push( lastPoint.x );\r\n\t\targs.push( lastPoint.y );\r\n\t\r\n\t\tthis.actions.push( { action: 'ellipse', args: args } );\r\n\t\r\n\t };\r\n\t\r\n\tTHREE.Path.prototype.getSpacedPoints = function ( divisions ) {\r\n\t\r\n\t\tif ( ! divisions ) divisions = 40;\r\n\t\r\n\t\tvar points = [];\r\n\t\r\n\t\tfor ( var i = 0; i < divisions; i ++ ) {\r\n\t\r\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\r\n\t\r\n\t\t\t//if ( !this.getPoint( i / divisions ) ) throw \"DIE\";\r\n\t\r\n\t\t}\r\n\t\r\n\t\tif ( this.autoClose ) {\r\n\t\r\n\t\t\tpoints.push( points[ 0 ] );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn points;\r\n\t\r\n\t};\r\n\t\r\n\t/* Return an array of vectors based on contour of the path */\r\n\t\r\n\tTHREE.Path.prototype.getPoints = function( divisions ) {\r\n\t\r\n\t\tdivisions = divisions || 12;\r\n\t\r\n\t\tvar b2 = THREE.ShapeUtils.b2;\r\n\t\tvar b3 = THREE.ShapeUtils.b3;\r\n\t\r\n\t\tvar points = [];\r\n\t\r\n\t\tvar cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,\r\n\t\t\tlaste, tx, ty;\r\n\t\r\n\t\tfor ( var i = 0, l = this.actions.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tvar item = this.actions[ i ];\r\n\t\r\n\t\t\tvar action = item.action;\r\n\t\t\tvar args = item.args;\r\n\t\r\n\t\t\tswitch ( action ) {\r\n\t\r\n\t\t\tcase 'moveTo':\r\n\t\r\n\t\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tcase 'lineTo':\r\n\t\r\n\t\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tcase 'quadraticCurveTo':\r\n\t\r\n\t\t\t\tcpx  = args[ 2 ];\r\n\t\t\t\tcpy  = args[ 3 ];\r\n\t\r\n\t\t\t\tcpx1 = args[ 0 ];\r\n\t\t\t\tcpy1 = args[ 1 ];\r\n\t\r\n\t\t\t\tif ( points.length > 0 ) {\r\n\t\r\n\t\t\t\t\tlaste = points[ points.length - 1 ];\r\n\t\r\n\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\tcpy0 = laste.y;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\t\r\n\t\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar t = j / divisions;\r\n\t\r\n\t\t\t\t\ttx = b2( t, cpx0, cpx1, cpx );\r\n\t\t\t\t\tty = b2( t, cpy0, cpy1, cpy );\r\n\t\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tcase 'bezierCurveTo':\r\n\t\r\n\t\t\t\tcpx  = args[ 4 ];\r\n\t\t\t\tcpy  = args[ 5 ];\r\n\t\r\n\t\t\t\tcpx1 = args[ 0 ];\r\n\t\t\t\tcpy1 = args[ 1 ];\r\n\t\r\n\t\t\t\tcpx2 = args[ 2 ];\r\n\t\t\t\tcpy2 = args[ 3 ];\r\n\t\r\n\t\t\t\tif ( points.length > 0 ) {\r\n\t\r\n\t\t\t\t\tlaste = points[ points.length - 1 ];\r\n\t\r\n\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\tcpy0 = laste.y;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\t\r\n\t\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\r\n\t\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar t = j / divisions;\r\n\t\r\n\t\t\t\t\ttx = b3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\t\tty = b3( t, cpy0, cpy1, cpy2, cpy );\r\n\t\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tcase 'splineThru':\r\n\t\r\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\t\r\n\t\t\t\tvar last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );\r\n\t\t\t\tvar spts = [ last ];\r\n\t\r\n\t\t\t\tvar n = divisions * args[ 0 ].length;\r\n\t\r\n\t\t\t\tspts = spts.concat( args[ 0 ] );\r\n\t\r\n\t\t\t\tvar spline = new THREE.SplineCurve( spts );\r\n\t\r\n\t\t\t\tfor ( var j = 1; j <= n; j ++ ) {\r\n\t\r\n\t\t\t\t\tpoints.push( spline.getPointAt( j / n ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tcase 'arc':\r\n\t\r\n\t\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\t\taRadius = args[ 2 ],\r\n\t\t\t\t\taStartAngle = args[ 3 ], aEndAngle = args[ 4 ],\r\n\t\t\t\t\taClockwise = !! args[ 5 ];\r\n\t\r\n\t\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\t\tvar angle;\r\n\t\t\t\tvar tdivisions = divisions * 2;\r\n\t\r\n\t\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar t = j / tdivisions;\r\n\t\r\n\t\t\t\t\tif ( ! aClockwise ) {\r\n\t\r\n\t\t\t\t\t\tt = 1 - t;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\t\r\n\t\t\t\t\ttx = aX + aRadius * Math.cos( angle );\r\n\t\t\t\t\tty = aY + aRadius * Math.sin( angle );\r\n\t\r\n\t\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\t\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t//console.log(points);\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\tcase 'ellipse':\r\n\t\r\n\t\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\t\txRadius = args[ 2 ],\r\n\t\t\t\t\tyRadius = args[ 3 ],\r\n\t\t\t\t\taStartAngle = args[ 4 ], aEndAngle = args[ 5 ],\r\n\t\t\t\t\taClockwise = !! args[ 6 ],\r\n\t\t\t\t\taRotation = args[ 7 ];\r\n\t\r\n\t\r\n\t\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\t\tvar angle;\r\n\t\t\t\tvar tdivisions = divisions * 2;\r\n\t\r\n\t\t\t\tvar cos, sin;\r\n\t\t\t\tif ( aRotation !== 0 ) {\r\n\t\r\n\t\t\t\t\tcos = Math.cos( aRotation );\r\n\t\t\t\t\tsin = Math.sin( aRotation );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar t = j / tdivisions;\r\n\t\r\n\t\t\t\t\tif ( ! aClockwise ) {\r\n\t\r\n\t\t\t\t\t\tt = 1 - t;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\t\r\n\t\t\t\t\ttx = aX + xRadius * Math.cos( angle );\r\n\t\t\t\t\tty = aY + yRadius * Math.sin( angle );\r\n\t\r\n\t\t\t\t\tif ( aRotation !== 0 ) {\r\n\t\r\n\t\t\t\t\t\tvar x = tx, y = ty;\r\n\t\r\n\t\t\t\t\t\t// Rotate the point about the center of the ellipse.\r\n\t\t\t\t\t\ttx = ( x - aX ) * cos - ( y - aY ) * sin + aX;\r\n\t\t\t\t\t\tty = ( x - aX ) * sin + ( y - aY ) * cos + aY;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\t\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t//console.log(points);\r\n\t\r\n\t\t\t\tbreak;\r\n\t\r\n\t\t\t} // end switch\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\r\n\t\t// Normalize to remove the closing point by default.\r\n\t\tvar lastPoint = points[ points.length - 1 ];\r\n\t\tif ( Math.abs( lastPoint.x - points[ 0 ].x ) < Number.EPSILON &&\r\n\t\t\t\t Math.abs( lastPoint.y - points[ 0 ].y ) < Number.EPSILON )\r\n\t\t\tpoints.splice( points.length - 1, 1 );\r\n\t\r\n\t\tif ( this.autoClose ) {\r\n\t\r\n\t\t\tpoints.push( points[ 0 ] );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn points;\r\n\t\r\n\t};\r\n\t\r\n\t//\r\n\t// Breaks path into shapes\r\n\t//\r\n\t//\tAssumptions (if parameter isCCW==true the opposite holds):\r\n\t//\t- solid shapes are defined clockwise (CW)\r\n\t//\t- holes are defined counterclockwise (CCW)\r\n\t//\r\n\t//\tIf parameter noHoles==true:\r\n\t//  - all subPaths are regarded as solid shapes\r\n\t//  - definition order CW/CCW has no relevance\r\n\t//\r\n\t\r\n\tTHREE.Path.prototype.toShapes = function( isCCW, noHoles ) {\r\n\t\r\n\t\tfunction extractSubpaths( inActions ) {\r\n\t\r\n\t\t\tvar subPaths = [], lastPath = new THREE.Path();\r\n\t\r\n\t\t\tfor ( var i = 0, l = inActions.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar item = inActions[ i ];\r\n\t\r\n\t\t\t\tvar args = item.args;\r\n\t\t\t\tvar action = item.action;\r\n\t\r\n\t\t\t\tif ( action === 'moveTo' ) {\r\n\t\r\n\t\t\t\t\tif ( lastPath.actions.length !== 0 ) {\r\n\t\r\n\t\t\t\t\t\tsubPaths.push( lastPath );\r\n\t\t\t\t\t\tlastPath = new THREE.Path();\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tlastPath[ action ].apply( lastPath, args );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( lastPath.actions.length !== 0 ) {\r\n\t\r\n\t\t\t\tsubPaths.push( lastPath );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// console.log(subPaths);\r\n\t\r\n\t\t\treturn\tsubPaths;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction toShapesNoHoles( inSubpaths ) {\r\n\t\r\n\t\t\tvar shapes = [];\r\n\t\r\n\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar tmpPath = inSubpaths[ i ];\r\n\t\r\n\t\t\t\tvar tmpShape = new THREE.Shape();\r\n\t\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\t\r\n\t\t\t\tshapes.push( tmpShape );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t//console.log(\"shape\", shapes);\r\n\t\r\n\t\t\treturn shapes;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\r\n\t\r\n\t\t\tvar polyLen = inPolygon.length;\r\n\t\r\n\t\t\t// inPt on polygon contour => immediate success    or\r\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\r\n\t\t\t//  with the horizontal line through inPt, left of inPt\r\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\r\n\t\t\tvar inside = false;\r\n\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\r\n\t\r\n\t\t\t\tvar edgeLowPt  = inPolygon[ p ];\r\n\t\t\t\tvar edgeHighPt = inPolygon[ q ];\r\n\t\r\n\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\r\n\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\r\n\t\r\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\r\n\t\r\n\t\t\t\t\t// not parallel\r\n\t\t\t\t\tif ( edgeDy < 0 ) {\r\n\t\r\n\t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\r\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\r\n\t\r\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\r\n\t\r\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\r\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\r\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// parallel or collinear\r\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\r\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\r\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\r\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\r\n\t\t\t\t\t// continue;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn\tinside;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar isClockWise = THREE.ShapeUtils.isClockWise;\r\n\t\r\n\t\tvar subPaths = extractSubpaths( this.actions );\r\n\t\tif ( subPaths.length === 0 ) return [];\r\n\t\r\n\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\r\n\t\r\n\t\r\n\t\tvar solid, tmpPath, tmpShape, shapes = [];\r\n\t\r\n\t\tif ( subPaths.length === 1 ) {\r\n\t\r\n\t\t\ttmpPath = subPaths[ 0 ];\r\n\t\t\ttmpShape = new THREE.Shape();\r\n\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\ttmpShape.curves = tmpPath.curves;\r\n\t\t\tshapes.push( tmpShape );\r\n\t\t\treturn shapes;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\r\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\r\n\t\r\n\t\t// console.log(\"Holes first\", holesFirst);\r\n\t\r\n\t\tvar betterShapeHoles = [];\r\n\t\tvar newShapes = [];\r\n\t\tvar newShapeHoles = [];\r\n\t\tvar mainIdx = 0;\r\n\t\tvar tmpPoints;\r\n\t\r\n\t\tnewShapes[ mainIdx ] = undefined;\r\n\t\tnewShapeHoles[ mainIdx ] = [];\r\n\t\r\n\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\r\n\t\r\n\t\t\ttmpPath = subPaths[ i ];\r\n\t\t\ttmpPoints = tmpPath.getPoints();\r\n\t\t\tsolid = isClockWise( tmpPoints );\r\n\t\t\tsolid = isCCW ? ! solid : solid;\r\n\t\r\n\t\t\tif ( solid ) {\r\n\t\r\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\r\n\t\r\n\t\t\t\tnewShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };\r\n\t\t\t\tnewShapes[ mainIdx ].s.actions = tmpPath.actions;\r\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\r\n\t\r\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\r\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\r\n\t\r\n\t\t\t\t//console.log('cw', i);\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\r\n\t\r\n\t\t\t\t//console.log('ccw', i);\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// only Holes? -> probably all Shapes with wrong orientation\r\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\r\n\t\r\n\t\r\n\t\tif ( newShapes.length > 1 ) {\r\n\t\r\n\t\t\tvar ambiguous = false;\r\n\t\t\tvar toChange = [];\r\n\t\r\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\t\r\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\t\r\n\t\t\t\tvar sho = newShapeHoles[ sIdx ];\r\n\t\r\n\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\r\n\t\r\n\t\t\t\t\tvar ho = sho[ hIdx ];\r\n\t\t\t\t\tvar hole_unassigned = true;\r\n\t\r\n\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\r\n\t\r\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\r\n\t\r\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\r\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\r\n\t\r\n\t\t\t\t\t\t\t\thole_unassigned = false;\r\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\r\n\t\r\n\t\t\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\t\t\tambiguous = true;\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( hole_unassigned ) {\r\n\t\r\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\t\t// console.log(\"ambiguous: \", ambiguous);\r\n\t\t\tif ( toChange.length > 0 ) {\r\n\t\r\n\t\t\t\t// console.log(\"to change: \", toChange);\r\n\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar tmpHoles;\r\n\t\r\n\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\r\n\t\r\n\t\t\ttmpShape = newShapes[ i ].s;\r\n\t\t\tshapes.push( tmpShape );\r\n\t\t\ttmpHoles = newShapeHoles[ i ];\r\n\t\r\n\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t//console.log(\"shape\", shapes);\r\n\t\r\n\t\treturn shapes;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/core/Shape.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * Defines a 2d shape plane using paths.\r\n\t **/\r\n\t\r\n\t// STEP 1 Create a path.\r\n\t// STEP 2 Turn path into shape.\r\n\t// STEP 3 ExtrudeGeometry takes in Shape/Shapes\r\n\t// STEP 3a - Extract points from each shape, turn to vertices\r\n\t// STEP 3b - Triangulate each shape, add faces.\r\n\t\r\n\tTHREE.Shape = function () {\r\n\t\r\n\t\tTHREE.Path.apply( this, arguments );\r\n\t\r\n\t\tthis.holes = [];\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Shape.prototype = Object.create( THREE.Path.prototype );\r\n\tTHREE.Shape.prototype.constructor = THREE.Shape;\r\n\t\r\n\t// Convenience method to return ExtrudeGeometry\r\n\t\r\n\tTHREE.Shape.prototype.extrude = function ( options ) {\r\n\t\r\n\t\treturn new THREE.ExtrudeGeometry( this, options );\r\n\t\r\n\t};\r\n\t\r\n\t// Convenience method to return ShapeGeometry\r\n\t\r\n\tTHREE.Shape.prototype.makeGeometry = function ( options ) {\r\n\t\r\n\t\treturn new THREE.ShapeGeometry( this, options );\r\n\t\r\n\t};\r\n\t\r\n\t// Get points of holes\r\n\t\r\n\tTHREE.Shape.prototype.getPointsHoles = function ( divisions ) {\r\n\t\r\n\t\tvar holesPts = [];\r\n\t\r\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn holesPts;\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\t// Get points of shape and holes (keypoints based on segments parameter)\r\n\t\r\n\tTHREE.Shape.prototype.extractAllPoints = function ( divisions ) {\r\n\t\r\n\t\treturn {\r\n\t\r\n\t\t\tshape: this.getPoints( divisions ),\r\n\t\t\tholes: this.getPointsHoles( divisions )\r\n\t\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.Shape.prototype.extractPoints = function ( divisions ) {\r\n\t\r\n\t\treturn this.extractAllPoints( divisions );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/curves/LineCurve.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tLine\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.LineCurve = function ( v1, v2 ) {\r\n\t\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\tTHREE.LineCurve.prototype.constructor = THREE.LineCurve;\r\n\t\r\n\tTHREE.LineCurve.prototype.getPoint = function ( t ) {\r\n\t\r\n\t\tvar point = this.v2.clone().sub( this.v1 );\r\n\t\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\t\r\n\t\treturn point;\r\n\t\r\n\t};\r\n\t\r\n\t// Line curve is linear, so we can overwrite default getPointAt\r\n\t\r\n\tTHREE.LineCurve.prototype.getPointAt = function ( u ) {\r\n\t\r\n\t\treturn this.getPoint( u );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LineCurve.prototype.getTangent = function( t ) {\r\n\t\r\n\t\tvar tangent = this.v2.clone().sub( this.v1 );\r\n\t\r\n\t\treturn tangent.normalize();\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/curves/QuadraticBezierCurve.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tQuadratic Bezier curve\r\n\t **************************************************************/\r\n\t\r\n\t\r\n\tTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\r\n\t\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\tTHREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;\r\n\t\r\n\t\r\n\tTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\r\n\t\r\n\t\tvar b2 = THREE.ShapeUtils.b2;\r\n\t\r\n\t\treturn new THREE.Vector2(\r\n\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\r\n\t\r\n\t\tvar tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;\r\n\t\r\n\t\treturn new THREE.Vector2(\r\n\t\t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\r\n\t\t).normalize();\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/curves/CubicBezierCurve.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tCubic Bezier curve\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\r\n\t\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\t\tthis.v3 = v3;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\tTHREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;\r\n\t\r\n\tTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\r\n\t\r\n\t\tvar b3 = THREE.ShapeUtils.b3;\r\n\t\r\n\t\treturn new THREE.Vector2( \r\n\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\r\n\t\r\n\t\tvar tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;\r\n\t\r\n\t\treturn new THREE.Vector2( \r\n\t\t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\r\n\t\t).normalize();\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/curves/SplineCurve.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tSpline curve\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\r\n\t\r\n\t\tthis.points = ( points == undefined ) ? [] : points;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\tTHREE.SplineCurve.prototype.constructor = THREE.SplineCurve;\r\n\t\r\n\tTHREE.SplineCurve.prototype.getPoint = function ( t ) {\r\n\t\r\n\t\tvar points = this.points;\r\n\t\tvar point = ( points.length - 1 ) * t;\r\n\t\r\n\t\tvar intPoint = Math.floor( point );\r\n\t\tvar weight = point - intPoint;\r\n\t\r\n\t\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\r\n\t\tvar point1 = points[ intPoint ];\r\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\t\r\n\t\tvar interpolate = THREE.CurveUtils.interpolate;\r\n\t\r\n\t\treturn new THREE.Vector2(\r\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\r\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\r\n\t\t);\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/curves/EllipseCurve.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tEllipse curve\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\t\r\n\t\tthis.aX = aX;\r\n\t\tthis.aY = aY;\r\n\t\r\n\t\tthis.xRadius = xRadius;\r\n\t\tthis.yRadius = yRadius;\r\n\t\r\n\t\tthis.aStartAngle = aStartAngle;\r\n\t\tthis.aEndAngle = aEndAngle;\r\n\t\r\n\t\tthis.aClockwise = aClockwise;\r\n\t\t\r\n\t\tthis.aRotation = aRotation || 0;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\r\n\tTHREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;\r\n\t\r\n\tTHREE.EllipseCurve.prototype.getPoint = function ( t ) {\r\n\t\r\n\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\t\r\n\t\tif ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;\r\n\t\tif ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;\r\n\t\r\n\t\tvar angle;\r\n\t\r\n\t\tif ( this.aClockwise === true ) {\r\n\t\r\n\t\t\tangle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tangle = this.aStartAngle + t * deltaAngle;\r\n\t\r\n\t\t}\r\n\t\t\r\n\t\tvar x = this.aX + this.xRadius * Math.cos( angle );\r\n\t\tvar y = this.aY + this.yRadius * Math.sin( angle );\r\n\t\r\n\t\tif ( this.aRotation !== 0 ) {\r\n\t\r\n\t\t\tvar cos = Math.cos( this.aRotation );\r\n\t\t\tvar sin = Math.sin( this.aRotation );\r\n\t\r\n\t\t\tvar tx = x, ty = y;\r\n\t\r\n\t\t\t// Rotate the point about the center of the ellipse.\r\n\t\t\tx = ( tx - this.aX ) * cos - ( ty - this.aY ) * sin + this.aX;\r\n\t\t\ty = ( tx - this.aX ) * sin + ( ty - this.aY ) * cos + this.aY;\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn new THREE.Vector2( x, y );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/curves/ArcCurve.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tArc curve\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\t\r\n\t\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\r\n\tTHREE.ArcCurve.prototype.constructor = THREE.ArcCurve;\r\n\t\r\n\t// File:src/extras/curves/LineCurve3.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tLine3D\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.LineCurve3 = THREE.Curve.create(\r\n\t\r\n\t\tfunction ( v1, v2 ) {\r\n\t\r\n\t\t\tthis.v1 = v1;\r\n\t\t\tthis.v2 = v2;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfunction ( t ) {\r\n\t\r\n\t\t\tvar vector = new THREE.Vector3();\r\n\t\r\n\t\t\tvector.subVectors( this.v2, this.v1 ); // diff\r\n\t\t\tvector.multiplyScalar( t );\r\n\t\t\tvector.add( this.v1 );\r\n\t\r\n\t\t\treturn vector;\r\n\t\r\n\t\t}\r\n\t\r\n\t);\r\n\t\r\n\t// File:src/extras/curves/QuadraticBezierCurve3.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tQuadratic Bezier 3D curve\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\r\n\t\r\n\t\tfunction ( v0, v1, v2 ) {\r\n\t\r\n\t\t\tthis.v0 = v0;\r\n\t\t\tthis.v1 = v1;\r\n\t\t\tthis.v2 = v2;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfunction ( t ) {\r\n\t\r\n\t\t\tvar b2 = THREE.ShapeUtils.b2;\t\t\r\n\t\r\n\t\t\treturn new THREE.Vector3(\r\n\t\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\r\n\t\t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\r\n\t\t\t);\r\n\t\r\n\t\t}\r\n\t\r\n\t);\r\n\t\r\n\t// File:src/extras/curves/CubicBezierCurve3.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tCubic Bezier 3D curve\r\n\t **************************************************************/\r\n\t\r\n\tTHREE.CubicBezierCurve3 = THREE.Curve.create(\r\n\t\r\n\t\tfunction ( v0, v1, v2, v3 ) {\r\n\t\r\n\t\t\tthis.v0 = v0;\r\n\t\t\tthis.v1 = v1;\r\n\t\t\tthis.v2 = v2;\r\n\t\t\tthis.v3 = v3;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfunction ( t ) {\r\n\t\r\n\t\t\tvar b3 = THREE.ShapeUtils.b3;\r\n\t\r\n\t\t\treturn new THREE.Vector3(\r\n\t\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\r\n\t\t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\r\n\t\t\t);\r\n\t\r\n\t\t}\r\n\t\r\n\t);\r\n\t\r\n\t// File:src/extras/curves/SplineCurve3.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tSpline 3D curve\r\n\t **************************************************************/\r\n\t\r\n\t\r\n\tTHREE.SplineCurve3 = THREE.Curve.create(\r\n\t\r\n\t\tfunction ( points /* array of Vector3 */ ) {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\r\n\t\t\tthis.points = ( points == undefined ) ? [] : points;\r\n\t\r\n\t\t},\r\n\t\r\n\t\tfunction ( t ) {\r\n\t\r\n\t\t\tvar points = this.points;\r\n\t\t\tvar point = ( points.length - 1 ) * t;\r\n\t\r\n\t\t\tvar intPoint = Math.floor( point );\r\n\t\t\tvar weight = point - intPoint;\r\n\t\r\n\t\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\r\n\t\t\tvar point1 = points[ intPoint ];\r\n\t\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\t\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\t\r\n\t\t\tvar interpolate = THREE.CurveUtils.interpolate;\r\n\t\r\n\t\t\treturn new THREE.Vector3(\r\n\t\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\r\n\t\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\r\n\t\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\r\n\t\t\t);\r\n\t\r\n\t\t}\r\n\t\r\n\t);\r\n\t\r\n\t// File:src/extras/curves/CatmullRomCurve3.js\r\n\t\r\n\t/**\r\n\t * @author zz85 https://github.com/zz85\r\n\t *\r\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\r\n\t * cusps and self-intersections in non-uniform catmull rom curves.\r\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n\t *\r\n\t * curve.type accepts centripetal(default), chordal and catmullrom\r\n\t * curve.tension is used for catmullrom which defaults to 0.5\r\n\t */\r\n\t\r\n\tTHREE.CatmullRomCurve3 = ( function() {\r\n\t\r\n\t\tvar\r\n\t\t\ttmp = new THREE.Vector3(),\r\n\t\t\tpx = new CubicPoly(),\r\n\t\t\tpy = new CubicPoly(),\r\n\t\t\tpz = new CubicPoly();\r\n\t\r\n\t\t/*\r\n\t\tBased on an optimized c++ solution in\r\n\t\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n\t\t - http://ideone.com/NoEbVM\r\n\t\r\n\t\tThis CubicPoly class could be used for reusing some variables and calculations,\r\n\t\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\r\n\t\twhich can be placed in CurveUtils.\r\n\t\t*/\r\n\t\r\n\t\tfunction CubicPoly() {\r\n\t\r\n\t\t}\r\n\t\r\n\t\t/*\r\n\t\t * Compute coefficients for a cubic polynomial\r\n\t\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n\t\t * such that\r\n\t\t *   p(0) = x0, p(1) = x1\r\n\t\t *  and\r\n\t\t *   p'(0) = t0, p'(1) = t1.\r\n\t\t */\r\n\t\tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\r\n\t\r\n\t\t\tthis.c0 = x0;\r\n\t\t\tthis.c1 = t0;\r\n\t\t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n\t\t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n\t\r\n\t\t};\r\n\t\r\n\t\tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\r\n\t\r\n\t\t\t// compute tangents when parameterized in [t1,t2]\r\n\t\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\r\n\t\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\r\n\t\r\n\t\t\t// rescale tangents for parametrization in [0,1]\r\n\t\t\tt1 *= dt1;\r\n\t\t\tt2 *= dt1;\r\n\t\r\n\t\t\t// initCubicPoly\r\n\t\t\tthis.init( x1, x2, t1, t2 );\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\r\n\t\tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\r\n\t\r\n\t\t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\r\n\t\r\n\t\t};\r\n\t\r\n\t\tCubicPoly.prototype.calc = function( t ) {\r\n\t\r\n\t\t\tvar t2 = t * t;\r\n\t\t\tvar t3 = t2 * t;\r\n\t\t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\r\n\t\r\n\t\t};\r\n\t\r\n\t\t// Subclass Three.js curve\r\n\t\treturn THREE.Curve.create(\r\n\t\r\n\t\t\tfunction ( p /* array of Vector3 */ ) {\r\n\t\r\n\t\t\t\tthis.points = p || [];\r\n\t\t\t\tthis.closed = false;\r\n\t\r\n\t\t\t},\r\n\t\r\n\t\t\tfunction ( t ) {\r\n\t\r\n\t\t\t\tvar points = this.points,\r\n\t\t\t\t\tpoint, intPoint, weight, l;\r\n\t\r\n\t\t\t\tl = points.length;\r\n\t\r\n\t\t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\r\n\t\r\n\t\t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\r\n\t\t\t\tintPoint = Math.floor( point );\r\n\t\t\t\tweight = point - intPoint;\r\n\t\r\n\t\t\t\tif ( this.closed ) {\r\n\t\r\n\t\t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\r\n\t\r\n\t\t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\r\n\t\r\n\t\t\t\t\tintPoint = l - 2;\r\n\t\t\t\t\tweight = 1;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar p0, p1, p2, p3; // 4 points\r\n\t\r\n\t\t\t\tif ( this.closed || intPoint > 0 ) {\r\n\t\r\n\t\t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// extrapolate first point\r\n\t\t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\r\n\t\t\t\t\tp0 = tmp;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tp1 = points[ intPoint % l ];\r\n\t\t\t\tp2 = points[ ( intPoint + 1 ) % l ];\r\n\t\r\n\t\t\t\tif ( this.closed || intPoint + 2 < l ) {\r\n\t\r\n\t\t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// extrapolate last point\r\n\t\t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\r\n\t\t\t\t\tp3 = tmp;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\r\n\t\r\n\t\t\t\t\t// init Centripetal / Chordal Catmull-Rom\r\n\t\t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\r\n\t\t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\r\n\t\t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\r\n\t\t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\r\n\t\r\n\t\t\t\t\t// safety check for repeated points\r\n\t\t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\r\n\t\t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\r\n\t\t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\r\n\t\r\n\t\t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\r\n\t\t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\r\n\t\t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\r\n\t\r\n\t\t\t\t} else if ( this.type === 'catmullrom' ) {\r\n\t\r\n\t\t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\r\n\t\t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\r\n\t\t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\r\n\t\t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar v = new THREE.Vector3(\r\n\t\t\t\t\tpx.calc( weight ),\r\n\t\t\t\t\tpy.calc( weight ),\r\n\t\t\t\t\tpz.calc( weight )\r\n\t\t\t\t);\r\n\t\r\n\t\t\t\treturn v;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t);\r\n\t\r\n\t} )();\r\n\t\r\n\t// File:src/extras/curves/ClosedSplineCurve3.js\r\n\t\r\n\t/**************************************************************\r\n\t *\tClosed Spline 3D curve\r\n\t **************************************************************/\r\n\t\r\n\t\r\n\tTHREE.ClosedSplineCurve3 = function ( points ) {\r\n\t\r\n\t\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\r\n\t\r\n\t\tTHREE.CatmullRomCurve3.call( this, points );\r\n\t\tthis.type = 'catmullrom';\r\n\t\tthis.closed = true;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ClosedSplineCurve3.prototype = Object.create( THREE.CatmullRomCurve3.prototype );\r\n\t\r\n\t// File:src/extras/geometries/BoxGeometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\r\n\t */\r\n\t\r\n\tTHREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'BoxGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\tdepth: depth,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tdepthSegments: depthSegments\r\n\t\t};\r\n\t\r\n\t\tthis.fromBufferGeometry( new THREE.BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\r\n\t\tthis.mergeVertices();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;\r\n\t\r\n\tTHREE.CubeGeometry = THREE.BoxGeometry;\r\n\t\r\n\t// File:src/extras/geometries/BoxBufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\t\r\n\tTHREE.BoxBufferGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthis.type = 'BoxBufferGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\tdepth: depth,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tdepthSegments: depthSegments\r\n\t\t};\r\n\t\r\n\t\tvar scope = this;\r\n\t\r\n\t\t// segments\r\n\t\twidthSegments = Math.floor( widthSegments ) || 1;\r\n\t\theightSegments = Math.floor( heightSegments ) || 1;\r\n\t\tdepthSegments = Math.floor( depthSegments ) || 1;\r\n\t\r\n\t\t// these are used to calculate buffer length\r\n\t\tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\r\n\t\tvar indexCount = ( vertexCount / 4 ) * 6;\r\n\t\r\n\t\t// buffers\r\n\t\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\r\n\t\tvar vertices = new Float32Array( vertexCount * 3 );\r\n\t\tvar normals = new Float32Array( vertexCount * 3 );\r\n\t\tvar uvs = new Float32Array( vertexCount * 2 );\r\n\t\r\n\t\t// offset variables\r\n\t\tvar vertexBufferOffset = 0;\r\n\t\tvar uvBufferOffset = 0;\r\n\t\tvar indexBufferOffset = 0;\r\n\t\tvar numberOfVertices = 0;\r\n\t\r\n\t\t// group variables\r\n\t\tvar groupStart = 0;\r\n\t\r\n\t\t// build each side of the box geometry\r\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\r\n\t\tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\r\n\t\tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\r\n\t\tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\r\n\t\tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\r\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\r\n\t\r\n\t\t// build geometry\r\n\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\t\r\n\t\t// helper functions\r\n\t\r\n\t\tfunction calculateVertexCount ( w, h, d ) {\r\n\t\r\n\t\t\tvar segments = 0;\r\n\t\r\n\t\t\t// calculate the amount of segments for each side\r\n\t\t\tsegments += w * h * 2; // xy\r\n\t\t\tsegments += w * d * 2; // xz\r\n\t\t\tsegments += d * h * 2; // zy\r\n\t\r\n\t\t\treturn segments * 4; // four vertices per segments\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction buildPlane ( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\r\n\t\r\n\t\t\tvar segmentWidth\t= width / gridX;\r\n\t\t\tvar segmentHeight = height / gridY;\r\n\t\r\n\t\t\tvar widthHalf = width / 2;\r\n\t\t\tvar heightHalf = height / 2;\r\n\t\t\tvar depthHalf = depth / 2;\r\n\t\r\n\t\t\tvar gridX1 = gridX + 1;\r\n\t\t\tvar gridY1 = gridY + 1;\r\n\t\r\n\t\t\tvar vertexCounter = 0;\r\n\t\t\tvar groupCount = 0;\r\n\t\r\n\t\t\tvar vector = new THREE.Vector3();\r\n\t\r\n\t\t\t// generate vertices, normals and uvs\r\n\t\r\n\t\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\r\n\t\r\n\t\t\t\tvar y = iy * segmentHeight - heightHalf;\r\n\t\r\n\t\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\r\n\t\r\n\t\t\t\t\tvar x = ix * segmentWidth - widthHalf;\r\n\t\r\n\t\t\t\t\t// set values to correct vector component\r\n\t\t\t\t\tvector[ u ] = x * udir;\r\n\t\t\t\t\tvector[ v ] = y * vdir;\r\n\t\t\t\t\tvector[ w ] = depthHalf;\r\n\t\r\n\t\t\t\t\t// now apply vector to vertex buffer\r\n\t\t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\r\n\t\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\r\n\t\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\r\n\t\r\n\t\t\t\t\t// set values to correct vector component\r\n\t\t\t\t\tvector[ u ] = 0;\r\n\t\t\t\t\tvector[ v ] = 0;\r\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\r\n\t\r\n\t\t\t\t\t// now apply vector to normal buffer\r\n\t\t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\r\n\t\t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\r\n\t\t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\r\n\t\r\n\t\t\t\t\t// uvs\r\n\t\t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\r\n\t\t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\r\n\t\r\n\t\t\t\t\t// update offsets and counters\r\n\t\t\t\t\tvertexBufferOffset += 3;\r\n\t\t\t\t\tuvBufferOffset += 2;\r\n\t\t\t\t\tvertexCounter += 1;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// 1. you need three indices to draw a single face\r\n\t\t\t// 2. a single segment consists of two faces\r\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\r\n\t\r\n\t\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\r\n\t\r\n\t\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\t\r\n\t\t\t\t\t// indices\r\n\t\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\r\n\t\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\r\n\t\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\r\n\t\r\n\t\t\t\t\t// face one\r\n\t\t\t\t\tindices[ indexBufferOffset ] = a;\r\n\t\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\r\n\t\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\r\n\t\r\n\t\t\t\t\t// face two\r\n\t\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\r\n\t\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\r\n\t\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\r\n\t\r\n\t\t\t\t\t// update offsets and counters\r\n\t\t\t\t\tindexBufferOffset += 6;\r\n\t\t\t\t\tgroupCount += 6;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\r\n\t\r\n\t\t\t// calculate new start value for groups\r\n\t\t\tgroupStart += groupCount;\r\n\t\r\n\t\t\t// update total number of vertices\r\n\t\t\tnumberOfVertices += vertexCounter;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BoxBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.BoxBufferGeometry.prototype.constructor = THREE.BoxBufferGeometry;\r\n\t\r\n\t// File:src/extras/geometries/CircleGeometry.js\r\n\t\r\n\t/**\r\n\t * @author hughes\r\n\t */\r\n\t\r\n\tTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'CircleGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tsegments: segments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\t\r\n\t\tthis.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;\r\n\t\r\n\t// File:src/extras/geometries/CircleBufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t */\r\n\t\r\n\tTHREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthis.type = 'CircleBufferGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tsegments: segments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\t\r\n\t\tradius = radius || 50;\r\n\t\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\r\n\t\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\t\r\n\t\tvar vertices = segments + 2;\r\n\t\r\n\t\tvar positions = new Float32Array( vertices * 3 );\r\n\t\tvar normals = new Float32Array( vertices * 3 );\r\n\t\tvar uvs = new Float32Array( vertices * 2 );\r\n\t\r\n\t\t// center data is already zero, but need to set a few extras\r\n\t\tnormals[ 2 ] = 1.0;\r\n\t\tuvs[ 0 ] = 0.5;\r\n\t\tuvs[ 1 ] = 0.5;\r\n\t\r\n\t\tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\r\n\t\r\n\t\t\tvar segment = thetaStart + s / segments * thetaLength;\r\n\t\r\n\t\t\tpositions[ i ] = radius * Math.cos( segment );\r\n\t\t\tpositions[ i + 1 ] = radius * Math.sin( segment );\r\n\t\r\n\t\t\tnormals[ i + 2 ] = 1; // normal z\r\n\t\r\n\t\t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\r\n\t\t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar indices = [];\r\n\t\r\n\t\tfor ( var i = 1; i <= segments; i ++ ) {\r\n\t\r\n\t\t\tindices.push( i, i + 1, 0 );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\t\r\n\t\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;\r\n\t\r\n\t// File:src/extras/geometries/CylinderBufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\t\r\n\tTHREE.CylinderBufferGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthis.type = 'CylinderBufferGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradiusTop: radiusTop,\r\n\t\t\tradiusBottom: radiusBottom,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\t\r\n\t\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\r\n\t\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\r\n\t\theight = height !== undefined ? height : 100;\r\n\t\r\n\t\tradialSegments = Math.floor( radialSegments )  || 8;\r\n\t\theightSegments = Math.floor( heightSegments ) || 1;\r\n\t\r\n\t\topenEnded = openEnded !== undefined ? openEnded : false;\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : 2 * Math.PI;\r\n\t\r\n\t\t// used to calculate buffer length\r\n\t\r\n\t\tvar vertexCount = calculateVertexCount();\r\n\t\tvar indexCount = calculateIndexCount();\r\n\t\r\n\t\t// buffers\r\n\t\r\n\t\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\r\n\t\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\t\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\t\r\n\t\t// helper variables\r\n\t\r\n\t\tvar index = 0, indexOffset = 0, indexArray = [], halfHeight = height / 2;\r\n\t\r\n\t\t// generate geometry\r\n\t\r\n\t\tgenerateTorso();\r\n\t\r\n\t\tif( openEnded === false ) {\r\n\t\r\n\t\t\tif( radiusTop > 0 ) {\r\n\t\r\n\t\t\t\tgenerateCap( true );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif( radiusBottom > 0 ) {\r\n\t\r\n\t\t\t\tgenerateCap( false );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// build geometry\r\n\t\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', vertices );\r\n\t\tthis.addAttribute( 'normal', normals );\r\n\t\tthis.addAttribute( 'uv', uvs );\r\n\t\r\n\t\t// helper functions\r\n\t\r\n\t\tfunction calculateVertexCount () {\r\n\t\r\n\t\t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\r\n\t\r\n\t\t\tif ( openEnded === false ) {\r\n\t\r\n\t\t\t\tcount += ( ( radialSegments + 1 ) * 2 ) + ( radialSegments * 2 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn count;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction calculateIndexCount () {\r\n\t\r\n\t\t\tvar count = radialSegments * heightSegments * 2 * 3;\r\n\t\r\n\t\t\tif ( openEnded === false ) {\r\n\t\r\n\t\t\t\tcount += radialSegments * 2 * 3;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn count;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction generateTorso () {\r\n\t\r\n\t\t\tvar x, y;\r\n\t\t\tvar normal = new THREE.Vector3();\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\t\r\n\t\t\t// this will be used to calculate the normal\r\n\t\t\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\r\n\t\r\n\t\t\t// generate vertices, normals and uvs\r\n\t\r\n\t\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\r\n\t\r\n\t\t\t\tvar indexRow = [];\r\n\t\r\n\t\t\t\tvar v = y / heightSegments;\r\n\t\r\n\t\t\t\t// calculate the radius of the current row\r\n\t\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\r\n\t\r\n\t\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\t\r\n\t\t\t\t\tvar u = x / radialSegments;\r\n\t\r\n\t\t\t\t\t// vertex\r\n\t\t\t\t\tvertex.x = radius * Math.sin( u * thetaLength + thetaStart );\r\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\r\n\t\t\t\t\tvertex.z = radius * Math.cos( u * thetaLength + thetaStart );\r\n\t\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\t\r\n\t\t\t\t\t// normal\r\n\t\t\t\t\tnormal.copy( vertex );\r\n\t\r\n\t\t\t\t\t// handle special case if radiusTop/radiusBottom is zero\r\n\t\t\t\t\tif( ( radiusTop === 0  && y === 0 ) || ( radiusBottom === 0  && y === heightSegments ) ) {\r\n\t\r\n\t\t\t\t\t\tnormal.x = Math.sin( u * thetaLength + thetaStart );\r\n\t\t\t\t\t\tnormal.z = Math.cos( u * thetaLength + thetaStart );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tnormal.setY( Math.sqrt( normal.x * normal.x + normal.z * normal.z ) * tanTheta ).normalize();\r\n\t\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\t\r\n\t\t\t\t\t// uv\r\n\t\t\t\t\tuvs.setXY( index, u, 1 - v );\r\n\t\r\n\t\t\t\t\t// save index of vertex in respective row\r\n\t\t\t\t\tindexRow.push( index );\r\n\t\r\n\t\t\t\t\t// increase index\r\n\t\t\t\t\tindex ++;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// now save vertices of the row in our index array\r\n\t\t\t\tindexArray.push( indexRow );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// generate indices\r\n\t\r\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\t\r\n\t\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\r\n\t\r\n\t\t\t\t\t// we use the index array to access the correct indices\r\n\t\t\t\t\tvar i1 = indexArray[ y ][ x ];\r\n\t\t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\r\n\t\t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\r\n\t\t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\r\n\t\r\n\t\t\t\t\t// face one\r\n\t\t\t\t\tindices.setX( indexOffset, i1 ); indexOffset++;\r\n\t\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset++;\r\n\t\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset++;\r\n\t\r\n\t\t\t\t\t// face two\r\n\t\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset++;\r\n\t\t\t\t\tindices.setX( indexOffset, i3 ); indexOffset++;\r\n\t\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset++;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction generateCap ( top ) {\r\n\t\r\n\t\t\tvar x, centerIndexStart, centerIndexEnd;\r\n\t\t\tvar uv = new THREE.Vector2();\r\n\t\t\tvar vertex = new THREE.Vector3();\r\n\t\r\n\t\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\r\n\t\t\tvar sign = ( top === true ) ? 1 : - 1;\r\n\t\r\n\t\t\t// save the index of the first center vertex\r\n\t\t\tcenterIndexStart = index;\r\n\t\r\n\t\t\t// first we generate the center vertex data of the cap.\r\n\t\t\t// because the geometry needs one set of uvs per face,\r\n\t\t\t// we must generate a center vertex per face/segment\r\n\t\r\n\t\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\r\n\t\r\n\t\t\t\t// vertex\r\n\t\t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\r\n\t\r\n\t\t\t\t// normal\r\n\t\t\t\tnormals.setXYZ( index, 0, sign, 0 );\r\n\t\r\n\t\t\t\t// uv\r\n\t\t\t\tif( top === true ) {\r\n\t\r\n\t\t\t\t\tuv.x = x / radialSegments;\r\n\t\t\t\t\tuv.y = 0;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tuv.x = ( x - 1 ) / radialSegments;\r\n\t\t\t\t\tuv.y = 1;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\t\r\n\t\t\t\t// increase index\r\n\t\t\t\tindex++;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// save the index of the last center vertex\r\n\t\t\tcenterIndexEnd = index;\r\n\t\r\n\t\t\t// now we generate the surrounding vertices, normals and uvs\r\n\t\r\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\t\r\n\t\t\t\tvar u = x / radialSegments;\r\n\t\r\n\t\t\t\t// vertex\r\n\t\t\t\tvertex.x = radius * Math.sin( u * thetaLength + thetaStart );\r\n\t\t\t\tvertex.y = halfHeight * sign;\r\n\t\t\t\tvertex.z = radius * Math.cos( u * thetaLength + thetaStart );\r\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\t\r\n\t\t\t\t// normal\r\n\t\t\t\tnormals.setXYZ( index, 0, sign, 0 );\r\n\t\r\n\t\t\t\t// uv\r\n\t\t\t\tuvs.setXY( index, u, ( top === true ) ? 1 : 0 );\r\n\t\r\n\t\t\t\t// increase index\r\n\t\t\t\tindex ++;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// generate indices\r\n\t\r\n\t\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\t\r\n\t\t\t\tvar c = centerIndexStart + x;\r\n\t\t\t\tvar i = centerIndexEnd + x;\r\n\t\r\n\t\t\t\tif( top === true ) {\r\n\t\r\n\t\t\t\t\t// face top\r\n\t\t\t\t\tindices.setX( indexOffset, i ); indexOffset++;\r\n\t\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset++;\r\n\t\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// face bottom\r\n\t\t\t\t\tindices.setX( indexOffset, i + 1); indexOffset++;\r\n\t\t\t\t\tindices.setX( indexOffset, i ); indexOffset++;\r\n\t\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CylinderBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.CylinderBufferGeometry.prototype.constructor = THREE.CylinderBufferGeometry;\r\n\t\r\n\t// File:src/extras/geometries/CylinderGeometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'CylinderGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradiusTop: radiusTop,\r\n\t\t\tradiusBottom: radiusBottom,\r\n\t\t\theight: height,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\topenEnded: openEnded,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\t\r\n\t\tthis.fromBufferGeometry( new THREE.CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\r\n\t\tthis.mergeVertices();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;\r\n\t\r\n\t// File:src/extras/geometries/EdgesGeometry.js\r\n\t\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\t\r\n\tTHREE.EdgesGeometry = function ( geometry, thresholdAngle ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\r\n\t\r\n\t\tvar thresholdDot = Math.cos( THREE.Math.degToRad( thresholdAngle ) );\r\n\t\r\n\t\tvar edge = [ 0, 0 ], hash = {};\r\n\t\r\n\t\tfunction sortFunction( a, b ) {\r\n\t\r\n\t\t\treturn a - b;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar keys = [ 'a', 'b', 'c' ];\r\n\t\r\n\t\tvar geometry2;\r\n\t\r\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\tgeometry2 = new THREE.Geometry();\r\n\t\t\tgeometry2.fromBufferGeometry( geometry );\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tgeometry2 = geometry.clone();\r\n\t\r\n\t\t}\r\n\t\r\n\t\tgeometry2.mergeVertices();\r\n\t\tgeometry2.computeFaceNormals();\r\n\t\r\n\t\tvar vertices = geometry2.vertices;\r\n\t\tvar faces = geometry2.faces;\r\n\t\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tvar face = faces[ i ];\r\n\t\r\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\t\r\n\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\r\n\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\tedge.sort( sortFunction );\r\n\t\r\n\t\t\t\tvar key = edge.toString();\r\n\t\r\n\t\t\t\tif ( hash[ key ] === undefined ) {\r\n\t\r\n\t\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\thash[ key ].face2 = i;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar coords = [];\r\n\t\r\n\t\tfor ( var key in hash ) {\r\n\t\r\n\t\t\tvar h = hash[ key ];\r\n\t\r\n\t\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\r\n\t\r\n\t\t\t\tvar vertex = vertices[ h.vert1 ];\r\n\t\t\t\tcoords.push( vertex.x );\r\n\t\t\t\tcoords.push( vertex.y );\r\n\t\t\t\tcoords.push( vertex.z );\r\n\t\r\n\t\t\t\tvertex = vertices[ h.vert2 ];\r\n\t\t\t\tcoords.push( vertex.x );\r\n\t\t\t\tcoords.push( vertex.y );\r\n\t\t\t\tcoords.push( vertex.z );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;\r\n\t\r\n\t// File:src/extras/geometries/ExtrudeGeometry.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t *\r\n\t * Creates extruded geometry from a path shape.\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *  curveSegments: <int>, // number of points on the curves\r\n\t *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\r\n\t *  amount: <int>, // Depth to extrude the shape\r\n\t *\r\n\t *  bevelEnabled: <bool>, // turn on bevel\r\n\t *  bevelThickness: <float>, // how deep into the original shape bevel goes\r\n\t *  bevelSize: <float>, // how far from shape outline is bevel\r\n\t *  bevelSegments: <int>, // number of bevel layers\r\n\t *\r\n\t *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\r\n\t *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\r\n\t *\r\n\t *  uvGenerator: <Object> // object that provides UV generator functions\r\n\t *\r\n\t * }\r\n\t **/\r\n\t\r\n\tTHREE.ExtrudeGeometry = function ( shapes, options ) {\r\n\t\r\n\t\tif ( typeof( shapes ) === \"undefined\" ) {\r\n\t\r\n\t\t\tshapes = [];\r\n\t\t\treturn;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'ExtrudeGeometry';\r\n\t\r\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\r\n\t\r\n\t\tthis.addShapeList( shapes, options );\r\n\t\r\n\t\tthis.computeFaceNormals();\r\n\t\r\n\t\t// can't really use automatic vertex normals\r\n\t\t// as then front and back sides get smoothed too\r\n\t\t// should do separate smoothing just for sides\r\n\t\r\n\t\t//this.computeVertexNormals();\r\n\t\r\n\t\t//console.log( \"took\", ( Date.now() - startTime ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;\r\n\t\r\n\tTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\t\r\n\t\tvar sl = shapes.length;\r\n\t\r\n\t\tfor ( var s = 0; s < sl; s ++ ) {\r\n\t\r\n\t\t\tvar shape = shapes[ s ];\r\n\t\t\tthis.addShape( shape, options );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\r\n\t\r\n\t\tvar amount = options.amount !== undefined ? options.amount : 100;\r\n\t\r\n\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\r\n\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\r\n\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n\t\r\n\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\r\n\t\r\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\t\r\n\t\tvar steps = options.steps !== undefined ? options.steps : 1;\r\n\t\r\n\t\tvar extrudePath = options.extrudePath;\r\n\t\tvar extrudePts, extrudeByPath = false;\r\n\t\r\n\t\t// Use default WorldUVGenerator if no UV generators are specified.\r\n\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\r\n\t\r\n\t\tvar splineTube, binormal, normal, position2;\r\n\t\tif ( extrudePath ) {\r\n\t\r\n\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\r\n\t\r\n\t\t\textrudeByPath = true;\r\n\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\r\n\t\r\n\t\t\t// SETUP TNB variables\r\n\t\r\n\t\t\t// Reuse TNB from TubeGeomtry for now.\r\n\t\t\t// TODO1 - have a .isClosed in spline?\r\n\t\r\n\t\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );\r\n\t\r\n\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\t\r\n\t\t\tbinormal = new THREE.Vector3();\r\n\t\t\tnormal = new THREE.Vector3();\r\n\t\t\tposition2 = new THREE.Vector3();\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Safeguards if bevels are not enabled\r\n\t\r\n\t\tif ( ! bevelEnabled ) {\r\n\t\r\n\t\t\tbevelSegments = 0;\r\n\t\t\tbevelThickness = 0;\r\n\t\t\tbevelSize = 0;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Variables initialization\r\n\t\r\n\t\tvar ahole, h, hl; // looping of holes\r\n\t\tvar scope = this;\r\n\t\r\n\t\tvar shapesOffset = this.vertices.length;\r\n\t\r\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\t\r\n\t\tvar vertices = shapePoints.shape;\r\n\t\tvar holes = shapePoints.holes;\r\n\t\r\n\t\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\r\n\t\r\n\t\tif ( reverse ) {\r\n\t\r\n\t\t\tvertices = vertices.reverse();\r\n\t\r\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\t\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\t\tahole = holes[ h ];\r\n\t\r\n\t\t\t\tif ( THREE.ShapeUtils.isClockWise( ahole ) ) {\r\n\t\r\n\t\t\t\t\tholes[ h ] = ahole.reverse();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\r\n\t\r\n\t\t/* Vertices */\r\n\t\r\n\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\r\n\t\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\tahole = holes[ h ];\r\n\t\r\n\t\t\tvertices = vertices.concat( ahole );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\tfunction scalePt2 ( pt, vec, size ) {\r\n\t\r\n\t\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\r\n\t\r\n\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar b, bs, t, z,\r\n\t\t\tvert, vlen = vertices.length,\r\n\t\t\tface, flen = faces.length;\r\n\t\r\n\t\r\n\t\t// Find directions for point movement\r\n\t\r\n\t\r\n\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\r\n\t\r\n\t\t\t// computes for inPt the corresponding point inPt' on a new contour\r\n\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\r\n\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\r\n\t\t\t//\r\n\t\t\t// inPt' is the intersection of the two lines parallel to the two\r\n\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\r\n\t\r\n\t\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\r\n\t\r\n\t\t\t// good reading for geometry algorithms (here: line-line intersection)\r\n\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\r\n\t\r\n\t\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\r\n\t\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\r\n\t\r\n\t\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\r\n\t\r\n\t\t\t// check for collinear edges\r\n\t\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\t\r\n\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\r\n\t\r\n\t\t\t\t// not collinear\r\n\t\r\n\t\t\t\t// length of vectors for normalizing\r\n\t\r\n\t\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\r\n\t\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\r\n\t\r\n\t\t\t\t// shift adjacent points by unit vectors to the left\r\n\t\r\n\t\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\r\n\t\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\r\n\t\r\n\t\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\r\n\t\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\r\n\t\r\n\t\t\t\t// scaling factor for v_prev to intersection point\r\n\t\r\n\t\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\r\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\r\n\t\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\t\r\n\t\t\t\t// vector from inPt to intersection point\r\n\t\r\n\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\r\n\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\r\n\t\r\n\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\r\n\t\t\t\t//  but prevent crazy spikes\r\n\t\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\r\n\t\t\t\tif ( v_trans_lensq <= 2 ) {\r\n\t\r\n\t\t\t\t\treturn\tnew THREE.Vector2( v_trans_x, v_trans_y );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// handle special case of collinear edges\r\n\t\r\n\t\t\t\tvar direction_eq = false;\t\t// assumes: opposite\r\n\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\r\n\t\r\n\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\r\n\t\r\n\t\t\t\t\t\tdirection_eq = true;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\r\n\t\r\n\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\r\n\t\r\n\t\t\t\t\t\t\tdirection_eq = true;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\r\n\t\r\n\t\t\t\t\t\t\tdirection_eq = true;\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tif ( direction_eq ) {\r\n\t\r\n\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\r\n\t\t\t\t\tv_trans_x = - v_prev_y;\r\n\t\t\t\t\tv_trans_y =  v_prev_x;\r\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\r\n\t\t\t\t\tv_trans_x = v_prev_x;\r\n\t\t\t\t\tv_trans_y = v_prev_y;\r\n\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treturn\tnew THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\tvar contourMovements = [];\r\n\t\r\n\t\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\t\r\n\t\t\tif ( j === il ) j = 0;\r\n\t\t\tif ( k === il ) k = 0;\r\n\t\r\n\t\t\t//  (j)---(i)---(k)\r\n\t\t\t// console.log('i,j,k', i, j , k)\r\n\t\r\n\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\r\n\t\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\tahole = holes[ h ];\r\n\t\r\n\t\t\toneHoleMovements = [];\r\n\t\r\n\t\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\t\r\n\t\t\t\tif ( j === il ) j = 0;\r\n\t\t\t\tif ( k === il ) k = 0;\r\n\t\r\n\t\t\t\t//  (j)---(i)---(k)\r\n\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tholesMovements.push( oneHoleMovements );\r\n\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Loop bevelSegments, 1 for the front, 1 for the back\r\n\t\r\n\t\tfor ( b = 0; b < bevelSegments; b ++ ) {\r\n\t\r\n\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\r\n\t\r\n\t\t\tt = b / bevelSegments;\r\n\t\t\tz = bevelThickness * ( 1 - t );\r\n\t\r\n\t\t\t//z = bevelThickness * t;\r\n\t\t\tbs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved\r\n\t\t\t//bs = bevelSize * t; // linear\r\n\t\r\n\t\t\t// contract shape\r\n\t\r\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\r\n\t\t\t\tv( vert.x, vert.y,  - z );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// expand holes\r\n\t\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\t\tahole = holes[ h ];\r\n\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\t\r\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\t\r\n\t\t\t\t\tv( vert.x, vert.y,  - z );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tbs = bevelSize;\r\n\t\r\n\t\t// Back facing vertices\r\n\t\r\n\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\t\r\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\t\r\n\t\t\tif ( ! extrudeByPath ) {\r\n\t\r\n\t\t\t\tv( vert.x, vert.y, 0 );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n\t\r\n\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\r\n\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\r\n\t\r\n\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\r\n\t\r\n\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Add stepped vertices...\r\n\t\t// Including front facing vertices\r\n\t\r\n\t\tvar s;\r\n\t\r\n\t\tfor ( s = 1; s <= steps; s ++ ) {\r\n\t\r\n\t\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\t\r\n\t\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\t\r\n\t\t\t\tif ( ! extrudeByPath ) {\r\n\t\r\n\t\t\t\t\tv( vert.x, vert.y, amount / steps * s );\r\n\t\r\n\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n\t\r\n\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\r\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\r\n\t\r\n\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\r\n\t\r\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Add bevel segments planes\r\n\t\r\n\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\t\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\r\n\t\r\n\t\t\tt = b / bevelSegments;\r\n\t\t\tz = bevelThickness * ( 1 - t );\r\n\t\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\r\n\t\t\tbs = bevelSize * Math.sin ( t * Math.PI / 2 );\r\n\t\r\n\t\t\t// contract shape\r\n\t\r\n\t\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\t\tv( vert.x, vert.y,  amount + z );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// expand holes\r\n\t\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\t\tahole = holes[ h ];\r\n\t\t\t\toneHoleMovements = holesMovements[ h ];\r\n\t\r\n\t\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\t\r\n\t\t\t\t\tif ( ! extrudeByPath ) {\r\n\t\r\n\t\t\t\t\t\tv( vert.x, vert.y,  amount + z );\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t/* Faces */\r\n\t\r\n\t\t// Top and bottom faces\r\n\t\r\n\t\tbuildLidFaces();\r\n\t\r\n\t\t// Sides faces\r\n\t\r\n\t\tbuildSideFaces();\r\n\t\r\n\t\r\n\t\t/////  Internal functions\r\n\t\r\n\t\tfunction buildLidFaces() {\r\n\t\r\n\t\t\tif ( bevelEnabled ) {\r\n\t\r\n\t\t\t\tvar layer = 0; // steps + 1\r\n\t\t\t\tvar offset = vlen * layer;\r\n\t\r\n\t\t\t\t// Bottom faces\r\n\t\r\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\t\r\n\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tlayer = steps + bevelSegments * 2;\r\n\t\t\t\toffset = vlen * layer;\r\n\t\r\n\t\t\t\t// Top faces\r\n\t\r\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\t\r\n\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// Bottom faces\r\n\t\r\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\t\r\n\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// Top faces\r\n\t\r\n\t\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\t\r\n\t\t\t\t\tface = faces[ i ];\r\n\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// Create faces for the z-sides of the shape\r\n\t\r\n\t\tfunction buildSideFaces() {\r\n\t\r\n\t\t\tvar layeroffset = 0;\r\n\t\t\tsidewalls( contour, layeroffset );\r\n\t\t\tlayeroffset += contour.length;\r\n\t\r\n\t\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\t\r\n\t\t\t\tahole = holes[ h ];\r\n\t\t\t\tsidewalls( ahole, layeroffset );\r\n\t\r\n\t\t\t\t//, true\r\n\t\t\t\tlayeroffset += ahole.length;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction sidewalls( contour, layeroffset ) {\r\n\t\r\n\t\t\tvar j, k;\r\n\t\t\ti = contour.length;\r\n\t\r\n\t\t\twhile ( -- i >= 0 ) {\r\n\t\r\n\t\t\t\tj = i;\r\n\t\t\t\tk = i - 1;\r\n\t\t\t\tif ( k < 0 ) k = contour.length - 1;\r\n\t\r\n\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\r\n\t\r\n\t\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\r\n\t\r\n\t\t\t\tfor ( s = 0; s < sl; s ++ ) {\r\n\t\r\n\t\t\t\t\tvar slen1 = vlen * s;\r\n\t\t\t\t\tvar slen2 = vlen * ( s + 1 );\r\n\t\r\n\t\t\t\t\tvar a = layeroffset + j + slen1,\r\n\t\t\t\t\t\tb = layeroffset + k + slen1,\r\n\t\t\t\t\t\tc = layeroffset + k + slen2,\r\n\t\t\t\t\t\td = layeroffset + j + slen2;\r\n\t\r\n\t\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\tfunction v( x, y, z ) {\r\n\t\r\n\t\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction f3( a, b, c ) {\r\n\t\r\n\t\t\ta += shapesOffset;\r\n\t\t\tb += shapesOffset;\r\n\t\t\tc += shapesOffset;\r\n\t\r\n\t\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );\r\n\t\r\n\t\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\r\n\t\r\n\t\t\tscope.faceVertexUvs[ 0 ].push( uvs );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\r\n\t\r\n\t\t\ta += shapesOffset;\r\n\t\t\tb += shapesOffset;\r\n\t\t\tc += shapesOffset;\r\n\t\t\td += shapesOffset;\r\n\t\r\n\t\t\tscope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );\r\n\t\t\tscope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );\r\n\t\r\n\t\t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\r\n\t\r\n\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\r\n\t\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ExtrudeGeometry.WorldUVGenerator = {\r\n\t\r\n\t\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\r\n\t\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\r\n\t\t\tvar a = vertices[ indexA ];\r\n\t\t\tvar b = vertices[ indexB ];\r\n\t\t\tvar c = vertices[ indexC ];\r\n\t\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( a.x, a.y ),\r\n\t\t\t\tnew THREE.Vector2( b.x, b.y ),\r\n\t\t\t\tnew THREE.Vector2( c.x, c.y )\r\n\t\t\t];\r\n\t\r\n\t\t},\r\n\t\r\n\t\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\r\n\t\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\r\n\t\t\tvar a = vertices[ indexA ];\r\n\t\t\tvar b = vertices[ indexB ];\r\n\t\t\tvar c = vertices[ indexC ];\r\n\t\t\tvar d = vertices[ indexD ];\r\n\t\r\n\t\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\r\n\t\r\n\t\t\t\treturn [\r\n\t\t\t\t\tnew THREE.Vector2( a.x, 1 - a.z ),\r\n\t\t\t\t\tnew THREE.Vector2( b.x, 1 - b.z ),\r\n\t\t\t\t\tnew THREE.Vector2( c.x, 1 - c.z ),\r\n\t\t\t\t\tnew THREE.Vector2( d.x, 1 - d.z )\r\n\t\t\t\t];\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\treturn [\r\n\t\t\t\t\tnew THREE.Vector2( a.y, 1 - a.z ),\r\n\t\t\t\t\tnew THREE.Vector2( b.y, 1 - b.z ),\r\n\t\t\t\t\tnew THREE.Vector2( c.y, 1 - c.z ),\r\n\t\t\t\t\tnew THREE.Vector2( d.y, 1 - d.z )\r\n\t\t\t\t];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/ShapeGeometry.js\r\n\t\r\n\t/**\r\n\t * @author jonobr1 / http://jonobr1.com\r\n\t *\r\n\t * Creates a one-sided polygonal geometry from a path shape. Similar to\r\n\t * ExtrudeGeometry.\r\n\t *\r\n\t * parameters = {\r\n\t *\r\n\t *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\r\n\t *\r\n\t *\tmaterial: <int> // material index for front and back faces\r\n\t *\tuvGenerator: <Object> // object that provides UV generator functions\r\n\t *\r\n\t * }\r\n\t **/\r\n\t\r\n\tTHREE.ShapeGeometry = function ( shapes, options ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'ShapeGeometry';\r\n\t\r\n\t\tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\r\n\t\r\n\t\tthis.addShapeList( shapes, options );\r\n\t\r\n\t\tthis.computeFaceNormals();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;\r\n\t\r\n\t/**\r\n\t * Add an array of shapes to THREE.ShapeGeometry.\r\n\t */\r\n\tTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\t\r\n\t\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tthis.addShape( shapes[ i ], options );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn this;\r\n\t\r\n\t};\r\n\t\r\n\t/**\r\n\t * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\r\n\t */\r\n\tTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\r\n\t\r\n\t\tif ( options === undefined ) options = {};\r\n\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\t\r\n\t\tvar material = options.material;\r\n\t\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\r\n\t\r\n\t\t//\r\n\t\r\n\t\tvar i, l, hole;\r\n\t\r\n\t\tvar shapesOffset = this.vertices.length;\r\n\t\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\t\r\n\t\tvar vertices = shapePoints.shape;\r\n\t\tvar holes = shapePoints.holes;\r\n\t\r\n\t\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\r\n\t\r\n\t\tif ( reverse ) {\r\n\t\r\n\t\t\tvertices = vertices.reverse();\r\n\t\r\n\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\r\n\t\r\n\t\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\thole = holes[ i ];\r\n\t\r\n\t\t\t\tif ( THREE.ShapeUtils.isClockWise( hole ) ) {\r\n\t\r\n\t\t\t\t\tholes[ i ] = hole.reverse();\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\treverse = false;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\r\n\t\r\n\t\t// Vertices\r\n\t\r\n\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\r\n\t\r\n\t\t\thole = holes[ i ];\r\n\t\t\tvertices = vertices.concat( hole );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t//\r\n\t\r\n\t\tvar vert, vlen = vertices.length;\r\n\t\tvar face, flen = faces.length;\r\n\t\r\n\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\t\r\n\t\t\tvert = vertices[ i ];\r\n\t\r\n\t\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\t\r\n\t\t\tface = faces[ i ];\r\n\t\r\n\t\t\tvar a = face[ 0 ] + shapesOffset;\r\n\t\t\tvar b = face[ 1 ] + shapesOffset;\r\n\t\t\tvar c = face[ 2 ] + shapesOffset;\r\n\t\r\n\t\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/LatheBufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\t\r\n\t // points - to create a closed torus, one must use a set of points\r\n\t //    like so: [ a, b, c, d, a ], see first is the same as last.\r\n\t // segments - the number of circumference segments to create\r\n\t // phiStart - the starting radian\r\n\t // phiLength - the radian (0 to 2PI) range of the lathed section\r\n\t //    2PI is a closed lathe, less than 2PI is a portion.\r\n\t\r\n\tTHREE.LatheBufferGeometry = function ( points, segments, phiStart, phiLength ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthis.type = 'LatheBufferGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tpoints: points,\r\n\t\t\tsegments: segments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength\r\n\t\t};\r\n\t\r\n\t\tsegments = Math.floor( segments ) || 12;\r\n\t\tphiStart = phiStart || 0;\r\n\t\tphiLength = phiLength || Math.PI * 2;\r\n\t\r\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\r\n\t\tphiLength = THREE.Math.clamp( phiLength, 0, Math.PI * 2 );\r\n\t\r\n\t\t// these are used to calculate buffer length\r\n\t\tvar vertexCount = ( segments + 1 ) * points.length;\r\n\t\tvar indexCount = segments * points.length * 2 * 3;\r\n\t\r\n\t\t// buffers\r\n\t\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\r\n\t\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\t\r\n\t\t// helper variables\r\n\t\tvar index = 0, indexOffset = 0, base;\r\n\t\tvar inversePointLength = 1.0 / ( points.length - 1 );\r\n\t\tvar inverseSegments = 1.0 / segments;\r\n\t\tvar vertex = new THREE.Vector3();\r\n\t\tvar uv = new THREE.Vector2();\r\n\t\tvar i, j;\r\n\t\r\n\t\t// generate vertices and uvs\r\n\t\r\n\t\tfor ( i = 0; i <= segments; i ++ ) {\r\n\t\r\n\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\r\n\t\r\n\t\t\tvar sin = Math.sin( phi );\r\n\t\t\tvar cos = Math.cos( phi );\r\n\t\r\n\t\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\r\n\t\r\n\t\t\t\t// vertex\r\n\t\t\t\tvertex.x = points[ j ].x * sin;\r\n\t\t\t\tvertex.y = points[ j ].y;\r\n\t\t\t\tvertex.z = points[ j ].x * cos;\r\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\t\r\n\t\t\t\t// uv\r\n\t\t\t\tuv.x = i / segments;\r\n\t\t\t\tuv.y = j / ( points.length - 1 );\r\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\t\r\n\t\t\t\t// increase index\r\n\t\t\t\tindex ++;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// generate indices\r\n\t\r\n\t\tfor ( i = 0; i < segments; i ++ ) {\r\n\t\r\n\t\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\r\n\t\r\n\t\t\t\tbase = j + i * points.length;\r\n\t\r\n\t\t\t\t// indices\r\n\t\t\t\tvar a = base;\r\n\t\t\t\tvar b = base + points.length;\r\n\t\t\t\tvar c = base + points.length + 1;\r\n\t\t\t\tvar d = base + 1;\r\n\t\r\n\t\t\t\t// face one\r\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\t\r\n\t\t\t\t// face two\r\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// build geometry\r\n\t\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', vertices );\r\n\t\tthis.addAttribute( 'uv', uvs );\r\n\t\r\n\t\t// generate normals\r\n\t\r\n\t\tthis.computeVertexNormals();\r\n\t\r\n\t\t// if the geometry is closed, we need to average the normals along the seam.\r\n\t\t// because the corresponding vertices are identical (but still have different UVs).\r\n\t\r\n\t\tif( phiLength === Math.PI * 2 ) {\r\n\t\r\n\t\t\tvar normals = this.attributes.normal.array;\r\n\t\t\tvar n1 = new THREE.Vector3();\r\n\t\t\tvar n2 = new THREE.Vector3();\r\n\t\t\tvar n = new THREE.Vector3();\r\n\t\r\n\t\t\t// this is the buffer offset for the last line of vertices\r\n\t\t\tbase = segments * points.length * 3;\r\n\t\r\n\t\t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\r\n\t\r\n\t\t\t\t// select the normal of the vertex in the first line\r\n\t\t\t\tn1.x = normals[ j + 0 ];\r\n\t\t\t\tn1.y = normals[ j + 1 ];\r\n\t\t\t\tn1.z = normals[ j + 2 ];\r\n\t\r\n\t\t\t\t// select the normal of the vertex in the last line\r\n\t\t\t\tn2.x = normals[ base + j + 0 ];\r\n\t\t\t\tn2.y = normals[ base + j + 1 ];\r\n\t\t\t\tn2.z = normals[ base + j + 2 ];\r\n\t\r\n\t\t\t\t// average normals\r\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\r\n\t\r\n\t\t\t\t// assign the new values to both normals\r\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\r\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\r\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\r\n\t\r\n\t\t\t} // next row\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LatheBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.LatheBufferGeometry.prototype.constructor = THREE.LatheBufferGeometry;\r\n\t\r\n\t// File:src/extras/geometries/LatheGeometry.js\r\n\t\r\n\t/**\r\n\t * @author astrodud / http://astrodud.isgreat.org/\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author bhouston / http://clara.io\r\n\t */\r\n\t\r\n\t// points - to create a closed torus, one must use a set of points\r\n\t//    like so: [ a, b, c, d, a ], see first is the same as last.\r\n\t// segments - the number of circumference segments to create\r\n\t// phiStart - the starting radian\r\n\t// phiLength - the radian (0 to 2PI) range of the lathed section\r\n\t//    2PI is a closed lathe, less than 2PI is a portion.\r\n\t\r\n\tTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'LatheGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tpoints: points,\r\n\t\t\tsegments: segments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength\r\n\t\t};\r\n\t\r\n\t\tthis.fromBufferGeometry( new THREE.LatheBufferGeometry( points, segments, phiStart, phiLength ) );\r\n\t\tthis.mergeVertices();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;\r\n\t\r\n\t// File:src/extras/geometries/PlaneGeometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n\t */\r\n\t\r\n\tTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'PlaneGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments\r\n\t\t};\r\n\t\r\n\t\tthis.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;\r\n\t\r\n\t// File:src/extras/geometries/PlaneBufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n\t */\r\n\t\r\n\tTHREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthis.type = 'PlaneBufferGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments\r\n\t\t};\r\n\t\r\n\t\tvar width_half = width / 2;\r\n\t\tvar height_half = height / 2;\r\n\t\r\n\t\tvar gridX = Math.floor( widthSegments ) || 1;\r\n\t\tvar gridY = Math.floor( heightSegments ) || 1;\r\n\t\r\n\t\tvar gridX1 = gridX + 1;\r\n\t\tvar gridY1 = gridY + 1;\r\n\t\r\n\t\tvar segment_width = width / gridX;\r\n\t\tvar segment_height = height / gridY;\r\n\t\r\n\t\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\r\n\t\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\r\n\t\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\r\n\t\r\n\t\tvar offset = 0;\r\n\t\tvar offset2 = 0;\r\n\t\r\n\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\r\n\t\r\n\t\t\tvar y = iy * segment_height - height_half;\r\n\t\r\n\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\r\n\t\r\n\t\t\t\tvar x = ix * segment_width - width_half;\r\n\t\r\n\t\t\t\tvertices[ offset ] = x;\r\n\t\t\t\tvertices[ offset + 1 ] = - y;\r\n\t\r\n\t\t\t\tnormals[ offset + 2 ] = 1;\r\n\t\r\n\t\t\t\tuvs[ offset2 ] = ix / gridX;\r\n\t\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\r\n\t\r\n\t\t\t\toffset += 3;\r\n\t\t\t\toffset2 += 2;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\toffset = 0;\r\n\t\r\n\t\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\r\n\t\r\n\t\tfor ( var iy = 0; iy < gridY; iy ++ ) {\r\n\t\r\n\t\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\r\n\t\r\n\t\t\t\tvar a = ix + gridX1 * iy;\r\n\t\t\t\tvar b = ix + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\r\n\t\r\n\t\t\t\tindices[ offset ] = a;\r\n\t\t\t\tindices[ offset + 1 ] = b;\r\n\t\t\t\tindices[ offset + 2 ] = d;\r\n\t\r\n\t\t\t\tindices[ offset + 3 ] = b;\r\n\t\t\t\tindices[ offset + 4 ] = c;\r\n\t\t\t\tindices[ offset + 5 ] = d;\r\n\t\r\n\t\t\t\toffset += 6;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;\r\n\t\r\n\t// File:src/extras/geometries/RingBufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\t\r\n\tTHREE.RingBufferGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthis.type = 'RingBufferGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tinnerRadius: innerRadius,\r\n\t\t\touterRadius: outerRadius,\r\n\t\t\tthetaSegments: thetaSegments,\r\n\t\t\tphiSegments: phiSegments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\t\r\n\t\tinnerRadius = innerRadius || 20;\r\n\t\touterRadius = outerRadius || 50;\r\n\t\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\t\r\n\t\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\r\n\t\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\r\n\t\r\n\t\t// these are used to calculate buffer length\r\n\t\tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\r\n\t\tvar indexCount = thetaSegments * phiSegments * 2 * 3;\r\n\t\r\n\t\t// buffers\r\n\t\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\r\n\t\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\t\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\t\r\n\t\t// some helper variables\r\n\t\tvar index = 0, indexOffset = 0, segment;\r\n\t\tvar radius = innerRadius;\r\n\t\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\r\n\t\tvar vertex = new THREE.Vector3();\r\n\t\tvar uv = new THREE.Vector2();\r\n\t\tvar j, i;\r\n\t\r\n\t\t// generate vertices, normals and uvs\r\n\t\r\n\t\t// values are generate from the inside of the ring to the outside\r\n\t\r\n\t\tfor ( j = 0; j <= phiSegments; j ++ ) {\r\n\t\r\n\t\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\r\n\t\r\n\t\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\r\n\t\r\n\t\t\t\t// vertex\r\n\t\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\t\tvertex.y = radius * Math.sin( segment );\r\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\t\r\n\t\t\t\t// normal\r\n\t\t\t\tnormals.setXYZ( index, 0, 0, 1 );\r\n\t\r\n\t\t\t\t// uv\r\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\r\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\r\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\t\r\n\t\t\t\t// increase index\r\n\t\t\t\tindex++;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// increase the radius for next row of vertices\r\n\t\t\tradius += radiusStep;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// generate indices\r\n\t\r\n\t\tfor ( j = 0; j < phiSegments; j ++ ) {\r\n\t\r\n\t\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\r\n\t\r\n\t\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\r\n\t\r\n\t\t\t\tsegment = i + thetaSegmentLevel;\r\n\t\r\n\t\t\t\t// indices\r\n\t\t\t\tvar a = segment;\r\n\t\t\t\tvar b = segment + thetaSegments + 1;\r\n\t\t\t\tvar c = segment + thetaSegments + 2;\r\n\t\t\t\tvar d = segment + 1;\r\n\t\r\n\t\t\t\t// face one\r\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\t\r\n\t\t\t\t// face two\r\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// build geometry\r\n\t\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', vertices );\r\n\t\tthis.addAttribute( 'normal', normals );\r\n\t\tthis.addAttribute( 'uv', uvs );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.RingBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.RingBufferGeometry.prototype.constructor = THREE.RingBufferGeometry;\r\n\t\r\n\t// File:src/extras/geometries/RingGeometry.js\r\n\t\r\n\t/**\r\n\t * @author Kaleb Murphy\r\n\t */\r\n\t\r\n\tTHREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'RingGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tinnerRadius: innerRadius,\r\n\t\t\touterRadius: outerRadius,\r\n\t\t\tthetaSegments: thetaSegments,\r\n\t\t\tphiSegments: phiSegments,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\t\r\n\t\tthis.fromBufferGeometry( new THREE.RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.RingGeometry.prototype.constructor = THREE.RingGeometry;\r\n\t\r\n\t// File:src/extras/geometries/SphereGeometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'SphereGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\t\r\n\t\tthis.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;\r\n\t\r\n\t// File:src/extras/geometries/SphereBufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author benaadams / https://twitter.com/ben_a_adams\r\n\t * based on THREE.SphereGeometry\r\n\t */\r\n\t\r\n\tTHREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthis.type = 'SphereBufferGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\t\r\n\t\tradius = radius || 50;\r\n\t\r\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\r\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\r\n\t\r\n\t\tphiStart = phiStart !== undefined ? phiStart : 0;\r\n\t\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\r\n\t\r\n\t\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\t\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\r\n\t\r\n\t\tvar thetaEnd = thetaStart + thetaLength;\r\n\t\r\n\t\tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\r\n\t\r\n\t\tvar positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\t\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\t\r\n\t\tvar index = 0, vertices = [], normal = new THREE.Vector3();\r\n\t\r\n\t\tfor ( var y = 0; y <= heightSegments; y ++ ) {\r\n\t\r\n\t\t\tvar verticesRow = [];\r\n\t\r\n\t\t\tvar v = y / heightSegments;\r\n\t\r\n\t\t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\r\n\t\r\n\t\t\t\tvar u = x / widthSegments;\r\n\t\r\n\t\t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\r\n\t\t\t\tnormal.set( px, py, pz ).normalize();\r\n\t\r\n\t\t\t\tpositions.setXYZ( index, px, py, pz );\r\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\t\t\t\tuvs.setXY( index, u, 1 - v );\r\n\t\r\n\t\t\t\tverticesRow.push( index );\r\n\t\r\n\t\t\t\tindex ++;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvertices.push( verticesRow );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar indices = [];\r\n\t\r\n\t\tfor ( var y = 0; y < heightSegments; y ++ ) {\r\n\t\r\n\t\t\tfor ( var x = 0; x < widthSegments; x ++ ) {\r\n\t\r\n\t\t\t\tvar v1 = vertices[ y ][ x + 1 ];\r\n\t\t\t\tvar v2 = vertices[ y ][ x ];\r\n\t\t\t\tvar v3 = vertices[ y + 1 ][ x ];\r\n\t\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\r\n\t\r\n\t\t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\r\n\t\t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );\r\n\t\tthis.addAttribute( 'position', positions );\r\n\t\tthis.addAttribute( 'normal', normals );\r\n\t\tthis.addAttribute( 'uv', uvs );\r\n\t\r\n\t\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;\r\n\t\r\n\t// File:src/extras/geometries/TextGeometry.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / http://www.lab4games.net/zz85/blog\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t * Text = 3D Text\r\n\t *\r\n\t * parameters = {\r\n\t *  font: <THREE.Font>, // font\r\n\t *\r\n\t *  size: <float>, // size of the text\r\n\t *  height: <float>, // thickness to extrude text\r\n\t *  curveSegments: <int>, // number of points on the curves\r\n\t *\r\n\t *  bevelEnabled: <bool>, // turn on bevel\r\n\t *  bevelThickness: <float>, // how deep into text bevel goes\r\n\t *  bevelSize: <float> // how far from text outline is bevel\r\n\t * }\r\n\t */\r\n\t\r\n\tTHREE.TextGeometry = function ( text, parameters ) {\r\n\t\r\n\t\tparameters = parameters || {};\r\n\t\r\n\t\tvar font = parameters.font;\r\n\t\r\n\t\tif ( font instanceof THREE.Font === false ) {\r\n\t\r\n\t\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\r\n\t\t\treturn new THREE.Geometry();\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\r\n\t\r\n\t\t// translate parameters to ExtrudeGeometry API\r\n\t\r\n\t\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\r\n\t\r\n\t\t// defaults\r\n\t\r\n\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\r\n\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\r\n\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\r\n\t\r\n\t\tTHREE.ExtrudeGeometry.call( this, shapes, parameters );\r\n\t\r\n\t\tthis.type = 'TextGeometry';\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );\r\n\tTHREE.TextGeometry.prototype.constructor = THREE.TextGeometry;\r\n\t\r\n\t// File:src/extras/geometries/TorusBufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t */\r\n\t\r\n\tTHREE.TorusBufferGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthis.type = 'TorusBufferGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tarc: arc\r\n\t\t};\r\n\t\r\n\t\tradius = radius || 100;\r\n\t\ttube = tube || 40;\r\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\t\ttubularSegments = Math.floor( tubularSegments ) || 6;\r\n\t\tarc = arc || Math.PI * 2;\r\n\t\r\n\t\t// used to calculate buffer length\r\n\t\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\r\n\t\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\r\n\t\r\n\t\t// buffers\r\n\t\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\r\n\t\tvar vertices = new Float32Array( vertexCount * 3 );\r\n\t\tvar normals = new Float32Array( vertexCount * 3 );\r\n\t\tvar uvs = new Float32Array( vertexCount * 2 );\r\n\t\r\n\t\t// offset variables\r\n\t\tvar vertexBufferOffset = 0;\r\n\t\tvar uvBufferOffset = 0;\r\n\t\tvar indexBufferOffset = 0;\r\n\t\r\n\t\t// helper variables\r\n\t\tvar center = new THREE.Vector3();\r\n\t\tvar vertex = new THREE.Vector3();\r\n\t\tvar normal = new THREE.Vector3();\r\n\t\r\n\t\tvar j, i;\r\n\t\r\n\t\t// generate vertices, normals and uvs\r\n\t\r\n\t\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\t\r\n\t\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\r\n\t\r\n\t\t\t\tvar u = i / tubularSegments * arc;\r\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\t\r\n\t\t\t\t// vertex\r\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\r\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\r\n\t\t\t\tvertex.z = tube * Math.sin( v );\r\n\t\r\n\t\t\t\tvertices[ vertexBufferOffset ] = vertex.x;\r\n\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\r\n\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\r\n\t\r\n\t\t\t\t// this vector is used to calculate the normal\r\n\t\t\t\tcenter.x = radius * Math.cos( u );\r\n\t\t\t\tcenter.y = radius * Math.sin( u );\r\n\t\r\n\t\t\t\t// normal\r\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\r\n\t\r\n\t\t\t\tnormals[ vertexBufferOffset ] = normal.x;\r\n\t\t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\r\n\t\t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\r\n\t\r\n\t\t\t\t// uv\r\n\t\t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\r\n\t\t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\r\n\t\r\n\t\t\t\t// update offsets\r\n\t\t\t\tvertexBufferOffset += 3;\r\n\t\t\t\tuvBufferOffset += 2;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// generate indices\r\n\t\r\n\t\tfor ( j = 1; j <= radialSegments; j ++ ) {\r\n\t\r\n\t\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\r\n\t\r\n\t\t\t\t// indices\r\n\t\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\r\n\t\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n\t\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\r\n\t\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\r\n\t\r\n\t\t\t\t// face one\r\n\t\t\t\tindices[ indexBufferOffset ] = a;\r\n\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\r\n\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\r\n\t\r\n\t\t\t\t// face two\r\n\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\r\n\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\r\n\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\r\n\t\r\n\t\t\t\t// update offset\r\n\t\t\t\tindexBufferOffset += 6;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// build geometry\r\n\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TorusBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.TorusBufferGeometry.prototype.constructor = THREE.TorusBufferGeometry;\r\n\t\r\n\t// File:src/extras/geometries/TorusGeometry.js\r\n\t\r\n\t/**\r\n\t * @author oosmoxiecode\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\r\n\t */\r\n\t\r\n\tTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'TorusGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tarc: arc\r\n\t\t};\r\n\t\r\n\t\tthis.fromBufferGeometry( new THREE.TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;\r\n\t\r\n\t// File:src/extras/geometries/TorusKnotBufferGeometry.js\r\n\t\r\n\t/**\r\n\t * @author Mugen87 / https://github.com/Mugen87\r\n\t *\r\n\t * see: http://www.blackpawn.com/texts/pqtorus/\r\n\t */\r\n\tTHREE.TorusKnotBufferGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tthis.type = 'TorusKnotBufferGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tp: p,\r\n\t\t\tq: q\r\n\t\t};\r\n\t\r\n\t\tradius = radius || 100;\r\n\t\ttube = tube || 40;\r\n\t\ttubularSegments = Math.floor( tubularSegments ) || 64;\r\n\t\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\t\tp = p || 2;\r\n\t\tq = q || 3;\r\n\t\r\n\t\t// used to calculate buffer length\r\n\t\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\r\n\t\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\r\n\t\r\n\t\t// buffers\r\n\t\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\r\n\t\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\t\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\t\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\t\r\n\t\t// helper variables\r\n\t\tvar i, j, index = 0, indexOffset = 0;\r\n\t\r\n\t\tvar vertex = new THREE.Vector3();\r\n\t\tvar normal = new THREE.Vector3();\r\n\t\tvar uv = new THREE.Vector2();\r\n\t\r\n\t\tvar P1 = new THREE.Vector3();\r\n\t\tvar P2 = new THREE.Vector3();\r\n\t\r\n\t\tvar B = new THREE.Vector3();\r\n\t\tvar T = new THREE.Vector3();\r\n\t\tvar N = new THREE.Vector3();\r\n\t\r\n\t\t// generate vertices, normals and uvs\r\n\t\r\n\t\tfor ( i = 0; i <= tubularSegments; ++ i ) {\r\n\t\r\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\r\n\t\r\n\t\t\tvar u = i / tubularSegments * p * Math.PI * 2;\r\n\t\r\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\r\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\r\n\t\r\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\r\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\r\n\t\r\n\t\t\t// calculate orthonormal basis\r\n\t\r\n\t\t\tT.subVectors( P2, P1 );\r\n\t\t\tN.addVectors( P2, P1 );\r\n\t\t\tB.crossVectors( T, N );\r\n\t\t\tN.crossVectors( B, T );\r\n\t\r\n\t\t\t// normalize B, N. T can be ignored, we don't use it\r\n\t\r\n\t\t\tB.normalize();\r\n\t\t\tN.normalize();\r\n\t\r\n\t\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\r\n\t\r\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\r\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\r\n\t\r\n\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\t\t\t\tvar cx = - tube * Math.cos( v );\r\n\t\t\t\tvar cy = tube * Math.sin( v );\r\n\t\r\n\t\t\t\t// now calculate the final vertex position.\r\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\r\n\t\r\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\r\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\r\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\r\n\t\r\n\t\t\t\t// vertex\r\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\t\r\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\r\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\r\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\t\r\n\t\t\t\t// uv\r\n\t\t\t\tuv.x = i / tubularSegments;\r\n\t\t\t\tuv.y = j / radialSegments;\r\n\t\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\t\r\n\t\t\t\t// increase index\r\n\t\t\t\tindex ++;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// generate indices\r\n\t\r\n\t\tfor ( j = 1; j <= tubularSegments; j ++ ) {\r\n\t\r\n\t\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\r\n\t\r\n\t\t\t\t// indices\r\n\t\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\r\n\t\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\r\n\t\t\t\tvar c = ( radialSegments + 1 ) * j + i;\r\n\t\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\r\n\t\r\n\t\t\t\t// face one\r\n\t\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\t\r\n\t\t\t\t// face two\r\n\t\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// build geometry\r\n\t\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.addAttribute( 'position', vertices );\r\n\t\tthis.addAttribute( 'normal', normals );\r\n\t\tthis.addAttribute( 'uv', uvs );\r\n\t\r\n\t\t// this function calculates the current position on the torus curve\r\n\t\r\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\r\n\t\r\n\t\t\tvar cu = Math.cos( u );\r\n\t\t\tvar su = Math.sin( u );\r\n\t\t\tvar quOverP = q / p * u;\r\n\t\t\tvar cs = Math.cos( quOverP );\r\n\t\r\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\r\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\r\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TorusKnotBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.TorusKnotBufferGeometry.prototype.constructor = THREE.TorusKnotBufferGeometry;\r\n\t\r\n\t// File:src/extras/geometries/TorusKnotGeometry.js\r\n\t\r\n\t/**\r\n\t * @author oosmoxiecode\r\n\t */\r\n\t\r\n\tTHREE.TorusKnotGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'TorusKnotGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\ttube: tube,\r\n\t\t\ttubularSegments: tubularSegments,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tp: p,\r\n\t\t\tq: q\r\n\t\t};\r\n\t\r\n\t\tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\r\n\t\r\n\t\tthis.fromBufferGeometry( new THREE.TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\r\n\t\tthis.mergeVertices();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;\r\n\t\r\n\t// File:src/extras/geometries/TubeGeometry.js\r\n\t\r\n\t/**\r\n\t * @author WestLangley / https://github.com/WestLangley\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * @author miningold / https://github.com/miningold\r\n\t * @author jonobr1 / https://github.com/jonobr1\r\n\t *\r\n\t * Modified from the TorusKnotGeometry by @oosmoxiecode\r\n\t *\r\n\t * Creates a tube which extrudes along a 3d spline\r\n\t *\r\n\t * Uses parallel transport frames as described in\r\n\t * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n\t */\r\n\t\r\n\tTHREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'TubeGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tpath: path,\r\n\t\t\tsegments: segments,\r\n\t\t\tradius: radius,\r\n\t\t\tradialSegments: radialSegments,\r\n\t\t\tclosed: closed,\r\n\t\t\ttaper: taper\r\n\t\t};\r\n\t\r\n\t\tsegments = segments || 64;\r\n\t\tradius = radius || 1;\r\n\t\tradialSegments = radialSegments || 8;\r\n\t\tclosed = closed || false;\r\n\t\ttaper = taper || THREE.TubeGeometry.NoTaper;\r\n\t\r\n\t\tvar grid = [];\r\n\t\r\n\t\tvar scope = this,\r\n\t\r\n\t\t\ttangent,\r\n\t\t\tnormal,\r\n\t\t\tbinormal,\r\n\t\r\n\t\t\tnumpoints = segments + 1,\r\n\t\r\n\t\t\tu, v, r,\r\n\t\r\n\t\t\tcx, cy,\r\n\t\t\tpos, pos2 = new THREE.Vector3(),\r\n\t\t\ti, j,\r\n\t\t\tip, jp,\r\n\t\t\ta, b, c, d,\r\n\t\t\tuva, uvb, uvc, uvd;\r\n\t\r\n\t\tvar frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),\r\n\t\t\ttangents = frames.tangents,\r\n\t\t\tnormals = frames.normals,\r\n\t\t\tbinormals = frames.binormals;\r\n\t\r\n\t\t// proxy internals\r\n\t\tthis.tangents = tangents;\r\n\t\tthis.normals = normals;\r\n\t\tthis.binormals = binormals;\r\n\t\r\n\t\tfunction vert( x, y, z ) {\r\n\t\r\n\t\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// construct the grid\r\n\t\r\n\t\tfor ( i = 0; i < numpoints; i ++ ) {\r\n\t\r\n\t\t\tgrid[ i ] = [];\r\n\t\r\n\t\t\tu = i / ( numpoints - 1 );\r\n\t\r\n\t\t\tpos = path.getPointAt( u );\r\n\t\r\n\t\t\ttangent = tangents[ i ];\r\n\t\t\tnormal = normals[ i ];\r\n\t\t\tbinormal = binormals[ i ];\r\n\t\r\n\t\t\tr = radius * taper( u );\r\n\t\r\n\t\t\tfor ( j = 0; j < radialSegments; j ++ ) {\r\n\t\r\n\t\t\t\tv = j / radialSegments * 2 * Math.PI;\r\n\t\r\n\t\t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\r\n\t\t\t\tcy = r * Math.sin( v );\r\n\t\r\n\t\t\t\tpos2.copy( pos );\r\n\t\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\r\n\t\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\r\n\t\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\r\n\t\r\n\t\t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// construct the mesh\r\n\t\r\n\t\tfor ( i = 0; i < segments; i ++ ) {\r\n\t\r\n\t\t\tfor ( j = 0; j < radialSegments; j ++ ) {\r\n\t\r\n\t\t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\r\n\t\t\t\tjp = ( j + 1 ) % radialSegments;\r\n\t\r\n\t\t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\r\n\t\t\t\tb = grid[ ip ][ j ];\r\n\t\t\t\tc = grid[ ip ][ jp ];\r\n\t\t\t\td = grid[ i ][ jp ];\r\n\t\r\n\t\t\t\tuva = new THREE.Vector2( i / segments, j / radialSegments );\r\n\t\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );\r\n\t\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\r\n\t\t\t\tuvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );\r\n\t\r\n\t\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\r\n\t\r\n\t\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\r\n\t\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.computeFaceNormals();\r\n\t\tthis.computeVertexNormals();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;\r\n\t\r\n\tTHREE.TubeGeometry.NoTaper = function ( u ) {\r\n\t\r\n\t\treturn 1;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TubeGeometry.SinusoidalTaper = function ( u ) {\r\n\t\r\n\t\treturn Math.sin( Math.PI * u );\r\n\t\r\n\t};\r\n\t\r\n\t// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\r\n\tTHREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\r\n\t\r\n\t\tvar\tnormal = new THREE.Vector3(),\r\n\t\r\n\t\t\ttangents = [],\r\n\t\t\tnormals = [],\r\n\t\t\tbinormals = [],\r\n\t\r\n\t\t\tvec = new THREE.Vector3(),\r\n\t\t\tmat = new THREE.Matrix4(),\r\n\t\r\n\t\t\tnumpoints = segments + 1,\r\n\t\t\ttheta,\r\n\t\t\tsmallest,\r\n\t\r\n\t\t\ttx, ty, tz,\r\n\t\t\ti, u;\r\n\t\r\n\t\r\n\t\t// expose internals\r\n\t\tthis.tangents = tangents;\r\n\t\tthis.normals = normals;\r\n\t\tthis.binormals = binormals;\r\n\t\r\n\t\t// compute the tangent vectors for each segment on the path\r\n\t\r\n\t\tfor ( i = 0; i < numpoints; i ++ ) {\r\n\t\r\n\t\t\tu = i / ( numpoints - 1 );\r\n\t\r\n\t\t\ttangents[ i ] = path.getTangentAt( u );\r\n\t\t\ttangents[ i ].normalize();\r\n\t\r\n\t\t}\r\n\t\r\n\t\tinitialNormal3();\r\n\t\r\n\t\t/*\r\n\t\tfunction initialNormal1(lastBinormal) {\r\n\t\t\t// fixed start binormal. Has dangers of 0 vectors\r\n\t\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\r\n\t\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\r\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\t\t}\r\n\t\r\n\t\tfunction initialNormal2() {\r\n\t\r\n\t\t\t// This uses the Frenet-Serret formula for deriving binormal\r\n\t\t\tvar t2 = path.getTangentAt( epsilon );\r\n\t\r\n\t\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\r\n\t\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\t\r\n\t\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\r\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\t\r\n\t\t}\r\n\t\t*/\r\n\t\r\n\t\tfunction initialNormal3() {\r\n\t\r\n\t\t\t// select an initial normal vector perpendicular to the first tangent vector,\r\n\t\t\t// and in the direction of the smallest tangent xyz component\r\n\t\r\n\t\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\t\tsmallest = Number.MAX_VALUE;\r\n\t\t\ttx = Math.abs( tangents[ 0 ].x );\r\n\t\t\tty = Math.abs( tangents[ 0 ].y );\r\n\t\t\ttz = Math.abs( tangents[ 0 ].z );\r\n\t\r\n\t\t\tif ( tx <= smallest ) {\r\n\t\r\n\t\t\t\tsmallest = tx;\r\n\t\t\t\tnormal.set( 1, 0, 0 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( ty <= smallest ) {\r\n\t\r\n\t\t\t\tsmallest = ty;\r\n\t\t\t\tnormal.set( 0, 1, 0 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tif ( tz <= smallest ) {\r\n\t\r\n\t\t\t\tnormal.set( 0, 0, 1 );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\r\n\t\r\n\t\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\r\n\t\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the path\r\n\t\r\n\t\tfor ( i = 1; i < numpoints; i ++ ) {\r\n\t\r\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\r\n\t\r\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\r\n\t\r\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\r\n\t\r\n\t\t\tif ( vec.length() > Number.EPSILON ) {\r\n\t\r\n\t\t\t\tvec.normalize();\r\n\t\r\n\t\t\t\ttheta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\r\n\t\r\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\t\r\n\t\tif ( closed ) {\r\n\t\r\n\t\t\ttheta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\r\n\t\t\ttheta /= ( numpoints - 1 );\r\n\t\r\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\r\n\t\r\n\t\t\t\ttheta = - theta;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tfor ( i = 1; i < numpoints; i ++ ) {\r\n\t\r\n\t\t\t\t// twist a little...\r\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\r\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/geometries/PolyhedronGeometry.js\r\n\t\r\n\t/**\r\n\t * @author clockworkgeek / https://github.com/clockworkgeek\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t*/\r\n\t\r\n\tTHREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'PolyhedronGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tvertices: vertices,\r\n\t\t\tindices: indices,\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\t\r\n\t\tradius = radius || 1;\r\n\t\tdetail = detail || 0;\r\n\t\r\n\t\tvar that = this;\r\n\t\r\n\t\tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\r\n\t\r\n\t\t\tprepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar p = this.vertices;\r\n\t\r\n\t\tvar faces = [];\r\n\t\r\n\t\tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\r\n\t\r\n\t\t\tvar v1 = p[ indices[ i ] ];\r\n\t\t\tvar v2 = p[ indices[ i + 1 ] ];\r\n\t\t\tvar v3 = p[ indices[ i + 2 ] ];\r\n\t\r\n\t\t\tfaces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, j );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar centroid = new THREE.Vector3();\r\n\t\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tsubdivide( faces[ i ], detail );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Handle case when face straddles the seam\r\n\t\r\n\t\tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\r\n\t\r\n\t\t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\r\n\t\r\n\t\t\tvar x0 = uvs[ 0 ].x;\r\n\t\t\tvar x1 = uvs[ 1 ].x;\r\n\t\t\tvar x2 = uvs[ 2 ].x;\r\n\t\r\n\t\t\tvar max = Math.max( x0, x1, x2 );\r\n\t\t\tvar min = Math.min( x0, x1, x2 );\r\n\t\r\n\t\t\tif ( max > 0.9 && min < 0.1 ) {\r\n\t\r\n\t\t\t\t// 0.9 is somewhat arbitrary\r\n\t\r\n\t\t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\r\n\t\t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\r\n\t\t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Apply radius\r\n\t\r\n\t\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\t\r\n\t\t\tthis.vertices[ i ].multiplyScalar( radius );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Merge vertices\r\n\t\r\n\t\tthis.mergeVertices();\r\n\t\r\n\t\tthis.computeFaceNormals();\r\n\t\r\n\t\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\t\r\n\t\r\n\t\t// Project vector onto sphere's surface\r\n\t\r\n\t\tfunction prepare( vector ) {\r\n\t\r\n\t\t\tvar vertex = vector.normalize().clone();\r\n\t\t\tvertex.index = that.vertices.push( vertex ) - 1;\r\n\t\r\n\t\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\r\n\t\r\n\t\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\r\n\t\t\tvar v = inclination( vector ) / Math.PI + 0.5;\r\n\t\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\r\n\t\r\n\t\t\treturn vertex;\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Approximate a curved face with recursively sub-divided triangles.\r\n\t\r\n\t\tfunction make( v1, v2, v3, materialIndex ) {\r\n\t\r\n\t\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, materialIndex );\r\n\t\t\tthat.faces.push( face );\r\n\t\r\n\t\t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\r\n\t\r\n\t\t\tvar azi = azimuth( centroid );\r\n\t\r\n\t\t\tthat.faceVertexUvs[ 0 ].push( [\r\n\t\t\t\tcorrectUV( v1.uv, v1, azi ),\r\n\t\t\t\tcorrectUV( v2.uv, v2, azi ),\r\n\t\t\t\tcorrectUV( v3.uv, v3, azi )\r\n\t\t\t] );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Analytically subdivide a face to the required detail level.\r\n\t\r\n\t\tfunction subdivide( face, detail ) {\r\n\t\r\n\t\t\tvar cols = Math.pow( 2, detail );\r\n\t\t\tvar a = prepare( that.vertices[ face.a ] );\r\n\t\t\tvar b = prepare( that.vertices[ face.b ] );\r\n\t\t\tvar c = prepare( that.vertices[ face.c ] );\r\n\t\t\tvar v = [];\r\n\t\r\n\t\t\tvar materialIndex = face.materialIndex;\r\n\t\r\n\t\t\t// Construct all of the vertices for this subdivision.\r\n\t\r\n\t\t\tfor ( var i = 0 ; i <= cols; i ++ ) {\r\n\t\r\n\t\t\t\tv[ i ] = [];\r\n\t\r\n\t\t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\r\n\t\t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\r\n\t\t\t\tvar rows = cols - i;\r\n\t\r\n\t\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\r\n\t\r\n\t\t\t\t\tif ( j === 0 && i === cols ) {\r\n\t\r\n\t\t\t\t\t\tv[ i ][ j ] = aj;\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\t// Construct all of the faces.\r\n\t\r\n\t\t\tfor ( var i = 0; i < cols ; i ++ ) {\r\n\t\r\n\t\t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar k = Math.floor( j / 2 );\r\n\t\r\n\t\t\t\t\tif ( j % 2 === 0 ) {\r\n\t\r\n\t\t\t\t\t\tmake(\r\n\t\t\t\t\t\t\tv[ i ][ k + 1 ],\r\n\t\t\t\t\t\t\tv[ i + 1 ][ k ],\r\n\t\t\t\t\t\t\tv[ i ][ k ],\r\n\t\t\t\t\t\t\tmaterialIndex\r\n\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t} else {\r\n\t\r\n\t\t\t\t\t\tmake(\r\n\t\t\t\t\t\t\tv[ i ][ k + 1 ],\r\n\t\t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\r\n\t\t\t\t\t\t\tv[ i + 1 ][ k ],\r\n\t\t\t\t\t\t\tmaterialIndex\r\n\t\t\t\t\t\t);\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\r\n\t\r\n\t\tfunction azimuth( vector ) {\r\n\t\r\n\t\t\treturn Math.atan2( vector.z, - vector.x );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Angle above the XZ plane.\r\n\t\r\n\t\tfunction inclination( vector ) {\r\n\t\r\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t\t// Texture fixing helper. Spheres have some odd behaviours.\r\n\t\r\n\t\tfunction correctUV( uv, vector, azimuth ) {\r\n\t\r\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\r\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\r\n\t\t\treturn uv.clone();\r\n\t\r\n\t\t}\r\n\t\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;\r\n\t\r\n\t// File:src/extras/geometries/DodecahedronGeometry.js\r\n\t\r\n\t/**\r\n\t * @author Abe Pazos / https://hamoid.com\r\n\t */\r\n\t\r\n\tTHREE.DodecahedronGeometry = function ( radius, detail ) {\r\n\t\r\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\t\tvar r = 1 / t;\r\n\t\r\n\t\tvar vertices = [\r\n\t\r\n\t\t\t// (±1, ±1, ±1)\r\n\t\t\t- 1, - 1, - 1,    - 1, - 1,  1,\r\n\t\t\t- 1,  1, - 1,    - 1,  1,  1,\r\n\t\t\t 1, - 1, - 1,     1, - 1,  1,\r\n\t\t\t 1,  1, - 1,     1,  1,  1,\r\n\t\r\n\t\t\t// (0, ±1/φ, ±φ)\r\n\t\t\t 0, - r, - t,     0, - r,  t,\r\n\t\t\t 0,  r, - t,     0,  r,  t,\r\n\t\r\n\t\t\t// (±1/φ, ±φ, 0)\r\n\t\t\t- r, - t,  0,    - r,  t,  0,\r\n\t\t\t r, - t,  0,     r,  t,  0,\r\n\t\r\n\t\t\t// (±φ, 0, ±1/φ)\r\n\t\t\t- t,  0, - r,     t,  0, - r,\r\n\t\t\t- t,  0,  r,     t,  0,  r\r\n\t\t];\r\n\t\r\n\t\tvar indices = [\r\n\t\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\r\n\t\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\r\n\t\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\r\n\t\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\r\n\t\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\r\n\t\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\r\n\t\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\r\n\t\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\r\n\t\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\r\n\t\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\r\n\t\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\r\n\t\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\r\n\t\t];\r\n\t\r\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\t\r\n\t\tthis.type = 'DodecahedronGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\n\tTHREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;\r\n\t\r\n\t// File:src/extras/geometries/IcosahedronGeometry.js\r\n\t\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t */\r\n\t\r\n\tTHREE.IcosahedronGeometry = function ( radius, detail ) {\r\n\t\r\n\t\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\t\r\n\t\tvar vertices = [\r\n\t\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\r\n\t\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\r\n\t\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\r\n\t\t];\r\n\t\r\n\t\tvar indices = [\r\n\t\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\r\n\t\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\r\n\t\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\r\n\t\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\r\n\t\t];\r\n\t\r\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\t\r\n\t\tthis.type = 'IcosahedronGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\n\tTHREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;\r\n\t\r\n\t// File:src/extras/geometries/OctahedronGeometry.js\r\n\t\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t */\r\n\t\r\n\tTHREE.OctahedronGeometry = function ( radius, detail ) {\r\n\t\r\n\t\tvar vertices = [\r\n\t\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\r\n\t\t];\r\n\t\r\n\t\tvar indices = [\r\n\t\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\r\n\t\t];\r\n\t\r\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\t\r\n\t\tthis.type = 'OctahedronGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\n\tTHREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;\r\n\t\r\n\t// File:src/extras/geometries/TetrahedronGeometry.js\r\n\t\r\n\t/**\r\n\t * @author timothypratley / https://github.com/timothypratley\r\n\t */\r\n\t\r\n\tTHREE.TetrahedronGeometry = function ( radius, detail ) {\r\n\t\r\n\t\tvar vertices = [\r\n\t\t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\r\n\t\t];\r\n\t\r\n\t\tvar indices = [\r\n\t\t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\r\n\t\t];\r\n\t\r\n\t\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\t\r\n\t\tthis.type = 'TetrahedronGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\tdetail: detail\r\n\t\t};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\n\tTHREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;\r\n\t\r\n\t// File:src/extras/geometries/ParametricGeometry.js\r\n\t\r\n\t/**\r\n\t * @author zz85 / https://github.com/zz85\r\n\t * Parametric Surfaces Geometry\r\n\t * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\r\n\t *\r\n\t * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\r\n\t *\r\n\t */\r\n\t\r\n\tTHREE.ParametricGeometry = function ( func, slices, stacks ) {\r\n\t\r\n\t\tTHREE.Geometry.call( this );\r\n\t\r\n\t\tthis.type = 'ParametricGeometry';\r\n\t\r\n\t\tthis.parameters = {\r\n\t\t\tfunc: func,\r\n\t\t\tslices: slices,\r\n\t\t\tstacks: stacks\r\n\t\t};\r\n\t\r\n\t\tvar verts = this.vertices;\r\n\t\tvar faces = this.faces;\r\n\t\tvar uvs = this.faceVertexUvs[ 0 ];\r\n\t\r\n\t\tvar i, j, p;\r\n\t\tvar u, v;\r\n\t\r\n\t\tvar sliceCount = slices + 1;\r\n\t\r\n\t\tfor ( i = 0; i <= stacks; i ++ ) {\r\n\t\r\n\t\t\tv = i / stacks;\r\n\t\r\n\t\t\tfor ( j = 0; j <= slices; j ++ ) {\r\n\t\r\n\t\t\t\tu = j / slices;\r\n\t\r\n\t\t\t\tp = func( u, v );\r\n\t\t\t\tverts.push( p );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar a, b, c, d;\r\n\t\tvar uva, uvb, uvc, uvd;\r\n\t\r\n\t\tfor ( i = 0; i < stacks; i ++ ) {\r\n\t\r\n\t\t\tfor ( j = 0; j < slices; j ++ ) {\r\n\t\r\n\t\t\t\ta = i * sliceCount + j;\r\n\t\t\t\tb = i * sliceCount + j + 1;\r\n\t\t\t\tc = ( i + 1 ) * sliceCount + j + 1;\r\n\t\t\t\td = ( i + 1 ) * sliceCount + j;\r\n\t\r\n\t\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\r\n\t\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\r\n\t\t\t\tuvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\r\n\t\t\t\tuvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\r\n\t\r\n\t\t\t\tfaces.push( new THREE.Face3( a, b, d ) );\r\n\t\t\t\tuvs.push( [ uva, uvb, uvd ] );\r\n\t\r\n\t\t\t\tfaces.push( new THREE.Face3( b, c, d ) );\r\n\t\t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\t// console.log(this);\r\n\t\r\n\t\t// magic bullet\r\n\t\t// var diff = this.mergeVertices();\r\n\t\t// console.log('removed ', diff, ' vertices by merging');\r\n\t\r\n\t\tthis.computeFaceNormals();\r\n\t\tthis.computeVertexNormals();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\n\tTHREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;\r\n\t\r\n\t// File:src/extras/geometries/WireframeGeometry.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.WireframeGeometry = function ( geometry ) {\r\n\t\r\n\t\tTHREE.BufferGeometry.call( this );\r\n\t\r\n\t\tvar edge = [ 0, 0 ], hash = {};\r\n\t\r\n\t\tfunction sortFunction( a, b ) {\r\n\t\r\n\t\t\treturn a - b;\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar keys = [ 'a', 'b', 'c' ];\r\n\t\r\n\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\t\tvar faces = geometry.faces;\r\n\t\t\tvar numEdges = 0;\r\n\t\r\n\t\t\t// allocate maximal size\r\n\t\t\tvar edges = new Uint32Array( 6 * faces.length );\r\n\t\r\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar face = faces[ i ];\r\n\t\r\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\t\r\n\t\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\r\n\t\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\t\tedge.sort( sortFunction );\r\n\t\r\n\t\t\t\t\tvar key = edge.toString();\r\n\t\r\n\t\t\t\t\tif ( hash[ key ] === undefined ) {\r\n\t\r\n\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\r\n\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\r\n\t\t\t\t\t\thash[ key ] = true;\r\n\t\t\t\t\t\tnumEdges ++;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\t\r\n\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\r\n\t\r\n\t\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\r\n\t\r\n\t\t\t\t\tvar index = 6 * i + 3 * j;\r\n\t\t\t\t\tcoords[ index + 0 ] = vertex.x;\r\n\t\t\t\t\tcoords[ index + 1 ] = vertex.y;\r\n\t\t\t\t\tcoords[ index + 2 ] = vertex.z;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\t\r\n\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\tif ( geometry.index !== null ) {\r\n\t\r\n\t\t\t\t// Indexed BufferGeometry\r\n\t\r\n\t\t\t\tvar indices = geometry.index.array;\r\n\t\t\t\tvar vertices = geometry.attributes.position;\r\n\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\tvar numEdges = 0;\r\n\t\r\n\t\t\t\tif ( groups.length === 0 ) {\r\n\t\r\n\t\t\t\t\tgeometry.addGroup( 0, indices.length );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t// allocate maximal size\r\n\t\t\t\tvar edges = new Uint32Array( 2 * indices.length );\r\n\t\r\n\t\t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\r\n\t\r\n\t\t\t\t\tvar group = groups[ o ];\r\n\t\r\n\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\tvar count = group.count;\r\n\t\r\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\r\n\t\r\n\t\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\t\r\n\t\t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\r\n\t\t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\r\n\t\t\t\t\t\t\tedge.sort( sortFunction );\r\n\t\r\n\t\t\t\t\t\t\tvar key = edge.toString();\r\n\t\r\n\t\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\r\n\t\r\n\t\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\r\n\t\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\r\n\t\t\t\t\t\t\t\thash[ key ] = true;\r\n\t\t\t\t\t\t\t\tnumEdges ++;\r\n\t\r\n\t\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar index = 6 * i + 3 * j;\r\n\t\t\t\t\t\tvar index2 = edges[ 2 * i + j ];\r\n\t\r\n\t\t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\r\n\t\t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\r\n\t\t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\t// non-indexed BufferGeometry\r\n\t\r\n\t\t\t\tvar vertices = geometry.attributes.position.array;\r\n\t\t\t\tvar numEdges = vertices.length / 3;\r\n\t\t\t\tvar numTris = numEdges / 3;\r\n\t\r\n\t\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar index = 18 * i + 6 * j;\r\n\t\r\n\t\t\t\t\t\tvar index1 = 9 * i + 3 * j;\r\n\t\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\r\n\t\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\r\n\t\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\r\n\t\r\n\t\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\r\n\t\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\r\n\t\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\r\n\t\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\n\tTHREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;\r\n\t\r\n\t// File:src/extras/helpers/AxisHelper.js\r\n\t\r\n\t/**\r\n\t * @author sroucheray / http://sroucheray.org/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.AxisHelper = function ( size ) {\r\n\t\r\n\t\tsize = size || 1;\r\n\t\r\n\t\tvar vertices = new Float32Array( [\r\n\t\t\t0, 0, 0,  size, 0, 0,\r\n\t\t\t0, 0, 0,  0, size, 0,\r\n\t\t\t0, 0, 0,  0, 0, size\r\n\t\t] );\r\n\t\r\n\t\tvar colors = new Float32Array( [\r\n\t\t\t1, 0, 0,  1, 0.6, 0,\r\n\t\t\t0, 1, 0,  0.6, 1, 0,\r\n\t\t\t0, 0, 1,  0, 0.6, 1\r\n\t\t] );\r\n\t\r\n\t\tvar geometry = new THREE.BufferGeometry();\r\n\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\t\tgeometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\r\n\t\r\n\t\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\r\n\t\r\n\t\tTHREE.LineSegments.call( this, geometry, material );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.AxisHelper.prototype.constructor = THREE.AxisHelper;\r\n\t\r\n\t// File:src/extras/helpers/ArrowHelper.js\r\n\t\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @author zz85 / http://github.com/zz85\r\n\t * @author bhouston / http://clara.io\r\n\t *\r\n\t * Creates an arrow for visualizing directions\r\n\t *\r\n\t * Parameters:\r\n\t *  dir - Vector3\r\n\t *  origin - Vector3\r\n\t *  length - Number\r\n\t *  color - color in hex value\r\n\t *  headLength - Number\r\n\t *  headWidth - Number\r\n\t */\r\n\t\r\n\tTHREE.ArrowHelper = ( function () {\r\n\t\r\n\t\tvar lineGeometry = new THREE.Geometry();\r\n\t\tlineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 1, 0 ) );\r\n\t\r\n\t\tvar coneGeometry = new THREE.CylinderGeometry( 0, 0.5, 1, 5, 1 );\r\n\t\tconeGeometry.translate( 0, - 0.5, 0 );\r\n\t\r\n\t\treturn function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\r\n\t\r\n\t\t\t// dir is assumed to be normalized\r\n\t\r\n\t\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\t\tif ( color === undefined ) color = 0xffff00;\r\n\t\t\tif ( length === undefined ) length = 1;\r\n\t\t\tif ( headLength === undefined ) headLength = 0.2 * length;\r\n\t\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\r\n\t\r\n\t\t\tthis.position.copy( origin );\r\n\t\t\t\r\n\t\t\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );\r\n\t\t\tthis.line.matrixAutoUpdate = false;\r\n\t\t\tthis.add( this.line );\r\n\t\r\n\t\t\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );\r\n\t\t\tthis.cone.matrixAutoUpdate = false;\r\n\t\t\tthis.add( this.cone );\r\n\t\r\n\t\t\tthis.setDirection( dir );\r\n\t\t\tthis.setLength( length, headLength, headWidth );\r\n\t\r\n\t\t}\r\n\t\r\n\t}() );\r\n\t\r\n\tTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;\r\n\t\r\n\tTHREE.ArrowHelper.prototype.setDirection = ( function () {\r\n\t\r\n\t\tvar axis = new THREE.Vector3();\r\n\t\tvar radians;\r\n\t\r\n\t\treturn function setDirection( dir ) {\r\n\t\r\n\t\t\t// dir is assumed to be normalized\r\n\t\r\n\t\t\tif ( dir.y > 0.99999 ) {\r\n\t\r\n\t\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\r\n\t\r\n\t\t\t} else if ( dir.y < - 0.99999 ) {\r\n\t\r\n\t\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\r\n\t\r\n\t\t\t\tradians = Math.acos( dir.y );\r\n\t\r\n\t\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t};\r\n\t\r\n\t}() );\r\n\t\r\n\tTHREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\r\n\t\r\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\r\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\r\n\t\r\n\t\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\r\n\t\tthis.line.updateMatrix();\r\n\t\r\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\r\n\t\tthis.cone.position.y = length;\r\n\t\tthis.cone.updateMatrix();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ArrowHelper.prototype.setColor = function ( color ) {\r\n\t\r\n\t\tthis.line.material.color.set( color );\r\n\t\tthis.cone.material.color.set( color );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/helpers/BoxHelper.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.BoxHelper = function ( object ) {\r\n\t\r\n\t\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\t\tvar positions = new Float32Array( 8 * 3 );\r\n\t\r\n\t\tvar geometry = new THREE.BufferGeometry();\r\n\t\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\r\n\t\r\n\t\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ) );\r\n\t\r\n\t\tif ( object !== undefined ) {\r\n\t\r\n\t\t\tthis.update( object );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.BoxHelper.prototype.constructor = THREE.BoxHelper;\r\n\t\r\n\tTHREE.BoxHelper.prototype.update = ( function () {\r\n\t\r\n\t\tvar box = new THREE.Box3();\r\n\t\r\n\t\treturn function ( object ) {\r\n\t\r\n\t\t\tbox.setFromObject( object );\r\n\t\r\n\t\t\tif ( box.isEmpty() ) return;\r\n\t\r\n\t\t\tvar min = box.min;\r\n\t\t\tvar max = box.max;\r\n\t\r\n\t\t\t/*\r\n\t\t\t  5____4\r\n\t\t\t1/___0/|\r\n\t\t\t| 6__|_7\r\n\t\t\t2/___3/\r\n\t\r\n\t\t\t0: max.x, max.y, max.z\r\n\t\t\t1: min.x, max.y, max.z\r\n\t\t\t2: min.x, min.y, max.z\r\n\t\t\t3: max.x, min.y, max.z\r\n\t\t\t4: max.x, max.y, min.z\r\n\t\t\t5: min.x, max.y, min.z\r\n\t\t\t6: min.x, min.y, min.z\r\n\t\t\t7: max.x, min.y, min.z\r\n\t\t\t*/\r\n\t\r\n\t\t\tvar position = this.geometry.attributes.position;\r\n\t\t\tvar array = position.array;\r\n\t\r\n\t\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\r\n\t\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\r\n\t\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\r\n\t\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\r\n\t\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\r\n\t\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\r\n\t\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\r\n\t\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\r\n\t\r\n\t\t\tposition.needsUpdate = true;\r\n\t\r\n\t\t\tthis.geometry.computeBoundingSphere();\r\n\t\r\n\t\t};\r\n\t\r\n\t} )();\r\n\t\r\n\t// File:src/extras/helpers/BoundingBoxHelper.js\r\n\t\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\t\r\n\t// a helper to show the world-axis-aligned bounding box for an object\r\n\t\r\n\tTHREE.BoundingBoxHelper = function ( object, hex ) {\r\n\t\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0x888888;\r\n\t\r\n\t\tthis.object = object;\r\n\t\r\n\t\tthis.box = new THREE.Box3();\r\n\t\r\n\t\tTHREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );\r\n\tTHREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;\r\n\t\r\n\tTHREE.BoundingBoxHelper.prototype.update = function () {\r\n\t\r\n\t\tthis.box.setFromObject( this.object );\r\n\t\r\n\t\tthis.box.size( this.scale );\r\n\t\r\n\t\tthis.box.center( this.position );\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/helpers/CameraHelper.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t *\r\n\t *\t- shows frustum, line of sight and up of the camera\r\n\t *\t- suitable for fast updates\r\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\r\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\r\n\t */\r\n\t\r\n\tTHREE.CameraHelper = function ( camera ) {\r\n\t\r\n\t\tvar geometry = new THREE.Geometry();\r\n\t\tvar material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\r\n\t\r\n\t\tvar pointMap = {};\r\n\t\r\n\t\t// colors\r\n\t\r\n\t\tvar hexFrustum = 0xffaa00;\r\n\t\tvar hexCone = 0xff0000;\r\n\t\tvar hexUp = 0x00aaff;\r\n\t\tvar hexTarget = 0xffffff;\r\n\t\tvar hexCross = 0x333333;\r\n\t\r\n\t\t// near\r\n\t\r\n\t\taddLine( \"n1\", \"n2\", hexFrustum );\r\n\t\taddLine( \"n2\", \"n4\", hexFrustum );\r\n\t\taddLine( \"n4\", \"n3\", hexFrustum );\r\n\t\taddLine( \"n3\", \"n1\", hexFrustum );\r\n\t\r\n\t\t// far\r\n\t\r\n\t\taddLine( \"f1\", \"f2\", hexFrustum );\r\n\t\taddLine( \"f2\", \"f4\", hexFrustum );\r\n\t\taddLine( \"f4\", \"f3\", hexFrustum );\r\n\t\taddLine( \"f3\", \"f1\", hexFrustum );\r\n\t\r\n\t\t// sides\r\n\t\r\n\t\taddLine( \"n1\", \"f1\", hexFrustum );\r\n\t\taddLine( \"n2\", \"f2\", hexFrustum );\r\n\t\taddLine( \"n3\", \"f3\", hexFrustum );\r\n\t\taddLine( \"n4\", \"f4\", hexFrustum );\r\n\t\r\n\t\t// cone\r\n\t\r\n\t\taddLine( \"p\", \"n1\", hexCone );\r\n\t\taddLine( \"p\", \"n2\", hexCone );\r\n\t\taddLine( \"p\", \"n3\", hexCone );\r\n\t\taddLine( \"p\", \"n4\", hexCone );\r\n\t\r\n\t\t// up\r\n\t\r\n\t\taddLine( \"u1\", \"u2\", hexUp );\r\n\t\taddLine( \"u2\", \"u3\", hexUp );\r\n\t\taddLine( \"u3\", \"u1\", hexUp );\r\n\t\r\n\t\t// target\r\n\t\r\n\t\taddLine( \"c\", \"t\", hexTarget );\r\n\t\taddLine( \"p\", \"c\", hexCross );\r\n\t\r\n\t\t// cross\r\n\t\r\n\t\taddLine( \"cn1\", \"cn2\", hexCross );\r\n\t\taddLine( \"cn3\", \"cn4\", hexCross );\r\n\t\r\n\t\taddLine( \"cf1\", \"cf2\", hexCross );\r\n\t\taddLine( \"cf3\", \"cf4\", hexCross );\r\n\t\r\n\t\tfunction addLine( a, b, hex ) {\r\n\t\r\n\t\t\taddPoint( a, hex );\r\n\t\t\taddPoint( b, hex );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfunction addPoint( id, hex ) {\r\n\t\r\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\t\tgeometry.colors.push( new THREE.Color( hex ) );\r\n\t\r\n\t\t\tif ( pointMap[ id ] === undefined ) {\r\n\t\r\n\t\t\t\tpointMap[ id ] = [];\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tTHREE.LineSegments.call( this, geometry, material );\r\n\t\r\n\t\tthis.camera = camera;\r\n\t\tthis.camera.updateProjectionMatrix();\r\n\t\r\n\t\tthis.matrix = camera.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t\tthis.pointMap = pointMap;\r\n\t\r\n\t\tthis.update();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.CameraHelper.prototype.constructor = THREE.CameraHelper;\r\n\t\r\n\tTHREE.CameraHelper.prototype.update = function () {\r\n\t\r\n\t\tvar geometry, pointMap;\r\n\t\r\n\t\tvar vector = new THREE.Vector3();\r\n\t\tvar camera = new THREE.Camera();\r\n\t\r\n\t\tfunction setPoint( point, x, y, z ) {\r\n\t\r\n\t\t\tvector.set( x, y, z ).unproject( camera );\r\n\t\r\n\t\t\tvar points = pointMap[ point ];\r\n\t\r\n\t\t\tif ( points !== undefined ) {\r\n\t\r\n\t\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\t\r\n\t\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn function () {\r\n\t\r\n\t\t\tgeometry = this.geometry;\r\n\t\t\tpointMap = this.pointMap;\r\n\t\r\n\t\t\tvar w = 1, h = 1;\r\n\t\r\n\t\t\t// we need just camera projection matrix\r\n\t\t\t// world matrix must be identity\r\n\t\r\n\t\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\r\n\t\r\n\t\t\t// center / target\r\n\t\r\n\t\t\tsetPoint( \"c\", 0, 0, - 1 );\r\n\t\t\tsetPoint( \"t\", 0, 0,  1 );\r\n\t\r\n\t\t\t// near\r\n\t\r\n\t\t\tsetPoint( \"n1\", - w, - h, - 1 );\r\n\t\t\tsetPoint( \"n2\",   w, - h, - 1 );\r\n\t\t\tsetPoint( \"n3\", - w,   h, - 1 );\r\n\t\t\tsetPoint( \"n4\",   w,   h, - 1 );\r\n\t\r\n\t\t\t// far\r\n\t\r\n\t\t\tsetPoint( \"f1\", - w, - h, 1 );\r\n\t\t\tsetPoint( \"f2\",   w, - h, 1 );\r\n\t\t\tsetPoint( \"f3\", - w,   h, 1 );\r\n\t\t\tsetPoint( \"f4\",   w,   h, 1 );\r\n\t\r\n\t\t\t// up\r\n\t\r\n\t\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\r\n\t\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\r\n\t\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\r\n\t\r\n\t\t\t// cross\r\n\t\r\n\t\t\tsetPoint( \"cf1\", - w,   0, 1 );\r\n\t\t\tsetPoint( \"cf2\",   w,   0, 1 );\r\n\t\t\tsetPoint( \"cf3\",   0, - h, 1 );\r\n\t\t\tsetPoint( \"cf4\",   0,   h, 1 );\r\n\t\r\n\t\t\tsetPoint( \"cn1\", - w,   0, - 1 );\r\n\t\t\tsetPoint( \"cn2\",   w,   0, - 1 );\r\n\t\t\tsetPoint( \"cn3\",   0, - h, - 1 );\r\n\t\t\tsetPoint( \"cn4\",   0,   h, - 1 );\r\n\t\r\n\t\t\tgeometry.verticesNeedUpdate = true;\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\t// File:src/extras/helpers/DirectionalLightHelper.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t */\r\n\t\r\n\tTHREE.DirectionalLightHelper = function ( light, size ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\t\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t\tsize = size || 1;\r\n\t\r\n\t\tvar geometry = new THREE.Geometry();\r\n\t\tgeometry.vertices.push(\r\n\t\t\tnew THREE.Vector3( - size,   size, 0 ),\r\n\t\t\tnew THREE.Vector3(   size,   size, 0 ),\r\n\t\t\tnew THREE.Vector3(   size, - size, 0 ),\r\n\t\t\tnew THREE.Vector3( - size, - size, 0 ),\r\n\t\t\tnew THREE.Vector3( - size,   size, 0 )\r\n\t\t);\r\n\t\r\n\t\tvar material = new THREE.LineBasicMaterial( { fog: false } );\r\n\t\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\r\n\t\tthis.lightPlane = new THREE.Line( geometry, material );\r\n\t\tthis.add( this.lightPlane );\r\n\t\r\n\t\tgeometry = new THREE.Geometry();\r\n\t\tgeometry.vertices.push(\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3()\r\n\t\t);\r\n\t\r\n\t\tmaterial = new THREE.LineBasicMaterial( { fog: false } );\r\n\t\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\r\n\t\tthis.targetLine = new THREE.Line( geometry, material );\r\n\t\tthis.add( this.targetLine );\r\n\t\r\n\t\tthis.update();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;\r\n\t\r\n\tTHREE.DirectionalLightHelper.prototype.dispose = function () {\r\n\t\r\n\t\tthis.lightPlane.geometry.dispose();\r\n\t\tthis.lightPlane.material.dispose();\r\n\t\tthis.targetLine.geometry.dispose();\r\n\t\tthis.targetLine.material.dispose();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.DirectionalLightHelper.prototype.update = function () {\r\n\t\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\t\tvar v3 = new THREE.Vector3();\r\n\t\r\n\t\treturn function () {\r\n\t\r\n\t\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\t\t\tv3.subVectors( v2, v1 );\r\n\t\r\n\t\t\tthis.lightPlane.lookAt( v3 );\r\n\t\t\tthis.lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\r\n\t\t\tthis.targetLine.geometry.vertices[ 1 ].copy( v3 );\r\n\t\t\tthis.targetLine.geometry.verticesNeedUpdate = true;\r\n\t\t\tthis.targetLine.material.color.copy( this.lightPlane.material.color );\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\t// File:src/extras/helpers/EdgesHelper.js\r\n\t\r\n\t/**\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t * @param object THREE.Mesh whose geometry will be used\r\n\t * @param hex line color\r\n\t * @param thresholdAngle the minimum angle (in degrees),\r\n\t * between the face normals of adjacent faces,\r\n\t * that is required to render an edge. A value of 10 means\r\n\t * an edge is only rendered if the angle is at least 10 degrees.\r\n\t */\r\n\t\r\n\tTHREE.EdgesHelper = function ( object, hex, thresholdAngle ) {\r\n\t\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\r\n\t\r\n\t\tTHREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );\r\n\t\r\n\t\tthis.matrix = object.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;\r\n\t\r\n\t// File:src/extras/helpers/FaceNormalsHelper.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t*/\r\n\t\r\n\tTHREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {\r\n\t\r\n\t\t// FaceNormalsHelper only supports THREE.Geometry\r\n\t\r\n\t\tthis.object = object;\r\n\t\r\n\t\tthis.size = ( size !== undefined ) ? size : 1;\r\n\t\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\r\n\t\r\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\t\r\n\t\t//\r\n\t\r\n\t\tvar nNormals = 0;\r\n\t\r\n\t\tvar objGeometry = this.object.geometry;\r\n\t\r\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\tnNormals = objGeometry.faces.length;\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\r\n\t\r\n\t\t}\r\n\t\r\n\t\t//\r\n\t\r\n\t\tvar geometry = new THREE.BufferGeometry();\r\n\t\r\n\t\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\r\n\t\r\n\t\tgeometry.addAttribute( 'position', positions );\r\n\t\r\n\t\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\t\r\n\t\t//\r\n\t\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\tthis.update();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;\r\n\t\r\n\tTHREE.FaceNormalsHelper.prototype.update = ( function () {\r\n\t\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\t\tvar normalMatrix = new THREE.Matrix3();\r\n\t\r\n\t\treturn function update() {\r\n\t\r\n\t\t\tthis.object.updateMatrixWorld( true );\r\n\t\r\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\r\n\t\r\n\t\t\tvar matrixWorld = this.object.matrixWorld;\r\n\t\r\n\t\t\tvar position = this.geometry.attributes.position;\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tvar objGeometry = this.object.geometry;\r\n\t\r\n\t\t\tvar vertices = objGeometry.vertices;\r\n\t\r\n\t\t\tvar faces = objGeometry.faces;\r\n\t\r\n\t\t\tvar idx = 0;\r\n\t\r\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\tvar face = faces[ i ];\r\n\t\r\n\t\t\t\tvar normal = face.normal;\r\n\t\r\n\t\t\t\tv1.copy( vertices[ face.a ] )\r\n\t\t\t\t\t.add( vertices[ face.b ] )\r\n\t\t\t\t\t.add( vertices[ face.c ] )\r\n\t\t\t\t\t.divideScalar( 3 )\r\n\t\t\t\t\t.applyMatrix4( matrixWorld );\r\n\t\r\n\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\t\r\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\t\r\n\t\t\t\tidx = idx + 1;\r\n\t\r\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\t\r\n\t\t\t\tidx = idx + 1;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tposition.needsUpdate = true;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t}() );\r\n\t\r\n\t// File:src/extras/helpers/GridHelper.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.GridHelper = function ( size, step ) {\r\n\t\r\n\t\tvar geometry = new THREE.Geometry();\r\n\t\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\r\n\t\r\n\t\tthis.color1 = new THREE.Color( 0x444444 );\r\n\t\tthis.color2 = new THREE.Color( 0x888888 );\r\n\t\r\n\t\tfor ( var i = - size; i <= size; i += step ) {\r\n\t\r\n\t\t\tgeometry.vertices.push(\r\n\t\t\t\tnew THREE.Vector3( - size, 0, i ), new THREE.Vector3( size, 0, i ),\r\n\t\t\t\tnew THREE.Vector3( i, 0, - size ), new THREE.Vector3( i, 0, size )\r\n\t\t\t);\r\n\t\r\n\t\t\tvar color = i === 0 ? this.color1 : this.color2;\r\n\t\r\n\t\t\tgeometry.colors.push( color, color, color, color );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tTHREE.LineSegments.call( this, geometry, material );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.GridHelper.prototype.constructor = THREE.GridHelper;\r\n\t\r\n\tTHREE.GridHelper.prototype.setColors = function( colorCenterLine, colorGrid ) {\r\n\t\r\n\t\tthis.color1.set( colorCenterLine );\r\n\t\tthis.color2.set( colorGrid );\r\n\t\r\n\t\tthis.geometry.colorsNeedUpdate = true;\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/helpers/HemisphereLightHelper.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.HemisphereLightHelper = function ( light, sphereSize ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\t\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t\tthis.colors = [ new THREE.Color(), new THREE.Color() ];\r\n\t\r\n\t\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\r\n\t\tgeometry.rotateX( - Math.PI / 2 );\r\n\t\r\n\t\tfor ( var i = 0, il = 8; i < il; i ++ ) {\r\n\t\r\n\t\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\r\n\t\r\n\t\t}\r\n\t\r\n\t\tvar material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );\r\n\t\r\n\t\tthis.lightSphere = new THREE.Mesh( geometry, material );\r\n\t\tthis.add( this.lightSphere );\r\n\t\r\n\t\tthis.update();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;\r\n\t\r\n\tTHREE.HemisphereLightHelper.prototype.dispose = function () {\r\n\t\r\n\t\tthis.lightSphere.geometry.dispose();\r\n\t\tthis.lightSphere.material.dispose();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.HemisphereLightHelper.prototype.update = function () {\r\n\t\r\n\t\tvar vector = new THREE.Vector3();\r\n\t\r\n\t\treturn function () {\r\n\t\r\n\t\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\r\n\t\r\n\t\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\r\n\t\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\r\n\t\r\n\t\t}\r\n\t\r\n\t}();\r\n\t\r\n\t// File:src/extras/helpers/PointLightHelper.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.PointLightHelper = function ( light, sphereSize ) {\r\n\t\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\t\r\n\t\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\r\n\t\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\t\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\r\n\t\tTHREE.Mesh.call( this, geometry, material );\r\n\t\r\n\t\tthis.matrix = this.light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t\t/*\r\n\t\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\r\n\t\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n\t\r\n\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n\t\r\n\t\tvar d = light.distance;\r\n\t\r\n\t\tif ( d === 0.0 ) {\r\n\t\r\n\t\t\tthis.lightDistance.visible = false;\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.lightDistance.scale.set( d, d, d );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.add( this.lightDistance );\r\n\t\t*/\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );\r\n\tTHREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;\r\n\t\r\n\tTHREE.PointLightHelper.prototype.dispose = function () {\r\n\t\r\n\t\tthis.geometry.dispose();\r\n\t\tthis.material.dispose();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.PointLightHelper.prototype.update = function () {\r\n\t\r\n\t\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\r\n\t\t/*\r\n\t\tvar d = this.light.distance;\r\n\t\r\n\t\tif ( d === 0.0 ) {\r\n\t\r\n\t\t\tthis.lightDistance.visible = false;\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tthis.lightDistance.visible = true;\r\n\t\t\tthis.lightDistance.scale.set( d, d, d );\r\n\t\r\n\t\t}\r\n\t\t*/\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/helpers/SkeletonHelper.js\r\n\t\r\n\t/**\r\n\t * @author Sean Griffin / http://twitter.com/sgrif\r\n\t * @author Michael Guerrero / http://realitymeltdown.com\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author ikerr / http://verold.com\r\n\t */\r\n\t\r\n\tTHREE.SkeletonHelper = function ( object ) {\r\n\t\r\n\t\tthis.bones = this.getBoneList( object );\r\n\t\r\n\t\tvar geometry = new THREE.Geometry();\r\n\t\r\n\t\tfor ( var i = 0; i < this.bones.length; i ++ ) {\r\n\t\r\n\t\t\tvar bone = this.bones[ i ];\r\n\t\r\n\t\t\tif ( bone.parent instanceof THREE.Bone ) {\r\n\t\r\n\t\t\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\t\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\t\t\tgeometry.colors.push( new THREE.Color( 0, 0, 1 ) );\r\n\t\t\t\tgeometry.colors.push( new THREE.Color( 0, 1, 0 ) );\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tgeometry.dynamic = true;\r\n\t\r\n\t\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );\r\n\t\r\n\t\tTHREE.LineSegments.call( this, geometry, material );\r\n\t\r\n\t\tthis.root = object;\r\n\t\r\n\t\tthis.matrix = object.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t\tthis.update();\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\tTHREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;\r\n\t\r\n\tTHREE.SkeletonHelper.prototype.getBoneList = function( object ) {\r\n\t\r\n\t\tvar boneList = [];\r\n\t\r\n\t\tif ( object instanceof THREE.Bone ) {\r\n\t\r\n\t\t\tboneList.push( object );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfor ( var i = 0; i < object.children.length; i ++ ) {\r\n\t\r\n\t\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn boneList;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SkeletonHelper.prototype.update = function () {\r\n\t\r\n\t\tvar geometry = this.geometry;\r\n\t\r\n\t\tvar matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );\r\n\t\r\n\t\tvar boneMatrix = new THREE.Matrix4();\r\n\t\r\n\t\tvar j = 0;\r\n\t\r\n\t\tfor ( var i = 0; i < this.bones.length; i ++ ) {\r\n\t\r\n\t\t\tvar bone = this.bones[ i ];\r\n\t\r\n\t\t\tif ( bone.parent instanceof THREE.Bone ) {\r\n\t\r\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\r\n\t\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\r\n\t\r\n\t\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\r\n\t\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\r\n\t\r\n\t\t\t\tj += 2;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tgeometry.verticesNeedUpdate = true;\r\n\t\r\n\t\tgeometry.computeBoundingSphere();\r\n\t\r\n\t};\r\n\t\r\n\t// File:src/extras/helpers/SpotLightHelper.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t*/\r\n\t\r\n\tTHREE.SpotLightHelper = function ( light ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.light = light;\r\n\t\tthis.light.updateMatrixWorld();\r\n\t\r\n\t\tthis.matrix = light.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t\tvar geometry = new THREE.CylinderGeometry( 0, 1, 1, 8, 1, true );\r\n\t\r\n\t\tgeometry.translate( 0, - 0.5, 0 );\r\n\t\tgeometry.rotateX( - Math.PI / 2 );\r\n\t\r\n\t\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\t\r\n\t\tthis.cone = new THREE.Mesh( geometry, material );\r\n\t\tthis.add( this.cone );\r\n\t\r\n\t\tthis.update();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;\r\n\t\r\n\tTHREE.SpotLightHelper.prototype.dispose = function () {\r\n\t\r\n\t\tthis.cone.geometry.dispose();\r\n\t\tthis.cone.material.dispose();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.SpotLightHelper.prototype.update = function () {\r\n\t\r\n\t\tvar vector = new THREE.Vector3();\r\n\t\tvar vector2 = new THREE.Vector3();\r\n\t\r\n\t\treturn function () {\r\n\t\r\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 10000;\r\n\t\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\r\n\t\r\n\t\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\r\n\t\r\n\t\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\t\r\n\t\t\tthis.cone.lookAt( vector2.sub( vector ) );\r\n\t\r\n\t\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\r\n\t\t};\r\n\t\r\n\t}();\r\n\t\r\n\t// File:src/extras/helpers/VertexNormalsHelper.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t * @author WestLangley / http://github.com/WestLangley\r\n\t*/\r\n\t\r\n\tTHREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {\r\n\t\r\n\t\tthis.object = object;\r\n\t\r\n\t\tthis.size = ( size !== undefined ) ? size : 1;\r\n\t\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\r\n\t\r\n\t\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\t\r\n\t\t//\r\n\t\r\n\t\tvar nNormals = 0;\r\n\t\r\n\t\tvar objGeometry = this.object.geometry;\r\n\t\r\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\tnNormals = objGeometry.faces.length * 3;\r\n\t\r\n\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\tnNormals = objGeometry.attributes.normal.count\r\n\t\r\n\t\t}\r\n\t\r\n\t\t//\r\n\t\r\n\t\tvar geometry = new THREE.BufferGeometry();\r\n\t\r\n\t\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\r\n\t\r\n\t\tgeometry.addAttribute( 'position', positions );\r\n\t\r\n\t\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\t\r\n\t\t//\r\n\t\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t\tthis.update();\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;\r\n\t\r\n\tTHREE.VertexNormalsHelper.prototype.update = ( function () {\r\n\t\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\t\tvar normalMatrix = new THREE.Matrix3();\r\n\t\r\n\t\treturn function update() {\r\n\t\r\n\t\t\tvar keys = [ 'a', 'b', 'c' ];\r\n\t\r\n\t\t\tthis.object.updateMatrixWorld( true );\r\n\t\r\n\t\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\r\n\t\r\n\t\t\tvar matrixWorld = this.object.matrixWorld;\r\n\t\r\n\t\t\tvar position = this.geometry.attributes.position;\r\n\t\r\n\t\t\t//\r\n\t\r\n\t\t\tvar objGeometry = this.object.geometry;\r\n\t\r\n\t\t\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\t\r\n\t\t\t\tvar vertices = objGeometry.vertices;\r\n\t\r\n\t\t\t\tvar faces = objGeometry.faces;\r\n\t\r\n\t\t\t\tvar idx = 0;\r\n\t\r\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\t\r\n\t\t\t\t\tvar face = faces[ i ];\r\n\t\r\n\t\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\r\n\t\r\n\t\t\t\t\t\tvar normal = face.vertexNormals[ j ];\r\n\t\r\n\t\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\r\n\t\r\n\t\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\t\r\n\t\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\t\r\n\t\t\t\t\t\tidx = idx + 1;\r\n\t\r\n\t\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\t\r\n\t\t\t\t\t\tidx = idx + 1;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\r\n\t\r\n\t\t\t\tvar objPos = objGeometry.attributes.position;\r\n\t\r\n\t\t\t\tvar objNorm = objGeometry.attributes.normal;\r\n\t\r\n\t\t\t\tvar idx = 0;\r\n\t\r\n\t\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\r\n\t\r\n\t\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\r\n\t\r\n\t\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\r\n\t\r\n\t\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\r\n\t\r\n\t\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\t\r\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\t\r\n\t\t\t\t\tidx = idx + 1;\r\n\t\r\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\t\r\n\t\t\t\t\tidx = idx + 1;\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tposition.needsUpdate = true;\r\n\t\r\n\t\t\treturn this;\r\n\t\r\n\t\t}\r\n\t\r\n\t}() );\r\n\t\r\n\t// File:src/extras/helpers/WireframeHelper.js\r\n\t\r\n\t/**\r\n\t * @author mrdoob / http://mrdoob.com/\r\n\t */\r\n\t\r\n\tTHREE.WireframeHelper = function ( object, hex ) {\r\n\t\r\n\t\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\r\n\t\r\n\t\tTHREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );\r\n\t\r\n\t\tthis.matrix = object.matrixWorld;\r\n\t\tthis.matrixAutoUpdate = false;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\n\tTHREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;\r\n\t\r\n\t// File:src/extras/objects/ImmediateRenderObject.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.ImmediateRenderObject = function ( material ) {\r\n\t\r\n\t\tTHREE.Object3D.call( this );\r\n\t\r\n\t\tthis.material = material;\r\n\t\tthis.render = function ( renderCallback ) {};\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\r\n\tTHREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;\r\n\t\r\n\t// File:src/extras/objects/MorphBlendMesh.js\r\n\t\r\n\t/**\r\n\t * @author alteredq / http://alteredqualia.com/\r\n\t */\r\n\t\r\n\tTHREE.MorphBlendMesh = function( geometry, material ) {\r\n\t\r\n\t\tTHREE.Mesh.call( this, geometry, material );\r\n\t\r\n\t\tthis.animationsMap = {};\r\n\t\tthis.animationsList = [];\r\n\t\r\n\t\t// prepare default animation\r\n\t\t// (all frames played together in 1 second)\r\n\t\r\n\t\tvar numFrames = this.geometry.morphTargets.length;\r\n\t\r\n\t\tvar name = \"__default\";\r\n\t\r\n\t\tvar startFrame = 0;\r\n\t\tvar endFrame = numFrames - 1;\r\n\t\r\n\t\tvar fps = numFrames / 1;\r\n\t\r\n\t\tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\t\tthis.setAnimationWeight( name, 1 );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\r\n\tTHREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\t\r\n\t\tvar animation = {\r\n\t\r\n\t\t\tstart: start,\r\n\t\t\tend: end,\r\n\t\r\n\t\t\tlength: end - start + 1,\r\n\t\r\n\t\t\tfps: fps,\r\n\t\t\tduration: ( end - start ) / fps,\r\n\t\r\n\t\t\tlastFrame: 0,\r\n\t\t\tcurrentFrame: 0,\r\n\t\r\n\t\t\tactive: false,\r\n\t\r\n\t\t\ttime: 0,\r\n\t\t\tdirection: 1,\r\n\t\t\tweight: 1,\r\n\t\r\n\t\t\tdirectionBackwards: false,\r\n\t\t\tmirroredLoop: false\r\n\t\r\n\t\t};\r\n\t\r\n\t\tthis.animationsMap[ name ] = animation;\r\n\t\tthis.animationsList.push( animation );\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\t\r\n\t\tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\t\r\n\t\tvar firstAnimation, frameRanges = {};\r\n\t\r\n\t\tvar geometry = this.geometry;\r\n\t\r\n\t\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\t\r\n\t\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\t\tvar chunks = morph.name.match( pattern );\r\n\t\r\n\t\t\tif ( chunks && chunks.length > 1 ) {\r\n\t\r\n\t\t\t\tvar name = chunks[ 1 ];\r\n\t\r\n\t\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\t\r\n\t\t\t\tvar range = frameRanges[ name ];\r\n\t\r\n\t\t\t\tif ( i < range.start ) range.start = i;\r\n\t\t\t\tif ( i > range.end ) range.end = i;\r\n\t\r\n\t\t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t\tfor ( var name in frameRanges ) {\r\n\t\r\n\t\t\tvar range = frameRanges[ name ];\r\n\t\t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\t\r\n\t\t}\r\n\t\r\n\t\tthis.firstAnimation = firstAnimation;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.direction = 1;\r\n\t\t\tanimation.directionBackwards = false;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.direction = - 1;\r\n\t\t\tanimation.directionBackwards = true;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.fps = fps;\r\n\t\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.duration = duration;\r\n\t\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.weight = weight;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.time = time;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\t\r\n\t\tvar time = 0;\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\ttime = animation.time;\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn time;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\t\r\n\t\tvar duration = - 1;\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tduration = animation.duration;\r\n\t\r\n\t\t}\r\n\t\r\n\t\treturn duration;\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.time = 0;\r\n\t\t\tanimation.active = true;\r\n\t\r\n\t\t} else {\r\n\t\r\n\t\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\t\r\n\t\tvar animation = this.animationsMap[ name ];\r\n\t\r\n\t\tif ( animation ) {\r\n\t\r\n\t\t\tanimation.active = false;\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\tTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\r\n\t\r\n\t\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\t\r\n\t\t\tvar animation = this.animationsList[ i ];\r\n\t\r\n\t\t\tif ( ! animation.active ) continue;\r\n\t\r\n\t\t\tvar frameTime = animation.duration / animation.length;\r\n\t\r\n\t\t\tanimation.time += animation.direction * delta;\r\n\t\r\n\t\t\tif ( animation.mirroredLoop ) {\r\n\t\r\n\t\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\t\r\n\t\t\t\t\tanimation.direction *= - 1;\r\n\t\r\n\t\t\t\t\tif ( animation.time > animation.duration ) {\r\n\t\r\n\t\t\t\t\t\tanimation.time = animation.duration;\r\n\t\t\t\t\t\tanimation.directionBackwards = true;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif ( animation.time < 0 ) {\r\n\t\r\n\t\t\t\t\t\tanimation.time = 0;\r\n\t\t\t\t\t\tanimation.directionBackwards = false;\r\n\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t}\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tanimation.time = animation.time % animation.duration;\r\n\t\r\n\t\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t\t\tvar weight = animation.weight;\r\n\t\r\n\t\t\tif ( keyframe !== animation.currentFrame ) {\r\n\t\r\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\t\r\n\t\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\t\r\n\t\t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t\t\t\tanimation.currentFrame = keyframe;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\t\r\n\t\t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\t\r\n\t\t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\t\r\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\t\r\n\t\t\t} else {\r\n\t\r\n\t\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\t\r\n\t\t\t}\r\n\t\r\n\t\t}\r\n\t\r\n\t};\r\n\t\r\n\t\r\n\t// Export the THREE object for **Node.js**, with\r\n\t// backwards-compatibility for the old `require()` API. If we're in\r\n\t// the browser, add `_` as a global object via a string identifier,\r\n\t// for Closure Compiler \"advanced\" mode.\r\n\tif (true) {\r\n\t  if (typeof module !== 'undefined' && module.exports) {\r\n\t    exports = module.exports = THREE;\r\n\t  }\r\n\t  exports.THREE = THREE;\r\n\t} else {\r\n\t  this['THREE'] = THREE;\r\n\t}\r\n\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** index.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap cf3e795a3d2909605009\n **/","require './style.css'\nTHREE = require 'three'\n\nscene = new THREE.Scene()\n\ncamera = new THREE.PerspectiveCamera 75, window.innerWidth / window.innerHeight, 0.1, 1000\n\nrenderer = new THREE.WebGLRenderer()\n\nrenderer.setSize window.innerWidth, window.innerHeight\n\ndocument.body.appendChild renderer.domElement\n\nlight = new THREE.DirectionalLight 0xffffff, 1.0, 0\nlight.position.set 100, 100, 100\nscene.add light\n\nlight2 = new THREE.DirectionalLight 0xffffff, 1.0, 0\nlight2.position.set -100, 100, -100\nscene.add light2\n\nbox = new THREE.Mesh (new THREE.BoxGeometry 1, 1, 1),\n\tnew THREE.MeshPhongMaterial\n\t\tcolor: 0xffffff\n\t\tspecular: 0xffffff\n\t\tshininess: 20\n\t\tmorphTargets: true\n\t\tvertexColors: THREE.FaceColors\n\t\tshading: THREE.FlatShading\n\nscene.add box\n\nbox.rotation.x = 0.5\nbox.rotation.y = 0.5\nbox.position.z = -5\n\nanimate = ->\n\trequestAnimationFrame animate\n\trender()\n\nrender = ->\n\ttimer = 0.002 * Date.now()\n\tbox.position.y = 0.5 + 0.5 * Math.sin timer\n\trenderer.render scene, camera\n\nanimate()\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.coffee\n **/","exports = module.exports = require(\"./../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"body,html{margin:0;padding:0}\", \"\"]);\n\n// exports\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader!./src/style.css\n ** module id = 2\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/css-loader/lib/css-base.js\n ** module id = 3\n ** module chunks = 0\n **/","/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0,\r\n\tstyleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t// By default, add <style> tags to the bottom of <head>.\r\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n\tvar head = getHeadElement();\r\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\tif (options.insertAt === \"top\") {\r\n\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t} else {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t}\r\n\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t} else if (options.insertAt === \"bottom\") {\r\n\t\thead.appendChild(styleElement);\r\n\t} else {\r\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n\tstyleElement.parentNode.removeChild(styleElement);\r\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\tif(idx >= 0) {\r\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tstyleElement.type = \"text/css\";\r\n\tinsertStyleElement(options, styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tlinkElement.rel = \"stylesheet\";\r\n\tinsertStyleElement(options, linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement(options);\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement(options);\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/style-loader/addStyles.js\n ** module id = 4\n ** module chunks = 0\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!./../node_modules/css-loader/index.js!./style.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!./../node_modules/style-loader/addStyles.js\")(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../node_modules/css-loader/index.js!./style.css\", function() {\n\t\t\tvar newContent = require(\"!!./../node_modules/css-loader/index.js!./style.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/style.css\n ** module id = 5\n ** module chunks = 0\n **/","var self = self || {};// File:src/Three.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar THREE = { REVISION: '75' };\r\n\r\n//\r\n\r\nif ( typeof define === 'function' && define.amd ) {\r\n\r\n\tdefine( 'three', THREE );\r\n\r\n} else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {\r\n\r\n\tmodule.exports = THREE;\r\n\r\n}\r\n\r\n//\r\n\r\nif ( Number.EPSILON === undefined ) {\r\n\r\n\tNumber.EPSILON = Math.pow( 2, - 52 );\r\n\r\n}\r\n\r\n//\r\n\r\nif ( Math.sign === undefined ) {\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\r\n\r\n\tMath.sign = function ( x ) {\r\n\r\n\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\r\n\r\n\t};\r\n\r\n}\r\n\r\nif ( Function.prototype.name === undefined && Object.defineProperty !== undefined ) {\r\n\r\n\t// Missing in IE9-11.\r\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\r\n\r\n\tObject.defineProperty( Function.prototype, 'name', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n}\r\n\r\nif ( Object.assign === undefined ) {\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n\r\n\tObject.defineProperty( Object, 'assign', {\r\n\r\n\t\twritable: true,\r\n\t\tconfigurable: true,\r\n\r\n\t\tvalue: function ( target ) {\r\n\r\n\t\t\t'use strict';\r\n\r\n\t\t\tif ( target === undefined || target === null ) {\r\n\r\n\t\t\t\tthrow new TypeError( \"Cannot convert first argument to object\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar to = Object( target );\r\n\r\n\t\t\tfor ( var i = 1, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar nextSource = arguments[ i ];\r\n\r\n\t\t\t\tif ( nextSource === undefined || nextSource === null ) continue;\r\n\r\n\t\t\t\tnextSource = Object( nextSource );\r\n\r\n\t\t\t\tvar keysArray = Object.keys( nextSource );\r\n\r\n\t\t\t\tfor ( var nextIndex = 0, len = keysArray.length; nextIndex !== len; ++ nextIndex ) {\r\n\r\n\t\t\t\t\tvar nextKey = keysArray[ nextIndex ];\r\n\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor( nextSource, nextKey );\r\n\r\n\t\t\t\t\tif ( desc !== undefined && desc.enumerable ) {\r\n\r\n\t\t\t\t\t\tto[ nextKey ] = nextSource[ nextKey ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn to;\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n}\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\r\n\r\nTHREE.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };\r\n\r\n// GL STATE CONSTANTS\r\n\r\nTHREE.CullFaceNone = 0;\r\nTHREE.CullFaceBack = 1;\r\nTHREE.CullFaceFront = 2;\r\nTHREE.CullFaceFrontBack = 3;\r\n\r\nTHREE.FrontFaceDirectionCW = 0;\r\nTHREE.FrontFaceDirectionCCW = 1;\r\n\r\n// SHADOWING TYPES\r\n\r\nTHREE.BasicShadowMap = 0;\r\nTHREE.PCFShadowMap = 1;\r\nTHREE.PCFSoftShadowMap = 2;\r\n\r\n// MATERIAL CONSTANTS\r\n\r\n// side\r\n\r\nTHREE.FrontSide = 0;\r\nTHREE.BackSide = 1;\r\nTHREE.DoubleSide = 2;\r\n\r\n// shading\r\n\r\nTHREE.FlatShading = 1;\r\nTHREE.SmoothShading = 2;\r\n\r\n// colors\r\n\r\nTHREE.NoColors = 0;\r\nTHREE.FaceColors = 1;\r\nTHREE.VertexColors = 2;\r\n\r\n// blending modes\r\n\r\nTHREE.NoBlending = 0;\r\nTHREE.NormalBlending = 1;\r\nTHREE.AdditiveBlending = 2;\r\nTHREE.SubtractiveBlending = 3;\r\nTHREE.MultiplyBlending = 4;\r\nTHREE.CustomBlending = 5;\r\n\r\n// custom blending equations\r\n// (numbers start from 100 not to clash with other\r\n// mappings to OpenGL constants defined in Texture.js)\r\n\r\nTHREE.AddEquation = 100;\r\nTHREE.SubtractEquation = 101;\r\nTHREE.ReverseSubtractEquation = 102;\r\nTHREE.MinEquation = 103;\r\nTHREE.MaxEquation = 104;\r\n\r\n// custom blending destination factors\r\n\r\nTHREE.ZeroFactor = 200;\r\nTHREE.OneFactor = 201;\r\nTHREE.SrcColorFactor = 202;\r\nTHREE.OneMinusSrcColorFactor = 203;\r\nTHREE.SrcAlphaFactor = 204;\r\nTHREE.OneMinusSrcAlphaFactor = 205;\r\nTHREE.DstAlphaFactor = 206;\r\nTHREE.OneMinusDstAlphaFactor = 207;\r\n\r\n// custom blending source factors\r\n\r\n//THREE.ZeroFactor = 200;\r\n//THREE.OneFactor = 201;\r\n//THREE.SrcAlphaFactor = 204;\r\n//THREE.OneMinusSrcAlphaFactor = 205;\r\n//THREE.DstAlphaFactor = 206;\r\n//THREE.OneMinusDstAlphaFactor = 207;\r\nTHREE.DstColorFactor = 208;\r\nTHREE.OneMinusDstColorFactor = 209;\r\nTHREE.SrcAlphaSaturateFactor = 210;\r\n\r\n// depth modes\r\n\r\nTHREE.NeverDepth = 0;\r\nTHREE.AlwaysDepth = 1;\r\nTHREE.LessDepth = 2;\r\nTHREE.LessEqualDepth = 3;\r\nTHREE.EqualDepth = 4;\r\nTHREE.GreaterEqualDepth = 5;\r\nTHREE.GreaterDepth = 6;\r\nTHREE.NotEqualDepth = 7;\r\n\r\n\r\n// TEXTURE CONSTANTS\r\n\r\nTHREE.MultiplyOperation = 0;\r\nTHREE.MixOperation = 1;\r\nTHREE.AddOperation = 2;\r\n\r\n// Tone Mapping modes\r\n\r\nTHREE.NoToneMapping = 0; // do not do any tone mapping, not even exposure (required for special purpose passes.)\r\nTHREE.LinearToneMapping = 1; // only apply exposure.\r\nTHREE.ReinhardToneMapping = 2;\r\nTHREE.Uncharted2ToneMapping = 3; // John Hable\r\nTHREE.CineonToneMapping = 4;  // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\r\n\r\n// Mapping modes\r\n\r\nTHREE.UVMapping = 300;\r\n\r\nTHREE.CubeReflectionMapping = 301;\r\nTHREE.CubeRefractionMapping = 302;\r\n\r\nTHREE.EquirectangularReflectionMapping = 303;\r\nTHREE.EquirectangularRefractionMapping = 304;\r\n\r\nTHREE.SphericalReflectionMapping = 305;\r\nTHREE.CubeUVReflectionMapping = 306;\r\nTHREE.CubeUVRefractionMapping = 307;\r\n\r\n// Wrapping modes\r\n\r\nTHREE.RepeatWrapping = 1000;\r\nTHREE.ClampToEdgeWrapping = 1001;\r\nTHREE.MirroredRepeatWrapping = 1002;\r\n\r\n// Filters\r\n\r\nTHREE.NearestFilter = 1003;\r\nTHREE.NearestMipMapNearestFilter = 1004;\r\nTHREE.NearestMipMapLinearFilter = 1005;\r\nTHREE.LinearFilter = 1006;\r\nTHREE.LinearMipMapNearestFilter = 1007;\r\nTHREE.LinearMipMapLinearFilter = 1008;\r\n\r\n// Data types\r\n\r\nTHREE.UnsignedByteType = 1009;\r\nTHREE.ByteType = 1010;\r\nTHREE.ShortType = 1011;\r\nTHREE.UnsignedShortType = 1012;\r\nTHREE.IntType = 1013;\r\nTHREE.UnsignedIntType = 1014;\r\nTHREE.FloatType = 1015;\r\nTHREE.HalfFloatType = 1025;\r\n\r\n// Pixel types\r\n\r\n//THREE.UnsignedByteType = 1009;\r\nTHREE.UnsignedShort4444Type = 1016;\r\nTHREE.UnsignedShort5551Type = 1017;\r\nTHREE.UnsignedShort565Type = 1018;\r\n\r\n// Pixel formats\r\n\r\nTHREE.AlphaFormat = 1019;\r\nTHREE.RGBFormat = 1020;\r\nTHREE.RGBAFormat = 1021;\r\nTHREE.LuminanceFormat = 1022;\r\nTHREE.LuminanceAlphaFormat = 1023;\r\n// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders\r\nTHREE.RGBEFormat = THREE.RGBAFormat; //1024;\r\n\r\n// DDS / ST3C Compressed texture formats\r\n\r\nTHREE.RGB_S3TC_DXT1_Format = 2001;\r\nTHREE.RGBA_S3TC_DXT1_Format = 2002;\r\nTHREE.RGBA_S3TC_DXT3_Format = 2003;\r\nTHREE.RGBA_S3TC_DXT5_Format = 2004;\r\n\r\n\r\n// PVRTC compressed texture formats\r\n\r\nTHREE.RGB_PVRTC_4BPPV1_Format = 2100;\r\nTHREE.RGB_PVRTC_2BPPV1_Format = 2101;\r\nTHREE.RGBA_PVRTC_4BPPV1_Format = 2102;\r\nTHREE.RGBA_PVRTC_2BPPV1_Format = 2103;\r\n\r\n// ETC compressed texture formats\r\n\r\nTHREE.RGB_ETC1_Format = 2151;\r\n\r\n// Loop styles for AnimationAction\r\n\r\nTHREE.LoopOnce = 2200;\r\nTHREE.LoopRepeat = 2201;\r\nTHREE.LoopPingPong = 2202;\r\n\r\n// Interpolation\r\n\r\nTHREE.InterpolateDiscrete = 2300;\r\nTHREE.InterpolateLinear = 2301;\r\nTHREE.InterpolateSmooth = 2302;\r\n\r\n// Interpolant ending modes\r\n\r\nTHREE.ZeroCurvatureEnding = 2400;\r\nTHREE.ZeroSlopeEnding = 2401;\r\nTHREE.WrapAroundEnding = 2402;\r\n\r\n// Triangle Draw modes\r\n\r\nTHREE.TrianglesDrawMode = 0;\r\nTHREE.TriangleStripDrawMode = 1;\r\nTHREE.TriangleFanDrawMode = 2;\r\n\r\n// Texture Encodings\r\n\r\nTHREE.LinearEncoding = 3000; // No encoding at all.\r\nTHREE.sRGBEncoding = 3001;\r\nTHREE.GammaEncoding = 3007; // uses GAMMA_FACTOR, for backwards compatibility with WebGLRenderer.gammaInput/gammaOutput\r\n\r\n// The following Texture Encodings are for RGB-only (no alpha) HDR light emission sources.\r\n// These encodings should not specified as output encodings except in rare situations.\r\nTHREE.RGBEEncoding = 3002; // AKA Radiance.\r\nTHREE.LogLuvEncoding = 3003;\r\nTHREE.RGBM7Encoding = 3004;\r\nTHREE.RGBM16Encoding = 3005;\r\nTHREE.RGBDEncoding = 3006; // MaxRange is 256.\r\n\r\n// File:src/math/Color.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Color = function ( color ) {\r\n\r\n\tif ( arguments.length === 3 ) {\r\n\r\n\t\treturn this.fromArray( arguments );\r\n\r\n\t}\r\n\r\n\treturn this.set( color );\r\n\r\n};\r\n\r\nTHREE.Color.prototype = {\r\n\r\n\tconstructor: THREE.Color,\r\n\r\n\tr: 1, g: 1, b: 1,\r\n\r\n\tset: function ( value ) {\r\n\r\n\t\tif ( value instanceof THREE.Color ) {\r\n\r\n\t\t\tthis.copy( value );\r\n\r\n\t\t} else if ( typeof value === 'number' ) {\r\n\r\n\t\t\tthis.setHex( value );\r\n\r\n\t\t} else if ( typeof value === 'string' ) {\r\n\r\n\t\t\tthis.setStyle( value );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.r = scalar;\r\n\t\tthis.g = scalar;\r\n\t\tthis.b = scalar;\r\n\r\n\t},\r\n\r\n\tsetHex: function ( hex ) {\r\n\r\n\t\thex = Math.floor( hex );\r\n\r\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRGB: function ( r, g, b ) {\r\n\r\n\t\tthis.r = r;\r\n\t\tthis.g = g;\r\n\t\tthis.b = b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetHSL: function () {\r\n\r\n\t\tfunction hue2rgb( p, q, t ) {\r\n\r\n\t\t\tif ( t < 0 ) t += 1;\r\n\t\t\tif ( t > 1 ) t -= 1;\r\n\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\r\n\t\t\tif ( t < 1 / 2 ) return q;\r\n\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\r\n\t\t\treturn p;\r\n\r\n\t\t}\r\n\r\n\t\treturn function ( h, s, l ) {\r\n\r\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\t\th = THREE.Math.euclideanModulo( h, 1 );\r\n\t\t\ts = THREE.Math.clamp( s, 0, 1 );\r\n\t\t\tl = THREE.Math.clamp( l, 0, 1 );\r\n\r\n\t\t\tif ( s === 0 ) {\r\n\r\n\t\t\t\tthis.r = this.g = this.b = l;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\r\n\t\t\t\tvar q = ( 2 * l ) - p;\r\n\r\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\r\n\t\t\t\tthis.g = hue2rgb( q, p, h );\r\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetStyle: function ( style ) {\r\n\r\n\t\tfunction handleAlpha( string ) {\r\n\r\n\t\t\tif ( string === undefined ) return;\r\n\r\n\t\t\tif ( parseFloat( string ) < 1 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tvar m;\r\n\r\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\r\n\r\n\t\t\t// rgb / hsl\r\n\r\n\t\t\tvar color;\r\n\t\t\tvar name = m[ 1 ];\r\n\t\t\tvar components = m[ 2 ];\r\n\r\n\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\tcase 'rgb':\r\n\t\t\t\tcase 'rgba':\r\n\r\n\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\r\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\r\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\r\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\r\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\r\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'hsl':\r\n\t\t\t\tcase 'hsla':\r\n\r\n\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\r\n\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\r\n\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\r\n\r\n\t\t\t// hex color\r\n\r\n\t\t\tvar hex = m[ 1 ];\r\n\t\t\tvar size = hex.length;\r\n\r\n\t\t\tif ( size === 3 ) {\r\n\r\n\t\t\t\t// #ff0\r\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\r\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t} else if ( size === 6 ) {\r\n\r\n\t\t\t\t// #ff0000\r\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\r\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( style && style.length > 0 ) {\r\n\r\n\t\t\t// color keywords\r\n\t\t\tvar hex = THREE.ColorKeywords[ style ];\r\n\r\n\t\t\tif ( hex !== undefined ) {\r\n\r\n\t\t\t\t// red\r\n\t\t\t\tthis.setHex( hex );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// unknown color\r\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.r, this.g, this.b );\r\n\r\n\t},\r\n\r\n\tcopy: function ( color ) {\r\n\r\n\t\tthis.r = color.r;\r\n\t\tthis.g = color.g;\r\n\t\tthis.b = color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyGammaToLinear: function ( color, gammaFactor ) {\r\n\r\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\r\n\t\tthis.r = Math.pow( color.r, gammaFactor );\r\n\t\tthis.g = Math.pow( color.g, gammaFactor );\r\n\t\tthis.b = Math.pow( color.b, gammaFactor );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyLinearToGamma: function ( color, gammaFactor ) {\r\n\r\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\r\n\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\r\n\r\n\t\tthis.r = Math.pow( color.r, safeInverse );\r\n\t\tthis.g = Math.pow( color.g, safeInverse );\r\n\t\tthis.b = Math.pow( color.b, safeInverse );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertGammaToLinear: function () {\r\n\r\n\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\tthis.r = r * r;\r\n\t\tthis.g = g * g;\r\n\t\tthis.b = b * b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertLinearToGamma: function () {\r\n\r\n\t\tthis.r = Math.sqrt( this.r );\r\n\t\tthis.g = Math.sqrt( this.g );\r\n\t\tthis.b = Math.sqrt( this.b );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetHex: function () {\r\n\r\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\r\n\r\n\t},\r\n\r\n\tgetHexString: function () {\r\n\r\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\r\n\r\n\t},\r\n\r\n\tgetHSL: function ( optionalTarget ) {\r\n\r\n\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\r\n\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\r\n\r\n\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\tvar max = Math.max( r, g, b );\r\n\t\tvar min = Math.min( r, g, b );\r\n\r\n\t\tvar hue, saturation;\r\n\t\tvar lightness = ( min + max ) / 2.0;\r\n\r\n\t\tif ( min === max ) {\r\n\r\n\t\t\thue = 0;\r\n\t\t\tsaturation = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar delta = max - min;\r\n\r\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\r\n\r\n\t\t\tswitch ( max ) {\r\n\r\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\r\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\r\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\r\n\r\n\t\t\t}\r\n\r\n\t\t\thue /= 6;\r\n\r\n\t\t}\r\n\r\n\t\thsl.h = hue;\r\n\t\thsl.s = saturation;\r\n\t\thsl.l = lightness;\r\n\r\n\t\treturn hsl;\r\n\r\n\t},\r\n\r\n\tgetStyle: function () {\r\n\r\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\r\n\r\n\t},\r\n\r\n\toffsetHSL: function ( h, s, l ) {\r\n\r\n\t\tvar hsl = this.getHSL();\r\n\r\n\t\thsl.h += h; hsl.s += s; hsl.l += l;\r\n\r\n\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( color ) {\r\n\r\n\t\tthis.r += color.r;\r\n\t\tthis.g += color.g;\r\n\t\tthis.b += color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddColors: function ( color1, color2 ) {\r\n\r\n\t\tthis.r = color1.r + color2.r;\r\n\t\tthis.g = color1.g + color2.g;\r\n\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.r += s;\r\n\t\tthis.g += s;\r\n\t\tthis.b += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( color ) {\r\n\r\n\t\tthis.r *= color.r;\r\n\t\tthis.g *= color.g;\r\n\t\tthis.b *= color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.r *= s;\r\n\t\tthis.g *= s;\r\n\t\tthis.b *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( color, alpha ) {\r\n\r\n\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( c ) {\r\n\r\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.r = array[ offset ];\r\n\t\tthis.g = array[ offset + 1 ];\r\n\t\tthis.b = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.r;\r\n\t\tarray[ offset + 1 ] = this.g;\r\n\t\tarray[ offset + 2 ] = this.b;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\r\n'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\r\n'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\r\n'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\r\n'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\r\n'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\r\n'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\r\n'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\r\n'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\r\n'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\r\n'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\r\n'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\r\n'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\r\n'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\r\n'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\r\n'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\r\n'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\r\n'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\r\n'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\r\n'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\r\n'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\r\n'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\r\n'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\r\n'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\r\n\r\n// File:src/math/Quaternion.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Quaternion = function ( x, y, z, w ) {\r\n\r\n\tthis._x = x || 0;\r\n\tthis._y = y || 0;\r\n\tthis._z = z || 0;\r\n\tthis._w = ( w !== undefined ) ? w : 1;\r\n\r\n};\r\n\r\nTHREE.Quaternion.prototype = {\r\n\r\n\tconstructor: THREE.Quaternion,\r\n\r\n\tget x () {\r\n\r\n\t\treturn this._x;\r\n\r\n\t},\r\n\r\n\tset x ( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget y () {\r\n\r\n\t\treturn this._y;\r\n\r\n\t},\r\n\r\n\tset y ( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget z () {\r\n\r\n\t\treturn this._z;\r\n\r\n\t},\r\n\r\n\tset z ( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget w () {\r\n\r\n\t\treturn this._w;\r\n\r\n\t},\r\n\r\n\tset w ( value ) {\r\n\r\n\t\tthis._w = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t},\r\n\r\n\tcopy: function ( quaternion ) {\r\n\r\n\t\tthis._x = quaternion.x;\r\n\t\tthis._y = quaternion.y;\r\n\t\tthis._z = quaternion.z;\r\n\t\tthis._w = quaternion.w;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromEuler: function ( euler, update ) {\r\n\r\n\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\r\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t}\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\tvar c1 = Math.cos( euler._x / 2 );\r\n\t\tvar c2 = Math.cos( euler._y / 2 );\r\n\t\tvar c3 = Math.cos( euler._z / 2 );\r\n\t\tvar s1 = Math.sin( euler._x / 2 );\r\n\t\tvar s2 = Math.sin( euler._y / 2 );\r\n\t\tvar s3 = Math.sin( euler._z / 2 );\r\n\r\n\t\tvar order = euler.order;\r\n\r\n\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t}\r\n\r\n\t\tif ( update !== false ) this.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\tthis._x = axis.x * s;\r\n\t\tthis._y = axis.y * s;\r\n\t\tthis._z = axis.z * s;\r\n\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar te = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\ts;\r\n\r\n\t\tif ( trace > 0 ) {\r\n\r\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\tthis._w = 0.25 / s;\r\n\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\tthis._x = 0.25 * s;\r\n\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\tthis._y = 0.25 * s;\r\n\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t}\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromUnitVectors: function () {\r\n\r\n\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\r\n\r\n\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\tvar v1, r;\r\n\r\n\t\tvar EPS = 0.000001;\r\n\r\n\t\treturn function ( vFrom, vTo ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tr = vFrom.dot( vTo ) + 1;\r\n\r\n\t\t\tif ( r < EPS ) {\r\n\r\n\t\t\t\tr = 0;\r\n\r\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tv1.crossVectors( vFrom, vTo );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._x = v1.x;\r\n\t\t\tthis._y = v1.y;\r\n\t\t\tthis._z = v1.z;\r\n\t\t\tthis._w = r;\r\n\r\n\t\t\tthis.normalize();\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tinverse: function () {\r\n\r\n\t\tthis.conjugate().normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconjugate: function () {\r\n\r\n\t\tthis._x *= - 1;\r\n\t\tthis._y *= - 1;\r\n\t\tthis._z *= - 1;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\tvar l = this.length();\r\n\r\n\t\tif ( l === 0 ) {\r\n\r\n\t\t\tthis._x = 0;\r\n\t\t\tthis._y = 0;\r\n\t\t\tthis._z = 0;\r\n\t\t\tthis._w = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tl = 1 / l;\r\n\r\n\t\t\tthis._x = this._x * l;\r\n\t\t\tthis._y = this._y * l;\r\n\t\t\tthis._z = this._z * l;\r\n\t\t\tthis._w = this._w * l;\r\n\r\n\t\t}\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( q, p ) {\r\n\r\n\t\tif ( p !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\treturn this.multiplyQuaternions( q, p );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t},\r\n\r\n\tmultiplyQuaternions: function ( a, b ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tslerp: function ( qb, t ) {\r\n\r\n\t\tif ( t === 0 ) return this;\r\n\t\tif ( t === 1 ) return this.copy( qb );\r\n\r\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\tthis._w = - qb._w;\r\n\t\t\tthis._x = - qb._x;\r\n\t\t\tthis._y = - qb._y;\r\n\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.copy( qb );\r\n\r\n\t\t}\r\n\r\n\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\tthis._w = w;\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\r\n\r\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\r\n\r\n\t\t\tthis._w = 0.5 * ( w + this._w );\r\n\t\t\tthis._x = 0.5 * ( x + this._x );\r\n\t\t\tthis._y = 0.5 * ( y + this._y );\r\n\t\t\tthis._z = 0.5 * ( z + this._z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( quaternion ) {\r\n\r\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis._x = array[ offset ];\r\n\t\tthis._y = array[ offset + 1 ];\r\n\t\tthis._z = array[ offset + 2 ];\r\n\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tonChange: function ( callback ) {\r\n\r\n\t\tthis.onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tonChangeCallback: function () {}\r\n\r\n};\r\n\r\nObject.assign( THREE.Quaternion, {\r\n\r\n\tslerp: function( qa, qb, qm, t ) {\r\n\r\n\t\treturn qm.copy( qa ).slerp( qb, t );\r\n\r\n\t},\r\n\r\n\tslerpFlat: function(\r\n\t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\r\n\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\r\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\r\n\r\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\r\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\r\n\t\t\tvar s = 1 - t,\r\n\r\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\r\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\tsqrSin = 1 - cos * cos;\r\n\r\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\r\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\r\n\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar tDir = t * dir;\r\n\r\n\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\tw0 = w0 * s + w1 * tDir;\r\n\r\n\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\tif ( s === 1 - t ) {\r\n\r\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\r\n\t\t\t\tx0 *= f;\r\n\t\t\t\ty0 *= f;\r\n\t\t\t\tz0 *= f;\r\n\t\t\t\tw0 *= f;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdst[ dstOffset ] = x0;\r\n\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\tdst[ dstOffset + 3 ] = w0;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/math/Vector2.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author egraether / http://egraether.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.Vector2 = function ( x, y ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\r\n};\r\n\r\nTHREE.Vector2.prototype = {\r\n\r\n\tconstructor: THREE.Vector2,\r\n\r\n\tget width() {\r\n\r\n\t\treturn this.x;\r\n\r\n\t},\r\n\r\n\tset width( value ) {\r\n\r\n\t\tthis.x = value;\r\n\r\n\t},\r\n\r\n\tget height() {\r\n\r\n\t\treturn this.y;\r\n\r\n\t},\r\n\r\n\tset height( value ) {\r\n\r\n\t\tthis.y = value;\r\n\r\n\t},\r\n\r\n\t//\r\n\r\n\tset: function ( x, y ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tif ( isFinite( scalar ) ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivide: function ( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min, max;\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tif ( min === undefined ) {\r\n\r\n\t\t\t\tmin = new THREE.Vector2();\r\n\t\t\t\tmax = new THREE.Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmin.set( minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclampLength: function ( min, max ) {\r\n\r\n\t\tvar length = this.length();\r\n\r\n\t\tthis.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tangle: function () {\r\n\r\n\t\t// computes the angle in radians with respect to the positive x-axis\r\n\r\n\t\tvar angle = Math.atan2( this.y, this.x );\r\n\r\n\t\tif ( angle < 0 ) angle += 2 * Math.PI;\r\n\r\n\t\treturn angle;\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\treturn dx * dx + dy * dy;\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.multiplyScalar( length / this.length() );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\tthis.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tindex = index * attribute.itemSize + offset;\r\n\r\n\t\tthis.x = attribute.array[ index ];\r\n\t\tthis.y = attribute.array[ index + 1 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateAround: function ( center, angle ) {\r\n\r\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\tvar x = this.x - center.x;\r\n\t\tvar y = this.y - center.y;\r\n\r\n\t\tthis.x = x * c - y * s + center.x;\r\n\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Vector3.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author *kile / http://kile.stravaganza.org/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Vector3 = function ( x, y, z ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\r\n};\r\n\r\nTHREE.Vector3.prototype = {\r\n\r\n\tconstructor: THREE.Vector3,\r\n\r\n\tset: function ( x, y, z ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\treturn this.multiplyVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tif ( isFinite( scalar ) ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x * b.x;\r\n\t\tthis.y = a.y * b.y;\r\n\t\tthis.z = a.z * b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyEuler: function () {\r\n\r\n\t\tvar quaternion;\r\n\r\n\t\treturn function applyEuler( euler ) {\r\n\r\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\r\n\r\n\t\t\tthis.applyQuaternion( quaternion.setFromEuler( euler ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyAxisAngle: function () {\r\n\r\n\t\tvar quaternion;\r\n\r\n\t\treturn function applyAxisAngle( axis, angle ) {\r\n\r\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\r\n\r\n\t\t\tthis.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyMatrix3: function ( m ) {\r\n\r\n\t\tvar x = this.x;\r\n\t\tvar y = this.y;\r\n\t\tvar z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyProjection: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 projection matrix\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\r\n\r\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\r\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\r\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyQuaternion: function ( q ) {\r\n\r\n\t\tvar x = this.x;\r\n\t\tvar y = this.y;\r\n\t\tvar z = this.z;\r\n\r\n\t\tvar qx = q.x;\r\n\t\tvar qy = q.y;\r\n\t\tvar qz = q.z;\r\n\t\tvar qw = q.w;\r\n\r\n\t\t// calculate quat * vector\r\n\r\n\t\tvar ix =  qw * x + qy * z - qz * y;\r\n\t\tvar iy =  qw * y + qz * x - qx * z;\r\n\t\tvar iz =  qw * z + qx * y - qy * x;\r\n\t\tvar iw = - qx * x - qy * y - qz * z;\r\n\r\n\t\t// calculate result * inverse quat\r\n\r\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tproject: function () {\r\n\r\n\t\tvar matrix;\r\n\r\n\t\treturn function project( camera ) {\r\n\r\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\r\n\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\r\n\t\t\treturn this.applyProjection( matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tunproject: function () {\r\n\r\n\t\tvar matrix;\r\n\r\n\t\treturn function unproject( camera ) {\r\n\r\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\r\n\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\r\n\t\t\treturn this.applyProjection( matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttransformDirection: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\t\t// vector interpreted as a direction\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\tthis.normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivide: function ( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\t\tthis.z /= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min, max;\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tif ( min === undefined ) {\r\n\r\n\t\t\t\tmin = new THREE.Vector3();\r\n\t\t\t\tmax = new THREE.Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmin.set( minVal, minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclampLength: function ( min, max ) {\r\n\r\n\t\tvar length = this.length();\r\n\r\n\t\tthis.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.multiplyScalar( length / this.length() );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\tthis.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcross: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\treturn this.crossVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tthis.x = y * v.z - z * v.y;\r\n\t\tthis.y = z * v.x - x * v.z;\r\n\t\tthis.z = x * v.y - y * v.x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcrossVectors: function ( a, b ) {\r\n\r\n\t\tvar ax = a.x, ay = a.y, az = a.z;\r\n\t\tvar bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\tthis.x = ay * bz - az * by;\r\n\t\tthis.y = az * bx - ax * bz;\r\n\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tprojectOnVector: function () {\r\n\r\n\t\tvar v1, dot;\r\n\r\n\t\treturn function projectOnVector( vector ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tv1.copy( vector ).normalize();\r\n\r\n\t\t\tdot = this.dot( v1 );\r\n\r\n\t\t\treturn this.copy( v1 ).multiplyScalar( dot );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tprojectOnPlane: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function projectOnPlane( planeNormal ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\t\treturn this.sub( v1 );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\treflect: function () {\r\n\r\n\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t// normal is assumed to have unit length\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function reflect( normal ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tangleTo: function ( v ) {\r\n\r\n\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\treturn Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x;\r\n\t\tvar dy = this.y - v.y;\r\n\t\tvar dz = this.z - v.z;\r\n\r\n\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t},\r\n\r\n\tsetFromSpherical: function( s ) {\r\n\r\n\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\r\n\r\n\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\r\n\t\tthis.y = Math.cos( s.phi ) * s.radius;\r\n\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrixPosition: function ( m ) {\r\n\r\n\t\treturn this.setFromMatrixColumn( m, 3 );\r\n\r\n\t},\r\n\r\n\tsetFromMatrixScale: function ( m ) {\r\n\r\n\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\tthis.x = sx;\r\n\t\tthis.y = sy;\r\n\t\tthis.z = sz;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrixColumn: function ( m, index ) {\r\n\r\n\t\tif ( typeof m === 'number' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\r\n\r\n\t\t\tm = arguments[ 1 ];\r\n\t\t\tindex = arguments[ 0 ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this.fromArray( m.elements, index * 4 );\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tindex = index * attribute.itemSize + offset;\r\n\r\n\t\tthis.x = attribute.array[ index ];\r\n\t\tthis.y = attribute.array[ index + 1 ];\r\n\t\tthis.z = attribute.array[ index + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Vector4.js\r\n\r\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Vector4 = function ( x, y, z, w ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n};\r\n\r\nTHREE.Vector4.prototype = {\r\n\r\n\tconstructor: THREE.Vector4,\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\t\tthis.w = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetW: function ( w ) {\r\n\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tcase 3: this.w = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tcase 3: return this.w;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\t\tthis.w += v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\t\tthis.w += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\t\tthis.w = a.w + b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\t\tthis.w += v.w * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\t\tthis.w -= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\t\tthis.w -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\t\tthis.w = a.w - b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tif ( isFinite( scalar ) ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\t\t\tthis.w *= scalar;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\t\t\tthis.w = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\tvar x = this.x;\r\n\t\tvar y = this.y;\r\n\t\tvar z = this.z;\r\n\t\tvar w = this.w;\r\n\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\t this.x = 1;\r\n\t\t\t this.y = 0;\r\n\t\t\t this.z = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t this.x = q.x / s;\r\n\t\t\t this.y = q.y / s;\r\n\t\t\t this.z = q.z / s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\tte = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon )\r\n\t\t   && ( Math.abs( m13 - m31 ) < epsilon )\r\n\t\t   && ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t// singularity found\r\n\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 )\r\n\t\t\t   && ( Math.abs( m13 + m31 ) < epsilon2 )\r\n\t\t\t   && ( Math.abs( m23 + m32 ) < epsilon2 )\r\n\t\t\t   && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\tangle = Math.PI;\r\n\r\n\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\r\n\t\t\t\t// m11 is the largest diagonal term\r\n\r\n\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( yy > zz ) {\r\n\r\n\t\t\t\t// m22 is the largest diagonal term\r\n\r\n\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t}\r\n\r\n\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )\r\n\t\t\t\t\t\t  + ( m13 - m31 ) * ( m13 - m31 )\r\n\t\t\t\t\t\t  + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\r\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\t\tthis.w = Math.min( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\t\tthis.w = Math.max( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min, max;\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tif ( min === undefined ) {\r\n\r\n\t\t\t\tmin = new THREE.Vector4();\r\n\t\t\t\tmax = new THREE.Vector4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmin.set( minVal, minVal, minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\t\tthis.w = Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\t\tthis.w = Math.ceil( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\t\tthis.w = Math.round( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\t\tthis.w = - this.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.multiplyScalar( length / this.length() );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\tthis.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\t\tthis.w = array[ offset + 3 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\t\tarray[ offset + 3 ] = this.w;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tindex = index * attribute.itemSize + offset;\r\n\r\n\t\tthis.x = attribute.array[ index ];\r\n\t\tthis.y = attribute.array[ index + 1 ];\r\n\t\tthis.z = attribute.array[ index + 2 ];\r\n\t\tthis.w = attribute.array[ index + 3 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Euler.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Euler = function ( x, y, z, order ) {\r\n\r\n\tthis._x = x || 0;\r\n\tthis._y = y || 0;\r\n\tthis._z = z || 0;\r\n\tthis._order = order || THREE.Euler.DefaultOrder;\r\n\r\n};\r\n\r\nTHREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\r\n\r\nTHREE.Euler.DefaultOrder = 'XYZ';\r\n\r\nTHREE.Euler.prototype = {\r\n\r\n\tconstructor: THREE.Euler,\r\n\r\n\tget x () {\r\n\r\n\t\treturn this._x;\r\n\r\n\t},\r\n\r\n\tset x ( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget y () {\r\n\r\n\t\treturn this._y;\r\n\r\n\t},\r\n\r\n\tset y ( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget z () {\r\n\r\n\t\treturn this._z;\r\n\r\n\t},\r\n\r\n\tset z ( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget order () {\r\n\r\n\t\treturn this._order;\r\n\r\n\t},\r\n\r\n\tset order ( value ) {\r\n\r\n\t\tthis._order = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tset: function ( x, y, z, order ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._order = order || this._order;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\r\n\r\n\t},\r\n\r\n\tcopy: function ( euler ) {\r\n\r\n\t\tthis._x = euler._x;\r\n\t\tthis._y = euler._y;\r\n\t\tthis._z = euler._z;\r\n\t\tthis._order = euler._order;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromRotationMatrix: function ( m, order, update ) {\r\n\r\n\t\tvar clamp = THREE.Math.clamp;\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar te = m.elements;\r\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\torder = order || this._order;\r\n\r\n\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._y = 0;\r\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis._y = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order )\r\n\r\n\t\t}\r\n\r\n\t\tthis._order = order;\r\n\r\n\t\tif ( update !== false ) this.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromQuaternion: function () {\r\n\r\n\t\tvar matrix;\r\n\r\n\t\treturn function ( q, order, update ) {\r\n\r\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\t\t\tmatrix.makeRotationFromQuaternion( q );\r\n\t\t\tthis.setFromRotationMatrix( matrix, order, update );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetFromVector3: function ( v, order ) {\r\n\r\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\r\n\r\n\t},\r\n\r\n\treorder: function () {\r\n\r\n\t\t// WARNING: this discards revolution information -bhouston\r\n\r\n\t\tvar q = new THREE.Quaternion();\r\n\r\n\t\treturn function ( newOrder ) {\r\n\r\n\t\t\tq.setFromEuler( this );\r\n\t\t\tthis.setFromQuaternion( q, newOrder );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tequals: function ( euler ) {\r\n\r\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array ) {\r\n\r\n\t\tthis._x = array[ 0 ];\r\n\t\tthis._y = array[ 1 ];\r\n\t\tthis._z = array[ 2 ];\r\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._order;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\ttoVector3: function ( optionalResult ) {\r\n\r\n\t\tif ( optionalResult ) {\r\n\r\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn new THREE.Vector3( this._x, this._y, this._z );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tonChange: function ( callback ) {\r\n\r\n\t\tthis.onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tonChangeCallback: function () {}\r\n\r\n};\r\n\r\n// File:src/math/Line3.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Line3 = function ( start, end ) {\r\n\r\n\tthis.start = ( start !== undefined ) ? start : new THREE.Vector3();\r\n\tthis.end = ( end !== undefined ) ? end : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Line3.prototype = {\r\n\r\n\tconstructor: THREE.Line3,\r\n\r\n\tset: function ( start, end ) {\r\n\r\n\t\tthis.start.copy( start );\r\n\t\tthis.end.copy( end );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( line ) {\r\n\r\n\t\tthis.start.copy( line.start );\r\n\t\tthis.end.copy( line.end );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tdelta: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.subVectors( this.end, this.start );\r\n\r\n\t},\r\n\r\n\tdistanceSq: function () {\r\n\r\n\t\treturn this.start.distanceToSquared( this.end );\r\n\r\n\t},\r\n\r\n\tdistance: function () {\r\n\r\n\t\treturn this.start.distanceTo( this.end );\r\n\r\n\t},\r\n\r\n\tat: function ( t, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\r\n\r\n\t},\r\n\r\n\tclosestPointToPointParameter: function () {\r\n\r\n\t\tvar startP = new THREE.Vector3();\r\n\t\tvar startEnd = new THREE.Vector3();\r\n\r\n\t\treturn function ( point, clampToLine ) {\r\n\r\n\t\t\tstartP.subVectors( point, this.start );\r\n\t\t\tstartEnd.subVectors( this.end, this.start );\r\n\r\n\t\t\tvar startEnd2 = startEnd.dot( startEnd );\r\n\t\t\tvar startEnd_startP = startEnd.dot( startP );\r\n\r\n\t\t\tvar t = startEnd_startP / startEnd2;\r\n\r\n\t\t\tif ( clampToLine ) {\r\n\r\n\t\t\t\tt = THREE.Math.clamp( t, 0, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn t;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\r\n\r\n\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\tthis.start.applyMatrix4( matrix );\r\n\t\tthis.end.applyMatrix4( matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( line ) {\r\n\r\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Box2.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Box2 = function ( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( + Infinity, + Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );\r\n\r\n};\r\n\r\nTHREE.Box2.prototype = {\r\n\r\n\tconstructor: THREE.Box2,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector2();\r\n\r\n\t\treturn function ( center, size ) {\r\n\r\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = + Infinity;\r\n\t\tthis.max.x = this.max.y = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tisEmpty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tsize: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t     point.y < this.min.y || point.y > this.max.y ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point, optionalTarget ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\r\n\t\treturn result.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\r\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector2();\r\n\r\n\t\treturn function ( point ) {\r\n\r\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Box3.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Box3 = function ( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( + Infinity, + Infinity, + Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );\r\n\r\n};\r\n\r\nTHREE.Box3.prototype = {\r\n\r\n\tconstructor: THREE.Box3,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromArray: function ( array ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tvar minX = + Infinity;\r\n\t\tvar minY = + Infinity;\r\n\t\tvar minZ = + Infinity;\r\n\r\n\t\tvar maxX = - Infinity;\r\n\t\tvar maxY = - Infinity;\r\n\t\tvar maxZ = - Infinity;\r\n\r\n\t\tfor ( var i = 0, il = array.length; i < il; i += 3 ) {\r\n\r\n\t\t\tvar x = array[ i ];\r\n\t\t\tvar y = array[ i + 1 ];\r\n\t\t\tvar z = array[ i + 2 ];\r\n\r\n\t\t\tif ( x < minX ) minX = x;\r\n\t\t\tif ( y < minY ) minY = y;\r\n\t\t\tif ( z < minZ ) minZ = z;\r\n\r\n\t\t\tif ( x > maxX ) maxX = x;\r\n\t\t\tif ( y > maxY ) maxY = y;\r\n\t\t\tif ( z > maxZ ) maxZ = z;\r\n\r\n\t\t}\r\n\r\n\t\tthis.min.set( minX, minY, minZ );\r\n\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( center, size ) {\r\n\r\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetFromObject: function () {\r\n\r\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t\t// accounting for both the object's, and children's, world transforms\r\n\r\n\t\tvar box;\r\n\r\n\t\treturn function ( object ) {\r\n\r\n\t\t\tif ( box === undefined ) box = new THREE.Box3();\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\tobject.updateMatrixWorld( true );\r\n\r\n\t\t\tobject.traverse( function ( node ) {\r\n\r\n\t\t\t\tvar geometry = node.geometry;\r\n\r\n\t\t\t\tif ( geometry !== undefined ) {\r\n\r\n\t\t\t\t\tif ( geometry.boundingBox === null ) {\r\n\r\n\t\t\t\t\t\tgeometry.computeBoundingBox();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( geometry.boundingBox.isEmpty() === false ) {\r\n\r\n\t\t\t\t\t\tbox.copy( geometry.boundingBox );\r\n\t\t\t\t\t\tbox.applyMatrix4( node.matrixWorld );\r\n\t\t\t\t\t\tscope.union( box );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\r\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tisEmpty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tsize: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\t\t point.y < this.min.y || point.y > this.max.y ||\r\n\t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\r\n\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point, optionalTarget ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn result.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\r\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tintersectsSphere: ( function () {\r\n\r\n\t\tvar closestPoint;\r\n\r\n\t\treturn function intersectsSphere( sphere ) {\r\n\r\n\t\t\tif ( closestPoint === undefined ) closestPoint = new THREE.Vector3();\r\n\r\n\t\t\t// Find the point on the AABB closest to the sphere center.\r\n\t\t\tthis.clampPoint( sphere.center, closestPoint );\r\n\r\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\r\n\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t// We compute the minimum and maximum dot product values. If those values\r\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\r\n\r\n\t\tvar min, max;\r\n\r\n\t\tif ( plane.normal.x > 0 ) {\r\n\r\n\t\t\tmin = plane.normal.x * this.min.x;\r\n\t\t\tmax = plane.normal.x * this.max.x;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin = plane.normal.x * this.max.x;\r\n\t\t\tmax = plane.normal.x * this.min.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.y > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.y * this.min.y;\r\n\t\t\tmax += plane.normal.y * this.max.y;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.y * this.max.y;\r\n\t\t\tmax += plane.normal.y * this.min.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.z > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.z * this.min.z;\r\n\t\t\tmax += plane.normal.z * this.max.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.z * this.max.z;\r\n\t\t\tmax += plane.normal.z * this.min.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn ( min <= plane.constant && max >= plane.constant );\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( point ) {\r\n\r\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetBoundingSphere: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Sphere();\r\n\r\n\t\t\tresult.center = this.center();\r\n\t\t\tresult.radius = this.size( v1 ).length() * 0.5;\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function () {\r\n\r\n\t\tvar points = [\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3()\r\n\t\t];\r\n\r\n\t\treturn function ( matrix ) {\r\n\r\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\r\n\r\n\t\t\tthis.makeEmpty();\r\n\t\t\tthis.setFromPoints( points );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Matrix3.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n * @author tschw\r\n */\r\n\r\nTHREE.Matrix3 = function () {\r\n\r\n\tthis.elements = new Float32Array( [\r\n\r\n\t\t1, 0, 0,\r\n\t\t0, 1, 0,\r\n\t\t0, 0, 1\r\n\r\n\t] );\r\n\r\n\tif ( arguments.length > 0 ) {\r\n\r\n\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Matrix3.prototype = {\r\n\r\n\tconstructor: THREE.Matrix3,\r\n\r\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\r\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\r\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().fromArray( this.elements );\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tvar me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\r\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\r\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrix4: function( m ) {\r\n\r\n\t\tvar me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 4 ], me[  8 ],\r\n\t\t\tme[ 1 ], me[ 5 ], me[  9 ],\r\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyToVector3Array: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function ( array, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = array.length;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\r\n\r\n\t\t\t\tv1.fromArray( array, j );\r\n\t\t\t\tv1.applyMatrix3( this );\r\n\t\t\t\tv1.toArray( array, j );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyToBuffer: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function applyToBuffer( buffer, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\r\n\r\n\t\t\t\tv1.x = buffer.getX( j );\r\n\t\t\t\tv1.y = buffer.getY( j );\r\n\t\t\t\tv1.z = buffer.getZ( j );\r\n\r\n\t\t\t\tv1.applyMatrix3( this );\r\n\r\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn buffer;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\r\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( matrix, throwOnDegenerate ) {\r\n\r\n\t\tif ( matrix instanceof THREE.Matrix4 ) {\r\n\r\n\t\t\tconsole.warn( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\r\n\r\n\t\t}\r\n\r\n\t\tvar me = matrix.elements,\r\n\t\t\tte = this.elements,\r\n\r\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\r\n\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\r\n\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\r\n\r\n\t\t\tt11 = n33 * n22 - n32 * n23,\r\n\t\t\tt12 = n32 * n13 - n33 * n12,\r\n\t\t\tt13 = n23 * n12 - n22 * n13,\r\n\r\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\r\n\r\n\t\tif ( det === 0 ) {\r\n\r\n\t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnDegenerate || false ) {\r\n\r\n\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.identity();\r\n\t\t}\r\n\r\n\t\tte[ 0 ] = t11;\r\n\t\tte[ 1 ] = n31 * n23 - n33 * n21;\r\n\t\tte[ 2 ] = n32 * n21 - n31 * n22;\r\n\r\n\t\tte[ 3 ] = t12;\r\n\t\tte[ 4 ] = n33 * n11 - n31 * n13;\r\n\t\tte[ 5 ] = n31 * n12 - n32 * n11;\r\n\r\n\t\tte[ 6 ] = t13;\r\n\t\tte[ 7 ] = n21 * n13 - n23 * n11;\r\n\t\tte[ 8 ] = n22 * n11 - n21 * n12;\r\n\r\n\t\treturn this.multiplyScalar( 1 / det );\r\n\r\n\t},\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar tmp, m = this.elements;\r\n\r\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\tarray[ offset + 8 ]  = te[ 8 ];\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tgetNormalMatrix: function ( matrix4 ) {\r\n\r\n\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\r\n\r\n\t},\r\n\r\n\ttransposeIntoArray: function ( r ) {\r\n\r\n\t\tvar m = this.elements;\r\n\r\n\t\tr[ 0 ] = m[ 0 ];\r\n\t\tr[ 1 ] = m[ 3 ];\r\n\t\tr[ 2 ] = m[ 6 ];\r\n\t\tr[ 3 ] = m[ 1 ];\r\n\t\tr[ 4 ] = m[ 4 ];\r\n\t\tr[ 5 ] = m[ 7 ];\r\n\t\tr[ 6 ] = m[ 2 ];\r\n\t\tr[ 7 ] = m[ 5 ];\r\n\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array ) {\r\n\r\n\t\tthis.elements.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\treturn [\r\n\t\t\tte[ 0 ], te[ 1 ], te[ 2 ],\r\n\t\t\tte[ 3 ], te[ 4 ], te[ 5 ],\r\n\t\t\tte[ 6 ], te[ 7 ], te[ 8 ]\r\n\t\t];\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Matrix4.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author jordi_ros / http://plattsoft.com\r\n * @author D1plo1d / http://github.com/D1plo1d\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author timknip / http://www.floorplanner.com/\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Matrix4 = function () {\r\n\r\n\tthis.elements = new Float32Array( [\r\n\r\n\t\t1, 0, 0, 0,\r\n\t\t0, 1, 0, 0,\r\n\t\t0, 0, 1, 0,\r\n\t\t0, 0, 0, 1\r\n\r\n\t] );\r\n\r\n\tif ( arguments.length > 0 ) {\r\n\r\n\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Matrix4.prototype = {\r\n\r\n\tconstructor: THREE.Matrix4,\r\n\r\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Matrix4().fromArray( this.elements );\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tthis.elements.set( m.elements );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyPosition: function ( m ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tte[ 12 ] = me[ 12 ];\r\n\t\tte[ 13 ] = me[ 13 ];\r\n\t\tte[ 14 ] = me[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\txAxis.setFromMatrixColumn( this, 0 );\r\n\t\tyAxis.setFromMatrixColumn( this, 1 );\r\n\t\tzAxis.setFromMatrixColumn( this, 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\tthis.set(\r\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t0,       0,       0,       1\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractRotation: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function ( m ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\r\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\r\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmakeRotationFromEuler: function ( euler ) {\r\n\r\n\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t}\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\r\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\tif ( euler.order === 'XYZ' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - c * f;\r\n\t\t\tte[ 8 ] = d;\r\n\r\n\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\tte[ 9 ] = - b * c;\r\n\r\n\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YXZ' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\tte[ 8 ] = a * d;\r\n\r\n\t\t\tte[ 1 ] = a * f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b;\r\n\r\n\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZXY' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\tte[ 4 ] = - a * f;\r\n\t\t\tte[ 8 ] = de + cf * b;\r\n\r\n\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = df - ce * b;\r\n\r\n\t\t\tte[ 2 ] = - a * d;\r\n\t\t\tte[ 6 ] = b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZYX' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\tte[ 8 ] = ae * d + bf;\r\n\r\n\t\t\tte[ 1 ] = c * f;\r\n\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\tte[ 9 ] = af * d - be;\r\n\r\n\t\t\tte[ 2 ] = - d;\r\n\t\t\tte[ 6 ] = b * c;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YZX' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\tte[ 8 ] = bc * f + ad;\r\n\r\n\t\t\tte[ 1 ] = f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b * e;\r\n\r\n\t\t\tte[ 2 ] = - d * e;\r\n\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\tte[ 10 ] = ac - bd * f;\r\n\r\n\t\t} else if ( euler.order === 'XZY' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - f;\r\n\t\t\tte[ 8 ] = d * e;\r\n\r\n\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = ad * f - bc;\r\n\r\n\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\tte[ 6 ] = b * e;\r\n\t\t\tte[ 10 ] = bd * f + ac;\r\n\r\n\t\t}\r\n\r\n\t\t// last column\r\n\t\tte[ 3 ] = 0;\r\n\t\tte[ 7 ] = 0;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\t// bottom row\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationFromQuaternion: function ( q ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\r\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\r\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\tte[ 0 ] = 1 - ( yy + zz );\r\n\t\tte[ 4 ] = xy - wz;\r\n\t\tte[ 8 ] = xz + wy;\r\n\r\n\t\tte[ 1 ] = xy + wz;\r\n\t\tte[ 5 ] = 1 - ( xx + zz );\r\n\t\tte[ 9 ] = yz - wx;\r\n\r\n\t\tte[ 2 ] = xz - wy;\r\n\t\tte[ 6 ] = yz + wx;\r\n\t\tte[ 10 ] = 1 - ( xx + yy );\r\n\r\n\t\t// last column\r\n\t\tte[ 3 ] = 0;\r\n\t\tte[ 7 ] = 0;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\t// bottom row\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar x, y, z;\r\n\r\n\t\treturn function ( eye, target, up ) {\r\n\r\n\t\t\tif ( x === undefined ) x = new THREE.Vector3();\r\n\t\t\tif ( y === undefined ) y = new THREE.Vector3();\r\n\t\t\tif ( z === undefined ) z = new THREE.Vector3();\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tz.subVectors( eye, target ).normalize();\r\n\r\n\t\t\tif ( z.lengthSq() === 0 ) {\r\n\r\n\t\t\t\tz.z = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tx.crossVectors( up, z ).normalize();\r\n\r\n\t\t\tif ( x.lengthSq() === 0 ) {\r\n\r\n\t\t\t\tz.x += 0.0001;\r\n\t\t\t\tx.crossVectors( up, z ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ty.crossVectors( z, x );\r\n\r\n\r\n\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\r\n\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\r\n\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmultiply: function ( m, n ) {\r\n\r\n\t\tif ( n !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\treturn this.multiplyMatrices( m, n );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t},\r\n\r\n\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\tvar ae = a.elements;\r\n\t\tvar be = b.elements;\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\r\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\r\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyToArray: function ( a, b, r ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tthis.multiplyMatrices( a, b );\r\n\r\n\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\r\n\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\r\n\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\r\n\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyToVector3Array: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function ( array, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = array.length;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\r\n\r\n\t\t\t\tv1.fromArray( array, j );\r\n\t\t\t\tv1.applyMatrix4( this );\r\n\t\t\t\tv1.toArray( array, j );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyToBuffer: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function applyToBuffer( buffer, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\r\n\r\n\t\t\t\tv1.x = buffer.getX( j );\r\n\t\t\t\tv1.y = buffer.getY( j );\r\n\t\t\t\tv1.z = buffer.getZ( j );\r\n\r\n\t\t\t\tv1.applyMatrix4( this );\r\n\r\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn buffer;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\r\n\t\t//TODO: make this more efficient\r\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\treturn (\r\n\t\t\tn41 * (\r\n\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t - n12 * n23 * n34\r\n\t\t\t) +\r\n\t\t\tn42 * (\r\n\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t - n14 * n23 * n31\r\n\t\t\t) +\r\n\t\t\tn43 * (\r\n\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t - n12 * n24 * n31\r\n\t\t\t) +\r\n\t\t\tn44 * (\r\n\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t + n12 * n23 * n31\r\n\t\t\t)\r\n\r\n\t\t);\r\n\r\n\t},\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar tmp;\r\n\r\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\r\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\r\n\t\tarray[ offset + 8 ]  = te[ 8 ];\r\n\t\tarray[ offset + 9 ]  = te[ 9 ];\r\n\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\r\n\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tgetPosition: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\r\n\r\n\t\t\treturn v1.setFromMatrixColumn( this, 3 );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetPosition: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 12 ] = v.x;\r\n\t\tte[ 13 ] = v.y;\r\n\t\tte[ 14 ] = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( m, throwOnDegenerate ) {\r\n\r\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\tvar te = this.elements,\r\n\t\t\tme = m.elements,\r\n\r\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\r\n\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\r\n\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\r\n\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\r\n\r\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\r\n\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\r\n\t\tif ( det === 0 ) {\r\n\r\n\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnDegenerate || false ) {\r\n\r\n\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.identity();\r\n\r\n\t\t}\r\n\r\n\t\tte[ 0 ] = t11;\r\n\t\tte[ 1 ] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;\r\n\t\tte[ 2 ] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;\r\n\t\tte[ 3 ] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;\r\n\r\n\t\tte[ 4 ] = t12;\r\n\t\tte[ 5 ] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;\r\n\t\tte[ 6 ] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;\r\n\t\tte[ 7 ] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;\r\n\r\n\t\tte[ 8 ] = t13;\r\n\t\tte[ 9 ] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;\r\n\t\tte[ 10 ] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;\r\n\t\tte[ 11 ] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;\r\n\r\n\t\tte[ 12 ] = t14;\r\n\t\tte[ 13 ] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;\r\n\t\tte[ 14 ] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;\r\n\t\tte[ 15 ] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;\r\n\r\n\t\treturn this.multiplyScalar( 1 / det );\r\n\r\n\t},\r\n\r\n\tscale: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetMaxScaleOnAxis: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\r\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\r\n\t},\r\n\r\n\tmakeTranslation: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, x,\r\n\t\t\t0, 1, 0, y,\r\n\t\t\t0, 0, 1, z,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationX: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0,  0, 0,\r\n\t\t\t0, c, - s, 0,\r\n\t\t\t0, s,  c, 0,\r\n\t\t\t0, 0,  0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationY: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t c, 0, s, 0,\r\n\t\t\t 0, 1, 0, 0,\r\n\t\t\t- s, 0, c, 0,\r\n\t\t\t 0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationZ: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, - s, 0, 0,\r\n\t\t\ts,  c, 0, 0,\r\n\t\t\t0,  0, 1, 0,\r\n\t\t\t0,  0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationAxis: function ( axis, angle ) {\r\n\r\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\t\tvar t = 1 - c;\r\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\tvar tx = t * x, ty = t * y;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\t return this;\r\n\r\n\t},\r\n\r\n\tmakeScale: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0, 0,\r\n\t\t\t0, y, 0, 0,\r\n\t\t\t0, 0, z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcompose: function ( position, quaternion, scale ) {\r\n\r\n\t\tthis.makeRotationFromQuaternion( quaternion );\r\n\t\tthis.scale( scale );\r\n\t\tthis.setPosition( position );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdecompose: function () {\r\n\r\n\t\tvar vector, matrix;\r\n\r\n\t\treturn function ( position, quaternion, scale ) {\r\n\r\n\t\t\tif ( vector === undefined ) vector = new THREE.Vector3();\r\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\r\n\t\t\t// if determine is negative, we need to invert one scale\r\n\t\t\tvar det = this.determinant();\r\n\t\t\tif ( det < 0 ) {\r\n\r\n\t\t\t\tsx = - sx;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tposition.x = te[ 12 ];\r\n\t\t\tposition.y = te[ 13 ];\r\n\t\t\tposition.z = te[ 14 ];\r\n\r\n\t\t\t// scale the rotation part\r\n\r\n\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\r\n\r\n\t\t\tvar invSX = 1 / sx;\r\n\t\t\tvar invSY = 1 / sy;\r\n\t\t\tvar invSZ = 1 / sz;\r\n\r\n\t\t\tmatrix.elements[ 0 ] *= invSX;\r\n\t\t\tmatrix.elements[ 1 ] *= invSX;\r\n\t\t\tmatrix.elements[ 2 ] *= invSX;\r\n\r\n\t\t\tmatrix.elements[ 4 ] *= invSY;\r\n\t\t\tmatrix.elements[ 5 ] *= invSY;\r\n\t\t\tmatrix.elements[ 6 ] *= invSY;\r\n\r\n\t\t\tmatrix.elements[ 8 ] *= invSZ;\r\n\t\t\tmatrix.elements[ 9 ] *= invSZ;\r\n\t\t\tmatrix.elements[ 10 ] *= invSZ;\r\n\r\n\t\t\tquaternion.setFromRotationMatrix( matrix );\r\n\r\n\t\t\tscale.x = sx;\r\n\t\t\tscale.y = sy;\r\n\t\t\tscale.z = sz;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = 2 * near / ( right - left );\r\n\t\tvar y = 2 * near / ( top - bottom );\r\n\r\n\t\tvar a = ( right + left ) / ( right - left );\r\n\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\tvar d = - 2 * far * near / ( far - near );\r\n\r\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakePerspective: function ( fov, aspect, near, far ) {\r\n\r\n\t\tvar ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );\r\n\t\tvar ymin = - ymax;\r\n\t\tvar xmin = ymin * aspect;\r\n\t\tvar xmax = ymax * aspect;\r\n\r\n\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\r\n\r\n\t},\r\n\r\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar w = 1.0 / ( right - left );\r\n\t\tvar h = 1.0 / ( top - bottom );\r\n\t\tvar p = 1.0 / ( far - near );\r\n\r\n\t\tvar x = ( right + left ) * w;\r\n\t\tvar y = ( top + bottom ) * h;\r\n\t\tvar z = ( far + near ) * p;\r\n\r\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( matrix ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = matrix.elements;\r\n\r\n\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array ) {\r\n\r\n\t\tthis.elements.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\treturn [\r\n\t\t\tte[ 0 ], te[ 1 ], te[ 2 ], te[ 3 ],\r\n\t\t\tte[ 4 ], te[ 5 ], te[ 6 ], te[ 7 ],\r\n\t\t\tte[ 8 ], te[ 9 ], te[ 10 ], te[ 11 ],\r\n\t\t\tte[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]\r\n\t\t];\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Ray.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Ray = function ( origin, direction ) {\r\n\r\n\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\r\n\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Ray.prototype = {\r\n\r\n\tconstructor: THREE.Ray,\r\n\r\n\tset: function ( origin, direction ) {\r\n\r\n\t\tthis.origin.copy( origin );\r\n\t\tthis.direction.copy( direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( ray ) {\r\n\r\n\t\tthis.origin.copy( ray.origin );\r\n\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tat: function ( t, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\r\n\r\n\t},\r\n\r\n\tlookAt: function ( v ) {\r\n\r\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\r\n\r\n\t},\r\n\r\n\trecast: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( t ) {\r\n\r\n\t\t\tthis.origin.copy( this.at( t, v1 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclosestPointToPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\tresult.subVectors( point, this.origin );\r\n\t\tvar directionDistance = result.dot( this.direction );\r\n\r\n\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\treturn result.copy( this.origin );\r\n\r\n\t\t}\r\n\r\n\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\r\n\r\n\t},\r\n\r\n\tdistanceSqToPoint: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( point ) {\r\n\r\n\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\r\n\r\n\t\t\t// point behind the ray\r\n\r\n\t\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\t\treturn this.origin.distanceToSquared( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\t\treturn v1.distanceToSquared( point );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tdistanceSqToSegment: function () {\r\n\r\n\t\tvar segCenter = new THREE.Vector3();\r\n\t\tvar segDir = new THREE.Vector3();\r\n\t\tvar diff = new THREE.Vector3();\r\n\r\n\t\treturn function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\r\n\r\n\t\t\t// from http://www.geometrictools.com/LibMathematics/Distance/Wm5DistRay3Segment3.cpp\r\n\t\t\t// It returns the min distance between the ray and the segment\r\n\t\t\t// defined by v0 and v1\r\n\t\t\t// It can also set two optional targets :\r\n\t\t\t// - The closest point on the ray\r\n\t\t\t// - The closest point on the segment\r\n\r\n\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\r\n\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\r\n\t\t\tdiff.copy( this.origin ).sub( segCenter );\r\n\r\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\r\n\t\t\tvar a01 = - this.direction.dot( segDir );\r\n\t\t\tvar b0 = diff.dot( this.direction );\r\n\t\t\tvar b1 = - diff.dot( segDir );\r\n\t\t\tvar c = diff.lengthSq();\r\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\r\n\t\t\tvar s0, s1, sqrDist, extDet;\r\n\r\n\t\t\tif ( det > 0 ) {\r\n\r\n\t\t\t\t// The ray and segment are not parallel.\r\n\r\n\t\t\t\ts0 = a01 * b1 - b0;\r\n\t\t\t\ts1 = a01 * b0 - b1;\r\n\t\t\t\textDet = segExtent * det;\r\n\r\n\t\t\t\tif ( s0 >= 0 ) {\r\n\r\n\t\t\t\t\tif ( s1 >= - extDet ) {\r\n\r\n\t\t\t\t\t\tif ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t\t// region 0\r\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\r\n\r\n\t\t\t\t\t\t\tvar invDet = 1 / det;\r\n\t\t\t\t\t\t\ts0 *= invDet;\r\n\t\t\t\t\t\t\ts1 *= invDet;\r\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// region 1\r\n\r\n\t\t\t\t\t\t\ts1 = segExtent;\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 5\r\n\r\n\t\t\t\t\t\ts1 = - segExtent;\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( s1 <= - extDet ) {\r\n\r\n\t\t\t\t\t\t// region 4\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else if ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t// region 3\r\n\r\n\t\t\t\t\t\ts0 = 0;\r\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 2\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Ray and segment are parallel.\r\n\r\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\r\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnRay ) {\r\n\r\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnSegment ) {\r\n\r\n\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn sqrDist;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectSphere: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( sphere, optionalTarget ) {\r\n\r\n\t\t\tv1.subVectors( sphere.center, this.origin );\r\n\t\t\tvar tca = v1.dot( this.direction );\r\n\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\r\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\r\n\r\n\t\t\tif ( d2 > radius2 ) return null;\r\n\r\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\r\n\r\n\t\t\t// t0 = first intersect point - entrance on front of sphere\r\n\t\t\tvar t0 = tca - thc;\r\n\r\n\t\t\t// t1 = second intersect point - exit point on back of sphere\r\n\t\t\tvar t1 = tca + thc;\r\n\r\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\r\n\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\r\n\r\n\t\t\t// test to see if t0 is behind the ray:\r\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n\t\t\t// in order to always return an intersect point that is in front of the ray.\r\n\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\r\n\r\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\t\t\treturn this.at( t0, optionalTarget );\r\n\r\n\t\t}\r\n\r\n\t}(),\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\r\n\r\n\t},\r\n\r\n\tdistanceToPlane: function ( plane ) {\r\n\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\r\n\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\t// Return if the ray never intersects the plane\r\n\r\n\t\treturn t >= 0 ? t :  null;\r\n\r\n\t},\r\n\r\n\tintersectPlane: function ( plane, optionalTarget ) {\r\n\r\n\t\tvar t = this.distanceToPlane( plane );\r\n\r\n\t\tif ( t === null ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.at( t, optionalTarget );\r\n\r\n\t},\r\n\r\n\r\n\r\n\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t// check if the ray lies on the plane first\r\n\r\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\r\n\r\n\t\tif ( distToPoint === 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator * distToPoint < 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// ray origin is behind the plane (and is pointing behind it)\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tintersectBox: function ( box, optionalTarget ) {\r\n\r\n\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n\r\n\t\tvar invdirx = 1 / this.direction.x,\r\n\t\t\tinvdiry = 1 / this.direction.y,\r\n\t\t\tinvdirz = 1 / this.direction.z;\r\n\r\n\t\tvar origin = this.origin;\r\n\r\n\t\tif ( invdirx >= 0 ) {\r\n\r\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\r\n\r\n\t\t}\r\n\r\n\t\tif ( invdiry >= 0 ) {\r\n\r\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\r\n\r\n\t\t// These lines also handle the case where tmin or tmax is NaN\r\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\r\n\r\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\r\n\r\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\r\n\r\n\t\tif ( invdirz >= 0 ) {\r\n\r\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\r\n\r\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\r\n\r\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\r\n\r\n\t\t//return point closest to the ray (positive side)\r\n\r\n\t\tif ( tmax < 0 ) return null;\r\n\r\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\r\n\r\n\t},\r\n\r\n\tintersectsBox: ( function () {\r\n\r\n\t\tvar v = new THREE.Vector3();\r\n\r\n\t\treturn function ( box ) {\r\n\r\n\t\t\treturn this.intersectBox( box, v ) !== null;\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\tintersectTriangle: function () {\r\n\r\n\t\t// Compute the offset origin, edges, and normal.\r\n\t\tvar diff = new THREE.Vector3();\r\n\t\tvar edge1 = new THREE.Vector3();\r\n\t\tvar edge2 = new THREE.Vector3();\r\n\t\tvar normal = new THREE.Vector3();\r\n\r\n\t\treturn function ( a, b, c, backfaceCulling, optionalTarget ) {\r\n\r\n\t\t\t// from http://www.geometrictools.com/LibMathematics/Intersection/Wm5IntrRay3Triangle3.cpp\r\n\r\n\t\t\tedge1.subVectors( b, a );\r\n\t\t\tedge2.subVectors( c, a );\r\n\t\t\tnormal.crossVectors( edge1, edge2 );\r\n\r\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\t\t\tvar DdN = this.direction.dot( normal );\r\n\t\t\tvar sign;\r\n\r\n\t\t\tif ( DdN > 0 ) {\r\n\r\n\t\t\t\tif ( backfaceCulling ) return null;\r\n\t\t\t\tsign = 1;\r\n\r\n\t\t\t} else if ( DdN < 0 ) {\r\n\r\n\t\t\t\tsign = - 1;\r\n\t\t\t\tDdN = - DdN;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdiff.subVectors( this.origin, a );\r\n\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\r\n\r\n\t\t\t// b1 < 0, no intersection\r\n\t\t\tif ( DdQxE2 < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\r\n\r\n\t\t\t// b2 < 0, no intersection\r\n\t\t\tif ( DdE1xQ < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// b1+b2 > 1, no intersection\r\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Line intersects triangle, check if ray does.\r\n\t\t\tvar QdN = - sign * diff.dot( normal );\r\n\r\n\t\t\t// t < 0, no intersection\r\n\t\t\tif ( QdN < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Ray intersects triangle.\r\n\t\t\treturn this.at( QdN / DdN, optionalTarget );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyMatrix4: function ( matrix4 ) {\r\n\r\n\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\r\n\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\tthis.direction.sub( this.origin );\r\n\t\tthis.direction.normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( ray ) {\r\n\r\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Sphere.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Sphere = function ( center, radius ) {\r\n\r\n\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\r\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\r\n\r\n};\r\n\r\nTHREE.Sphere.prototype = {\r\n\r\n\tconstructor: THREE.Sphere,\r\n\r\n\tset: function ( center, radius ) {\r\n\r\n\t\tthis.center.copy( center );\r\n\t\tthis.radius = radius;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function () {\r\n\r\n\t\tvar box = new THREE.Box3();\r\n\r\n\t\treturn function ( points, optionalCenter ) {\r\n\r\n\t\t\tvar center = this.center;\r\n\r\n\t\t\tif ( optionalCenter !== undefined ) {\r\n\r\n\t\t\t\tcenter.copy( optionalCenter );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbox.setFromPoints( points ).center( center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( sphere ) {\r\n\r\n\t\tthis.center.copy( sphere.center );\r\n\t\tthis.radius = sphere.radius;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\treturn ( this.radius <= 0 );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t},\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar radiusSum = this.radius + sphere.radius;\r\n\r\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\treturn box.intersectsSphere( this );\r\n\r\n\t},\r\n\r\n\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t// We use the following equation to compute the signed distance from\r\n\t\t// the center of the sphere to the plane.\r\n\t\t//\r\n\t\t// distance = q * n - d\r\n\t\t//\r\n\t\t// If this distance is greater than the radius of the sphere,\r\n\t\t// then there is no intersection.\r\n\r\n\t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tresult.copy( point );\r\n\r\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\tresult.sub( this.center ).normalize();\r\n\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\tgetBoundingBox: function ( optionalTarget ) {\r\n\r\n\t\tvar box = optionalTarget || new THREE.Box3();\r\n\r\n\t\tbox.set( this.center, this.center );\r\n\t\tbox.expandByScalar( this.radius );\r\n\r\n\t\treturn box;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\tthis.center.applyMatrix4( matrix );\r\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.center.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( sphere ) {\r\n\r\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Frustum.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\tthis.planes = [\r\n\r\n\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\r\n\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\r\n\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\r\n\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\r\n\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\r\n\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\r\n\r\n\t];\r\n\r\n};\r\n\r\nTHREE.Frustum.prototype = {\r\n\r\n\tconstructor: THREE.Frustum,\r\n\r\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tplanes[ 0 ].copy( p0 );\r\n\t\tplanes[ 1 ].copy( p1 );\r\n\t\tplanes[ 2 ].copy( p2 );\r\n\t\tplanes[ 3 ].copy( p3 );\r\n\t\tplanes[ 4 ].copy( p4 );\r\n\t\tplanes[ 5 ].copy( p5 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( frustum ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrix: function ( m ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\t\tvar me = m.elements;\r\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\r\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\r\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\r\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\r\n\r\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tintersectsObject: function () {\r\n\r\n\t\tvar sphere = new THREE.Sphere();\r\n\r\n\t\treturn function ( object ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\tsphere.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\t\tvar center = sphere.center;\r\n\t\tvar negRadius = - sphere.radius;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\tif ( distance < negRadius ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tintersectsBox: function () {\r\n\r\n\t\tvar p1 = new THREE.Vector3(),\r\n\t\t\tp2 = new THREE.Vector3();\r\n\r\n\t\treturn function ( box ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\r\n\r\n\t\t\t\tvar plane = planes[ i ];\r\n\r\n\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\r\n\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\r\n\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\r\n\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\r\n\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\r\n\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\r\n\r\n\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\r\n\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\r\n\r\n\t\t\t\t// if both outside plane, no intersection\r\n\r\n\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Plane.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Plane = function ( normal, constant ) {\r\n\r\n\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\r\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\r\n\r\n};\r\n\r\nTHREE.Plane.prototype = {\r\n\r\n\tconstructor: THREE.Plane,\r\n\r\n\tset: function ( normal, constant ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = constant;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponents: function ( x, y, z, w ) {\r\n\r\n\t\tthis.normal.set( x, y, z );\r\n\t\tthis.constant = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCoplanarPoints: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\r\n\t\treturn function ( a, b, c ) {\r\n\r\n\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( plane ) {\r\n\r\n\t\tthis.normal.copy( plane.normal );\r\n\t\tthis.constant = plane.constant;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\r\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.constant *= - 1;\r\n\t\tthis.normal.negate();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t},\r\n\r\n\tdistanceToSphere: function ( sphere ) {\r\n\r\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t},\r\n\r\n\tprojectPoint: function ( point, optionalTarget ) {\r\n\r\n\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\r\n\r\n\t},\r\n\r\n\torthoPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\r\n\r\n\t},\r\n\r\n\tintersectLine: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( line, optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t\tvar direction = line.delta( v1 );\r\n\r\n\t\t\tvar denominator = this.normal.dot( direction );\r\n\r\n\t\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\r\n\r\n\t\t\t\t\treturn result.copy( line.start );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\t\tif ( t < 0 || t > 1 ) {\r\n\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectsLine: function ( line ) {\r\n\r\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\tvar startSign = this.distanceToPoint( line.start );\r\n\t\tvar endSign = this.distanceToPoint( line.end );\r\n\r\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\treturn box.intersectsPlane( this );\r\n\r\n\t},\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\treturn sphere.intersectsPlane( this );\r\n\r\n\t},\r\n\r\n\tcoplanarPoint: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\t\tvar m1 = new THREE.Matrix3();\r\n\r\n\t\treturn function ( matrix, optionalNormalMatrix ) {\r\n\r\n\t\t\t// compute new normal based on theory here:\r\n\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\r\n\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\r\n\t\t\tvar newNormal = v1.copy( this.normal ).applyMatrix3( normalMatrix );\r\n\r\n\t\t\tvar newCoplanarPoint = this.coplanarPoint( v2 );\r\n\t\t\tnewCoplanarPoint.applyMatrix4( matrix );\r\n\r\n\t\t\tthis.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.constant = this.constant - offset.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( plane ) {\r\n\r\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Spherical.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\r\n *\r\n * The poles (phi) are at the positive and negative y axis.\r\n * The equator starts at positive z.\r\n */\r\n\r\nTHREE.Spherical = function ( radius, phi, theta ) {\r\n\r\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\r\n\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\r\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.Spherical.prototype = {\r\n\r\n\tconstructor: THREE.Spherical,\r\n\r\n\tset: function ( radius, phi, theta ) {\r\n\r\n\t\tthis.radius = radius;\r\n\t\tthis.phi = phi;\r\n\t\tthis.theta = theta;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( other ) {\r\n\r\n\t\tthis.radius.copy( other.radius );\r\n\t\tthis.phi.copy( other.phi );\r\n\t\tthis.theta.copy( other.theta );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// restrict phi to be betwee EPS and PI-EPS\r\n\tmakeSafe: function() {\r\n\r\n\t\tvar EPS = 0.000001;\r\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\r\n\r\n\t},\r\n\r\n\tsetFromVector3: function( vec3 ) {\r\n\r\n\t\tthis.radius = vec3.length();\r\n\r\n\t\tif ( this.radius === 0 ) {\r\n\r\n\t\t\tthis.theta = 0;\r\n\t\t\tthis.phi = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\r\n\t\t\tthis.phi = Math.acos( THREE.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n};\r\n\r\n// File:src/math/Math.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Math = {\r\n\r\n\tgenerateUUID: function () {\r\n\r\n\t\t// http://www.broofa.com/Tools/Math.uuid.htm\r\n\r\n\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\r\n\t\tvar uuid = new Array( 36 );\r\n\t\tvar rnd = 0, r;\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tfor ( var i = 0; i < 36; i ++ ) {\r\n\r\n\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\r\n\r\n\t\t\t\t\tuuid[ i ] = '-';\r\n\r\n\t\t\t\t} else if ( i === 14 ) {\r\n\r\n\t\t\t\t\tuuid[ i ] = '4';\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\r\n\t\t\t\t\tr = rnd & 0xf;\r\n\t\t\t\t\trnd = rnd >> 4;\r\n\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn uuid.join( '' );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclamp: function ( value, min, max ) {\r\n\r\n\t\treturn Math.max( min, Math.min( max, value ) );\r\n\r\n\t},\r\n\r\n\t// compute euclidian modulo of m % n\r\n\t// https://en.wikipedia.org/wiki/Modulo_operation\r\n\r\n\teuclideanModulo: function ( n, m ) {\r\n\r\n\t\treturn ( ( n % m ) + m ) % m;\r\n\r\n\t},\r\n\r\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\r\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\r\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n\t},\r\n\r\n\t// http://en.wikipedia.org/wiki/Smoothstep\r\n\r\n\tsmoothstep: function ( x, min, max ) {\r\n\r\n\t\tif ( x <= min ) return 0;\r\n\t\tif ( x >= max ) return 1;\r\n\r\n\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\treturn x * x * ( 3 - 2 * x );\r\n\r\n\t},\r\n\r\n\tsmootherstep: function ( x, min, max ) {\r\n\r\n\t\tif ( x <= min ) return 0;\r\n\t\tif ( x >= max ) return 1;\r\n\r\n\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\r\n\t},\r\n\r\n\trandom16: function () {\r\n\r\n\t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\r\n\t\treturn Math.random();\r\n\r\n\t},\r\n\r\n\t// Random integer from <low, high> interval\r\n\r\n\trandInt: function ( low, high ) {\r\n\r\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n\t},\r\n\r\n\t// Random float from <low, high> interval\r\n\r\n\trandFloat: function ( low, high ) {\r\n\r\n\t\treturn low + Math.random() * ( high - low );\r\n\r\n\t},\r\n\r\n\t// Random float from <-range/2, range/2> interval\r\n\r\n\trandFloatSpread: function ( range ) {\r\n\r\n\t\treturn range * ( 0.5 - Math.random() );\r\n\r\n\t},\r\n\r\n\tdegToRad: function () {\r\n\r\n\t\tvar degreeToRadiansFactor = Math.PI / 180;\r\n\r\n\t\treturn function ( degrees ) {\r\n\r\n\t\t\treturn degrees * degreeToRadiansFactor;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tradToDeg: function () {\r\n\r\n\t\tvar radianToDegreesFactor = 180 / Math.PI;\r\n\r\n\t\treturn function ( radians ) {\r\n\r\n\t\t\treturn radians * radianToDegreesFactor;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tisPowerOfTwo: function ( value ) {\r\n\r\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\r\n\t},\r\n\r\n\tnearestPowerOfTwo: function ( value ) {\r\n\r\n\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t},\r\n\r\n\tnextPowerOfTwo: function ( value ) {\r\n\r\n\t\tvalue --;\r\n\t\tvalue |= value >> 1;\r\n\t\tvalue |= value >> 2;\r\n\t\tvalue |= value >> 4;\r\n\t\tvalue |= value >> 8;\r\n\t\tvalue |= value >> 16;\r\n\t\tvalue ++;\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Spline.js\r\n\r\n/**\r\n * Spline from Tween.js, slightly optimized (and trashed)\r\n * http://sole.github.com/tween.js/examples/05_spline.html\r\n *\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Spline = function ( points ) {\r\n\r\n\tthis.points = points;\r\n\r\n\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\r\n\tpoint, intPoint, weight, w2, w3,\r\n\tpa, pb, pc, pd;\r\n\r\n\tthis.initFromArray = function ( a ) {\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0; i < a.length; i ++ ) {\r\n\r\n\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.getPoint = function ( k ) {\r\n\r\n\t\tpoint = ( this.points.length - 1 ) * k;\r\n\t\tintPoint = Math.floor( point );\r\n\t\tweight = point - intPoint;\r\n\r\n\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\r\n\t\tc[ 1 ] = intPoint;\r\n\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\r\n\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\r\n\r\n\t\tpa = this.points[ c[ 0 ] ];\r\n\t\tpb = this.points[ c[ 1 ] ];\r\n\t\tpc = this.points[ c[ 2 ] ];\r\n\t\tpd = this.points[ c[ 3 ] ];\r\n\r\n\t\tw2 = weight * weight;\r\n\t\tw3 = weight * w2;\r\n\r\n\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\r\n\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\r\n\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\r\n\r\n\t\treturn v3;\r\n\r\n\t};\r\n\r\n\tthis.getControlPointsArray = function () {\r\n\r\n\t\tvar i, p, l = this.points.length,\r\n\t\t\tcoords = [];\r\n\r\n\t\tfor ( i = 0; i < l; i ++ ) {\r\n\r\n\t\t\tp = this.points[ i ];\r\n\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\r\n\r\n\t\t}\r\n\r\n\t\treturn coords;\r\n\r\n\t};\r\n\r\n\t// approximate length by summing linear segments\r\n\r\n\tthis.getLength = function ( nSubDivisions ) {\r\n\r\n\t\tvar i, index, nSamples, position,\r\n\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\r\n\t\t\toldPosition = new THREE.Vector3(),\r\n\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\tchunkLengths = [],\r\n\t\t\ttotalLength = 0;\r\n\r\n\t\t// first point has 0 length\r\n\r\n\t\tchunkLengths[ 0 ] = 0;\r\n\r\n\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\r\n\r\n\t\tnSamples = this.points.length * nSubDivisions;\r\n\r\n\t\toldPosition.copy( this.points[ 0 ] );\r\n\r\n\t\tfor ( i = 1; i < nSamples; i ++ ) {\r\n\r\n\t\t\tindex = i / nSamples;\r\n\r\n\t\t\tposition = this.getPoint( index );\r\n\t\t\ttmpVec.copy( position );\r\n\r\n\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\r\n\r\n\t\t\toldPosition.copy( position );\r\n\r\n\t\t\tpoint = ( this.points.length - 1 ) * index;\r\n\t\t\tintPoint = Math.floor( point );\r\n\r\n\t\t\tif ( intPoint !== oldIntPoint ) {\r\n\r\n\t\t\t\tchunkLengths[ intPoint ] = totalLength;\r\n\t\t\t\toldIntPoint = intPoint;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// last point ends with total length\r\n\r\n\t\tchunkLengths[ chunkLengths.length ] = totalLength;\r\n\r\n\t\treturn { chunks: chunkLengths, total: totalLength };\r\n\r\n\t};\r\n\r\n\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\r\n\r\n\t\tvar i, j,\r\n\t\t\tindex, indexCurrent, indexNext,\r\n\t\t\trealDistance,\r\n\t\t\tsampling, position,\r\n\t\t\tnewpoints = [],\r\n\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\tsl = this.getLength();\r\n\r\n\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\r\n\r\n\t\tfor ( i = 1; i < this.points.length; i ++ ) {\r\n\r\n\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\r\n\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\r\n\r\n\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\r\n\r\n\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\r\n\r\n\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\r\n\t\t\tindexNext = i / ( this.points.length - 1 );\r\n\r\n\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\r\n\r\n\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\r\n\r\n\t\t\t\tposition = this.getPoint( index );\r\n\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.points = newpoints;\r\n\r\n\t};\r\n\r\n\t// Catmull-Rom\r\n\r\n\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5,\r\n\t\t\tv1 = ( p3 - p1 ) * 0.5;\r\n\r\n\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Triangle.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Triangle = function ( a, b, c ) {\r\n\r\n\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\r\n\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\r\n\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Triangle.normal = function () {\r\n\r\n\tvar v0 = new THREE.Vector3();\r\n\r\n\treturn function ( a, b, c, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tresult.subVectors( c, b );\r\n\t\tv0.subVectors( a, b );\r\n\t\tresult.cross( v0 );\r\n\r\n\t\tvar resultLengthSq = result.lengthSq();\r\n\t\tif ( resultLengthSq > 0 ) {\r\n\r\n\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn result.set( 0, 0, 0 );\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// static/instance method to calculate barycentric coordinates\r\n// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\nTHREE.Triangle.barycoordFromPoint = function () {\r\n\r\n\tvar v0 = new THREE.Vector3();\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\r\n\treturn function ( point, a, b, c, optionalTarget ) {\r\n\r\n\t\tv0.subVectors( c, a );\r\n\t\tv1.subVectors( b, a );\r\n\t\tv2.subVectors( point, a );\r\n\r\n\t\tvar dot00 = v0.dot( v0 );\r\n\t\tvar dot01 = v0.dot( v1 );\r\n\t\tvar dot02 = v0.dot( v2 );\r\n\t\tvar dot11 = v1.dot( v1 );\r\n\t\tvar dot12 = v1.dot( v2 );\r\n\r\n\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t// collinear or singular triangle\r\n\t\tif ( denom === 0 ) {\r\n\r\n\t\t\t// arbitrary location outside of triangle?\r\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\t\treturn result.set( - 2, - 1, - 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvar invDenom = 1 / denom;\r\n\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t\t// barycentric coordinates must always sum to 1\r\n\t\treturn result.set( 1 - u - v, v, u );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Triangle.containsPoint = function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\r\n\treturn function ( point, a, b, c ) {\r\n\r\n\t\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );\r\n\r\n\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Triangle.prototype = {\r\n\r\n\tconstructor: THREE.Triangle,\r\n\r\n\tset: function ( a, b, c ) {\r\n\r\n\t\tthis.a.copy( a );\r\n\t\tthis.b.copy( b );\r\n\t\tthis.c.copy( c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.copy( points[ i0 ] );\r\n\t\tthis.b.copy( points[ i1 ] );\r\n\t\tthis.c.copy( points[ i2 ] );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( triangle ) {\r\n\r\n\t\tthis.a.copy( triangle.a );\r\n\t\tthis.b.copy( triangle.b );\r\n\t\tthis.c.copy( triangle.c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tarea: function () {\r\n\r\n\t\tvar v0 = new THREE.Vector3();\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tv0.subVectors( this.c, this.b );\r\n\t\t\tv1.subVectors( this.a, this.b );\r\n\r\n\t\t\treturn v0.cross( v1 ).length() * 0.5;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmidpoint: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t},\r\n\r\n\tnormal: function ( optionalTarget ) {\r\n\r\n\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\r\n\r\n\t},\r\n\r\n\tplane: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Plane();\r\n\r\n\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tbarycoordFromPoint: function ( point, optionalTarget ) {\r\n\r\n\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tequals: function ( triangle ) {\r\n\r\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Interpolant.js\r\n\r\n/**\r\n * Abstract base class of interpolants over parametric samples.\r\n *\r\n * The parameter domain is one dimensional, typically the time or a path\r\n * along a curve defined by the data.\r\n *\r\n * The sample values can have any dimensionality and derived classes may\r\n * apply special interpretations to the data.\r\n *\r\n * This class provides the interval seek in a Template Method, deferring\r\n * the actual interpolation to derived classes.\r\n *\r\n * Time complexity is O(1) for linear access crossing at most two points\r\n * and O(log N) for random access, where N is the number of positions.\r\n *\r\n * References:\r\n *\r\n * \t\thttp://www.oodesign.com/template-method-pattern.html\r\n *\r\n * @author tschw\r\n */\r\n\r\nTHREE.Interpolant = function(\r\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\tthis.parameterPositions = parameterPositions;\r\n\tthis._cachedIndex = 0;\r\n\r\n\tthis.resultBuffer = resultBuffer !== undefined ?\r\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\r\n\tthis.sampleValues = sampleValues;\r\n\tthis.valueSize = sampleSize;\r\n\r\n};\r\n\r\nTHREE.Interpolant.prototype = {\r\n\r\n\tconstructor: THREE.Interpolant,\r\n\r\n\tevaluate: function( t ) {\r\n\r\n\t\tvar pp = this.parameterPositions,\r\n\t\t\ti1 = this._cachedIndex,\r\n\r\n\t\t\tt1 = pp[   i1   ],\r\n\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\tvalidate_interval: {\r\n\r\n\t\t\tseek: {\r\n\r\n\t\t\t\tvar right;\r\n\r\n\t\t\t\tlinear_scan: {\r\n//- See http://jsperf.com/comparison-to-undefined/3\r\n//- slower code:\r\n//-\r\n//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\r\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\r\n\r\n\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\r\n\r\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\r\n\r\n\t\t\t\t\t\t\t\t// after end\r\n\r\n\t\t\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\r\n\t\t\t\t\t\t\tt0 = t1;\r\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t < t1 ) {\r\n\r\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// prepare binary search on the right side of the index\r\n\t\t\t\t\t\tright = pp.length;\r\n\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t}\r\n\r\n//- slower code:\r\n//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\r\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\r\n\r\n\t\t\t\t\t\t// looping?\r\n\r\n\t\t\t\t\t\tvar t1global = pp[ 1 ];\r\n\r\n\t\t\t\t\t\tif ( t < t1global ) {\r\n\r\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\r\n\t\t\t\t\t\t\tt0 = t1global;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// linear reverse scan\r\n\r\n\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\r\n\r\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t// before start\r\n\r\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\r\n\t\t\t\t\t\t\tt1 = t0;\r\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t >= t0 ) {\r\n\r\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// prepare binary search on the left side of the index\r\n\t\t\t\t\t\tright = i1;\r\n\t\t\t\t\t\ti1 = 0;\r\n\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// the interval is valid\r\n\r\n\t\t\t\t\tbreak validate_interval;\r\n\r\n\t\t\t\t} // linear scan\r\n\r\n\t\t\t\t// binary search\r\n\r\n\t\t\t\twhile ( i1 < right ) {\r\n\r\n\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\r\n\r\n\t\t\t\t\tif ( t < pp[ mid ] ) {\r\n\r\n\t\t\t\t\t\tright = mid;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ti1 = mid + 1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tt1 = pp[   i1   ];\r\n\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\t\t\t// check boundary cases, again\r\n\r\n\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} // seek\r\n\r\n\t\t\tthis._cachedIndex = i1;\r\n\r\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\r\n\r\n\t\t} // validate_interval\r\n\r\n\t\treturn this.interpolate_( i1, t0, t, t1 );\r\n\r\n\t},\r\n\r\n\tsettings: null, // optional, subclass-specific settings structure\r\n\t// Note: The indirection allows central control of many interpolants.\r\n\r\n\t// --- Protected interface\r\n\r\n\tDefaultSettings_: {},\r\n\r\n\tgetSettings_: function() {\r\n\r\n\t\treturn this.settings || this.DefaultSettings_;\r\n\r\n\t},\r\n\r\n\tcopySampleValue_: function( index ) {\r\n\r\n\t\t// copies a sample value to the result buffer\r\n\r\n\t\tvar result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\t\t\toffset = index * stride;\r\n\r\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] = values[ offset + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\t// Template methods for derived classes:\r\n\r\n\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\r\n\t\tthrow new Error( \"call to abstract method\" );\r\n\t\t// implementations shall return this.resultBuffer\r\n\r\n\t},\r\n\r\n\tintervalChanged_: function( i1, t0, t1 ) {\r\n\r\n\t\t// empty\r\n\r\n\t}\r\n\r\n};\r\n\r\nObject.assign( THREE.Interpolant.prototype, {\r\n\r\n\tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\r\n\t\tTHREE.Interpolant.prototype.copySampleValue_,\r\n\r\n\tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\r\n\t\tTHREE.Interpolant.prototype.copySampleValue_\r\n\r\n} );\r\n\r\n// File:src/math/interpolants/CubicInterpolant.js\r\n\r\n/**\r\n * Fast and simple cubic spline interpolant.\r\n *\r\n * It was derived from a Hermitian construction setting the first derivative\r\n * at each sample position to the linear slope between neighboring positions\r\n * over their parameter interval.\r\n *\r\n * @author tschw\r\n */\r\n\r\nTHREE.CubicInterpolant = function(\r\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\tTHREE.Interpolant.call(\r\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\tthis._weightPrev = -0;\r\n\tthis._offsetPrev = -0;\r\n\tthis._weightNext = -0;\r\n\tthis._offsetNext = -0;\r\n\r\n};\r\n\r\nTHREE.CubicInterpolant.prototype =\r\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\r\n\tconstructor: THREE.CubicInterpolant,\r\n\r\n\tDefaultSettings_: {\r\n\r\n\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\r\n\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\r\n\r\n\t},\r\n\r\n\tintervalChanged_: function( i1, t0, t1 ) {\r\n\r\n\t\tvar pp = this.parameterPositions,\r\n\t\t\tiPrev = i1 - 2,\r\n\t\t\tiNext = i1 + 1,\r\n\r\n\t\t\ttPrev = pp[ iPrev ],\r\n\t\t\ttNext = pp[ iNext ];\r\n\r\n\t\tif ( tPrev === undefined ) {\r\n\r\n\t\t\tswitch ( this.getSettings_().endingStart ) {\r\n\r\n\t\t\t\tcase THREE.ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t// f'(t0) = 0\r\n\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\ttPrev = 2 * t0 - t1;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.WrapAroundEnding:\r\n\r\n\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\tiPrev = pp.length - 2;\r\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\r\n\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\ttPrev = t1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( tNext === undefined ) {\r\n\r\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\r\n\r\n\t\t\t\tcase THREE.ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t// f'(tN) = 0\r\n\t\t\t\t\tiNext = i1;\r\n\t\t\t\t\ttNext = 2 * t1 - t0;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.WrapAroundEnding:\r\n\r\n\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\tiNext = 1;\r\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\r\n\t\t\t\t\tiNext = i1 - 1;\r\n\t\t\t\t\ttNext = t0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar halfDt = ( t1 - t0 ) * 0.5,\r\n\t\t\tstride = this.valueSize;\r\n\r\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\r\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\r\n\t\tthis._offsetPrev = iPrev * stride;\r\n\t\tthis._offsetNext = iNext * stride;\r\n\r\n\t},\r\n\r\n\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\r\n\t\tvar result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\r\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\r\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\r\n\r\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\tpp = p * p,\r\n\t\t\tppp = pp * p;\r\n\r\n\t\t// evaluate polynomials\r\n\r\n\t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\r\n\t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\r\n\t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\r\n\t\tvar sN =       wN   * ppp   -           wN      * pp;\r\n\r\n\t\t// combine data linearly\r\n\r\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] =\r\n\t\t\t\t\tsP * values[ oP + i ] +\r\n\t\t\t\t\ts0 * values[ o0 + i ] +\r\n\t\t\t\t\ts1 * values[ o1 + i ] +\r\n\t\t\t\t\tsN * values[ oN + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/math/interpolants/DiscreteInterpolant.js\r\n\r\n/**\r\n *\r\n * Interpolant that evaluates to the sample value at the position preceeding\r\n * the parameter.\r\n *\r\n * @author tschw\r\n */\r\n\r\nTHREE.DiscreteInterpolant = function(\r\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\tTHREE.Interpolant.call(\r\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n};\r\n\r\nTHREE.DiscreteInterpolant.prototype =\r\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\r\n\tconstructor: THREE.DiscreteInterpolant,\r\n\r\n\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\r\n\t\treturn this.copySampleValue_( i1 - 1 );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/math/interpolants/LinearInterpolant.js\r\n\r\n/**\r\n * @author tschw\r\n */\r\n\r\nTHREE.LinearInterpolant = function(\r\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\tTHREE.Interpolant.call(\r\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n};\r\n\r\nTHREE.LinearInterpolant.prototype =\r\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\r\n\tconstructor: THREE.LinearInterpolant,\r\n\r\n\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\r\n\t\tvar result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\toffset1 = i1 * stride,\r\n\t\t\toffset0 = offset1 - stride,\r\n\r\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\tweight0 = 1 - weight1;\r\n\r\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] =\r\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\r\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/math/interpolants/QuaternionLinearInterpolant.js\r\n\r\n/**\r\n * Spherical linear unit quaternion interpolant.\r\n *\r\n * @author tschw\r\n */\r\n\r\nTHREE.QuaternionLinearInterpolant = function(\r\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\tTHREE.Interpolant.call(\r\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n};\r\n\r\nTHREE.QuaternionLinearInterpolant.prototype =\r\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\r\n\tconstructor: THREE.QuaternionLinearInterpolant,\r\n\r\n\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\r\n\t\tvar result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\toffset = i1 * stride,\r\n\r\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\r\n\r\n\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\r\n\r\n\t\t\tTHREE.Quaternion.slerpFlat( result, 0,\r\n\t\t\t\t\tvalues, offset - stride, values, offset, alpha );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/core/Clock.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Clock = function ( autoStart ) {\r\n\r\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\r\n\r\n\tthis.startTime = 0;\r\n\tthis.oldTime = 0;\r\n\tthis.elapsedTime = 0;\r\n\r\n\tthis.running = false;\r\n\r\n};\r\n\r\nTHREE.Clock.prototype = {\r\n\r\n\tconstructor: THREE.Clock,\r\n\r\n\tstart: function () {\r\n\r\n\t\tthis.startTime = performance.now();\r\n\r\n\t\tthis.oldTime = this.startTime;\r\n\t\tthis.running = true;\r\n\r\n\t},\r\n\r\n\tstop: function () {\r\n\r\n\t\tthis.getElapsedTime();\r\n\t\tthis.running = false;\r\n\r\n\t},\r\n\r\n\tgetElapsedTime: function () {\r\n\r\n\t\tthis.getDelta();\r\n\t\treturn this.elapsedTime;\r\n\r\n\t},\r\n\r\n\tgetDelta: function () {\r\n\r\n\t\tvar diff = 0;\r\n\r\n\t\tif ( this.autoStart && ! this.running ) {\r\n\r\n\t\t\tthis.start();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.running ) {\r\n\r\n\t\t\tvar newTime = performance.now();\r\n\r\n\t\t\tdiff = 0.001 * ( newTime - this.oldTime );\r\n\t\t\tthis.oldTime = newTime;\r\n\r\n\t\t\tthis.elapsedTime += diff;\r\n\r\n\t\t}\r\n\r\n\t\treturn diff;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/EventDispatcher.js\r\n\r\n/**\r\n * https://github.com/mrdoob/eventdispatcher.js/\r\n */\r\n\r\nTHREE.EventDispatcher = function () {};\r\n\r\nTHREE.EventDispatcher.prototype = {\r\n\r\n\tconstructor: THREE.EventDispatcher,\r\n\r\n\tapply: function ( object ) {\r\n\r\n\t\tobject.addEventListener = THREE.EventDispatcher.prototype.addEventListener;\r\n\t\tobject.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;\r\n\t\tobject.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;\r\n\t\tobject.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;\r\n\r\n\t},\r\n\r\n\taddEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) this._listeners = {};\r\n\r\n\t\tvar listeners = this._listeners;\r\n\r\n\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\thasEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return false;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\r\n\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tremoveEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\t\tvar listenerArray = listeners[ type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tvar index = listenerArray.indexOf( listener );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\tlistenerArray.splice( index, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tdispatchEvent: function ( event ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\t\tvar listenerArray = listeners[ event.type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tevent.target = this;\r\n\r\n\t\t\tvar array = [];\r\n\t\t\tvar length = listenerArray.length;\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tarray[ i ] = listenerArray[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tarray[ i ].call( this, event );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/Layers.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Layers = function () {\r\n\r\n\tthis.mask = 1;\r\n\r\n};\r\n\r\nTHREE.Layers.prototype = {\r\n\r\n\tconstructor: THREE.Layers,\r\n\r\n\tset: function ( channel ) {\r\n\r\n\t\tthis.mask = 1 << channel;\r\n\r\n\t},\r\n\r\n\tenable: function ( channel ) {\r\n\r\n\t\tthis.mask |= 1 << channel;\r\n\r\n\t},\r\n\r\n\ttoggle: function ( channel ) {\r\n\r\n\t\tthis.mask ^= 1 << channel;\r\n\r\n\t},\r\n\r\n\tdisable: function ( channel ) {\r\n\r\n\t\tthis.mask &= ~ ( 1 << channel );\r\n\r\n\t},\r\n\r\n\ttest: function ( layers ) {\r\n\r\n\t\treturn ( this.mask & layers.mask ) !== 0;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/Raycaster.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author bhouston / http://clara.io/\r\n * @author stephomi / http://stephaneginier.com/\r\n */\r\n\r\n( function ( THREE ) {\r\n\r\n\tTHREE.Raycaster = function ( origin, direction, near, far ) {\r\n\r\n\t\tthis.ray = new THREE.Ray( origin, direction );\r\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\tthis.near = near || 0;\r\n\t\tthis.far = far || Infinity;\r\n\r\n\t\tthis.params = {\r\n\t\t\tMesh: {},\r\n\t\t\tLine: {},\r\n\t\t\tLOD: {},\r\n\t\t\tPoints: { threshold: 1 },\r\n\t\t\tSprite: {}\r\n\t\t};\r\n\r\n\t\tObject.defineProperties( this.params, {\r\n\t\t\tPointCloud: {\r\n\t\t\t\tget: function () {\r\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\r\n\t\t\t\t\treturn this.Points;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t};\r\n\r\n\tfunction ascSort( a, b ) {\r\n\r\n\t\treturn a.distance - b.distance;\r\n\r\n\t}\r\n\r\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\r\n\r\n\t\tif ( object.visible === false ) return;\r\n\r\n\t\tobject.raycast( raycaster, intersects );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tTHREE.Raycaster.prototype = {\r\n\r\n\t\tconstructor: THREE.Raycaster,\r\n\r\n\t\tlinePrecision: 1,\r\n\r\n\t\tset: function ( origin, direction ) {\r\n\r\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\t\tthis.ray.set( origin, direction );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCamera: function ( coords, camera ) {\r\n\r\n\t\t\tif ( camera instanceof THREE.PerspectiveCamera ) {\r\n\r\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\r\n\r\n\t\t\t} else if ( camera instanceof THREE.OrthographicCamera ) {\r\n\r\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, - 1 ).unproject( camera );\r\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tintersectObject: function ( object, recursive ) {\r\n\r\n\t\t\tvar intersects = [];\r\n\r\n\t\t\tintersectObject( object, this, intersects, recursive );\r\n\r\n\t\t\tintersects.sort( ascSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t},\r\n\r\n\t\tintersectObjects: function ( objects, recursive ) {\r\n\r\n\t\t\tvar intersects = [];\r\n\r\n\t\t\tif ( Array.isArray( objects ) === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\r\n\t\t\t\treturn intersects;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tintersects.sort( ascSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}( THREE ) );\r\n\r\n// File:src/core/Object3D.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author elephantatwork / www.elephantatwork.ch\r\n */\r\n\r\nTHREE.Object3D = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'Object3D';\r\n\r\n\tthis.parent = null;\r\n\tthis.children = [];\r\n\r\n\tthis.up = THREE.Object3D.DefaultUp.clone();\r\n\r\n\tvar position = new THREE.Vector3();\r\n\tvar rotation = new THREE.Euler();\r\n\tvar quaternion = new THREE.Quaternion();\r\n\tvar scale = new THREE.Vector3( 1, 1, 1 );\r\n\r\n\tfunction onRotationChange() {\r\n\r\n\t\tquaternion.setFromEuler( rotation, false );\r\n\r\n\t}\r\n\r\n\tfunction onQuaternionChange() {\r\n\r\n\t\trotation.setFromQuaternion( quaternion, undefined, false );\r\n\r\n\t}\r\n\r\n\trotation.onChange( onRotationChange );\r\n\tquaternion.onChange( onQuaternionChange );\r\n\r\n\tObject.defineProperties( this, {\r\n\t\tposition: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: position\r\n\t\t},\r\n\t\trotation: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: rotation\r\n\t\t},\r\n\t\tquaternion: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: quaternion\r\n\t\t},\r\n\t\tscale: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: scale\r\n\t\t},\r\n\t\tmodelViewMatrix: {\r\n\t\t\tvalue: new THREE.Matrix4()\r\n\t\t},\r\n\t\tnormalMatrix: {\r\n\t\t\tvalue: new THREE.Matrix3()\r\n\t\t}\r\n\t} );\r\n\r\n\tthis.rotationAutoUpdate = true;\r\n\r\n\tthis.matrix = new THREE.Matrix4();\r\n\tthis.matrixWorld = new THREE.Matrix4();\r\n\r\n\tthis.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;\r\n\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\tthis.layers = new THREE.Layers();\r\n\tthis.visible = true;\r\n\r\n\tthis.castShadow = false;\r\n\tthis.receiveShadow = false;\r\n\r\n\tthis.frustumCulled = true;\r\n\tthis.renderOrder = 0;\r\n\r\n\tthis.userData = {};\r\n\r\n};\r\n\r\nTHREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );\r\nTHREE.Object3D.DefaultMatrixAutoUpdate = true;\r\n\r\nTHREE.Object3D.prototype = {\r\n\r\n\tconstructor: THREE.Object3D,\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\r\n\r\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\r\n\t},\r\n\r\n\tsetRotationFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\r\n\r\n\t},\r\n\r\n\tsetRotationFromEuler: function ( euler ) {\r\n\r\n\t\tthis.quaternion.setFromEuler( euler, true );\r\n\r\n\t},\r\n\r\n\tsetRotationFromMatrix: function ( m ) {\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( m );\r\n\r\n\t},\r\n\r\n\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t// assumes q is normalized\r\n\r\n\t\tthis.quaternion.copy( q );\r\n\r\n\t},\r\n\r\n\trotateOnAxis: function () {\r\n\r\n\t\t// rotate object on axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\tvar q1 = new THREE.Quaternion();\r\n\r\n\t\treturn function ( axis, angle ) {\r\n\r\n\t\t\tq1.setFromAxisAngle( axis, angle );\r\n\r\n\t\t\tthis.quaternion.multiply( q1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateX: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\r\n\r\n\t\treturn function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateY: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\r\n\r\n\t\treturn function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateZ: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\r\n\r\n\t\treturn function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateOnAxis: function () {\r\n\r\n\t\t// translate object by distance along axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( axis, distance ) {\r\n\r\n\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\r\n\r\n\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateX: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\r\n\r\n\t\treturn function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateY: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\r\n\r\n\t\treturn function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateZ: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\r\n\r\n\t\treturn function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlocalToWorld: function ( vector ) {\r\n\r\n\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t},\r\n\r\n\tworldToLocal: function () {\r\n\r\n\t\tvar m1 = new THREE.Matrix4();\r\n\r\n\t\treturn function ( vector ) {\r\n\r\n\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\t// This routine does not support objects with rotated and/or translated parent(s)\r\n\r\n\t\tvar m1 = new THREE.Matrix4();\r\n\r\n\t\treturn function ( vector ) {\r\n\r\n\t\t\tm1.lookAt( vector, this.position, this.up );\r\n\r\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tadd: function ( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.add( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object === this ) {\r\n\r\n\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object instanceof THREE.Object3D ) {\r\n\r\n\t\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\t\tobject.parent.remove( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.parent = this;\r\n\t\t\tobject.dispatchEvent( { type: 'added' } );\r\n\r\n\t\t\tthis.children.push( object );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tremove: function ( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.remove( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar index = this.children.indexOf( object );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tobject.parent = null;\r\n\r\n\t\t\tobject.dispatchEvent( { type: 'removed' } );\r\n\r\n\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetObjectById: function ( id ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'id', id );\r\n\r\n\t},\r\n\r\n\tgetObjectByName: function ( name ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'name', name );\r\n\r\n\t},\r\n\r\n\tgetObjectByProperty: function ( name, value ) {\r\n\r\n\t\tif ( this[ name ] === value ) return this;\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar child = this.children[ i ];\r\n\t\t\tvar object = child.getObjectByProperty( name, value );\r\n\r\n\t\t\tif ( object !== undefined ) {\r\n\r\n\t\t\t\treturn object;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\r\n\t},\r\n\r\n\tgetWorldPosition: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\treturn result.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t},\r\n\r\n\tgetWorldQuaternion: function () {\r\n\r\n\t\tvar position = new THREE.Vector3();\r\n\t\tvar scale = new THREE.Vector3();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Quaternion();\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( position, result, scale );\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetWorldRotation: function () {\r\n\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Euler();\r\n\r\n\t\t\tthis.getWorldQuaternion( quaternion );\r\n\r\n\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetWorldScale: function () {\r\n\r\n\t\tvar position = new THREE.Vector3();\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetWorldDirection: function () {\r\n\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t\tthis.getWorldQuaternion( quaternion );\r\n\r\n\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\traycast: function () {},\r\n\r\n\ttraverse: function ( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tvar children = this.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttraverseVisible: function ( callback ) {\r\n\r\n\t\tif ( this.visible === false ) return;\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tvar children = this.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverseVisible( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttraverseAncestors: function ( callback ) {\r\n\r\n\t\tvar parent = this.parent;\r\n\r\n\t\tif ( parent !== null ) {\r\n\r\n\t\t\tcallback( parent );\r\n\r\n\t\t\tparent.traverseAncestors( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tupdateMatrix: function () {\r\n\r\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t},\r\n\r\n\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\r\n\r\n\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\r\n\r\n\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\tforce = true;\r\n\r\n\t\t}\r\n\r\n\t\t// update children\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.children[ i ].updateMatrixWorld( force );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar isRootObject = ( meta === undefined );\r\n\r\n\t\tvar output = {};\r\n\r\n\t\t// meta is a hash used to collect geometries, materials.\r\n\t\t// not providing it implies that this is the root object\r\n\t\t// being serialized.\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\t// initialize meta obj\r\n\t\t\tmeta = {\r\n\t\t\t\tgeometries: {},\r\n\t\t\t\tmaterials: {},\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {}\r\n\t\t\t};\r\n\r\n\t\t\toutput.metadata = {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Object',\r\n\t\t\t\tgenerator: 'Object3D.toJSON'\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// standard Object3D serialization\r\n\r\n\t\tvar object = {};\r\n\r\n\t\tobject.uuid = this.uuid;\r\n\t\tobject.type = this.type;\r\n\r\n\t\tif ( this.name !== '' ) object.name = this.name;\r\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\r\n\t\tif ( this.castShadow === true ) object.castShadow = true;\r\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\r\n\t\tif ( this.visible === false ) object.visible = false;\r\n\r\n\t\tobject.matrix = this.matrix.toArray();\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.geometry !== undefined ) {\r\n\r\n\t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\r\n\r\n\t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.geometry = this.geometry.uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.material !== undefined ) {\r\n\r\n\t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\r\n\r\n\t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.material = this.material.uuid;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.children.length > 0 ) {\r\n\r\n\t\t\tobject.children = [];\r\n\r\n\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tvar geometries = extractFromCache( meta.geometries );\r\n\t\t\tvar materials = extractFromCache( meta.materials );\r\n\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\tvar images = extractFromCache( meta.images );\r\n\r\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\r\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\r\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\r\n\t\t\tif ( images.length > 0 ) output.images = images;\r\n\r\n\t\t}\r\n\r\n\t\toutput.object = object;\r\n\r\n\t\treturn output;\r\n\r\n\t\t// extract data from the cache hash\r\n\t\t// remove metadata on each item\r\n\t\t// and return as array\r\n\t\tfunction extractFromCache ( cache ) {\r\n\r\n\t\t\tvar values = [];\r\n\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function ( recursive ) {\r\n\r\n\t\treturn new this.constructor().copy( this, recursive );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source, recursive ) {\r\n\r\n\t\tif ( recursive === undefined ) recursive = true;\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.up.copy( source.up );\r\n\r\n\t\tthis.position.copy( source.position );\r\n\t\tthis.quaternion.copy( source.quaternion );\r\n\t\tthis.scale.copy( source.scale );\r\n\r\n\t\tthis.rotationAutoUpdate = source.rotationAutoUpdate;\r\n\r\n\t\tthis.matrix.copy( source.matrix );\r\n\t\tthis.matrixWorld.copy( source.matrixWorld );\r\n\r\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n\r\n\t\tthis.visible = source.visible;\r\n\r\n\t\tthis.castShadow = source.castShadow;\r\n\t\tthis.receiveShadow = source.receiveShadow;\r\n\r\n\t\tthis.frustumCulled = source.frustumCulled;\r\n\t\tthis.renderOrder = source.renderOrder;\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\r\n\r\n\t\t\t\tvar child = source.children[ i ];\r\n\t\t\t\tthis.add( child.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.Object3D.prototype );\r\n\r\nTHREE.Object3DIdCount = 0;\r\n\r\n// File:src/core/Face3.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\r\n\r\n\tthis.a = a;\r\n\tthis.b = b;\r\n\tthis.c = c;\r\n\r\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\r\n\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\r\n\r\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\r\n\tthis.vertexColors = Array.isArray( color ) ? color : [];\r\n\r\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n};\r\n\r\nTHREE.Face3.prototype = {\r\n\r\n\tconstructor: THREE.Face3,\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.a = source.a;\r\n\t\tthis.b = source.b;\r\n\t\tthis.c = source.c;\r\n\r\n\t\tthis.normal.copy( source.normal );\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.materialIndex = source.materialIndex;\r\n\r\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/BufferAttribute.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BufferAttribute = function ( array, itemSize ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.array = array;\r\n\tthis.itemSize = itemSize;\r\n\r\n\tthis.dynamic = false;\r\n\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\tthis.version = 0;\r\n\r\n};\r\n\r\nTHREE.BufferAttribute.prototype = {\r\n\r\n\tconstructor: THREE.BufferAttribute,\r\n\r\n\tget count() {\r\n\r\n\t\treturn this.array.length / this.itemSize;\r\n\r\n\t},\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t},\r\n\r\n\tsetDynamic: function ( value ) {\r\n\r\n\t\tthis.dynamic = value;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.array = new source.array.constructor( source.array );\r\n\t\tthis.itemSize = source.itemSize;\r\n\r\n\t\tthis.dynamic = source.dynamic;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\tindex1 *= this.itemSize;\r\n\t\tindex2 *= attribute.itemSize;\r\n\r\n\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\r\n\r\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyArray: function ( array ) {\r\n\r\n\t\tthis.array.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyColorsArray: function ( colors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar color = colors[ i ];\r\n\r\n\t\t\tif ( color === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\r\n\t\t\t\tcolor = new THREE.Color();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = color.r;\r\n\t\t\tarray[ offset ++ ] = color.g;\r\n\t\t\tarray[ offset ++ ] = color.b;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyIndicesArray: function ( indices ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar index = indices[ i ];\r\n\r\n\t\t\tarray[ offset ++ ] = index.a;\r\n\t\t\tarray[ offset ++ ] = index.b;\r\n\t\t\tarray[ offset ++ ] = index.c;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyVector2sArray: function ( vectors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\r\n\t\t\t\tvector = new THREE.Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\tarray[ offset ++ ] = vector.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyVector3sArray: function ( vectors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\r\n\t\t\t\tvector = new THREE.Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\tarray[ offset ++ ] = vector.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyVector4sArray: function ( vectors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\r\n\t\t\t\tvector = new THREE.Vector4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\tarray[ offset ++ ] = vector.z;\r\n\t\t\tarray[ offset ++ ] = vector.w;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tset: function ( value, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.array.set( value, offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetX: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize ];\r\n\r\n\t},\r\n\r\n\tsetX: function ( index, x ) {\r\n\r\n\t\tthis.array[ index * this.itemSize ] = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetY: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize + 1 ];\r\n\r\n\t},\r\n\r\n\tsetY: function ( index, y ) {\r\n\r\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetZ: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize + 2 ];\r\n\r\n\t},\r\n\r\n\tsetZ: function ( index, z ) {\r\n\r\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetW: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize + 3 ];\r\n\r\n\t},\r\n\r\n\tsetW: function ( index, w ) {\r\n\r\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXY: function ( index, x, y ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\t\tthis.array[ index + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.Int8Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Int8Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint8Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint8Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint8ClampedAttribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Int16Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Int16Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint16Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint16Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Int32Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Int32Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint32Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint32Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Float32Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Float32Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Float64Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Float64Array( array ), itemSize );\r\n\r\n};\r\n\r\n\r\n// Deprecated\r\n\r\nTHREE.DynamicBufferAttribute = function ( array, itemSize ) {\r\n\r\n\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\r\n\treturn new THREE.BufferAttribute( array, itemSize ).setDynamic( true );\r\n\r\n};\r\n\r\n// File:src/core/InstancedBufferAttribute.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {\r\n\r\n\tTHREE.BufferAttribute.call( this, array, itemSize );\r\n\r\n\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n};\r\n\r\nTHREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );\r\nTHREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;\r\n\r\nTHREE.InstancedBufferAttribute.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.BufferAttribute.prototype.copy.call( this, source );\r\n\r\n\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/core/InterleavedBuffer.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InterleavedBuffer = function ( array, stride ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.array = array;\r\n\tthis.stride = stride;\r\n\r\n\tthis.dynamic = false;\r\n\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\tthis.version = 0;\r\n\r\n};\r\n\r\nTHREE.InterleavedBuffer.prototype = {\r\n\r\n\tconstructor: THREE.InterleavedBuffer,\r\n\r\n\tget length () {\r\n\r\n\t\treturn this.array.length;\r\n\r\n\t},\r\n\r\n\tget count () {\r\n\r\n\t\treturn this.array.length / this.stride;\r\n\r\n\t},\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t},\r\n\r\n\tsetDynamic: function ( value ) {\r\n\r\n\t\tthis.dynamic = value;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.array = new source.array.constructor( source.array );\r\n\t\tthis.stride = source.stride;\r\n\t\tthis.dynamic = source.dynamic;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\tindex1 *= this.stride;\r\n\t\tindex2 *= attribute.stride;\r\n\r\n\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\r\n\r\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tset: function ( value, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.array.set( value, offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/InstancedInterleavedBuffer.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {\r\n\r\n\tTHREE.InterleavedBuffer.call( this, array, stride );\r\n\r\n\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n};\r\n\r\nTHREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );\r\nTHREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;\r\n\r\nTHREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.InterleavedBuffer.prototype.copy.call( this, source );\r\n\r\n\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/core/InterleavedBufferAttribute.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.data = interleavedBuffer;\r\n\tthis.itemSize = itemSize;\r\n\tthis.offset = offset;\r\n\r\n};\r\n\r\n\r\nTHREE.InterleavedBufferAttribute.prototype = {\r\n\r\n\tconstructor: THREE.InterleavedBufferAttribute,\r\n\r\n\tget length() {\r\n\r\n\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\r\n\t\treturn this.array.length;\r\n\r\n\t},\r\n\r\n\tget count() {\r\n\r\n\t\treturn this.data.count;\r\n\r\n\t},\r\n\r\n\tsetX: function ( index, x ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( index, y ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( index, z ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetW: function ( index, w ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetX: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\r\n\r\n\t},\r\n\r\n\tgetY: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\r\n\r\n\t},\r\n\r\n\tgetZ: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\r\n\r\n\t},\r\n\r\n\tgetW: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\r\n\r\n\t},\r\n\r\n\tsetXY: function ( index, x, y ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\t\tthis.data.array[ index + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\t\tthis.data.array[ index + 2 ] = z;\r\n\t\tthis.data.array[ index + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/Geometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author kile / http://kile.stravaganza.org/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Geometry = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'Geometry';\r\n\r\n\tthis.vertices = [];\r\n\tthis.colors = [];\r\n\tthis.faces = [];\r\n\tthis.faceVertexUvs = [ [] ];\r\n\r\n\tthis.morphTargets = [];\r\n\tthis.morphNormals = [];\r\n\r\n\tthis.skinWeights = [];\r\n\tthis.skinIndices = [];\r\n\r\n\tthis.lineDistances = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\t// update flags\r\n\r\n\tthis.verticesNeedUpdate = false;\r\n\tthis.elementsNeedUpdate = false;\r\n\tthis.uvsNeedUpdate = false;\r\n\tthis.normalsNeedUpdate = false;\r\n\tthis.colorsNeedUpdate = false;\r\n\tthis.lineDistancesNeedUpdate = false;\r\n\tthis.groupsNeedUpdate = false;\r\n\r\n};\r\n\r\nTHREE.Geometry.prototype = {\r\n\r\n\tconstructor: THREE.Geometry,\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\tvertex.applyMatrix4( matrix );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ i ];\r\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.verticesNeedUpdate = true;\r\n\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateX: function () {\r\n\r\n\t\t// rotate geometry around world x-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateX( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateY: function () {\r\n\r\n\t\t// rotate geometry around world y-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateY( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateZ: function () {\r\n\r\n\t\t// rotate geometry around world z-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateZ( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function () {\r\n\r\n\t\t// translate geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function translate( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tscale: function () {\r\n\r\n\t\t// scale geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function scale( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar obj;\r\n\r\n\t\treturn function lookAt( vector ) {\r\n\r\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\r\n\r\n\t\t\tobj.lookAt( vector );\r\n\r\n\t\t\tobj.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( obj.matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tfromBufferGeometry: function ( geometry ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\r\n\t\tvar attributes = geometry.attributes;\r\n\r\n\t\tvar positions = attributes.position.array;\r\n\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\r\n\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\r\n\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\r\n\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\r\n\r\n\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\r\n\r\n\t\tvar tempNormals = [];\r\n\t\tvar tempUVs = [];\r\n\t\tvar tempUVs2 = [];\r\n\r\n\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\r\n\r\n\t\t\tscope.vertices.push( new THREE.Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\r\n\r\n\t\t\tif ( normals !== undefined ) {\r\n\r\n\t\t\t\ttempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( colors !== undefined ) {\r\n\r\n\t\t\t\tscope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvs !== undefined ) {\r\n\r\n\t\t\t\ttempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvs2 !== undefined ) {\r\n\r\n\t\t\t\ttempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction addFace( a, b, c, materialIndex ) {\r\n\r\n\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\r\n\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\r\n\r\n\t\t\tvar face = new THREE.Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\r\n\r\n\t\t\tscope.faces.push( face );\r\n\r\n\t\t\tif ( uvs !== undefined ) {\r\n\r\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvs2 !== undefined ) {\r\n\r\n\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( indices !== undefined ) {\r\n\r\n\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\r\n\r\n\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\r\n\r\n\t\t\t\taddFace( i, i + 1, i + 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.computeFaceNormals();\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcenter: function () {\r\n\r\n\t\tthis.computeBoundingBox();\r\n\r\n\t\tvar offset = this.boundingBox.center().negate();\r\n\r\n\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\r\n\t\treturn offset;\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\tthis.computeBoundingSphere();\r\n\r\n\t\tvar center = this.boundingSphere.center;\r\n\t\tvar radius = this.boundingSphere.radius;\r\n\r\n\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\r\n\r\n\t\tvar matrix = new THREE.Matrix4();\r\n\t\tmatrix.set(\r\n\t\t\ts, 0, 0, - s * center.x,\r\n\t\t\t0, s, 0, - s * center.y,\r\n\t\t\t0, 0, s, - s * center.z,\r\n\t\t\t0, 0, 0, 1\r\n\t\t);\r\n\r\n\t\tthis.applyMatrix( matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\r\n\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ f ];\r\n\r\n\t\t\tvar vA = this.vertices[ face.a ];\r\n\t\t\tvar vB = this.vertices[ face.b ];\r\n\t\t\tvar vC = this.vertices[ face.c ];\r\n\r\n\t\t\tcb.subVectors( vC, vB );\r\n\t\t\tab.subVectors( vA, vB );\r\n\t\t\tcb.cross( ab );\r\n\r\n\t\t\tcb.normalize();\r\n\r\n\t\t\tface.normal.copy( cb );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function ( areaWeighted ) {\r\n\r\n\t\tif ( areaWeighted === undefined ) areaWeighted = true;\r\n\r\n\t\tvar v, vl, f, fl, face, vertices;\r\n\r\n\t\tvertices = new Array( this.vertices.length );\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\tvertices[ v ] = new THREE.Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tif ( areaWeighted ) {\r\n\r\n\t\t\t// vertex normals weighted by triangle areas\r\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\r\n\r\n\t\t\tvar vA, vB, vC;\r\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\tvC = this.vertices[ face.c ];\r\n\r\n\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\tvertices[ face.a ].add( cb );\r\n\t\t\t\tvertices[ face.b ].add( cb );\r\n\t\t\t\tvertices[ face.c ].add( cb );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\tvertices[ v ].normalize();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\r\n\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\r\n\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.faces.length > 0 ) {\r\n\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeMorphNormals: function () {\r\n\r\n\t\tvar i, il, f, fl, face;\r\n\r\n\t\t// save original normals\r\n\t\t// - create temp variables on first access\r\n\t\t//   otherwise just copy (for faster repeated calls)\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tif ( ! face.__originalFaceNormal ) {\r\n\r\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\r\n\r\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// use temp geometry to compute face and vertex normals for each morph\r\n\r\n\t\tvar tmpGeo = new THREE.Geometry();\r\n\t\ttmpGeo.faces = this.faces;\r\n\r\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t// create on first access\r\n\r\n\t\t\tif ( ! this.morphNormals[ i ] ) {\r\n\r\n\t\t\t\tthis.morphNormals[ i ] = {};\r\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\r\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\r\n\r\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\r\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\r\n\r\n\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tfaceNormal = new THREE.Vector3();\r\n\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\r\n\r\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\r\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphNormals = this.morphNormals[ i ];\r\n\r\n\t\t\t// set vertices to morph target\r\n\r\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\r\n\r\n\t\t\t// compute morph normals\r\n\r\n\t\t\ttmpGeo.computeFaceNormals();\r\n\t\t\ttmpGeo.computeVertexNormals();\r\n\r\n\t\t\t// store morph normals\r\n\r\n\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\r\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\r\n\r\n\t\t\t\tfaceNormal.copy( face.normal );\r\n\r\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore original normals\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tface.normal = face.__originalFaceNormal;\r\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeTangents: function () {\r\n\r\n\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\r\n\r\n\t},\r\n\r\n\tcomputeLineDistances: function () {\r\n\r\n\t\tvar d = 0;\r\n\t\tvar vertices = this.vertices;\r\n\r\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tif ( i > 0 ) {\r\n\r\n\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.lineDistances[ i ] = d;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new THREE.Box3();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingBox.setFromPoints( this.vertices );\r\n\r\n\t},\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\r\n\r\n\t},\r\n\r\n\tmerge: function ( geometry, matrix, materialIndexOffset ) {\r\n\r\n\t\tif ( geometry instanceof THREE.Geometry === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar normalMatrix,\r\n\t\tvertexOffset = this.vertices.length,\r\n\t\tvertices1 = this.vertices,\r\n\t\tvertices2 = geometry.vertices,\r\n\t\tfaces1 = this.faces,\r\n\t\tfaces2 = geometry.faces,\r\n\t\tuvs1 = this.faceVertexUvs[ 0 ],\r\n\t\tuvs2 = geometry.faceVertexUvs[ 0 ];\r\n\r\n\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\r\n\r\n\t\tif ( matrix !== undefined ) {\r\n\r\n\t\t\tnormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t}\r\n\r\n\t\t// vertices\r\n\r\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = vertices2[ i ];\r\n\r\n\t\t\tvar vertexCopy = vertex.clone();\r\n\r\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\r\n\r\n\t\t\tvertices1.push( vertexCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// faces\r\n\r\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\r\n\t\t\tfaceVertexNormals = face.vertexNormals,\r\n\t\t\tfaceVertexColors = face.vertexColors;\r\n\r\n\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\r\n\t\t\tfaceCopy.normal.copy( face.normal );\r\n\r\n\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\r\n\r\n\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.color.copy( face.color );\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tcolor = faceVertexColors[ j ];\r\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\r\n\r\n\t\t\tfaces1.push( faceCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// uvs\r\n\r\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\r\n\r\n\t\t\tif ( uv === undefined ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tuvCopy.push( uv[ j ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuvs1.push( uvCopy );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tmergeMesh: function ( mesh ) {\r\n\r\n\t\tif ( mesh instanceof THREE.Mesh === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\r\n\r\n\t\tthis.merge( mesh.geometry, mesh.matrix );\r\n\r\n\t},\r\n\r\n\t/*\r\n\t * Checks for duplicate vertices with hashmap.\r\n\t * Duplicated vertices are removed\r\n\t * and faces' vertices are updated.\r\n\t */\r\n\r\n\tmergeVertices: function () {\r\n\r\n\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\r\n\t\tvar unique = [], changes = [];\r\n\r\n\t\tvar v, key;\r\n\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\r\n\t\tvar precision = Math.pow( 10, precisionPoints );\r\n\t\tvar i, il, face;\r\n\t\tvar indices, j, jl;\r\n\r\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tv = this.vertices[ i ];\r\n\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\r\n\r\n\t\t\tif ( verticesMap[ key ] === undefined ) {\r\n\r\n\t\t\t\tverticesMap[ key ] = i;\r\n\t\t\t\tunique.push( this.vertices[ i ] );\r\n\t\t\t\tchanges[ i ] = unique.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\r\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// if faces are completely degenerate after merging vertices, we\r\n\t\t// have to remove them from the geometry.\r\n\t\tvar faceIndicesToRemove = [];\r\n\r\n\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = this.faces[ i ];\r\n\r\n\t\t\tface.a = changes[ face.a ];\r\n\t\t\tface.b = changes[ face.b ];\r\n\t\t\tface.c = changes[ face.c ];\r\n\r\n\t\t\tindices = [ face.a, face.b, face.c ];\r\n\r\n\t\t\tvar dupIndex = - 1;\r\n\r\n\t\t\t// if any duplicate vertices are found in a Face3\r\n\t\t\t// we have to remove the face as nothing can be saved\r\n\t\t\tfor ( var n = 0; n < 3; n ++ ) {\r\n\r\n\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\r\n\r\n\t\t\t\t\tdupIndex = n;\r\n\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\r\n\r\n\t\t\tvar idx = faceIndicesToRemove[ i ];\r\n\r\n\t\t\tthis.faces.splice( idx, 1 );\r\n\r\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Use unique set of vertices\r\n\r\n\t\tvar diff = this.vertices.length - unique.length;\r\n\t\tthis.vertices = unique;\r\n\t\treturn diff;\r\n\r\n\t},\r\n\r\n\tsortFacesByMaterialIndex: function () {\r\n\r\n\t\tvar faces = this.faces;\r\n\t\tvar length = faces.length;\r\n\r\n\t\t// tag faces\r\n\r\n\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tfaces[ i ]._id = i;\r\n\r\n\t\t}\r\n\r\n\t\t// sort faces\r\n\r\n\t\tfunction materialIndexSort( a, b ) {\r\n\r\n\t\t\treturn a.materialIndex - b.materialIndex;\r\n\r\n\t\t}\r\n\r\n\t\tfaces.sort( materialIndexSort );\r\n\r\n\t\t// sort uvs\r\n\r\n\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\r\n\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\r\n\r\n\t\tvar newUvs1, newUvs2;\r\n\r\n\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\r\n\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\r\n\r\n\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tvar id = faces[ i ]._id;\r\n\r\n\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\r\n\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\r\n\r\n\t\t}\r\n\r\n\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\r\n\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\r\n\r\n\t},\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\tvar data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Geometry',\r\n\t\t\t\tgenerator: 'Geometry.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard Geometry serialization\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t\tvar vertices = [];\r\n\r\n\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\r\n\r\n\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t}\r\n\r\n\t\tvar faces = [];\r\n\t\tvar normals = [];\r\n\t\tvar normalsHash = {};\r\n\t\tvar colors = [];\r\n\t\tvar colorsHash = {};\r\n\t\tvar uvs = [];\r\n\t\tvar uvsHash = {};\r\n\r\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ i ];\r\n\r\n\t\t\tvar hasMaterial = true;\r\n\t\t\tvar hasFaceUv = false; // deprecated\r\n\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\r\n\t\t\tvar hasFaceNormal = face.normal.length() > 0;\r\n\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\r\n\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\r\n\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\r\n\r\n\t\t\tvar faceType = 0;\r\n\r\n\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\r\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\r\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\r\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\r\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\r\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\r\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\r\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\r\n\r\n\t\t\tfaces.push( faceType );\r\n\t\t\tfaces.push( face.a, face.b, face.c );\r\n\t\t\tfaces.push( face.materialIndex );\r\n\r\n\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\tfaces.push(\r\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\r\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\r\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tfaces.push(\r\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\r\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\r\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\t\tfaces.push(\r\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\r\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\r\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setBit( value, position, enabled ) {\r\n\r\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getNormalIndex( normal ) {\r\n\r\n\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\r\n\r\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\r\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getColorIndex( color ) {\r\n\r\n\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\r\n\r\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcolorsHash[ hash ] = colors.length;\r\n\t\t\tcolors.push( color.getHex() );\r\n\r\n\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getUvIndex( uv ) {\r\n\r\n\t\t\tvar hash = uv.x.toString() + uv.y.toString();\r\n\r\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\r\n\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t}\r\n\r\n\t\tdata.data = {};\r\n\r\n\t\tdata.data.vertices = vertices;\r\n\t\tdata.data.normals = normals;\r\n\t\tif ( colors.length > 0 ) data.data.colors = colors;\r\n\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\r\n\t\tdata.data.faces = faces;\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\t/*\r\n\t\t// Handle primitives\r\n\r\n\t\tvar parameters = this.parameters;\r\n\r\n\t\tif ( parameters !== undefined ) {\r\n\r\n\t\t\tvar values = [];\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tvalues.push( parameters[ key ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar geometry = Object.create( this.constructor.prototype );\r\n\t\t\tthis.constructor.apply( geometry, values );\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\t\t*/\r\n\r\n\t\treturn new THREE.Geometry().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.vertices = [];\r\n\t\tthis.faces = [];\r\n\t\tthis.faceVertexUvs = [ [] ];\r\n\r\n\t\tvar vertices = source.vertices;\r\n\r\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertices.push( vertices[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar faces = source.faces;\r\n\r\n\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.faces.push( faces[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\r\n\r\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\r\n\r\n\t\t\t\tthis.faceVertexUvs[ i ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\r\n\r\n\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\tvar uv = uvs[ k ];\r\n\r\n\t\t\t\t\tuvsCopy.push( uv.clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.Geometry.prototype );\r\n\r\nTHREE.GeometryIdCount = 0;\r\n\r\n// File:src/core/DirectGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.DirectGeometry = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'DirectGeometry';\r\n\r\n\tthis.indices = [];\r\n\tthis.vertices = [];\r\n\tthis.normals = [];\r\n\tthis.colors = [];\r\n\tthis.uvs = [];\r\n\tthis.uvs2 = [];\r\n\r\n\tthis.groups = [];\r\n\r\n\tthis.morphTargets = {};\r\n\r\n\tthis.skinWeights = [];\r\n\tthis.skinIndices = [];\r\n\r\n\t// this.lineDistances = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\t// update flags\r\n\r\n\tthis.verticesNeedUpdate = false;\r\n\tthis.normalsNeedUpdate = false;\r\n\tthis.colorsNeedUpdate = false;\r\n\tthis.uvsNeedUpdate = false;\r\n\tthis.groupsNeedUpdate = false;\r\n\r\n};\r\n\r\nTHREE.DirectGeometry.prototype = {\r\n\r\n\tconstructor: THREE.DirectGeometry,\r\n\r\n\tcomputeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,\r\n\tcomputeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function () {\r\n\r\n\t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\r\n\r\n\t},\r\n\r\n\tcomputeGroups: function ( geometry ) {\r\n\r\n\t\tvar group;\r\n\t\tvar groups = [];\r\n\t\tvar materialIndex;\r\n\r\n\t\tvar faces = geometry.faces;\r\n\r\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t// materials\r\n\r\n\t\t\tif ( face.materialIndex !== materialIndex ) {\r\n\r\n\t\t\t\tmaterialIndex = face.materialIndex;\r\n\r\n\t\t\t\tif ( group !== undefined ) {\r\n\r\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\t\tgroups.push( group );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgroup = {\r\n\t\t\t\t\tstart: i * 3,\r\n\t\t\t\t\tmaterialIndex: materialIndex\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( group !== undefined ) {\r\n\r\n\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\tgroups.push( group );\r\n\r\n\t\t}\r\n\r\n\t\tthis.groups = groups;\r\n\r\n\t},\r\n\r\n\tfromGeometry: function ( geometry ) {\r\n\r\n\t\tvar faces = geometry.faces;\r\n\t\tvar vertices = geometry.vertices;\r\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\r\n\r\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\r\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\r\n\r\n\t\t// morphs\r\n\r\n\t\tvar morphTargets = geometry.morphTargets;\r\n\t\tvar morphTargetsLength = morphTargets.length;\r\n\r\n\t\tvar morphTargetsPosition;\r\n\r\n\t\tif ( morphTargetsLength > 0 ) {\r\n\r\n\t\t\tmorphTargetsPosition = [];\r\n\r\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\r\n\r\n\t\t\t\tmorphTargetsPosition[ i ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\r\n\r\n\t\t}\r\n\r\n\t\tvar morphNormals = geometry.morphNormals;\r\n\t\tvar morphNormalsLength = morphNormals.length;\r\n\r\n\t\tvar morphTargetsNormal;\r\n\r\n\t\tif ( morphNormalsLength > 0 ) {\r\n\r\n\t\t\tmorphTargetsNormal = [];\r\n\r\n\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\r\n\r\n\t\t\t\tmorphTargetsNormal[ i ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\r\n\r\n\t\t}\r\n\r\n\t\t// skins\r\n\r\n\t\tvar skinIndices = geometry.skinIndices;\r\n\t\tvar skinWeights = geometry.skinWeights;\r\n\r\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\r\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\r\n\r\n\t\t//\r\n\r\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\r\n\r\n\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar normal = face.normal;\r\n\r\n\t\t\t\tthis.normals.push( normal, normal, normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\tif ( vertexColors.length === 3 ) {\r\n\r\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar color = face.color;\r\n\r\n\t\t\t\tthis.colors.push( color, color, color );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexUv === true ) {\r\n\r\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\r\n\r\n\t\t\t\t\tthis.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexUv2 === true ) {\r\n\r\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\r\n\r\n\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\r\n\r\n\t\t\t\t\tthis.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morphs\r\n\r\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\r\n\r\n\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\r\n\r\n\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\r\n\r\n\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skins\r\n\r\n\t\t\tif ( hasSkinIndices ) {\r\n\r\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasSkinWeights ) {\r\n\r\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.computeGroups( geometry );\r\n\r\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.DirectGeometry.prototype );\r\n\r\n// File:src/core/BufferGeometry.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BufferGeometry = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'BufferGeometry';\r\n\r\n\tthis.index = null;\r\n\tthis.attributes = {};\r\n\r\n\tthis.morphAttributes = {};\r\n\r\n\tthis.groups = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\tthis.drawRange = { start: 0, count: Infinity };\r\n\r\n};\r\n\r\nTHREE.BufferGeometry.prototype = {\r\n\r\n\tconstructor: THREE.BufferGeometry,\r\n\r\n\tgetIndex: function () {\r\n\r\n\t\treturn this.index;\r\n\r\n\t},\r\n\r\n\tsetIndex: function ( index ) {\r\n\r\n\t\tthis.index = index;\r\n\r\n\t},\r\n\r\n\taddAttribute: function ( name, attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\r\n\r\n\t\t\tthis.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( name === 'index' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\r\n\t\t\tthis.setIndex( attribute );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.attributes[ name ] = attribute;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetAttribute: function ( name ) {\r\n\r\n\t\treturn this.attributes[ name ];\r\n\r\n\t},\r\n\r\n\tremoveAttribute: function ( name ) {\r\n\r\n\t\tdelete this.attributes[ name ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddGroup: function ( start, count, materialIndex ) {\r\n\r\n\t\tthis.groups.push( {\r\n\r\n\t\t\tstart: start,\r\n\t\t\tcount: count,\r\n\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\r\n\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\tclearGroups: function () {\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t},\r\n\r\n\tsetDrawRange: function ( start, count ) {\r\n\r\n\t\tthis.drawRange.start = start;\r\n\t\tthis.drawRange.count = count;\r\n\r\n\t},\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar position = this.attributes.position;\r\n\r\n\t\tif ( position !== undefined ) {\r\n\r\n\t\t\tmatrix.applyToVector3Array( position.array );\r\n\t\t\tposition.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tvar normal = this.attributes.normal;\r\n\r\n\t\tif ( normal !== undefined ) {\r\n\r\n\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\tnormalMatrix.applyToVector3Array( normal.array );\r\n\t\t\tnormal.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateX: function () {\r\n\r\n\t\t// rotate geometry around world x-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateX( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateY: function () {\r\n\r\n\t\t// rotate geometry around world y-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateY( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateZ: function () {\r\n\r\n\t\t// rotate geometry around world z-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateZ( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function () {\r\n\r\n\t\t// translate geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function translate( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tscale: function () {\r\n\r\n\t\t// scale geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function scale( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar obj;\r\n\r\n\t\treturn function lookAt( vector ) {\r\n\r\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\r\n\r\n\t\t\tobj.lookAt( vector );\r\n\r\n\t\t\tobj.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( obj.matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcenter: function () {\r\n\r\n\t\tthis.computeBoundingBox();\r\n\r\n\t\tvar offset = this.boundingBox.center().negate();\r\n\r\n\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\r\n\t\treturn offset;\r\n\r\n\t},\r\n\r\n\tsetFromObject: function ( object ) {\r\n\r\n\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( object instanceof THREE.Points || object instanceof THREE.Line ) {\r\n\r\n\t\t\tvar positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );\r\n\t\t\tvar colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );\r\n\r\n\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\r\n\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\r\n\r\n\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\r\n\r\n\t\t\t\tvar lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );\r\n\r\n\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\tthis.fromGeometry( geometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tupdateFromObject: function ( object ) {\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tvar direct = geometry.__directGeometry;\r\n\r\n\t\t\tif ( direct === undefined ) {\r\n\r\n\t\t\t\treturn this.fromGeometry( geometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t\tgeometry = direct;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.verticesNeedUpdate === true ) {\r\n\r\n\t\t\tvar attribute = this.attributes.position;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.verticesNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.normalsNeedUpdate === true ) {\r\n\r\n\t\t\tvar attribute = this.attributes.normal;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyVector3sArray( geometry.normals );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.normalsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.colorsNeedUpdate === true ) {\r\n\r\n\t\t\tvar attribute = this.attributes.color;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyColorsArray( geometry.colors );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvsNeedUpdate ) {\r\n\r\n\t\t\tvar attribute = this.attributes.uv;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.uvsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.lineDistancesNeedUpdate ) {\r\n\r\n\t\t\tvar attribute = this.attributes.lineDistance;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyArray( geometry.lineDistances );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.lineDistancesNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.groupsNeedUpdate ) {\r\n\r\n\t\t\tgeometry.computeGroups( object.geometry );\r\n\t\t\tthis.groups = geometry.groups;\r\n\r\n\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tfromGeometry: function ( geometry ) {\r\n\r\n\t\tgeometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );\r\n\r\n\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\r\n\r\n\t},\r\n\r\n\tfromDirectGeometry: function ( geometry ) {\r\n\r\n\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\r\n\r\n\t\tif ( geometry.normals.length > 0 ) {\r\n\r\n\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\r\n\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.colors.length > 0 ) {\r\n\r\n\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\r\n\t\t\tthis.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvs.length > 0 ) {\r\n\r\n\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\r\n\t\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvs2.length > 0 ) {\r\n\r\n\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\r\n\t\t\tthis.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.indices.length > 0 ) {\r\n\r\n\t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\r\n\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\r\n\t\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\r\n\r\n\t\t}\r\n\r\n\t\t// groups\r\n\r\n\t\tthis.groups = geometry.groups;\r\n\r\n\t\t// morphs\r\n\r\n\t\tfor ( var name in geometry.morphTargets ) {\r\n\r\n\t\t\tvar array = [];\r\n\t\t\tvar morphTargets = geometry.morphTargets[ name ];\r\n\r\n\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\r\n\t\t\t\tvar attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );\r\n\r\n\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t}\r\n\r\n\t\t// skinning\r\n\r\n\t\tif ( geometry.skinIndices.length > 0 ) {\r\n\r\n\t\t\tvar skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );\r\n\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.skinWeights.length > 0 ) {\r\n\r\n\t\t\tvar skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );\r\n\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tvar vector = new THREE.Vector3();\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\t\tthis.boundingBox = new THREE.Box3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar positions = this.attributes.position.array;\r\n\r\n\t\t\tif ( positions ) {\r\n\r\n\t\t\t\tthis.boundingBox.setFromArray( positions );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( positions === undefined || positions.length === 0 ) {\r\n\r\n\t\t\t\tthis.boundingBox.min.set( 0, 0, 0 );\r\n\t\t\t\tthis.boundingBox.max.set( 0, 0, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tvar box = new THREE.Box3();\r\n\t\tvar vector = new THREE.Vector3();\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar positions = this.attributes.position.array;\r\n\r\n\t\t\tif ( positions ) {\r\n\r\n\t\t\t\tvar center = this.boundingSphere.center;\r\n\r\n\t\t\t\tbox.setFromArray( positions );\r\n\t\t\t\tbox.center( center );\r\n\r\n\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\r\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\r\n\r\n\t\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tvector.fromArray( positions, i );\r\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\t// backwards compatibility\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function () {\r\n\r\n\t\tvar index = this.index;\r\n\t\tvar attributes = this.attributes;\r\n\t\tvar groups = this.groups;\r\n\r\n\t\tif ( attributes.position ) {\r\n\r\n\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\tif ( attributes.normal === undefined ) {\r\n\r\n\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// reset existing normals to zero\r\n\r\n\t\t\t\tvar array = attributes.normal.array;\r\n\r\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tarray[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar normals = attributes.normal.array;\r\n\r\n\t\t\tvar vA, vB, vC,\r\n\r\n\t\t\tpA = new THREE.Vector3(),\r\n\t\t\tpB = new THREE.Vector3(),\r\n\t\t\tpC = new THREE.Vector3(),\r\n\r\n\t\t\tcb = new THREE.Vector3(),\r\n\t\t\tab = new THREE.Vector3();\r\n\r\n\t\t\t// indexed elements\r\n\r\n\t\t\tif ( index ) {\r\n\r\n\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\tif ( groups.length === 0 ) {\r\n\r\n\t\t\t\t\tthis.addGroup( 0, indices.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\r\n\r\n\t\t\t\t\tvar group = groups[ j ];\r\n\r\n\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\r\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\r\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\r\n\r\n\t\t\t\t\t\tpA.fromArray( positions, vA );\r\n\t\t\t\t\t\tpB.fromArray( positions, vB );\r\n\t\t\t\t\t\tpC.fromArray( positions, vC );\r\n\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\r\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\r\n\r\n\t\t\t\t\tpA.fromArray( positions, i );\r\n\t\t\t\t\tpB.fromArray( positions, i + 3 );\r\n\t\t\t\t\tpC.fromArray( positions, i + 6 );\r\n\r\n\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tnormals[ i ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\tattributes.normal.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tmerge: function ( geometry, offset ) {\r\n\r\n\t\tif ( geometry instanceof THREE.BufferGeometry === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tvar attributes = this.attributes;\r\n\r\n\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\r\n\r\n\t\t\tvar attribute1 = attributes[ key ];\r\n\t\t\tvar attributeArray1 = attribute1.array;\r\n\r\n\t\t\tvar attribute2 = geometry.attributes[ key ];\r\n\t\t\tvar attributeArray2 = attribute2.array;\r\n\r\n\t\t\tvar attributeSize = attribute2.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\r\n\r\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnormalizeNormals: function () {\r\n\r\n\t\tvar normals = this.attributes.normal.array;\r\n\r\n\t\tvar x, y, z, n;\r\n\r\n\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\r\n\r\n\t\t\tx = normals[ i ];\r\n\t\t\ty = normals[ i + 1 ];\r\n\t\t\tz = normals[ i + 2 ];\r\n\r\n\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\r\n\r\n\t\t\tnormals[ i ] *= n;\r\n\t\t\tnormals[ i + 1 ] *= n;\r\n\t\t\tnormals[ i + 2 ] *= n;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoNonIndexed: function () {\r\n\r\n\t\tif ( this.index === null ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar geometry2 = new THREE.BufferGeometry();\r\n\r\n\t\tvar indices = this.index.array;\r\n\t\tvar attributes = this.attributes;\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ name ];\r\n\r\n\t\t\tvar array = attribute.array;\r\n\t\t\tvar itemSize = attribute.itemSize;\r\n\r\n\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\r\n\r\n\t\t\tvar index = 0, index2 = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tindex = indices[ i ] * itemSize;\r\n\r\n\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry2.addAttribute( name, new THREE.BufferAttribute( array2, itemSize ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry2;\r\n\r\n\t},\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\tvar data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'BufferGeometry',\r\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard BufferGeometry serialization\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t\tdata.data = { attributes: {} };\r\n\r\n\t\tvar index = this.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tvar array = Array.prototype.slice.call( index.array );\r\n\r\n\t\t\tdata.data.index = {\r\n\t\t\t\ttype: index.array.constructor.name,\r\n\t\t\t\tarray: array\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = this.attributes;\r\n\r\n\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ key ];\r\n\r\n\t\t\tvar array = Array.prototype.slice.call( attribute.array );\r\n\r\n\t\t\tdata.data.attributes[ key ] = {\r\n\t\t\t\titemSize: attribute.itemSize,\r\n\t\t\t\ttype: attribute.array.constructor.name,\r\n\t\t\t\tarray: array\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar groups = this.groups;\r\n\r\n\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar boundingSphere = this.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\tdata.data.boundingSphere = {\r\n\t\t\t\tcenter: boundingSphere.center.toArray(),\r\n\t\t\t\tradius: boundingSphere.radius\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\t/*\r\n\t\t// Handle primitives\r\n\r\n\t\tvar parameters = this.parameters;\r\n\r\n\t\tif ( parameters !== undefined ) {\r\n\r\n\t\t\tvar values = [];\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tvalues.push( parameters[ key ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar geometry = Object.create( this.constructor.prototype );\r\n\t\t\tthis.constructor.apply( geometry, values );\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\t\t*/\r\n\r\n\t\treturn new THREE.BufferGeometry().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tvar index = source.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tthis.setIndex( index.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = source.attributes;\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ name ];\r\n\t\t\tthis.addAttribute( name, attribute.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar groups = source.groups;\r\n\r\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar group = groups[ i ];\r\n\t\t\tthis.addGroup( group.start, group.count );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.BufferGeometry.prototype );\r\n\r\nTHREE.BufferGeometry.MaxIndex = 65535;\r\n\r\n// File:src/core/InstancedBufferGeometry.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InstancedBufferGeometry = function () {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'InstancedBufferGeometry';\r\n\tthis.maxInstancedCount = undefined;\r\n\r\n};\r\n\r\nTHREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;\r\n\r\nTHREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\r\n\r\n\tthis.groups.push( {\r\n\r\n\t\tstart: start,\r\n\t\tcount: count,\r\n\t\tinstances: instances\r\n\r\n\t} );\r\n\r\n};\r\n\r\nTHREE.InstancedBufferGeometry.prototype.copy = function ( source ) {\r\n\r\n\tvar index = source.index;\r\n\r\n\tif ( index !== null ) {\r\n\r\n\t\tthis.setIndex( index.clone() );\r\n\r\n\t}\r\n\r\n\tvar attributes = source.attributes;\r\n\r\n\tfor ( var name in attributes ) {\r\n\r\n\t\tvar attribute = attributes[ name ];\r\n\t\tthis.addAttribute( name, attribute.clone() );\r\n\r\n\t}\r\n\r\n\tvar groups = source.groups;\r\n\r\n\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\tvar group = groups[ i ];\r\n\t\tthis.addGroup( group.start, group.count, group.instances );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.InstancedBufferGeometry.prototype );\r\n\r\n// File:src/core/Uniform.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Uniform = function ( type, value ) {\r\n\r\n\tthis.type = type;\r\n\tthis.value = value;\r\n\r\n\tthis.dynamic = false;\r\n\r\n};\r\n\r\nTHREE.Uniform.prototype = {\r\n\r\n\tconstructor: THREE.Uniform,\r\n\r\n\tonUpdate: function ( callback ) {\r\n\r\n\t\tthis.dynamic = true;\r\n\t\tthis.onUpdateCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/animation/AnimationClip.js\r\n\r\n/**\r\n *\r\n * Reusable set of Tracks that represent an animation.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.AnimationClip = function ( name, duration, tracks ) {\r\n\r\n\tthis.name = name || THREE.Math.generateUUID();\r\n\tthis.tracks = tracks;\r\n\tthis.duration = ( duration !== undefined ) ? duration : -1;\r\n\r\n\t// this means it should figure out its duration by scanning the tracks\r\n\tif ( this.duration < 0 ) {\r\n\r\n\t\tthis.resetDuration();\r\n\r\n\t}\r\n\r\n\t// maybe only do these on demand, as doing them here could potentially slow down loading\r\n\t// but leaving these here during development as this ensures a lot of testing of these functions\r\n\tthis.trim();\r\n\tthis.optimize();\r\n\r\n};\r\n\r\nTHREE.AnimationClip.prototype = {\r\n\r\n\tconstructor: THREE.AnimationClip,\r\n\r\n\tresetDuration: function() {\r\n\r\n\t\tvar tracks = this.tracks,\r\n\t\t\tduration = 0;\r\n\r\n\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar track = this.tracks[ i ];\r\n\r\n\t\t\tduration = Math.max(\r\n\t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\r\n\r\n\t\t}\r\n\r\n\t\tthis.duration = duration;\r\n\r\n\t},\r\n\r\n\ttrim: function() {\r\n\r\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\toptimize: function() {\r\n\r\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\tthis.tracks[ i ].optimize();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Static methods:\r\n\r\nObject.assign( THREE.AnimationClip, {\r\n\r\n\tparse: function( json ) {\r\n\r\n\t\tvar tracks = [],\r\n\t\t\tjsonTracks = json.tracks,\r\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\r\n\r\n\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\ttracks.push( THREE.KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn new THREE.AnimationClip( json.name, json.duration, tracks );\r\n\r\n\t},\r\n\r\n\r\n\ttoJSON: function( clip ) {\r\n\r\n\t\tvar tracks = [],\r\n\t\t\tclipTracks = clip.tracks;\r\n\r\n\t\tvar json = {\r\n\r\n\t\t\t'name': clip.name,\r\n\t\t\t'duration': clip.duration,\r\n\t\t\t'tracks': tracks\r\n\r\n\t\t};\r\n\r\n\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\ttracks.push( THREE.KeyframeTrack.toJSON( clipTracks[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn json;\r\n\r\n\t},\r\n\r\n\r\n\tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps ) {\r\n\r\n\t\tvar numMorphTargets = morphTargetSequence.length;\r\n\t\tvar tracks = [];\r\n\r\n\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\r\n\r\n\t\t\tvar times = [];\r\n\t\t\tvar values = [];\r\n\r\n\t\t\ttimes.push(\r\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\r\n\t\t\t\t\ti,\r\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\r\n\r\n\t\t\tvalues.push( 0, 1, 0 );\r\n\r\n\t\t\tvar order = THREE.AnimationUtils.getKeyframeOrder( times );\r\n\t\t\ttimes = THREE.AnimationUtils.sortedArray( times, 1, order );\r\n\t\t\tvalues = THREE.AnimationUtils.sortedArray( values, 1, order );\r\n\r\n\t\t\t// if there is a key at the first frame, duplicate it as the\r\n\t\t\t// last frame as well for perfect loop.\r\n\t\t\tif ( times[ 0 ] === 0 ) {\r\n\r\n\t\t\t\ttimes.push( numMorphTargets );\r\n\t\t\t\tvalues.push( values[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttracks.push(\r\n\t\t\t\t\tnew THREE.NumberKeyframeTrack(\r\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\r\n\t\t\t\t\t\ttimes, values\r\n\t\t\t\t\t).scale( 1.0 / fps ) );\r\n\t\t}\r\n\r\n\t\treturn new THREE.AnimationClip( name, -1, tracks );\r\n\r\n\t},\r\n\r\n\tfindByName: function( clipArray, name ) {\r\n\r\n\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\r\n\r\n\t\t\tif ( clipArray[ i ].name === name ) {\r\n\r\n\t\t\t\treturn clipArray[ i ];\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t},\r\n\r\n\tCreateClipsFromMorphTargetSequences: function( morphTargets, fps ) {\r\n\r\n\t\tvar animationToMorphTargets = {};\r\n\r\n\t\t// tested with https://regex101.com/ on trick sequences\r\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\r\n\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\r\n\r\n\t\t// sort morph target names into animation groups based\r\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\r\n\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar morphTarget = morphTargets[ i ];\r\n\t\t\tvar parts = morphTarget.name.match( pattern );\r\n\r\n\t\t\tif ( parts && parts.length > 1 ) {\r\n\r\n\t\t\t\tvar name = parts[ 1 ];\r\n\r\n\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\r\n\t\t\t\tif ( ! animationMorphTargets ) {\r\n\r\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tanimationMorphTargets.push( morphTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar clips = [];\r\n\r\n\t\tfor ( var name in animationToMorphTargets ) {\r\n\r\n\t\t\tclips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn clips;\r\n\r\n\t},\r\n\r\n\t// parse the animation.hierarchy format\r\n\tparseAnimation: function( animation, bones, nodeName ) {\r\n\r\n\t\tif ( ! animation ) {\r\n\r\n\t\t\tconsole.error( \"  no animation in JSONLoader data\" );\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tvar addNonemptyTrack = function(\r\n\t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\r\n\r\n\t\t\t// only return track if there are actually keys.\r\n\t\t\tif ( animationKeys.length !== 0 ) {\r\n\r\n\t\t\t\tvar times = [];\r\n\t\t\t\tvar values = [];\r\n\r\n\t\t\t\tTHREE.AnimationUtils.flattenJSON(\r\n\t\t\t\t\t\tanimationKeys, times, values, propertyName );\r\n\r\n\t\t\t\t// empty keys are filtered out, so check again\r\n\t\t\t\tif ( times.length !== 0 ) {\r\n\r\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar tracks = [];\r\n\r\n\t\tvar clipName = animation.name || 'default';\r\n\t\t// automatic length determination in AnimationClip.\r\n\t\tvar duration = animation.length || -1;\r\n\t\tvar fps = animation.fps || 30;\r\n\r\n\t\tvar hierarchyTracks = animation.hierarchy || [];\r\n\r\n\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\r\n\r\n\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\r\n\r\n\t\t\t// skip empty tracks\r\n\t\t\tif ( ! animationKeys || animationKeys.length == 0 ) continue;\r\n\r\n\t\t\t// process morph targets in a way exactly compatible\r\n\t\t\t// with AnimationHandler.init( animation )\r\n\t\t\tif ( animationKeys[0].morphTargets ) {\r\n\r\n\t\t\t\t// figure out all morph targets used in this track\r\n\t\t\t\tvar morphTargetNames = {};\r\n\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\r\n\r\n\t\t\t\t\tif ( animationKeys[k].morphTargets ) {\r\n\r\n\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// create a track for each morph target with all zero\r\n\t\t\t\t// morphTargetInfluences except for the keys in which\r\n\t\t\t\t// the morphTarget is named.\r\n\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\r\n\r\n\t\t\t\t\tvar times = [];\r\n\t\t\t\t\tvar values = [];\r\n\r\n\t\t\t\t\tfor ( var m = 0;\r\n\t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\r\n\r\n\t\t\t\t\t\tvar animationKey = animationKeys[k];\r\n\r\n\t\t\t\t\t\ttimes.push( animationKey.time );\r\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 )\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttracks.push( new THREE.NumberKeyframeTrack(\r\n\t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\r\n\r\n\t\t\t} else {\r\n\t\t\t\t// ...assume skeletal animation\r\n\r\n\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\r\n\r\n\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.position',\r\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\r\n\r\n\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tTHREE.QuaternionKeyframeTrack, boneName + '.quaternion',\r\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\r\n\r\n\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.scale',\r\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( tracks.length === 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tvar clip = new THREE.AnimationClip( clipName, duration, tracks );\r\n\r\n\t\treturn clip;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n\r\n// File:src/animation/AnimationMixer.js\r\n\r\n/**\r\n *\r\n * Player for AnimationClips.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.AnimationMixer = function( root ) {\r\n\r\n\tthis._root = root;\r\n\tthis._initMemoryManager();\r\n\tthis._accuIndex = 0;\r\n\r\n\tthis.time = 0;\r\n\r\n\tthis.timeScale = 1.0;\r\n\r\n};\r\n\r\nTHREE.AnimationMixer.prototype = {\r\n\r\n\tconstructor: THREE.AnimationMixer,\r\n\r\n\t// return an action for a clip optionally using a custom root target\r\n\t// object (this method allocates a lot of dynamic memory in case a\r\n\t// previously unknown clip/root combination is specified)\r\n\tclipAction: function( clip, optionalRoot ) {\r\n\r\n\t\tvar root = optionalRoot || this._root,\r\n\t\t\trootUuid = root.uuid,\r\n\t\t\tclipName = ( typeof clip === 'string' ) ? clip : clip.name,\r\n\t\t\tclipObject = ( clip !== clipName ) ? clip : null,\r\n\r\n\t\t\tactionsForClip = this._actionsByClip[ clipName ],\r\n\t\t\tprototypeAction;\r\n\r\n\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\tvar existingAction =\r\n\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( existingAction !== undefined ) {\r\n\r\n\t\t\t\treturn existingAction;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// we know the clip, so we don't have to parse all\r\n\t\t\t// the bindings again but can just copy\r\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\r\n\r\n\t\t\t// also, take the clip from the prototype action\r\n\t\t\tclipObject = prototypeAction._clip;\r\n\r\n\t\t\tif ( clip !== clipName && clip !== clipObject ) {\r\n\r\n\t\t\t\tthrow new Error(\r\n\t\t\t\t\t\t\"Different clips with the same name detected!\" );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// clip must be known when specified via string\r\n\t\tif ( clipObject === null ) return null;\r\n\r\n\t\t// allocate all resources required to run it\r\n\t\tvar newAction = new THREE.\r\n\t\t\t\tAnimationMixer._Action( this, clipObject, optionalRoot );\r\n\r\n\t\tthis._bindAction( newAction, prototypeAction );\r\n\r\n\t\t// and make the action known to the memory manager\r\n\t\tthis._addInactiveAction( newAction, clipName, rootUuid );\r\n\r\n\t\treturn newAction;\r\n\r\n\t},\r\n\r\n\t// get an existing action\r\n\texistingAction: function( clip, optionalRoot ) {\r\n\r\n\t\tvar root = optionalRoot || this._root,\r\n\t\t\trootUuid = root.uuid,\r\n\t\t\tclipName = ( typeof clip === 'string' ) ? clip : clip.name,\r\n\t\t\tactionsForClip = this._actionsByClip[ clipName ];\r\n\r\n\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t},\r\n\r\n\t// deactivates all previously scheduled actions\r\n\tstopAllAction: function() {\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tnActions = this._nActiveActions,\r\n\t\t\tbindings = this._bindings,\r\n\t\t\tnBindings = this._nActiveBindings;\r\n\r\n\t\tthis._nActiveActions = 0;\r\n\t\tthis._nActiveBindings = 0;\r\n\r\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\r\n\t\t\tactions[ i ].reset();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].useCount = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// advance the time and update apply the animation\r\n\tupdate: function( deltaTime ) {\r\n\r\n\t\tdeltaTime *= this.timeScale;\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tnActions = this._nActiveActions,\r\n\r\n\t\t\ttime = this.time += deltaTime,\r\n\t\t\ttimeDirection = Math.sign( deltaTime ),\r\n\r\n\t\t\taccuIndex = this._accuIndex ^= 1;\r\n\r\n\t\t// run active actions\r\n\r\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\r\n\t\t\tvar action = actions[ i ];\r\n\r\n\t\t\tif ( action.enabled ) {\r\n\r\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// update scene graph\r\n\r\n\t\tvar bindings = this._bindings,\r\n\t\t\tnBindings = this._nActiveBindings;\r\n\r\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].apply( accuIndex );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// return this mixer's root target object\r\n\tgetRoot: function() {\r\n\r\n\t\treturn this._root;\r\n\r\n\t},\r\n\r\n\t// free all resources specific to a particular clip\r\n\tuncacheClip: function( clip ) {\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tclipName = clip.name,\r\n\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\tactionsForClip = actionsByClip[ clipName ];\r\n\r\n\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t// note: just calling _removeInactiveAction would mess up the\r\n\t\t\t// iteration state and also require updating the state we can\r\n\t\t\t// just throw away\r\n\r\n\t\t\tvar actionsToRemove = actionsForClip.knownActions;\r\n\r\n\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar action = actionsToRemove[ i ];\r\n\r\n\t\t\t\tthis._deactivateAction( action );\r\n\r\n\t\t\t\tvar cacheIndex = action._cacheIndex,\r\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\r\n\r\n\t\t\t\taction._cacheIndex = null;\r\n\t\t\t\taction._byClipCacheIndex = null;\r\n\r\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\t\t\tactions.pop();\r\n\r\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdelete actionsByClip[ clipName ];\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// free all resources specific to a particular root target object\r\n\tuncacheRoot: function( root ) {\r\n\r\n\t\tvar rootUuid = root.uuid,\r\n\t\t\tactionsByClip = this._actionsByClip;\r\n\r\n\t\tfor ( var clipName in actionsByClip ) {\r\n\r\n\t\t\tvar actionByRoot = actionsByClip[ clipName ].actionByRoot,\r\n\t\t\t\taction = actionByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( action !== undefined ) {\r\n\r\n\t\t\t\tthis._deactivateAction( action );\r\n\t\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\tif ( bindingByName !== undefined ) {\r\n\r\n\t\t\tfor ( var trackName in bindingByName ) {\r\n\r\n\t\t\t\tvar binding = bindingByName[ trackName ];\r\n\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// remove a targeted clip from the cache\r\n\tuncacheAction: function( clip, optionalRoot ) {\r\n\r\n\t\tvar action = this.existingAction( clip, optionalRoot );\r\n\r\n\t\tif ( action !== null ) {\r\n\r\n\t\t\tthis._deactivateAction( action );\r\n\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.AnimationMixer.prototype );\r\n\r\nTHREE.AnimationMixer._Action =\r\n\t\tfunction( mixer, clip, localRoot ) {\r\n\r\n\tthis._mixer = mixer;\r\n\tthis._clip = clip;\r\n\tthis._localRoot = localRoot || null;\r\n\r\n\tvar tracks = clip.tracks,\r\n\t\tnTracks = tracks.length,\r\n\t\tinterpolants = new Array( nTracks );\r\n\r\n\tvar interpolantSettings = {\r\n\t\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\r\n\t\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\r\n\t};\r\n\r\n\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\tvar interpolant = tracks[ i ].createInterpolant( null );\r\n\t\tinterpolants[ i ] = interpolant;\r\n\t\tinterpolant.settings = interpolantSettings\r\n\r\n\t}\r\n\r\n\tthis._interpolantSettings = interpolantSettings;\r\n\r\n\tthis._interpolants = interpolants;\t// bound by the mixer\r\n\r\n\t// inside: PropertyMixer (managed by the mixer)\r\n\tthis._propertyBindings = new Array( nTracks );\r\n\r\n\tthis._cacheIndex = null;\t\t\t// for the memory manager\r\n\tthis._byClipCacheIndex = null;\t\t// for the memory manager\r\n\r\n\tthis._timeScaleInterpolant = null;\r\n\tthis._weightInterpolant = null;\r\n\r\n\tthis.loop = THREE.LoopRepeat;\r\n\tthis._loopCount = -1;\r\n\r\n\t// global mixer time when the action is to be started\r\n\t// it's set back to 'null' upon start of the action\r\n\tthis._startTime = null;\r\n\r\n\t// scaled local time of the action\r\n\t// gets clamped or wrapped to 0..clip.duration according to loop\r\n\tthis.time = 0;\r\n\r\n\tthis.timeScale = 1;\r\n\tthis._effectiveTimeScale = 1;\r\n\r\n\tthis.weight = 1;\r\n\tthis._effectiveWeight = 1;\r\n\r\n\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\r\n\r\n\tthis.paused = false;\t\t\t\t// false -> zero effective time scale\r\n\tthis.enabled = true;\t\t\t\t// true -> zero effective weight\r\n\r\n\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\r\n\r\n\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\r\n\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\r\n\r\n};\r\n\r\nTHREE.AnimationMixer._Action.prototype = {\r\n\r\n\tconstructor: THREE.AnimationMixer._Action,\r\n\r\n\t// State & Scheduling\r\n\r\n\tplay: function() {\r\n\r\n\t\tthis._mixer._activateAction( this );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tstop: function() {\r\n\r\n\t\tthis._mixer._deactivateAction( this );\r\n\r\n\t\treturn this.reset();\r\n\r\n\t},\r\n\r\n\treset: function() {\r\n\r\n\t\tthis.paused = false;\r\n\t\tthis.enabled = true;\r\n\r\n\t\tthis.time = 0;\t\t\t// restart clip\r\n\t\tthis._loopCount = -1;\t// forget previous loops\r\n\t\tthis._startTime = null;\t// forget scheduling\r\n\r\n\t\treturn this.stopFading().stopWarping();\r\n\r\n\t},\r\n\r\n\tisRunning: function() {\r\n\r\n\t\tvar start = this._startTime;\r\n\r\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\r\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this )\r\n\r\n\t},\r\n\r\n\t// return true when play has been called\r\n\tisScheduled: function() {\r\n\r\n\t\treturn this._mixer._isActiveAction( this );\r\n\r\n\t},\r\n\r\n\tstartAt: function( time ) {\r\n\r\n\t\tthis._startTime = time;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetLoop: function( mode, repetitions ) {\r\n\r\n\t\tthis.loop = mode;\r\n\t\tthis.repetitions = repetitions;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// Weight\r\n\r\n\t// set the weight stopping any scheduled fading\r\n\t// although .enabled = false yields an effective weight of zero, this\r\n\t// method does *not* change .enabled, because it would be confusing\r\n\tsetEffectiveWeight: function( weight ) {\r\n\r\n\t\tthis.weight = weight;\r\n\r\n\t\t// note: same logic as when updated at runtime\r\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\r\n\r\n\t\treturn this.stopFading();\r\n\r\n\t},\r\n\r\n\t// return the weight considering fading and .enabled\r\n\tgetEffectiveWeight: function() {\r\n\r\n\t\treturn this._effectiveWeight;\r\n\r\n\t},\r\n\r\n\tfadeIn: function( duration ) {\r\n\r\n\t\treturn this._scheduleFading( duration, 0, 1 );\r\n\r\n\t},\r\n\r\n\tfadeOut: function( duration ) {\r\n\r\n\t\treturn this._scheduleFading( duration, 1, 0 );\r\n\r\n\t},\r\n\r\n\tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\r\n\r\n\t\tvar mixer = this._mixer;\r\n\r\n\t\tfadeOutAction.fadeOut( duration );\r\n\t\tthis.fadeIn( duration );\r\n\r\n\t\tif( warp ) {\r\n\r\n\t\t\tvar fadeInDuration = this._clip.duration,\r\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\r\n\r\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\r\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\r\n\r\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\r\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcrossFadeTo: function( fadeInAction, duration, warp ) {\r\n\r\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\r\n\r\n\t},\r\n\r\n\tstopFading: function() {\r\n\r\n\t\tvar weightInterpolant = this._weightInterpolant;\r\n\r\n\t\tif ( weightInterpolant !== null ) {\r\n\r\n\t\t\tthis._weightInterpolant = null;\r\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// Time Scale Control\r\n\r\n\t// set the weight stopping any scheduled warping\r\n\t// although .paused = true yields an effective time scale of zero, this\r\n\t// method does *not* change .paused, because it would be confusing\r\n\tsetEffectiveTimeScale: function( timeScale ) {\r\n\r\n\t\tthis.timeScale = timeScale;\r\n\t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\r\n\r\n\t\treturn this.stopWarping();\r\n\r\n\t},\r\n\r\n\t// return the time scale considering warping and .paused\r\n\tgetEffectiveTimeScale: function() {\r\n\r\n\t\treturn this._effectiveTimeScale;\r\n\r\n\t},\r\n\r\n\tsetDuration: function( duration ) {\r\n\r\n\t\tthis.timeScale = this._clip.duration / duration;\r\n\r\n\t\treturn this.stopWarping();\r\n\r\n\t},\r\n\r\n\tsyncWith: function( action ) {\r\n\r\n\t\tthis.time = action.time;\r\n\t\tthis.timeScale = action.timeScale;\r\n\r\n\t\treturn this.stopWarping();\r\n\r\n\t},\r\n\r\n\thalt: function( duration ) {\r\n\r\n\t\treturn this.warp( this._currentTimeScale, 0, duration );\r\n\r\n\t},\r\n\r\n\twarp: function( startTimeScale, endTimeScale, duration ) {\r\n\r\n\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\tinterpolant = this._timeScaleInterpolant,\r\n\r\n\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\tif ( interpolant === null ) {\r\n\r\n\t\t\tinterpolant = mixer._lendControlInterpolant(),\r\n\t\t\tthis._timeScaleInterpolant = interpolant;\r\n\r\n\t\t}\r\n\r\n\t\tvar times = interpolant.parameterPositions,\r\n\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\ttimes[ 0 ] = now;\r\n\t\ttimes[ 1 ] = now + duration;\r\n\r\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\r\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tstopWarping: function() {\r\n\r\n\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\r\n\r\n\t\tif ( timeScaleInterpolant !== null ) {\r\n\r\n\t\t\tthis._timeScaleInterpolant = null;\r\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// Object Accessors\r\n\r\n\tgetMixer: function() {\r\n\r\n\t\treturn this._mixer;\r\n\r\n\t},\r\n\r\n\tgetClip: function() {\r\n\r\n\t\treturn this._clip;\r\n\r\n\t},\r\n\r\n\tgetRoot: function() {\r\n\r\n\t\treturn this._localRoot || this._mixer._root;\r\n\r\n\t},\r\n\r\n\t// Interna\r\n\r\n\t_update: function( time, deltaTime, timeDirection, accuIndex ) {\r\n\t\t// called by the mixer\r\n\r\n\t\tvar startTime = this._startTime;\r\n\r\n\t\tif ( startTime !== null ) {\r\n\r\n\t\t\t// check for scheduled start of action\r\n\r\n\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\r\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\r\n\r\n\t\t\t\treturn; // yet to come / don't decide when delta = 0\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// start\r\n\r\n\t\t\tthis._startTime = null; // unschedule\r\n\t\t\tdeltaTime = timeDirection * timeRunning;\r\n\r\n\t\t}\r\n\r\n\t\t// apply time scale and advance time\r\n\r\n\t\tdeltaTime *= this._updateTimeScale( time );\r\n\t\tvar clipTime = this._updateTime( deltaTime );\r\n\r\n\t\t// note: _updateTime may disable the action resulting in\r\n\t\t// an effective weight of 0\r\n\r\n\t\tvar weight = this._updateWeight( time );\r\n\r\n\t\tif ( weight > 0 ) {\r\n\r\n\t\t\tvar interpolants = this._interpolants;\r\n\t\t\tvar propertyMixers = this._propertyBindings;\r\n\r\n\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\r\n\r\n\t\t\t\tinterpolants[ j ].evaluate( clipTime );\r\n\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_updateWeight: function( time ) {\r\n\r\n\t\tvar weight = 0;\r\n\r\n\t\tif ( this.enabled ) {\r\n\r\n\t\t\tweight = this.weight;\r\n\t\t\tvar interpolant = this._weightInterpolant;\r\n\r\n\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\tweight *= interpolantValue;\r\n\r\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\tthis.stopFading();\r\n\r\n\t\t\t\t\tif ( interpolantValue === 0 ) {\r\n\r\n\t\t\t\t\t\t// faded out, disable\r\n\t\t\t\t\t\tthis.enabled = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis._effectiveWeight = weight;\r\n\t\treturn weight;\r\n\r\n\t},\r\n\r\n\t_updateTimeScale: function( time ) {\r\n\r\n\t\tvar timeScale = 0;\r\n\r\n\t\tif ( ! this.paused ) {\r\n\r\n\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\t\tvar interpolant = this._timeScaleInterpolant;\r\n\r\n\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\ttimeScale *= interpolantValue;\r\n\r\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\tthis.stopWarping();\r\n\r\n\t\t\t\t\tif ( timeScale === 0 ) {\r\n\r\n\t\t\t\t\t\t// motion has halted, pause\r\n\t\t\t\t\t\tthis.pause = true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// warp done - apply final time scale\r\n\t\t\t\t\t\tthis.timeScale = timeScale;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis._effectiveTimeScale = timeScale;\r\n\t\treturn timeScale;\r\n\r\n\t},\r\n\r\n\t_updateTime: function( deltaTime ) {\r\n\r\n\t\tvar time = this.time + deltaTime;\r\n\r\n\t\tif ( deltaTime === 0 ) return time;\r\n\r\n\t\tvar duration = this._clip.duration,\r\n\r\n\t\t\tloop = this.loop,\r\n\t\t\tloopCount = this._loopCount,\r\n\r\n\t\t\tpingPong = false;\r\n\r\n\t\tswitch ( loop ) {\r\n\r\n\t\t\tcase THREE.LoopOnce:\r\n\r\n\t\t\t\tif ( loopCount === -1 ) {\r\n\r\n\t\t\t\t\t// just started\r\n\r\n\t\t\t\t\tthis.loopCount = 0;\r\n\t\t\t\t\tthis._setEndings( true, true, false );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( time >= duration ) {\r\n\r\n\t\t\t\t\ttime = duration;\r\n\r\n\t\t\t\t} else if ( time < 0 ) {\r\n\r\n\t\t\t\t\ttime = 0;\r\n\r\n\t\t\t\t} else break;\r\n\r\n\t\t\t\t// reached the end\r\n\r\n\t\t\t\tif ( this.clampWhenFinished ) this.pause = true;\r\n\t\t\t\telse this.enabled = false;\r\n\r\n\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.LoopPingPong:\r\n\r\n\t\t\t\tpingPong = true;\r\n\r\n\t\t\tcase THREE.LoopRepeat:\r\n\r\n\t\t\t\tif ( loopCount === -1 ) {\r\n\r\n\t\t\t\t\t// just started\r\n\r\n\t\t\t\t\tif ( deltaTime > 0 ) {\r\n\r\n\t\t\t\t\t\tloopCount = 0;\r\n\r\n\t\t\t\t\t\tthis._setEndings(\r\n\t\t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// when looping in reverse direction, the initial\r\n\t\t\t\t\t\t// transition through zero counts as a repetition,\r\n\t\t\t\t\t\t// so leave loopCount at -1\r\n\r\n\t\t\t\t\t\tthis._setEndings(\r\n\t\t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( time >= duration || time < 0 ) {\r\n\r\n\t\t\t\t\t// wrap around\r\n\r\n\t\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\r\n\t\t\t\t\ttime -= duration * loopDelta;\r\n\r\n\t\t\t\t\tloopCount += Math.abs( loopDelta );\r\n\r\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\r\n\r\n\t\t\t\t\tif ( pending < 0 ) {\r\n\r\n\t\t\t\t\t\t// stop (switch state, clamp time, fire event)\r\n\r\n\t\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\r\n\t\t\t\t\t\telse this.enabled = false;\r\n\r\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\r\n\r\n\t\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t} else if ( pending === 0 ) {\r\n\r\n\t\t\t\t\t\t// transition to last round\r\n\r\n\t\t\t\t\t\tvar atStart = deltaTime < 0;\r\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis._loopCount = loopCount;\r\n\r\n\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( loop === THREE.LoopPingPong && ( loopCount & 1 ) === 1 ) {\r\n\r\n\t\t\t\t\t// invert time for the \"pong round\"\r\n\r\n\t\t\t\t\tthis.time = time;\r\n\r\n\t\t\t\t\treturn duration - time;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tthis.time = time;\r\n\r\n\t\treturn time;\r\n\r\n\t},\r\n\r\n\t_setEndings: function( atStart, atEnd, pingPong ) {\r\n\r\n\t\tvar settings = this._interpolantSettings;\r\n\r\n\t\tif ( pingPong ) {\r\n\r\n\t\t\tsettings.endingStart \t= THREE.ZeroSlopeEnding;\r\n\t\t\tsettings.endingEnd\t\t= THREE.ZeroSlopeEnding;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\r\n\r\n\t\t\tif ( atStart ) {\r\n\r\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\r\n\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsettings.endingStart = THREE.WrapAroundEnding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( atEnd ) {\r\n\r\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\r\n\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsettings.endingEnd \t = THREE.WrapAroundEnding;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_scheduleFading: function( duration, weightNow, weightThen ) {\r\n\r\n\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\tinterpolant = this._weightInterpolant;\r\n\r\n\t\tif ( interpolant === null ) {\r\n\r\n\t\t\tinterpolant = mixer._lendControlInterpolant(),\r\n\t\t\tthis._weightInterpolant = interpolant;\r\n\r\n\t\t}\r\n\r\n\t\tvar times = interpolant.parameterPositions,\r\n\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\r\n\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Implementation details:\r\n\r\nObject.assign( THREE.AnimationMixer.prototype, {\r\n\r\n\t_bindAction: function( action, prototypeAction ) {\r\n\r\n\t\tvar root = action._localRoot || this._root,\r\n\t\t\ttracks = action._clip.tracks,\r\n\t\t\tnTracks = tracks.length,\r\n\t\t\tbindings = action._propertyBindings,\r\n\t\t\tinterpolants = action._interpolants,\r\n\t\t\trootUuid = root.uuid,\r\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\tif ( bindingsByName === undefined ) {\r\n\r\n\t\t\tbindingsByName = {};\r\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\t\tvar track = tracks[ i ],\r\n\t\t\t\ttrackName = track.name,\r\n\t\t\t\tbinding = bindingsByName[ trackName ];\r\n\r\n\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbinding = bindings[ i ];\r\n\r\n\t\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\t\t// existing binding, make sure the cache knows\r\n\r\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\r\n\r\n\t\t\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar path = prototypeAction && prototypeAction.\r\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\r\n\r\n\t\t\t\tbinding = new THREE.PropertyMixer(\r\n\t\t\t\t\t\tTHREE.PropertyBinding.create( root, trackName, path ),\r\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\r\n\r\n\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_activateAction: function( action ) {\r\n\r\n\t\tif ( ! this._isActiveAction( action ) ) {\r\n\r\n\t\t\tif ( action._cacheIndex === null ) {\r\n\r\n\t\t\t\t// this action has been forgotten by the cache, but the user\r\n\t\t\t\t// appears to be still using it -> rebind\r\n\r\n\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\r\n\t\t\t\t\tclipName = action._clip.name,\r\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipName ];\r\n\r\n\t\t\t\tthis._bindAction( action,\r\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\r\n\r\n\t\t\t\tthis._addInactiveAction( action, clipName, rootUuid );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar bindings = action._propertyBindings;\r\n\r\n\t\t\t// increment reference counts / sort out state\r\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\r\n\r\n\t\t\t\t\tthis._lendBinding( binding );\r\n\t\t\t\t\tbinding.saveOriginalState();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._lendAction( action );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_deactivateAction: function( action ) {\r\n\r\n\t\tif ( this._isActiveAction( action ) ) {\r\n\r\n\t\t\tvar bindings = action._propertyBindings;\r\n\r\n\t\t\t// decrement reference counts / sort out state\r\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\tif ( -- binding.useCount === 0 ) {\r\n\r\n\t\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\t\tthis._takeBackBinding( binding );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._takeBackAction( action );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// Memory manager\r\n\r\n\t_initMemoryManager: function() {\r\n\r\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\r\n\t\tthis._nActiveActions = 0;\r\n\r\n\t\tthis._actionsByClip = {};\r\n\t\t// inside:\r\n\t\t// {\r\n\t\t// \t\tknownActions: Array< _Action >\t- used as prototypes\r\n\t\t// \t\tactionByRoot: _Action\t\t\t- lookup\r\n\t\t// }\r\n\r\n\r\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\r\n\t\tthis._nActiveBindings = 0;\r\n\r\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\r\n\r\n\r\n\t\tthis._controlInterpolants = []; // same game as above\r\n\t\tthis._nActiveControlInterpolants = 0;\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tthis.stats = {\r\n\r\n\t\t\tactions: {\r\n\t\t\t\tget total() { return scope._actions.length; },\r\n\t\t\t\tget inUse() { return scope._nActiveActions; }\r\n\t\t\t},\r\n\t\t\tbindings: {\r\n\t\t\t\tget total() { return scope._bindings.length; },\r\n\t\t\t\tget inUse() { return scope._nActiveBindings; }\r\n\t\t\t},\r\n\t\t\tcontrolInterpolants: {\r\n\t\t\t\tget total() { return scope._controlInterpolants.length; },\r\n\t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t},\r\n\r\n\t// Memory management for _Action objects\r\n\r\n\t_isActiveAction: function( action ) {\r\n\r\n\t\tvar index = action._cacheIndex;\r\n\t\treturn index !== null && index < this._nActiveActions;\r\n\r\n\t},\r\n\r\n\t_addInactiveAction: function( action, clipName, rootUuid ) {\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\tactionsForClip = actionsByClip[ clipName ];\r\n\r\n\t\tif ( actionsForClip === undefined ) {\r\n\r\n\t\t\tactionsForClip = {\r\n\r\n\t\t\t\tknownActions: [ action ],\r\n\t\t\t\tactionByRoot: {}\r\n\r\n\t\t\t};\r\n\r\n\t\t\taction._byClipCacheIndex = 0;\r\n\r\n\t\t\tactionsByClip[ clipName ] = actionsForClip;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar knownActions = actionsForClip.knownActions;\r\n\r\n\t\t\taction._byClipCacheIndex = knownActions.length;\r\n\t\t\tknownActions.push( action );\r\n\r\n\t\t}\r\n\r\n\t\taction._cacheIndex = actions.length;\r\n\t\tactions.push( action );\r\n\r\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\r\n\r\n\t},\r\n\r\n\t_removeInactiveAction: function( action ) {\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\r\n\t\t\tcacheIndex = action._cacheIndex;\r\n\r\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\tactions.pop();\r\n\r\n\t\taction._cacheIndex = null;\r\n\r\n\r\n\t\tvar clipName = action._clip.name,\r\n\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\tactionsForClip = actionsByClip[ clipName ],\r\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\r\n\r\n\t\t\tlastKnownAction =\r\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\r\n\r\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\r\n\r\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\r\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\r\n\t\tknownActionsForClip.pop();\r\n\r\n\t\taction._byClipCacheIndex = null;\r\n\r\n\r\n\t\tvar actionByRoot = actionsForClip.actionByRoot,\r\n\t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\r\n\r\n\t\tdelete actionByRoot[ rootUuid ];\r\n\r\n\t\tif ( knownActionsForClip.length === 0 ) {\r\n\r\n\t\t\tdelete actionsByClip[ clipName ];\r\n\r\n\t\t}\r\n\r\n\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t},\r\n\r\n\t_removeInactiveBindingsForAction: function( action ) {\r\n\r\n\t\tvar bindings = action._propertyBindings;\r\n\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\tif ( -- binding.referenceCount === 0 ) {\r\n\r\n\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_lendAction: function( action ) {\r\n\r\n\t\t// [ active actions |  inactive actions  ]\r\n\t\t// [  active actions >| inactive actions ]\r\n\t\t//                 s        a\r\n\t\t//                  <-swap->\r\n\t\t//                 a        s\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\tlastActiveIndex = this._nActiveActions ++,\r\n\r\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\r\n\r\n\t\taction._cacheIndex = lastActiveIndex;\r\n\t\tactions[ lastActiveIndex ] = action;\r\n\r\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\r\n\t\tactions[ prevIndex ] = firstInactiveAction;\r\n\r\n\t},\r\n\r\n\t_takeBackAction: function( action ) {\r\n\r\n\t\t// [  active actions  | inactive actions ]\r\n\t\t// [ active actions |< inactive actions  ]\r\n\t\t//        a        s\r\n\t\t//         <-swap->\r\n\t\t//        s        a\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\r\n\r\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\r\n\r\n\t\taction._cacheIndex = firstInactiveIndex;\r\n\t\tactions[ firstInactiveIndex ] = action;\r\n\r\n\t\tlastActiveAction._cacheIndex = prevIndex;\r\n\t\tactions[ prevIndex ] = lastActiveAction;\r\n\r\n\t},\r\n\r\n\t// Memory management for PropertyMixer objects\r\n\r\n\t_addInactiveBinding: function( binding, rootUuid, trackName ) {\r\n\r\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\r\n\t\t\tbindings = this._bindings;\r\n\r\n\t\tif ( bindingByName === undefined ) {\r\n\r\n\t\t\tbindingByName = {};\r\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\r\n\r\n\t\t}\r\n\r\n\t\tbindingByName[ trackName ] = binding;\r\n\r\n\t\tbinding._cacheIndex = bindings.length;\r\n\t\tbindings.push( binding );\r\n\r\n\t},\r\n\r\n\t_removeInactiveBinding: function( binding ) {\r\n\r\n\t\tvar bindings = this._bindings,\r\n\t\t\tpropBinding = binding.binding,\r\n\t\t\trootUuid = propBinding.rootNode.uuid,\r\n\t\t\ttrackName = propBinding.path,\r\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\r\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\r\n\t\t\tcacheIndex = binding._cacheIndex;\r\n\r\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\r\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\r\n\t\tbindings.pop();\r\n\r\n\t\tdelete bindingByName[ trackName ];\r\n\r\n\t\tremove_empty_map: {\r\n\r\n\t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\r\n\r\n\t\t\tdelete bindingsByRoot[ rootUuid ];\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_lendBinding: function( binding ) {\r\n\r\n\t\tvar bindings = this._bindings,\r\n\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\r\n\r\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\r\n\r\n\t\tbinding._cacheIndex = lastActiveIndex;\r\n\t\tbindings[ lastActiveIndex ] = binding;\r\n\r\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\r\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\r\n\r\n\t},\r\n\r\n\t_takeBackBinding: function( binding ) {\r\n\r\n\t\tvar bindings = this._bindings,\r\n\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\r\n\r\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\r\n\r\n\t\tbinding._cacheIndex = firstInactiveIndex;\r\n\t\tbindings[ firstInactiveIndex ] = binding;\r\n\r\n\t\tlastActiveBinding._cacheIndex = prevIndex;\r\n\t\tbindings[ prevIndex ] = lastActiveBinding;\r\n\r\n\t},\r\n\r\n\r\n\t// Memory management of Interpolants for weight and time scale\r\n\r\n\t_lendControlInterpolant: function() {\r\n\r\n\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\r\n\t\t\tinterpolant = interpolants[ lastActiveIndex ];\r\n\r\n\t\tif ( interpolant === undefined ) {\r\n\r\n\t\t\tinterpolant = new THREE.LinearInterpolant(\r\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\r\n\t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\r\n\r\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\r\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\r\n\r\n\t\t}\r\n\r\n\t\treturn interpolant;\r\n\r\n\t},\r\n\r\n\t_takeBackControlInterpolant: function( interpolant ) {\r\n\r\n\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\tprevIndex = interpolant.__cacheIndex,\r\n\r\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\r\n\r\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\r\n\r\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\r\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\r\n\r\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\r\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\r\n\r\n\t},\r\n\r\n\t_controlInterpolantsResultBuffer: new Float32Array( 1 )\r\n\r\n} );\r\n\r\n\r\n// File:src/animation/AnimationObjectGroup.js\r\n\r\n/**\r\n *\r\n * A group of objects that receives a shared animation state.\r\n *\r\n * Usage:\r\n *\r\n * \t-\tAdd objects you would otherwise pass as 'root' to the\r\n * \t\tconstructor or the .clipAction method of AnimationMixer.\r\n *\r\n * \t-\tInstead pass this object as 'root'.\r\n *\r\n * \t-\tYou can also add and remove objects later when the mixer\r\n * \t\tis running.\r\n *\r\n * Note:\r\n *\r\n *  \tObjects of this class appear as one object to the mixer,\r\n *  \tso cache control of the individual objects must be done\r\n *  \ton the group.\r\n *\r\n * Limitation:\r\n *\r\n * \t- \tThe animated properties must be compatible among the\r\n * \t\tall objects in the group.\r\n *\r\n *  -\tA single property can either be controlled through a\r\n *  \ttarget group or directly, but not both.\r\n *\r\n * @author tschw\r\n */\r\n\r\nTHREE.AnimationObjectGroup = function( var_args ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\t// cached objects followed by the active ones\r\n\tthis._objects = Array.prototype.slice.call( arguments );\r\n\r\n\tthis.nCachedObjects_ = 0;\t\t\t// threshold\r\n\t// note: read by PropertyBinding.Composite\r\n\r\n\tvar indices = {};\r\n\tthis._indicesByUUID = indices;\t\t// for bookkeeping\r\n\r\n\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\tindices[ arguments[ i ].uuid ] = i;\r\n\r\n\t}\r\n\r\n\tthis._paths = [];\t\t\t\t\t// inside: string\r\n\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\r\n\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\r\n\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.stats = {\r\n\r\n\t\tobjects: {\r\n\t\t\tget total() { return scope._objects.length; },\r\n\t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\r\n\t\t},\r\n\r\n\t\tget bindingsPerObject() { return scope._bindings.length; }\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.AnimationObjectGroup.prototype = {\r\n\r\n\tconstructor: THREE.AnimationObjectGroup,\r\n\r\n\tadd: function( var_args ) {\r\n\r\n\t\tvar objects = this._objects,\r\n\t\t\tnObjects = objects.length,\r\n\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\tpaths = this._paths,\r\n\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\tbindings = this._bindings,\r\n\t\t\tnBindings = bindings.length;\r\n\r\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar object = arguments[ i ],\r\n\t\t\t\tuuid = object.uuid,\r\n\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\tif ( index === undefined ) {\r\n\r\n\t\t\t\t// unknown object -> add it to the ACTIVE region\r\n\r\n\t\t\t\tindex = nObjects ++;\r\n\t\t\t\tindicesByUUID[ uuid ] = index;\r\n\t\t\t\tobjects.push( object );\r\n\r\n\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tbindings[ j ].push(\r\n\t\t\t\t\t\t\tnew THREE.PropertyBinding(\r\n\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( index < nCachedObjects ) {\r\n\r\n\t\t\t\tvar knownObject = objects[ index ];\r\n\r\n\t\t\t\t// move existing object to the ACTIVE region\r\n\r\n\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\r\n\r\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\r\n\t\t\t\tobjects[ firstActiveIndex ] = object;\r\n\r\n\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\r\n\t\t\t\t\tif ( binding === undefined ) {\r\n\r\n\t\t\t\t\t\t// since we do not bother to create new bindings\r\n\t\t\t\t\t\t// for objects that are cached, the binding may\r\n\t\t\t\t\t\t// or may not exist\r\n\r\n\t\t\t\t\t\tbinding = new THREE.PropertyBinding(\r\n\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( objects[ index ] !== knownObject) {\r\n\r\n\t\t\t\tconsole.error( \"Different objects with the same UUID \" +\r\n\t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\r\n\t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\r\n\r\n\t\t\t} // else the object is already where we want it to be\r\n\r\n\t\t} // for arguments\r\n\r\n\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t},\r\n\r\n\tremove: function( var_args ) {\r\n\r\n\t\tvar objects = this._objects,\r\n\t\t\tnObjects = objects.length,\r\n\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\tbindings = this._bindings,\r\n\t\t\tnBindings = bindings.length;\r\n\r\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar object = arguments[ i ],\r\n\t\t\t\tuuid = object.uuid,\r\n\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\r\n\r\n\t\t\t\t// move existing object into the CACHED region\r\n\r\n\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\r\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\r\n\r\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\r\n\t\t\t\tobjects[ index ] = firstActiveObject;\r\n\r\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\r\n\t\t\t\tobjects[ lastCachedIndex ] = object;\r\n\r\n\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\r\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\r\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} // for arguments\r\n\r\n\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t},\r\n\r\n\t// remove & forget\r\n\tuncache: function( var_args ) {\r\n\r\n\t\tvar objects = this._objects,\r\n\t\t\tnObjects = objects.length,\r\n\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\tbindings = this._bindings,\r\n\t\t\tnBindings = bindings.length;\r\n\r\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar object = arguments[ i ],\r\n\t\t\t\tuuid = object.uuid,\r\n\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tdelete indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index < nCachedObjects ) {\r\n\r\n\t\t\t\t\t// object is cached, shrink the CACHED region\r\n\r\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\r\n\t\t\t\t\t\tlastIndex = -- nObjects,\r\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\t// last cached object takes this object's place\r\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\t\t// last object goes to the activated slot and pop\r\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\r\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\r\n\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\r\n\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// object is active, just swap with the last and pop\r\n\r\n\t\t\t\t\tvar lastIndex = -- nObjects,\r\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = lastObject;\r\n\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\r\n\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} // cached or active\r\n\r\n\t\t\t} // if object is known\r\n\r\n\t\t} // for arguments\r\n\r\n\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t},\r\n\r\n\t// Internal interface used by befriended PropertyBinding.Composite:\r\n\r\n\tsubscribe_: function( path, parsedPath ) {\r\n\t\t// returns an array of bindings for the given path that is changed\r\n\t\t// according to the contained objects in the group\r\n\r\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\tindex = indicesByPath[ path ],\r\n\t\t\tbindings = this._bindings;\r\n\r\n\t\tif ( index !== undefined ) return bindings[ index ];\r\n\r\n\t\tvar paths = this._paths,\r\n\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\tobjects = this._objects,\r\n\t\t\tnObjects = objects.length,\r\n\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\tbindingsForPath = new Array( nObjects );\r\n\r\n\t\tindex = bindings.length;\r\n\r\n\t\tindicesByPath[ path ] = index;\r\n\r\n\t\tpaths.push( path );\r\n\t\tparsedPaths.push( parsedPath );\r\n\t\tbindings.push( bindingsForPath );\r\n\r\n\t\tfor ( var i = nCachedObjects,\r\n\t\t\t\tn = objects.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar object = objects[ i ];\r\n\r\n\t\t\tbindingsForPath[ i ] =\r\n\t\t\t\t\tnew THREE.PropertyBinding( object, path, parsedPath );\r\n\r\n\t\t}\r\n\r\n\t\treturn bindingsForPath;\r\n\r\n\t},\r\n\r\n\tunsubscribe_: function( path ) {\r\n\t\t// tells the group to forget about a property path and no longer\r\n\t\t// update the array previously obtained with 'subscribe_'\r\n\r\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\tindex = indicesByPath[ path ];\r\n\r\n\t\tif ( index !== undefined ) {\r\n\r\n\t\t\tvar paths = this._paths,\r\n\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\r\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\r\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\r\n\r\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\r\n\r\n\t\t\tbindings[ index ] = lastBindings;\r\n\t\t\tbindings.pop();\r\n\r\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\r\n\t\t\tparsedPaths.pop();\r\n\r\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\r\n\t\t\tpaths.pop();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// File:src/animation/AnimationUtils.js\r\n\r\n/**\r\n * @author tschw\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.AnimationUtils = {\r\n\r\n\t// same as Array.prototype.slice, but also works on typed arrays\r\n\tarraySlice: function( array, from, to ) {\r\n\r\n\t\tif ( THREE.AnimationUtils.isTypedArray( array ) ) {\r\n\r\n\t\t\treturn new array.constructor( array.subarray( from, to ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn array.slice( from, to );\r\n\r\n\t},\r\n\r\n\t// converts an array to a specific type\r\n\tconvertArray: function( array, type, forceClone ) {\r\n\r\n\t\tif ( ! array || // let 'undefined' and 'null' pass\r\n\t\t\t\t! forceClone && array.constructor === type ) return array;\r\n\r\n\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\r\n\r\n\t\t\treturn new type( array ); // create typed array\r\n\r\n\t\t}\r\n\r\n\t\treturn Array.prototype.slice.call( array ); // create Array\r\n\r\n\t},\r\n\r\n\tisTypedArray: function( object ) {\r\n\r\n\t\treturn ArrayBuffer.isView( object ) &&\r\n\t\t\t\t! ( object instanceof DataView );\r\n\r\n\t},\r\n\r\n\t// returns an array by which times and values can be sorted\r\n\tgetKeyframeOrder: function( times ) {\r\n\r\n\t\tfunction compareTime( i, j ) {\r\n\r\n\t\t\treturn times[ i ] - times[ j ];\r\n\r\n\t\t}\r\n\r\n\t\tvar n = times.length;\r\n\t\tvar result = new Array( n );\r\n\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\r\n\r\n\t\tresult.sort( compareTime );\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\t// uses the array previously returned by 'getKeyframeOrder' to sort data\r\n\tsortedArray: function( values, stride, order ) {\r\n\r\n\t\tvar nValues = values.length;\r\n\t\tvar result = new values.constructor( nValues );\r\n\r\n\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\r\n\r\n\t\t\tvar srcOffset = order[ i ] * stride;\r\n\r\n\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\t// function for parsing AOS keyframe formats\r\n\tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\r\n\r\n\t\tvar i = 1, key = jsonKeys[ 0 ];\r\n\r\n\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\r\n\r\n\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( key === undefined ) return; // no data\r\n\r\n\t\tvar value = key[ valuePropertyName ];\r\n\t\tif ( value === undefined ) return; // no data\r\n\r\n\t\tif ( Array.isArray( value ) ) {\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t} while ( key !== undefined );\r\n\r\n\t\t} else if ( value.toArray !== undefined ) {\r\n\t\t\t// ...assume THREE.Math-ish\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\tvalue.toArray( values, values.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t} while ( key !== undefined );\r\n\r\n\t\t} else {\r\n\t\t\t// otherwise push as-is\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\tvalues.push( value );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t} while ( key !== undefined );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/animation/KeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A timed sequence of keyframes for a specific property.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.KeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tif( name === undefined ) throw new Error( \"track name is undefined\" );\r\n\r\n\tif( times === undefined || times.length === 0 ) {\r\n\r\n\t\tthrow new Error( \"no keyframes in track named \" + name );\r\n\r\n\t}\r\n\r\n\tthis.name = name;\r\n\r\n\tthis.times = THREE.AnimationUtils.convertArray( times, this.TimeBufferType );\r\n\tthis.values = THREE.AnimationUtils.convertArray( values, this.ValueBufferType );\r\n\r\n\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\r\n\r\n\tthis.validate();\r\n\tthis.optimize();\r\n\r\n};\r\n\r\nTHREE.KeyframeTrack.prototype = {\r\n\r\n\tconstructor: THREE.KeyframeTrack,\r\n\r\n\tTimeBufferType: Float32Array,\r\n\tValueBufferType: Float32Array,\r\n\r\n\tDefaultInterpolation: THREE.InterpolateLinear,\r\n\r\n\tInterpolantFactoryMethodDiscrete: function( result ) {\r\n\r\n\t\treturn new THREE.DiscreteInterpolant(\r\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\r\n\t},\r\n\r\n\tInterpolantFactoryMethodLinear: function( result ) {\r\n\r\n\t\treturn new THREE.LinearInterpolant(\r\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\r\n\t},\r\n\r\n\tInterpolantFactoryMethodSmooth: function( result ) {\r\n\r\n\t\treturn new THREE.CubicInterpolant(\r\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\r\n\t},\r\n\r\n\tsetInterpolation: function( interpolation ) {\r\n\r\n\t\tvar factoryMethod = undefined;\r\n\r\n\t\tswitch ( interpolation ) {\r\n\r\n\t\t\tcase THREE.InterpolateDiscrete:\r\n\r\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.InterpolateLinear:\r\n\r\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.InterpolateSmooth:\r\n\r\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tif ( factoryMethod === undefined ) {\r\n\r\n\t\t\tvar message = \"unsupported interpolation for \" +\r\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\r\n\r\n\t\t\tif ( this.createInterpolant === undefined ) {\r\n\r\n\t\t\t\t// fall back to default, unless the default itself is messed up\r\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\r\n\r\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconsole.warn( message );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.createInterpolant = factoryMethod;\r\n\r\n\t},\r\n\r\n\tgetInterpolation: function() {\r\n\r\n\t\tswitch ( this.createInterpolant ) {\r\n\r\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\r\n\r\n\t\t\t\treturn THREE.InterpolateDiscrete;\r\n\r\n\t\t\tcase this.InterpolantFactoryMethodLinear:\r\n\r\n\t\t\t\treturn THREE.InterpolateLinear;\r\n\r\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\r\n\r\n\t\t\t\treturn THREE.InterpolateSmooth;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetValueSize: function() {\r\n\r\n\t\treturn this.values.length / this.times.length;\r\n\r\n\t},\r\n\r\n\t// move all keyframes either forwards or backwards in time\r\n\tshift: function( timeOffset ) {\r\n\r\n\t\tif( timeOffset !== 0.0 ) {\r\n\r\n\t\t\tvar times = this.times;\r\n\r\n\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttimes[ i ] += timeOffset;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\r\n\tscale: function( timeScale ) {\r\n\r\n\t\tif( timeScale !== 1.0 ) {\r\n\r\n\t\t\tvar times = this.times;\r\n\r\n\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttimes[ i ] *= timeScale;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\r\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\r\n\ttrim: function( startTime, endTime ) {\r\n\r\n\t\tvar times = this.times,\r\n\t\t\tnKeys = times.length,\r\n\t\t\tfrom = 0,\r\n\t\t\tto = nKeys - 1;\r\n\r\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\r\n\t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\r\n\r\n\t\t++ to; // inclusive -> exclusive bound\r\n\r\n\t\tif( from !== 0 || to !== nKeys ) {\r\n\r\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\r\n\t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\r\n\r\n\t\t\tvar stride = this.getValueSize();\r\n\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, from, to );\r\n\t\t\tthis.values = THREE.AnimationUtils.\r\n\t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\r\n\tvalidate: function() {\r\n\r\n\t\tvar valid = true;\r\n\r\n\t\tvar valueSize = this.getValueSize();\r\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\r\n\r\n\t\t\tconsole.error( \"invalid value size in track\", this );\r\n\t\t\tvalid = false;\r\n\r\n\t\t}\r\n\r\n\t\tvar times = this.times,\r\n\t\t\tvalues = this.values,\r\n\r\n\t\t\tnKeys = times.length;\r\n\r\n\t\tif( nKeys === 0 ) {\r\n\r\n\t\t\tconsole.error( \"track is empty\", this );\r\n\t\t\tvalid = false;\r\n\r\n\t\t}\r\n\r\n\t\tvar prevTime = null;\r\n\r\n\t\tfor( var i = 0; i !== nKeys; i ++ ) {\r\n\r\n\t\t\tvar currTime = times[ i ];\r\n\r\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\r\n\r\n\t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\r\n\t\t\t\tvalid = false;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif( prevTime !== null && prevTime > currTime ) {\r\n\r\n\t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\r\n\t\t\t\tvalid = false;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprevTime = currTime;\r\n\r\n\t\t}\r\n\r\n\t\tif ( values !== undefined ) {\r\n\r\n\t\t\tif ( THREE.AnimationUtils.isTypedArray( values ) ) {\r\n\r\n\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar value = values[ i ];\r\n\r\n\t\t\t\t\tif ( isNaN( value ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\r\n\t\t\t\t\t\tvalid = false;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn valid;\r\n\r\n\t},\r\n\r\n\t// removes equivalent sequential keys as common in morph target sequences\r\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\r\n\toptimize: function() {\r\n\r\n\t\tvar times = this.times,\r\n\t\t\tvalues = this.values,\r\n\t\t\tstride = this.getValueSize(),\r\n\r\n\t\t\twriteIndex = 1;\r\n\r\n\t\tfor( var i = 1, n = times.length - 1; i <= n; ++ i ) {\r\n\r\n\t\t\tvar keep = false;\r\n\r\n\t\t\tvar time = times[ i ];\r\n\t\t\tvar timeNext = times[ i + 1 ];\r\n\r\n\t\t\t// remove adjacent keyframes scheduled at the same time\r\n\r\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\r\n\r\n\t\t\t\t// remove unnecessary keyframes same as their neighbors\r\n\t\t\t\tvar offset = i * stride,\r\n\t\t\t\t\toffsetP = offset - stride,\r\n\t\t\t\t\toffsetN = offset + stride;\r\n\r\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\tvar value = values[ offset + j ];\r\n\r\n\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\r\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\r\n\r\n\t\t\t\t\t\tkeep = true;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// in-place compaction\r\n\r\n\t\t\tif ( keep ) {\r\n\r\n\t\t\t\tif ( i !== writeIndex ) {\r\n\r\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\r\n\r\n\t\t\t\t\tvar readOffset = i * stride,\r\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\r\n\r\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t++ writeIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( writeIndex !== times.length ) {\r\n\r\n\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, 0, writeIndex );\r\n\t\t\tthis.values = THREE.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Static methods:\r\n\r\nObject.assign( THREE.KeyframeTrack, {\r\n\r\n\t// Serialization (in static context, because of constructor invocation\r\n\t// and automatic invocation of .toJSON):\r\n\r\n\tparse: function( json ) {\r\n\r\n\t\tif( json.type === undefined ) {\r\n\r\n\t\t\tthrow new Error( \"track type undefined, can not parse\" );\r\n\r\n\t\t}\r\n\r\n\t\tvar trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName( json.type );\r\n\r\n\t\tif ( json.times === undefined ) {\r\n\r\n\t\t\tconsole.warn( \"legacy JSON format detected, converting\" );\r\n\r\n\t\t\tvar times = [], values = [];\r\n\r\n\t\t\tTHREE.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\r\n\r\n\t\t\tjson.times = times;\r\n\t\t\tjson.values = values;\r\n\r\n\t\t}\r\n\r\n\t\t// derived classes can define a static parse method\r\n\t\tif ( trackType.parse !== undefined ) {\r\n\r\n\t\t\treturn trackType.parse( json );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// by default, we asssume a constructor compatible with the base\r\n\t\t\treturn new trackType(\r\n\t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoJSON: function( track ) {\r\n\r\n\t\tvar trackType = track.constructor;\r\n\r\n\t\tvar json;\r\n\r\n\t\t// derived classes can define a static toJSON method\r\n\t\tif ( trackType.toJSON !== undefined ) {\r\n\r\n\t\t\tjson = trackType.toJSON( track );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// by default, we assume the data can be serialized as-is\r\n\t\t\tjson = {\r\n\r\n\t\t\t\t'name': track.name,\r\n\t\t\t\t'times': THREE.AnimationUtils.convertArray( track.times, Array ),\r\n\t\t\t\t'values': THREE.AnimationUtils.convertArray( track.values, Array )\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar interpolation = track.getInterpolation();\r\n\r\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\r\n\r\n\t\t\t\tjson.interpolation = interpolation;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tjson.type = track.ValueTypeName; // mandatory\r\n\r\n\t\treturn json;\r\n\r\n\t},\r\n\r\n\t_getTrackTypeForValueTypeName: function( typeName ) {\r\n\r\n\t\tswitch( typeName.toLowerCase() ) {\r\n\r\n\t\t\tcase \"scalar\":\r\n\t\t\tcase \"double\":\r\n\t\t\tcase \"float\":\r\n\t\t\tcase \"number\":\r\n\t\t\tcase \"integer\":\r\n\r\n\t\t\t\treturn THREE.NumberKeyframeTrack;\r\n\r\n\t\t\tcase \"vector\":\r\n\t\t\tcase \"vector2\":\r\n\t\t\tcase \"vector3\":\r\n\t\t\tcase \"vector4\":\r\n\r\n\t\t\t\treturn THREE.VectorKeyframeTrack;\r\n\r\n\t\t\tcase \"color\":\r\n\r\n\t\t\t\treturn THREE.ColorKeyframeTrack;\r\n\r\n\t\t\tcase \"quaternion\":\r\n\r\n\t\t\t\treturn THREE.QuaternionKeyframeTrack;\r\n\r\n\t\t\tcase \"bool\":\r\n\t\t\tcase \"boolean\":\r\n\r\n\t\t\t\treturn THREE.BooleanKeyframeTrack;\r\n\r\n\t\t\tcase \"string\":\r\n\r\n\t\t\t\treturn THREE.StringKeyframeTrack;\r\n\r\n\t\t};\r\n\r\n\t\tthrow new Error( \"Unsupported typeName: \" + typeName );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/animation/PropertyBinding.js\r\n\r\n/**\r\n *\r\n * A reference to a real property in the scene graph.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.PropertyBinding = function ( rootNode, path, parsedPath ) {\r\n\r\n\tthis.path = path;\r\n\tthis.parsedPath = parsedPath ||\r\n\t\t\tTHREE.PropertyBinding.parseTrackName( path );\r\n\r\n\tthis.node = THREE.PropertyBinding.findNode(\r\n\t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\r\n\r\n\tthis.rootNode = rootNode;\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.prototype = {\r\n\r\n\tconstructor: THREE.PropertyBinding,\r\n\r\n\tgetValue: function getValue_unbound( targetArray, offset ) {\r\n\r\n\t\tthis.bind();\r\n\t\tthis.getValue( targetArray, offset );\r\n\r\n\t\t// Note: This class uses a State pattern on a per-method basis:\r\n\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\r\n\t\t// prototype version of these methods with one that represents\r\n\t\t// the bound state. When the property is not found, the methods\r\n\t\t// become no-ops.\r\n\r\n\t},\r\n\r\n\tsetValue: function getValue_unbound( sourceArray, offset ) {\r\n\r\n\t\tthis.bind();\r\n\t\tthis.setValue( sourceArray, offset );\r\n\r\n\t},\r\n\r\n\t// create getter / setter pair for a property in the scene graph\r\n\tbind: function() {\r\n\r\n\t\tvar targetObject = this.node,\r\n\t\t\tparsedPath = this.parsedPath,\r\n\r\n\t\t\tobjectName = parsedPath.objectName,\r\n\t\t\tpropertyName = parsedPath.propertyName,\r\n\t\t\tpropertyIndex = parsedPath.propertyIndex;\r\n\r\n\t\tif ( ! targetObject ) {\r\n\r\n\t\t\ttargetObject = THREE.PropertyBinding.findNode(\r\n\t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\r\n\r\n\t\t\tthis.node = targetObject;\r\n\r\n\t\t}\r\n\r\n\t\t// set fail state so we can just 'return' on error\r\n\t\tthis.getValue = this._getValue_unavailable;\r\n\t\tthis.setValue = this._setValue_unavailable;\r\n\r\n \t\t// ensure there is a value node\r\n\t\tif ( ! targetObject ) {\r\n\r\n\t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif( objectName ) {\r\n\r\n\t\t\tvar objectIndex = parsedPath.objectIndex;\r\n\r\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\r\n\t\t\tswitch ( objectName ) {\r\n\r\n\t\t\t\tcase 'materials':\r\n\r\n\t\t\t\t\tif( ! targetObject.material ) {\r\n\r\n\t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif( ! targetObject.material.materials ) {\r\n\r\n\t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttargetObject = targetObject.material.materials;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'bones':\r\n\r\n\t\t\t\t\tif( ! targetObject.skeleton ) {\r\n\r\n\t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\r\n\t\t\t\t\t// and convert the integer string to a true integer.\r\n\r\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\r\n\r\n\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tif ( targetObject[i].name === objectIndex ) {\r\n\r\n\t\t\t\t\t\t\tobjectIndex = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( objectIndex !== undefined ) {\r\n\r\n\t\t\t\tif( targetObject[ objectIndex ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// resolve property\r\n\t\tvar nodeProperty = targetObject[ propertyName ];\r\n\r\n\t\tif ( ! nodeProperty ) {\r\n\r\n\t\t\tvar nodeName = parsedPath.nodeName;\r\n\r\n\t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\r\n\t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// determine versioning scheme\r\n\t\tvar versioning = this.Versioning.None;\r\n\r\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\r\n\r\n\t\t\tversioning = this.Versioning.NeedsUpdate;\r\n\t\t\tthis.targetObject = targetObject;\r\n\r\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\r\n\r\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\r\n\t\t\tthis.targetObject = targetObject;\r\n\r\n\t\t}\r\n\r\n\t\t// determine how the property gets bound\r\n\t\tvar bindingType = this.BindingType.Direct;\r\n\r\n\t\tif ( propertyIndex !== undefined ) {\r\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\r\n\r\n\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\r\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\r\n\r\n\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\tif ( ! targetObject.geometry ) {\r\n\r\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\r\n\r\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\r\n\r\n\t\t\t\t\tif ( targetObject.geometry.morphTargets[i].name === propertyIndex ) {\r\n\r\n\t\t\t\t\t\tpropertyIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbindingType = this.BindingType.ArrayElement;\r\n\r\n\t\t\tthis.resolvedProperty = nodeProperty;\r\n\t\t\tthis.propertyIndex = propertyIndex;\r\n\r\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\r\n\t\t\t// must use copy for Object3D.Euler/Quaternion\r\n\r\n\t\t\tbindingType = this.BindingType.HasFromToArray;\r\n\r\n\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t} else if ( nodeProperty.length !== undefined ) {\r\n\r\n\t\t\tbindingType = this.BindingType.EntireArray;\r\n\r\n\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.propertyName = propertyName;\r\n\r\n\t\t}\r\n\r\n\t\t// select getter / setter\r\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\r\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\r\n\r\n\t},\r\n\r\n\tunbind: function() {\r\n\r\n\t\tthis.node = null;\r\n\r\n\t\t// back to the prototype version of getValue / setValue\r\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\r\n\t\tthis.getValue = this._getValue_unbound;\r\n\t\tthis.setValue = this._setValue_unbound;\r\n\r\n\t}\r\n\r\n};\r\n\r\nObject.assign( THREE.PropertyBinding.prototype, { // prototype, continued\r\n\r\n\t// these are used to \"bind\" a nonexistent property\r\n\t_getValue_unavailable: function() {},\r\n\t_setValue_unavailable: function() {},\r\n\r\n\t// initial state of these methods that calls 'bind'\r\n\t_getValue_unbound: THREE.PropertyBinding.prototype.getValue,\r\n\t_setValue_unbound: THREE.PropertyBinding.prototype.setValue,\r\n\r\n\tBindingType: {\r\n\t\tDirect: 0,\r\n\t\tEntireArray: 1,\r\n\t\tArrayElement: 2,\r\n\t\tHasFromToArray: 3\r\n\t},\r\n\r\n\tVersioning: {\r\n\t\tNone: 0,\r\n\t\tNeedsUpdate: 1,\r\n\t\tMatrixWorldNeedsUpdate: 2\r\n\t},\r\n\r\n\tGetterByBindingType: [\r\n\r\n\t\tfunction getValue_direct( buffer, offset ) {\r\n\r\n\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\r\n\r\n\t\t},\r\n\r\n\t\tfunction getValue_array( buffer, offset ) {\r\n\r\n\t\t\tvar source = this.resolvedProperty;\r\n\r\n\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tbuffer[ offset ++ ] = source[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tfunction getValue_arrayElement( buffer, offset ) {\r\n\r\n\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\r\n\r\n\t\t},\r\n\r\n\t\tfunction getValue_toArray( buffer, offset ) {\r\n\r\n\t\t\tthis.resolvedProperty.toArray( buffer, offset );\r\n\r\n\t\t}\r\n\r\n\t],\r\n\r\n\tSetterByBindingTypeAndVersioning: [\r\n\r\n\t\t[\r\n\t\t\t// Direct\r\n\r\n\t\t\tfunction setValue_direct( buffer, offset ) {\r\n\r\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t], [\r\n\r\n\t\t\t// EntireArray\r\n\r\n\t\t\tfunction setValue_array( buffer, offset ) {\r\n\r\n\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t], [\r\n\r\n\t\t\t// ArrayElement\r\n\r\n\t\t\tfunction setValue_arrayElement( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t], [\r\n\r\n\t\t\t// HasToFromArray\r\n\r\n\t\t\tfunction setValue_fromArray( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t]\r\n\r\n\t]\r\n\r\n} );\r\n\r\nTHREE.PropertyBinding.Composite =\r\n\t\tfunction( targetGroup, path, optionalParsedPath ) {\r\n\r\n\tvar parsedPath = optionalParsedPath ||\r\n\t\t\tTHREE.PropertyBinding.parseTrackName( path );\r\n\r\n\tthis._targetGroup = targetGroup;\r\n\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.Composite.prototype = {\r\n\r\n\tconstructor: THREE.PropertyBinding.Composite,\r\n\r\n\tgetValue: function( array, offset ) {\r\n\r\n\t\tthis.bind(); // bind all binding\r\n\r\n\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\r\n\t\t\tbinding = this._bindings[ firstValidIndex ];\r\n\r\n\t\t// and only call .getValue on the first\r\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\r\n\r\n\t},\r\n\r\n\tsetValue: function( array, offset ) {\r\n\r\n\t\tvar bindings = this._bindings;\r\n\r\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\r\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].setValue( array, offset );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tbind: function() {\r\n\r\n\t\tvar bindings = this._bindings;\r\n\r\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\r\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].bind();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tunbind: function() {\r\n\r\n\t\tvar bindings = this._bindings;\r\n\r\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\r\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].unbind();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.create = function( root, path, parsedPath ) {\r\n\r\n\tif ( ! ( root instanceof THREE.AnimationObjectGroup ) ) {\r\n\r\n\t\treturn new THREE.PropertyBinding( root, path, parsedPath );\r\n\r\n\t} else {\r\n\r\n\t\treturn new THREE.PropertyBinding.Composite( root, path, parsedPath );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.parseTrackName = function( trackName ) {\r\n\r\n\t// matches strings in the form of:\r\n\t//    nodeName.property\r\n\t//    nodeName.property[accessor]\r\n\t//    nodeName.material.property[accessor]\r\n\t//    uuid.property[accessor]\r\n\t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\r\n\t//    parentName/nodeName.property\r\n\t//    parentName/parentName/nodeName.property[index]\r\n\t//\t  .bone[Armature.DEF_cog].position\r\n\t// created and tested via https://regex101.com/#javascript\r\n\r\n\tvar re = /^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_.:\\- ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/;\r\n\tvar matches = re.exec(trackName);\r\n\r\n\tif( ! matches ) {\r\n\t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\r\n\t}\r\n\r\n    if (matches.index === re.lastIndex) {\r\n        re.lastIndex++;\r\n    }\r\n\r\n\tvar results = {\r\n\t\t// directoryName: matches[1], // (tschw) currently unused\r\n\t\tnodeName: matches[3], \t// allowed to be null, specified root node.\r\n\t\tobjectName: matches[5],\r\n\t\tobjectIndex: matches[7],\r\n\t\tpropertyName: matches[9],\r\n\t\tpropertyIndex: matches[11]\t// allowed to be null, specifies that the whole property is set.\r\n\t};\r\n\r\n\tif( results.propertyName === null || results.propertyName.length === 0 ) {\r\n\t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\r\n\t}\r\n\r\n\treturn results;\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.findNode = function( root, nodeName ) {\r\n\r\n\tif( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\r\n\r\n\t\treturn root;\r\n\r\n\t}\r\n\r\n\t// search into skeleton bones.\r\n\tif( root.skeleton ) {\r\n\r\n\t\tvar searchSkeleton = function( skeleton ) {\r\n\r\n\t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\r\n\r\n\t\t\t\tvar bone = skeleton.bones[i];\r\n\r\n\t\t\t\tif( bone.name === nodeName ) {\r\n\r\n\t\t\t\t\treturn bone;\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t};\r\n\r\n\t\tvar bone = searchSkeleton( root.skeleton );\r\n\r\n\t\tif( bone ) {\r\n\r\n\t\t\treturn bone;\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t// search into node subtree.\r\n\tif( root.children ) {\r\n\r\n\t\tvar searchNodeSubtree = function( children ) {\r\n\r\n\t\t\tfor( var i = 0; i < children.length; i ++ ) {\r\n\r\n\t\t\t\tvar childNode = children[i];\r\n\r\n\t\t\t\tif( childNode.name === nodeName || childNode.uuid === nodeName ) {\r\n\r\n\t\t\t\t\treturn childNode;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar result = searchNodeSubtree( childNode.children );\r\n\r\n\t\t\t\tif( result ) return result;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t};\r\n\r\n\t\tvar subTreeNode = searchNodeSubtree( root.children );\r\n\r\n\t\tif( subTreeNode ) {\r\n\r\n\t\t\treturn subTreeNode;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n}\r\n\r\n// File:src/animation/PropertyMixer.js\r\n\r\n/**\r\n *\r\n * Buffered scene graph property that allows weighted accumulation.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.PropertyMixer = function ( binding, typeName, valueSize ) {\r\n\r\n\tthis.binding = binding;\r\n\tthis.valueSize = valueSize;\r\n\r\n\tvar bufferType = Float64Array,\r\n\t\tmixFunction;\r\n\r\n\tswitch ( typeName ) {\r\n\r\n\t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\r\n\r\n\t\tcase 'string':\r\n\t\tcase 'bool':\r\n\r\n\t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\r\n\r\n\t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\r\n\r\n\t}\r\n\r\n\tthis.buffer = new bufferType( valueSize * 4 );\r\n\t// layout: [ incoming | accu0 | accu1 | orig ]\r\n\t//\r\n\t// interpolators can use .buffer as their .result\r\n\t// the data then goes to 'incoming'\r\n\t//\r\n\t// 'accu0' and 'accu1' are used frame-interleaved for\r\n\t// the cumulative result and are compared to detect\r\n\t// changes\r\n\t//\r\n\t// 'orig' stores the original state of the property\r\n\r\n\tthis._mixBufferRegion = mixFunction;\r\n\r\n\tthis.cumulativeWeight = 0;\r\n\r\n\tthis.useCount = 0;\r\n\tthis.referenceCount = 0;\r\n\r\n};\r\n\r\nTHREE.PropertyMixer.prototype = {\r\n\r\n\tconstructor: THREE.PropertyMixer,\r\n\r\n\t// accumulate data in the 'incoming' region into 'accu<i>'\r\n\taccumulate: function( accuIndex, weight ) {\r\n\r\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\r\n\t\t// the weight and shouldn't have made the call in the first place\r\n\r\n\t\tvar buffer = this.buffer,\r\n\t\t\tstride = this.valueSize,\r\n\t\t\toffset = accuIndex * stride + stride,\r\n\r\n\t\t\tcurrentWeight = this.cumulativeWeight;\r\n\r\n\t\tif ( currentWeight === 0 ) {\r\n\r\n\t\t\t// accuN := incoming * weight\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentWeight = weight;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// accuN := accuN + incoming * weight\r\n\r\n\t\t\tcurrentWeight += weight;\r\n\t\t\tvar mix = weight / currentWeight;\r\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\r\n\r\n\t\t}\r\n\r\n\t\tthis.cumulativeWeight = currentWeight;\r\n\r\n\t},\r\n\r\n\t// apply the state of 'accu<i>' to the binding when accus differ\r\n\tapply: function( accuIndex ) {\r\n\r\n\t\tvar stride = this.valueSize,\r\n\t\t\tbuffer = this.buffer,\r\n\t\t\toffset = accuIndex * stride + stride,\r\n\r\n\t\t\tweight = this.cumulativeWeight,\r\n\r\n\t\t\tbinding = this.binding;\r\n\r\n\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\tif ( weight < 1 ) {\r\n\r\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\r\n\r\n\t\t\tvar originalValueOffset = stride * 3;\r\n\r\n\t\t\tthis._mixBufferRegion(\r\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\r\n\r\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\r\n\r\n\t\t\t\t// value has changed -> update scene graph\r\n\r\n\t\t\t\tbinding.setValue( buffer, offset );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// remember the state of the bound property and copy it to both accus\r\n\tsaveOriginalState: function() {\r\n\r\n\t\tvar binding = this.binding;\r\n\r\n\t\tvar buffer = this.buffer,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\toriginalValueOffset = stride * 3;\r\n\r\n\t\tbinding.getValue( buffer, originalValueOffset );\r\n\r\n\t\t// accu[0..1] := orig -- initially detect changes against the original\r\n\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\r\n\r\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\r\n\r\n\t\t}\r\n\r\n\t\tthis.cumulativeWeight = 0;\r\n\r\n\t},\r\n\r\n\t// apply the state previously taken via 'saveOriginalState' to the binding\r\n\trestoreOriginalState: function() {\r\n\r\n\t\tvar originalValueOffset = this.valueSize * 3;\r\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\r\n\r\n\t},\r\n\r\n\r\n\t// mix functions\r\n\r\n\t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\tif ( t >= 0.5 ) {\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\tTHREE.Quaternion.slerpFlat( buffer, dstOffset,\r\n\t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\r\n\r\n\t},\r\n\r\n\t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\tvar s = 1 - t;\r\n\r\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tvar j = dstOffset + i;\r\n\r\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/animation/tracks/BooleanKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track of Boolean keyframe values.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.BooleanKeyframeTrack = function ( name, times, values ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values );\r\n\r\n};\r\n\r\nTHREE.BooleanKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.BooleanKeyframeTrack,\r\n\r\n\tValueTypeName: 'bool',\r\n\tValueBufferType: Array,\r\n\r\n\tDefaultInterpolation: THREE.IntepolateDiscrete,\r\n\r\n\tInterpolantFactoryMethodLinear: undefined,\r\n\tInterpolantFactoryMethodSmooth: undefined\r\n\r\n\t// Note: Actually this track could have a optimized / compressed\r\n\t// representation of a single value and a custom interpolant that\r\n\t// computes \"firstValue ^ isOdd( index )\".\r\n\r\n} );\r\n\r\n// File:src/animation/tracks/NumberKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track of numeric keyframe values.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.NumberKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n};\r\n\r\nTHREE.NumberKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.NumberKeyframeTrack,\r\n\r\n\tValueTypeName: 'number',\r\n\r\n\t// ValueBufferType is inherited\r\n\r\n\t// DefaultInterpolation is inherited\r\n\r\n} );\r\n\r\n// File:src/animation/tracks/QuaternionKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track of quaternion keyframe values.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.QuaternionKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n};\r\n\r\nTHREE.QuaternionKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.QuaternionKeyframeTrack,\r\n\r\n\tValueTypeName: 'quaternion',\r\n\r\n\t// ValueBufferType is inherited\r\n\r\n\tDefaultInterpolation: THREE.InterpolateLinear,\r\n\r\n\tInterpolantFactoryMethodLinear: function( result ) {\r\n\r\n\t\treturn new THREE.QuaternionLinearInterpolant(\r\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\r\n\t},\r\n\r\n\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\r\n\r\n} );\r\n\r\n// File:src/animation/tracks/StringKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track that interpolates Strings\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.StringKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n};\r\n\r\nTHREE.StringKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.StringKeyframeTrack,\r\n\r\n\tValueTypeName: 'string',\r\n\tValueBufferType: Array,\r\n\r\n\tDefaultInterpolation: THREE.IntepolateDiscrete,\r\n\r\n\tInterpolantFactoryMethodLinear: undefined,\r\n\r\n\tInterpolantFactoryMethodSmooth: undefined\r\n\r\n} );\r\n\r\n// File:src/animation/tracks/VectorKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track of vectored keyframe values.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.VectorKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n};\r\n\r\nTHREE.VectorKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.VectorKeyframeTrack,\r\n\r\n\tValueTypeName: 'vector'\r\n\r\n\t// ValueBufferType is inherited\r\n\r\n\t// DefaultInterpolation is inherited\r\n\r\n} );\r\n\r\n// File:src/audio/Audio.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Audio = function ( listener ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Audio';\r\n\r\n\tthis.context = listener.context;\r\n\tthis.source = this.context.createBufferSource();\r\n\tthis.source.onended = this.onEnded.bind( this );\r\n\r\n\tthis.gain = this.context.createGain();\r\n\tthis.gain.connect( listener.getInput() );\r\n\r\n\tthis.autoplay = false;\r\n\r\n\tthis.startTime = 0;\r\n\tthis.playbackRate = 1;\r\n\tthis.isPlaying = false;\r\n\tthis.hasPlaybackControl = true;\r\n\tthis.sourceType = 'empty';\r\n\r\n\tthis.filter = null;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Audio.prototype.constructor = THREE.Audio;\r\n\r\nTHREE.Audio.prototype.getOutput = function () {\r\n\r\n\treturn this.gain;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.load = function ( file ) {\r\n\r\n\tvar buffer = new THREE.AudioBuffer( this.context );\r\n\tbuffer.load( file );\r\n\r\n\tthis.setBuffer( buffer );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.setNodeSource = function ( audioNode ) {\r\n\r\n\tthis.hasPlaybackControl = false;\r\n\tthis.sourceType = 'audioNode';\r\n\tthis.source = audioNode;\r\n\tthis.connect();\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.setBuffer = function ( audioBuffer ) {\r\n\r\n\tvar scope = this;\r\n\r\n\taudioBuffer.onReady( function( buffer ) {\r\n\r\n\t\tscope.source.buffer = buffer;\r\n\t\tscope.sourceType = 'buffer';\r\n\t\tif ( scope.autoplay ) scope.play();\r\n\r\n\t} );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.play = function () {\r\n\r\n\tif ( this.isPlaying === true ) {\r\n\r\n\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tvar source = this.context.createBufferSource();\r\n\r\n\tsource.buffer = this.source.buffer;\r\n\tsource.loop = this.source.loop;\r\n\tsource.onended = this.source.onended;\r\n\tsource.start( 0, this.startTime );\r\n\tsource.playbackRate.value = this.playbackRate;\r\n\r\n\tthis.isPlaying = true;\r\n\r\n\tthis.source = source;\r\n\r\n\tthis.connect();\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.pause = function () {\r\n\r\n\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tthis.source.stop();\r\n\tthis.startTime = this.context.currentTime;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.stop = function () {\r\n\r\n\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tthis.source.stop();\r\n\tthis.startTime = 0;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.connect = function () {\r\n\r\n\tif ( this.filter !== null ) {\r\n\r\n\t\tthis.source.connect( this.filter );\r\n\t\tthis.filter.connect( this.getOutput() );\r\n\r\n\t} else {\r\n\r\n\t\tthis.source.connect( this.getOutput() );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.disconnect = function () {\r\n\r\n\tif ( this.filter !== null ) {\r\n\r\n\t\tthis.source.disconnect( this.filter );\r\n\t\tthis.filter.disconnect( this.getOutput() );\r\n\r\n\t} else {\r\n\r\n\t\tthis.source.disconnect( this.getOutput() );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.getFilter = function () {\r\n\r\n\treturn this.filter;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.setFilter = function ( value ) {\r\n\r\n\tif ( value === undefined ) value = null;\r\n\r\n\tif ( this.isPlaying === true ) {\r\n\r\n\t\tthis.disconnect();\r\n\t\tthis.filter = value;\r\n\t\tthis.connect();\r\n\r\n\t} else {\r\n\r\n\t\tthis.filter = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.setPlaybackRate = function ( value ) {\r\n\r\n\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tthis.playbackRate = value;\r\n\r\n\tif ( this.isPlaying === true ) {\r\n\r\n\t\tthis.source.playbackRate.value = this.playbackRate;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.getPlaybackRate = function () {\r\n\r\n\treturn this.playbackRate;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.onEnded = function() {\r\n\r\n\tthis.isPlaying = false;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.setLoop = function ( value ) {\r\n\r\n\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tthis.source.loop = value;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.getLoop = function () {\r\n\r\n\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\treturn this.source.loop;\r\n\r\n};\r\n\r\n\r\nTHREE.Audio.prototype.setVolume = function ( value ) {\r\n\r\n\tthis.gain.gain.value = value;\r\n\r\n};\r\n\r\nTHREE.Audio.prototype.getVolume = function () {\r\n\r\n\treturn this.gain.gain.value;\r\n\r\n};\r\n\r\n// File:src/audio/AudioAnalyser.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AudioAnalyser = function ( audio, fftSize ) {\r\n\r\n\tthis.analyser = audio.context.createAnalyser();\r\n\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\r\n\r\n\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\r\n\r\n\taudio.getOutput().connect( this.analyser );\r\n\r\n};\r\n\r\nTHREE.AudioAnalyser.prototype = {\r\n\r\n\tconstructor: THREE.AudioAnalyser,\r\n\r\n\tgetData: function () {\r\n\r\n\t\tthis.analyser.getByteFrequencyData( this.data );\r\n\t\treturn this.data;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/audio/AudioBuffer.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AudioBuffer = function ( context ) {\r\n\r\n\tthis.context = context;\r\n\tthis.ready = false;\r\n\tthis.readyCallbacks = [];\r\n\r\n};\r\n\r\nTHREE.AudioBuffer.prototype.load = function ( file ) {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar request = new XMLHttpRequest();\r\n\trequest.open( 'GET', file, true );\r\n\trequest.responseType = 'arraybuffer';\r\n\trequest.onload = function ( e ) {\r\n\r\n\t\tscope.context.decodeAudioData( this.response, function ( buffer ) {\r\n\r\n\t\t\tscope.buffer = buffer;\r\n\t\t\tscope.ready = true;\r\n\r\n\t\t\tfor ( var i = 0; i < scope.readyCallbacks.length; i ++ ) {\r\n\r\n\t\t\t\tscope.readyCallbacks[ i ]( scope.buffer );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tscope.readyCallbacks = [];\r\n\r\n\t\t} );\r\n\r\n\t};\r\n\trequest.send();\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.AudioBuffer.prototype.onReady = function ( callback ) {\r\n\r\n\tif ( this.ready ) {\r\n\r\n\t\tcallback( this.buffer );\r\n\r\n\t} else {\r\n\r\n\t\tthis.readyCallbacks.push( callback );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/audio/PositionalAudio.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.PositionalAudio = function ( listener ) {\r\n\r\n\tTHREE.Audio.call( this, listener );\r\n\r\n\tthis.panner = this.context.createPanner();\r\n\tthis.panner.connect( this.gain );\r\n\r\n};\r\n\r\nTHREE.PositionalAudio.prototype = Object.create( THREE.Audio.prototype );\r\nTHREE.PositionalAudio.prototype.constructor = THREE.PositionalAudio;\r\n\r\nTHREE.PositionalAudio.prototype.getOutput = function () {\r\n\r\n\treturn this.panner;\r\n\r\n};\r\n\r\nTHREE.PositionalAudio.prototype.setRefDistance = function ( value ) {\r\n\r\n\tthis.panner.refDistance = value;\r\n\r\n};\r\n\r\nTHREE.PositionalAudio.prototype.getRefDistance = function () {\r\n\r\n\treturn this.panner.refDistance;\r\n\r\n};\r\n\r\nTHREE.PositionalAudio.prototype.setRolloffFactor = function ( value ) {\r\n\r\n\tthis.panner.rolloffFactor = value;\r\n\r\n};\r\n\r\nTHREE.PositionalAudio.prototype.getRolloffFactor = function () {\r\n\r\n\treturn this.panner.rolloffFactor;\r\n\r\n};\r\n\r\nTHREE.PositionalAudio.prototype.setDistanceModel = function ( value ) {\r\n\r\n\tthis.panner.distanceModel = value;\r\n\r\n};\r\n\r\nTHREE.PositionalAudio.prototype.getDistanceModel = function () {\r\n\r\n\treturn this.panner.distanceModel;\r\n\r\n};\r\n\r\nTHREE.PositionalAudio.prototype.setMaxDistance = function ( value ) {\r\n\r\n\tthis.panner.maxDistance = value;\r\n\r\n};\r\n\r\nTHREE.PositionalAudio.prototype.getMaxDistance = function () {\r\n\r\n\treturn this.panner.maxDistance;\r\n\r\n};\r\n\r\nTHREE.PositionalAudio.prototype.updateMatrixWorld = ( function () {\r\n\r\n\tvar position = new THREE.Vector3();\r\n\r\n\treturn function updateMatrixWorld( force ) {\r\n\r\n\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\tposition.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\tthis.panner.setPosition( position.x, position.y, position.z );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n// File:src/audio/AudioListener.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AudioListener = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'AudioListener';\r\n\r\n\tthis.context = new ( window.AudioContext || window.webkitAudioContext )();\r\n\r\n\tthis.gain = this.context.createGain();\r\n\tthis.gain.connect( this.context.destination );\r\n\r\n\tthis.filter = null;\r\n\r\n};\r\n\r\nTHREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.AudioListener.prototype.constructor = THREE.AudioListener;\r\n\r\nTHREE.AudioListener.prototype.getInput = function () {\r\n\r\n\treturn this.gain;\r\n\r\n};\r\n\r\nTHREE.AudioListener.prototype.removeFilter = function ( ) {\r\n\r\n\tif ( this.filter !== null ) {\r\n\r\n\t\tthis.gain.disconnect( this.filter );\r\n\t\tthis.filter.disconnect( this.context.destination );\r\n\t\tthis.gain.connect( this.context.destination );\r\n\t\tthis.filter = null;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.AudioListener.prototype.setFilter = function ( value ) {\r\n\r\n\tif ( this.filter !== null ) {\r\n\r\n\t\tthis.gain.disconnect( this.filter );\r\n\t\tthis.filter.disconnect( this.context.destination );\r\n\r\n\t} else {\r\n\r\n\t\tthis.gain.disconnect( this.context.destination );\r\n\r\n\t}\r\n\r\n\tthis.filter = value;\r\n\tthis.gain.connect( this.filter );\r\n\tthis.filter.connect( this.context.destination );\r\n\r\n};\r\n\r\nTHREE.AudioListener.prototype.getFilter = function () {\r\n\r\n\treturn this.filter;\r\n\r\n};\r\n\r\nTHREE.AudioListener.prototype.setMasterVolume = function ( value ) {\r\n\r\n\tthis.gain.gain.value = value;\r\n\r\n};\r\n\r\nTHREE.AudioListener.prototype.getMasterVolume = function () {\r\n\r\n\treturn this.gain.gain.value;\r\n\r\n};\r\n\r\n\r\nTHREE.AudioListener.prototype.updateMatrixWorld = ( function () {\r\n\r\n\tvar position = new THREE.Vector3();\r\n\tvar quaternion = new THREE.Quaternion();\r\n\tvar scale = new THREE.Vector3();\r\n\r\n\tvar orientation = new THREE.Vector3();\r\n\r\n\treturn function updateMatrixWorld( force ) {\r\n\r\n\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\tvar listener = this.context.listener;\r\n\t\tvar up = this.up;\r\n\r\n\t\tthis.matrixWorld.decompose( position, quaternion, scale );\r\n\r\n\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\r\n\r\n\t\tlistener.setPosition( position.x, position.y, position.z );\r\n\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n// File:src/cameras/Camera.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.Camera = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Camera';\r\n\r\n\tthis.matrixWorldInverse = new THREE.Matrix4();\r\n\tthis.projectionMatrix = new THREE.Matrix4();\r\n\r\n};\r\n\r\nTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Camera.prototype.constructor = THREE.Camera;\r\n\r\nTHREE.Camera.prototype.getWorldDirection = function () {\r\n\r\n\tvar quaternion = new THREE.Quaternion();\r\n\r\n\treturn function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tthis.getWorldQuaternion( quaternion );\r\n\r\n\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Camera.prototype.lookAt = function () {\r\n\r\n\t// This routine does not support cameras with rotated and/or translated parent(s)\r\n\r\n\tvar m1 = new THREE.Matrix4();\r\n\r\n\treturn function ( vector ) {\r\n\r\n\t\tm1.lookAt( this.position, vector, this.up );\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( m1 );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Camera.prototype.clone = function () {\r\n\r\n\treturn new this.constructor().copy( this );\r\n\r\n};\r\n\r\nTHREE.Camera.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\r\n\tthis.projectionMatrix.copy( source.projectionMatrix );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/cameras/CubeCamera.js\r\n\r\n/**\r\n * Camera for rendering cube maps\r\n *\t- renders scene into axis-aligned cube\r\n *\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.CubeCamera = function ( near, far, cubeResolution ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'CubeCamera';\r\n\r\n\tvar fov = 90, aspect = 1;\r\n\r\n\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPX.up.set( 0, - 1, 0 );\r\n\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\r\n\tthis.add( cameraPX );\r\n\r\n\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNX.up.set( 0, - 1, 0 );\r\n\tcameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );\r\n\tthis.add( cameraNX );\r\n\r\n\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPY.up.set( 0, 0, 1 );\r\n\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\r\n\tthis.add( cameraPY );\r\n\r\n\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNY.up.set( 0, 0, - 1 );\r\n\tcameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );\r\n\tthis.add( cameraNY );\r\n\r\n\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPZ.up.set( 0, - 1, 0 );\r\n\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\r\n\tthis.add( cameraPZ );\r\n\r\n\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNZ.up.set( 0, - 1, 0 );\r\n\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );\r\n\tthis.add( cameraNZ );\r\n\r\n\tvar options = { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter };\r\n\r\n\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\r\n\r\n\tthis.updateCubeMap = function ( renderer, scene ) {\r\n\r\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\r\n\r\n\t\tvar renderTarget = this.renderTarget;\r\n\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\r\n\r\n\t\trenderTarget.texture.generateMipmaps = false;\r\n\r\n\t\trenderTarget.activeCubeFace = 0;\r\n\t\trenderer.render( scene, cameraPX, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 1;\r\n\t\trenderer.render( scene, cameraNX, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 2;\r\n\t\trenderer.render( scene, cameraPY, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 3;\r\n\t\trenderer.render( scene, cameraNY, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 4;\r\n\t\trenderer.render( scene, cameraPZ, renderTarget );\r\n\r\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\r\n\r\n\t\trenderTarget.activeCubeFace = 5;\r\n\t\trenderer.render( scene, cameraNZ, renderTarget );\r\n\r\n\t\trenderer.setRenderTarget( null );\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.CubeCamera.prototype.constructor = THREE.CubeCamera;\r\n\r\n// File:src/cameras/OrthographicCamera.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.type = 'OrthographicCamera';\r\n\r\n\tthis.zoom = 1;\r\n\r\n\tthis.left = left;\r\n\tthis.right = right;\r\n\tthis.top = top;\r\n\tthis.bottom = bottom;\r\n\r\n\tthis.near = ( near !== undefined ) ? near : 0.1;\r\n\tthis.far = ( far !== undefined ) ? far : 2000;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\nTHREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );\r\nTHREE.OrthographicCamera.prototype.constructor = THREE.OrthographicCamera;\r\n\r\nTHREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {\r\n\r\n\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\r\n\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\r\n\tvar cx = ( this.right + this.left ) / 2;\r\n\tvar cy = ( this.top + this.bottom ) / 2;\r\n\r\n\tthis.projectionMatrix.makeOrthographic( cx - dx, cx + dx, cy + dy, cy - dy, this.near, this.far );\r\n\r\n};\r\n\r\nTHREE.OrthographicCamera.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Camera.prototype.copy.call( this, source );\r\n\r\n\tthis.left = source.left;\r\n\tthis.right = source.right;\r\n\tthis.top = source.top;\r\n\tthis.bottom = source.bottom;\r\n\tthis.near = source.near;\r\n\tthis.far = source.far;\r\n\r\n\tthis.zoom = source.zoom;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.OrthographicCamera.prototype.toJSON = function ( meta ) {\r\n\r\n\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\tdata.object.zoom = this.zoom;\r\n\tdata.object.left = this.left;\r\n\tdata.object.right = this.right;\r\n\tdata.object.top = this.top;\r\n\tdata.object.bottom = this.bottom;\r\n\tdata.object.near = this.near;\r\n\tdata.object.far = this.far;\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\n// File:src/cameras/PerspectiveCamera.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author greggman / http://games.greggman.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.PerspectiveCamera = function ( fov, aspect, near, far ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.type = 'PerspectiveCamera';\r\n\r\n\tthis.focalLength = 10;\r\n\tthis.zoom = 1;\r\n\r\n\tthis.fov = fov !== undefined ? fov : 50;\r\n\tthis.aspect = aspect !== undefined ? aspect : 1;\r\n\tthis.near = near !== undefined ? near : 0.1;\r\n\tthis.far = far !== undefined ? far : 2000;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\nTHREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );\r\nTHREE.PerspectiveCamera.prototype.constructor = THREE.PerspectiveCamera;\r\n\r\n\r\n/**\r\n * Uses Focal Length (in mm) to estimate and set FOV\r\n * 35mm (full-frame) camera is used if frame size is not specified;\r\n * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html\r\n */\r\n\r\nTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {\r\n\r\n\tif ( frameHeight === undefined ) frameHeight = 24;\r\n\r\n\tthis.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\n\r\n/**\r\n * Sets an offset in a larger frustum. This is useful for multi-window or\r\n * multi-monitor/multi-machine setups.\r\n *\r\n * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n * the monitors are in grid like this\r\n *\r\n *   +---+---+---+\r\n *   | A | B | C |\r\n *   +---+---+---+\r\n *   | D | E | F |\r\n *   +---+---+---+\r\n *\r\n * then for each monitor you would call it like this\r\n *\r\n *   var w = 1920;\r\n *   var h = 1080;\r\n *   var fullWidth = w * 3;\r\n *   var fullHeight = h * 2;\r\n *\r\n *   --A--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n *   --B--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n *   --C--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n *   --D--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n *   --E--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n *   --F--\r\n *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n *\r\n *   Note there is no reason monitors have to be the same size or in a grid.\r\n */\r\n\r\nTHREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\tthis.fullWidth = fullWidth;\r\n\tthis.fullHeight = fullHeight;\r\n\tthis.x = x;\r\n\tthis.y = y;\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\n\r\nTHREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {\r\n\r\n\tvar fov = THREE.Math.radToDeg( 2 * Math.atan( Math.tan( THREE.Math.degToRad( this.fov ) * 0.5 ) / this.zoom ) );\r\n\r\n\tif ( this.fullWidth ) {\r\n\r\n\t\tvar aspect = this.fullWidth / this.fullHeight;\r\n\t\tvar top = Math.tan( THREE.Math.degToRad( fov * 0.5 ) ) * this.near;\r\n\t\tvar bottom = - top;\r\n\t\tvar left = aspect * bottom;\r\n\t\tvar right = aspect * top;\r\n\t\tvar width = Math.abs( right - left );\r\n\t\tvar height = Math.abs( top - bottom );\r\n\r\n\t\tthis.projectionMatrix.makeFrustum(\r\n\t\t\tleft + this.x * width / this.fullWidth,\r\n\t\t\tleft + ( this.x + this.width ) * width / this.fullWidth,\r\n\t\t\ttop - ( this.y + this.height ) * height / this.fullHeight,\r\n\t\t\ttop - this.y * height / this.fullHeight,\r\n\t\t\tthis.near,\r\n\t\t\tthis.far\r\n\t\t);\r\n\r\n\t} else {\r\n\r\n\t\tthis.projectionMatrix.makePerspective( fov, this.aspect, this.near, this.far );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.PerspectiveCamera.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Camera.prototype.copy.call( this, source );\r\n\r\n\tthis.focalLength = source.focalLength;\r\n\tthis.zoom = source.zoom;\r\n\r\n\tthis.fov = source.fov;\r\n\tthis.aspect = source.aspect;\r\n\tthis.near = source.near;\r\n\tthis.far = source.far;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.PerspectiveCamera.prototype.toJSON = function ( meta ) {\r\n\r\n\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\tdata.object.focalLength = this.focalLength;\r\n\tdata.object.zoom = this.zoom;\r\n\r\n\tdata.object.fov = this.fov;\r\n\tdata.object.aspect = this.aspect;\r\n\tdata.object.near = this.near;\r\n\tdata.object.far = this.far;\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\n// File:src/cameras/StereoCamera.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.StereoCamera = function () {\r\n\r\n\tthis.type = 'StereoCamera';\r\n\r\n\tthis.aspect = 1;\r\n\r\n\tthis.cameraL = new THREE.PerspectiveCamera();\r\n\tthis.cameraL.layers.enable( 1 );\r\n\tthis.cameraL.matrixAutoUpdate = false;\r\n\r\n\tthis.cameraR = new THREE.PerspectiveCamera();\r\n\tthis.cameraR.layers.enable( 2 );\r\n\tthis.cameraR.matrixAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.StereoCamera.prototype = {\r\n\r\n\tconstructor: THREE.StereoCamera,\r\n\r\n\tupdate: ( function () {\r\n\r\n\t\tvar focalLength, fov, aspect, near, far;\r\n\r\n\t\tvar eyeRight = new THREE.Matrix4();\r\n\t\tvar eyeLeft = new THREE.Matrix4();\r\n\r\n\t\treturn function update ( camera ) {\r\n\r\n\t\t\tvar needsUpdate = focalLength !== camera.focalLength || fov !== camera.fov ||\r\n\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\r\n\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far;\r\n\r\n\t\t\tif ( needsUpdate ) {\r\n\r\n\t\t\t\tfocalLength = camera.focalLength;\r\n\t\t\t\tfov = camera.fov;\r\n\t\t\t\taspect = camera.aspect * this.aspect;\r\n\t\t\t\tnear = camera.near;\r\n\t\t\t\tfar = camera.far;\r\n\r\n\t\t\t\t// Off-axis stereoscopic effect based on\r\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\r\n\r\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\r\n\t\t\t\tvar eyeSep = 0.064 / 2;\r\n\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focalLength;\r\n\t\t\t\tvar ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );\r\n\t\t\t\tvar xmin, xmax;\r\n\r\n\t\t\t\t// translate xOffset\r\n\r\n\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\r\n\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\r\n\r\n\t\t\t\t// for left eye\r\n\r\n\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\r\n\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\r\n\r\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\r\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\r\n\r\n\t\t\t\t// for right eye\r\n\r\n\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\r\n\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\r\n\r\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\r\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\r\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n};\r\n\r\n// File:src/lights/Light.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Light = function ( color, intensity ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Light';\r\n\r\n\tthis.color = new THREE.Color( color );\r\n\tthis.intensity = intensity !== undefined ? intensity : 1;\r\n\r\n\tthis.receiveShadow = undefined;\r\n\r\n};\r\n\r\nTHREE.Light.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Light.prototype.constructor = THREE.Light;\r\n\r\nTHREE.Light.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\tthis.intensity = source.intensity;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.Light.prototype.toJSON = function ( meta ) {\r\n\r\n\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\tdata.object.color = this.color.getHex();\r\n\tdata.object.intensity = this.intensity;\r\n\r\n\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\r\n\r\n\tif ( this.distance !== undefined ) data.object.distance = this.distance;\r\n\tif ( this.angle !== undefined ) data.object.angle = this.angle;\r\n\tif ( this.decay !== undefined ) data.object.decay = this.decay;\r\n\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\n// File:src/lights/LightShadow.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LightShadow = function ( camera ) {\r\n\r\n\tthis.camera = camera;\r\n\r\n\tthis.bias = 0;\r\n\tthis.radius = 1;\r\n\r\n\tthis.mapSize = new THREE.Vector2( 512, 512 );\r\n\r\n\tthis.map = null;\r\n\tthis.matrix = new THREE.Matrix4();\r\n\r\n};\r\n\r\nTHREE.LightShadow.prototype = {\r\n\r\n\tconstructor: THREE.LightShadow,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.camera = source.camera.clone();\r\n\r\n\t\tthis.bias = source.bias;\r\n\t\tthis.radius = source.radius;\r\n\r\n\t\tthis.mapSize.copy( source.mapSize );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/lights/AmbientLight.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AmbientLight = function ( color, intensity ) {\r\n\r\n\tTHREE.Light.call( this, color, intensity );\r\n\r\n\tthis.type = 'AmbientLight';\r\n\r\n\tthis.castShadow = undefined;\r\n\r\n};\r\n\r\nTHREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );\r\nTHREE.AmbientLight.prototype.constructor = THREE.AmbientLight;\r\n\r\n// File:src/lights/DirectionalLight.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DirectionalLight = function ( color, intensity ) {\r\n\r\n\tTHREE.Light.call( this, color, intensity );\r\n\r\n\tthis.type = 'DirectionalLight';\r\n\r\n\tthis.position.set( 0, 1, 0 );\r\n\tthis.updateMatrix();\r\n\r\n\tthis.target = new THREE.Object3D();\r\n\r\n\tthis.shadow = new THREE.LightShadow( new THREE.OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\r\n\r\n};\r\n\r\nTHREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );\r\nTHREE.DirectionalLight.prototype.constructor = THREE.DirectionalLight;\r\n\r\nTHREE.DirectionalLight.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\tthis.target = source.target.clone();\r\n\r\n\tthis.shadow = source.shadow.clone();\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/lights/HemisphereLight.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {\r\n\r\n\tTHREE.Light.call( this, skyColor, intensity );\r\n\r\n\tthis.type = 'HemisphereLight';\r\n\r\n\tthis.castShadow = undefined;\r\n\r\n\tthis.position.set( 0, 1, 0 );\r\n\tthis.updateMatrix();\r\n\r\n\tthis.groundColor = new THREE.Color( groundColor );\r\n\r\n};\r\n\r\nTHREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );\r\nTHREE.HemisphereLight.prototype.constructor = THREE.HemisphereLight;\r\n\r\nTHREE.HemisphereLight.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\tthis.groundColor.copy( source.groundColor );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/lights/PointLight.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\n\r\nTHREE.PointLight = function ( color, intensity, distance, decay ) {\r\n\r\n\tTHREE.Light.call( this, color, intensity );\r\n\r\n\tthis.type = 'PointLight';\r\n\r\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 0.5, 500 ) );\r\n\r\n};\r\n\r\nTHREE.PointLight.prototype = Object.create( THREE.Light.prototype );\r\nTHREE.PointLight.prototype.constructor = THREE.PointLight;\r\n\r\nObject.defineProperty( THREE.PointLight.prototype, \"power\", {\r\n\r\n\tget: function () {\r\n\r\n\t\t// intensity = power per solid angle.\r\n\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\treturn this.intensity * 4 * Math.PI;\r\n\r\n\t},\r\n\r\n\tset: function ( power ) {\r\n\r\n\t\t// intensity = power per solid angle.\r\n\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\tthis.intensity = power / ( 4 * Math.PI );\r\n\r\n\t}\r\n\r\n} );\r\n\r\nTHREE.PointLight.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\tthis.distance = source.distance;\r\n\tthis.decay = source.decay;\r\n\r\n\tthis.shadow = source.shadow.clone();\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/lights/SpotLight.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SpotLight = function ( color, intensity, distance, angle, penumbra, decay ) {\r\n\r\n\tTHREE.Light.call( this, color, intensity );\r\n\r\n\tthis.type = 'SpotLight';\r\n\r\n\tthis.position.set( 0, 1, 0 );\r\n\tthis.updateMatrix();\r\n\r\n\tthis.target = new THREE.Object3D();\r\n\r\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\r\n\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\r\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 50, 1, 0.5, 500 ) );\r\n\r\n};\r\n\r\nTHREE.SpotLight.prototype = Object.create( THREE.Light.prototype );\r\nTHREE.SpotLight.prototype.constructor = THREE.SpotLight;\r\n\r\nObject.defineProperty( THREE.SpotLight.prototype, \"power\", {\r\n\r\n\tget: function () {\r\n\r\n\t\t// intensity = power per solid angle.\r\n\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\treturn this.intensity * Math.PI;\r\n\r\n\t},\r\n\r\n\tset: function ( power ) {\r\n\r\n\t\t// intensity = power per solid angle.\r\n\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\tthis.intensity = power / Math.PI;\r\n\r\n\t}\r\n\r\n} );\r\n\r\nTHREE.SpotLight.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\tthis.distance = source.distance;\r\n\tthis.angle = source.angle;\r\n\tthis.penumbra = source.penumbra;\r\n\tthis.decay = source.decay;\r\n\r\n\tthis.target = source.target.clone();\r\n\r\n\tthis.shadow = source.shadow.clone();\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/loaders/Cache.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Cache = {\r\n\r\n\tenabled: false,\r\n\r\n\tfiles: {},\r\n\r\n\tadd: function ( key, file ) {\r\n\r\n\t\tif ( this.enabled === false ) return;\r\n\r\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\r\n\r\n\t\tthis.files[ key ] = file;\r\n\r\n\t},\r\n\r\n\tget: function ( key ) {\r\n\r\n\t\tif ( this.enabled === false ) return;\r\n\r\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\r\n\r\n\t\treturn this.files[ key ];\r\n\r\n\t},\r\n\r\n\tremove: function ( key ) {\r\n\r\n\t\tdelete this.files[ key ];\r\n\r\n\t},\r\n\r\n\tclear: function () {\r\n\r\n\t\tthis.files = {};\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/Loader.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Loader = function () {\r\n\r\n\tthis.onLoadStart = function () {};\r\n\tthis.onLoadProgress = function () {};\r\n\tthis.onLoadComplete = function () {};\r\n\r\n};\r\n\r\nTHREE.Loader.prototype = {\r\n\r\n\tconstructor: THREE.Loader,\r\n\r\n\tcrossOrigin: undefined,\r\n\r\n\textractUrlBase: function ( url ) {\r\n\r\n\t\tvar parts = url.split( '/' );\r\n\r\n\t\tif ( parts.length === 1 ) return './';\r\n\r\n\t\tparts.pop();\r\n\r\n\t\treturn parts.join( '/' ) + '/';\r\n\r\n\t},\r\n\r\n\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\r\n\r\n\t\tvar array = [];\r\n\r\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\r\n\r\n\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\r\n\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tcreateMaterial: ( function () {\r\n\r\n\t\tvar color, textureLoader, materialLoader;\r\n\r\n\t\treturn function ( m, texturePath, crossOrigin ) {\r\n\r\n\t\t\tif ( color === undefined ) color = new THREE.Color();\r\n\t\t\tif ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();\r\n\t\t\tif ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();\r\n\r\n\t\t\t// convert from old material format\r\n\r\n\t\t\tvar textures = {};\r\n\r\n\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\r\n\r\n\t\t\t\tvar fullPath = texturePath + path;\r\n\t\t\t\tvar loader = THREE.Loader.Handlers.get( fullPath );\r\n\r\n\t\t\t\tvar texture;\r\n\r\n\t\t\t\tif ( loader !== null ) {\r\n\r\n\t\t\t\t\ttexture = loader.load( fullPath );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\r\n\t\t\t\t\ttexture = textureLoader.load( fullPath );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( repeat !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.repeat.fromArray( repeat );\r\n\r\n\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\r\n\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.offset.fromArray( offset );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( wrap !== undefined ) {\r\n\r\n\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;\r\n\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;\r\n\r\n\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;\r\n\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( anisotropy !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.anisotropy = anisotropy;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uuid = THREE.Math.generateUUID();\r\n\r\n\t\t\t\ttextures[ uuid ] = texture;\r\n\r\n\t\t\t\treturn uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar json = {\r\n\t\t\t\tuuid: THREE.Math.generateUUID(),\r\n\t\t\t\ttype: 'MeshLambertMaterial'\r\n\t\t\t};\r\n\r\n\t\t\tfor ( var name in m ) {\r\n\r\n\t\t\t\tvar value = m[ name ];\r\n\r\n\t\t\t\tswitch ( name ) {\r\n\t\t\t\t\tcase 'DbgColor':\r\n\t\t\t\t\tcase 'DbgIndex':\r\n\t\t\t\t\tcase 'opticalDensity':\r\n\t\t\t\t\tcase 'illumination':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'DbgName':\r\n\t\t\t\t\t\tjson.name = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'blending':\r\n\t\t\t\t\t\tjson.blending = THREE[ value ];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'colorAmbient':\r\n\t\t\t\t\tcase 'mapAmbient':\r\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'colorDiffuse':\r\n\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'colorSpecular':\r\n\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'colorEmissive':\r\n\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'specularCoef':\r\n\t\t\t\t\t\tjson.shininess = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'shading':\r\n\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\r\n\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapDiffuse':\r\n\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapDiffuseRepeat':\r\n\t\t\t\t\tcase 'mapDiffuseOffset':\r\n\t\t\t\t\tcase 'mapDiffuseWrap':\r\n\t\t\t\t\tcase 'mapDiffuseAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapLight':\r\n\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapLightRepeat':\r\n\t\t\t\t\tcase 'mapLightOffset':\r\n\t\t\t\t\tcase 'mapLightWrap':\r\n\t\t\t\t\tcase 'mapLightAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAO':\r\n\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAORepeat':\r\n\t\t\t\t\tcase 'mapAOOffset':\r\n\t\t\t\t\tcase 'mapAOWrap':\r\n\t\t\t\t\tcase 'mapAOAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapBump':\r\n\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapBumpScale':\r\n\t\t\t\t\t\tjson.bumpScale = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapBumpRepeat':\r\n\t\t\t\t\tcase 'mapBumpOffset':\r\n\t\t\t\t\tcase 'mapBumpWrap':\r\n\t\t\t\t\tcase 'mapBumpAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapNormal':\r\n\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapNormalFactor':\r\n\t\t\t\t\t\tjson.normalScale = [ value, value ];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapNormalRepeat':\r\n\t\t\t\t\tcase 'mapNormalOffset':\r\n\t\t\t\t\tcase 'mapNormalWrap':\r\n\t\t\t\t\tcase 'mapNormalAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapSpecular':\r\n\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapSpecularRepeat':\r\n\t\t\t\t\tcase 'mapSpecularOffset':\r\n\t\t\t\t\tcase 'mapSpecularWrap':\r\n\t\t\t\t\tcase 'mapSpecularAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAlpha':\r\n\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAlphaRepeat':\r\n\t\t\t\t\tcase 'mapAlphaOffset':\r\n\t\t\t\t\tcase 'mapAlphaWrap':\r\n\t\t\t\t\tcase 'mapAlphaAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'flipSided':\r\n\t\t\t\t\t\tjson.side = THREE.BackSide;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'doubleSided':\r\n\t\t\t\t\t\tjson.side = THREE.DoubleSide;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'transparency':\r\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\r\n\t\t\t\t\t\tjson.opacity = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'depthTest':\r\n\t\t\t\t\tcase 'depthWrite':\r\n\t\t\t\t\tcase 'colorWrite':\r\n\t\t\t\t\tcase 'opacity':\r\n\t\t\t\t\tcase 'reflectivity':\r\n\t\t\t\t\tcase 'transparent':\r\n\t\t\t\t\tcase 'visible':\r\n\t\t\t\t\tcase 'wireframe':\r\n\t\t\t\t\t\tjson[ name ] = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'vertexColors':\r\n\t\t\t\t\t\tif ( value === true ) json.vertexColors = THREE.VertexColors;\r\n\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = THREE.FaceColors;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\r\n\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\r\n\r\n\t\t\tif ( json.opacity < 1 ) json.transparent = true;\r\n\r\n\t\t\tmaterialLoader.setTextures( textures );\r\n\r\n\t\t\treturn materialLoader.parse( json );\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n};\r\n\r\nTHREE.Loader.Handlers = {\r\n\r\n\thandlers: [],\r\n\r\n\tadd: function ( regex, loader ) {\r\n\r\n\t\tthis.handlers.push( regex, loader );\r\n\r\n\t},\r\n\r\n\tget: function ( file ) {\r\n\r\n\t\tvar handlers = this.handlers;\r\n\r\n\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\r\n\r\n\t\t\tvar regex = handlers[ i ];\r\n\t\t\tvar loader  = handlers[ i + 1 ];\r\n\r\n\t\t\tif ( regex.test( file ) ) {\r\n\r\n\t\t\t\treturn loader;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/XHRLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.XHRLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.XHRLoader.prototype = {\r\n\r\n\tconstructor: THREE.XHRLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tif ( this.path !== undefined ) url = this.path + url;\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar cached = THREE.Cache.get( url );\r\n\r\n\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\tif ( onLoad ) {\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tonLoad( cached );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cached;\r\n\r\n\t\t}\r\n\r\n\t\tvar request = new XMLHttpRequest();\r\n\t\trequest.overrideMimeType( 'text/plain' );\r\n\t\trequest.open( 'GET', url, true );\r\n\r\n\t\trequest.addEventListener( 'load', function ( event ) {\r\n\r\n\t\t\tvar response = event.target.response;\r\n\r\n\t\t\tTHREE.Cache.add( url, response );\r\n\r\n\t\t\tif ( this.status === 200 ) {\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( response );\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} else if ( this.status === 0 ) {\r\n\r\n\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\r\n\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\r\n\r\n\t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( response );\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( onError ) onError( event );\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( onProgress !== undefined ) {\r\n\r\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\r\n\r\n\t\t\t\tonProgress( event );\r\n\r\n\t\t\t}, false );\r\n\r\n\t\t}\r\n\r\n\t\trequest.addEventListener( 'error', function ( event ) {\r\n\r\n\t\t\tif ( onError ) onError( event );\r\n\r\n\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\r\n\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\r\n\r\n\t\trequest.send( null );\r\n\r\n\t\tscope.manager.itemStart( url );\r\n\r\n\t\treturn request;\r\n\r\n\t},\r\n\r\n\tsetPath: function ( value ) {\r\n\r\n\t\tthis.path = value;\r\n\r\n\t},\r\n\r\n\tsetResponseType: function ( value ) {\r\n\r\n\t\tthis.responseType = value;\r\n\r\n\t},\r\n\r\n\tsetWithCredentials: function ( value ) {\r\n\r\n\t\tthis.withCredentials = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/FontLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.FontLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.FontLoader.prototype = {\r\n\r\n\tconstructor: THREE.FontLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tonLoad( new THREE.Font( JSON.parse( text.substring( 65, text.length - 2 ) ) ) );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/ImageLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ImageLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.ImageLoader.prototype = {\r\n\r\n\tconstructor: THREE.ImageLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tif ( this.path !== undefined ) url = this.path + url;\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar cached = THREE.Cache.get( url );\r\n\r\n\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\tif ( onLoad ) {\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tonLoad( cached );\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cached;\r\n\r\n\t\t}\r\n\r\n\t\tvar image = document.createElement( 'img' );\r\n\r\n\t\timage.addEventListener( 'load', function ( event ) {\r\n\r\n\t\t\tTHREE.Cache.add( url, this );\r\n\r\n\t\t\tif ( onLoad ) onLoad( this );\r\n\r\n\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( onProgress !== undefined ) {\r\n\r\n\t\t\timage.addEventListener( 'progress', function ( event ) {\r\n\r\n\t\t\t\tonProgress( event );\r\n\r\n\t\t\t}, false );\r\n\r\n\t\t}\r\n\r\n\t\timage.addEventListener( 'error', function ( event ) {\r\n\r\n\t\t\tif ( onError ) onError( event );\r\n\r\n\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\r\n\r\n\t\tscope.manager.itemStart( url );\r\n\r\n\t\timage.src = url;\r\n\r\n\t\treturn image;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetPath: function ( value ) {\r\n\r\n\t\tthis.path = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/JSONLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.JSONLoader = function ( manager ) {\r\n\r\n\tif ( typeof manager === 'boolean' ) {\r\n\r\n\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\r\n\t\tmanager = undefined;\r\n\r\n\t}\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n\tthis.withCredentials = false;\r\n\r\n};\r\n\r\nTHREE.JSONLoader.prototype = {\r\n\r\n\tconstructor: THREE.JSONLoader,\r\n\r\n\t// Deprecated\r\n\r\n\tget statusDomElement () {\r\n\r\n\t\tif ( this._statusDomElement === undefined ) {\r\n\r\n\t\t\tthis._statusDomElement = document.createElement( 'div' );\r\n\r\n\t\t}\r\n\r\n\t\tconsole.warn( 'THREE.JSONLoader: .statusDomElement has been removed.' );\r\n\t\treturn this._statusDomElement;\r\n\r\n\t},\r\n\r\n\tload: function( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tvar json = JSON.parse( text );\r\n\t\t\tvar metadata = json.metadata;\r\n\r\n\t\t\tif ( metadata !== undefined ) {\r\n\r\n\t\t\t\tvar type = metadata.type;\r\n\r\n\t\t\t\tif ( type !== undefined ) {\r\n\r\n\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar object = scope.parse( json, texturePath );\r\n\t\t\tonLoad( object.geometry, object.materials );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tsetTexturePath: function ( value ) {\r\n\r\n\t\tthis.texturePath = value;\r\n\r\n\t},\r\n\r\n\tparse: function ( json, texturePath ) {\r\n\r\n\t\tvar geometry = new THREE.Geometry(),\r\n\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\r\n\r\n\t\tparseModel( scale );\r\n\r\n\t\tparseSkin();\r\n\t\tparseMorphing( scale );\r\n\t\tparseAnimations();\r\n\r\n\t\tgeometry.computeFaceNormals();\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\tfunction parseModel( scale ) {\r\n\r\n\t\t\tfunction isBitSet( value, position ) {\r\n\r\n\t\t\t\treturn value & ( 1 << position );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar i, j, fi,\r\n\r\n\t\t\toffset, zLength,\r\n\r\n\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\r\n\r\n\t\t\ttype,\r\n\t\t\tisQuad,\r\n\t\t\thasMaterial,\r\n\t\t\thasFaceVertexUv,\r\n\t\t\thasFaceNormal, hasFaceVertexNormal,\r\n\t\t\thasFaceColor, hasFaceVertexColor,\r\n\r\n\t\tvertex, face, faceA, faceB, hex, normal,\r\n\r\n\t\t\tuvLayer, uv, u, v,\r\n\r\n\t\t\tfaces = json.faces,\r\n\t\t\tvertices = json.vertices,\r\n\t\t\tnormals = json.normals,\r\n\t\t\tcolors = json.colors,\r\n\r\n\t\t\tnUvLayers = 0;\r\n\r\n\t\t\tif ( json.uvs !== undefined ) {\r\n\r\n\t\t\t\t// disregard empty arrays\r\n\r\n\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\r\n\r\n\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\r\n\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\toffset = 0;\r\n\t\t\tzLength = vertices.length;\r\n\r\n\t\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\t\tvertex = new THREE.Vector3();\r\n\r\n\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\r\n\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\r\n\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\r\n\r\n\t\t\t\tgeometry.vertices.push( vertex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\toffset = 0;\r\n\t\t\tzLength = faces.length;\r\n\r\n\t\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\t\ttype = faces[ offset ++ ];\r\n\r\n\r\n\t\t\t\tisQuad              = isBitSet( type, 0 );\r\n\t\t\t\thasMaterial         = isBitSet( type, 1 );\r\n\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\r\n\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\r\n\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\r\n\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\r\n\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\r\n\r\n\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\r\n\r\n\t\t\t\tif ( isQuad ) {\r\n\r\n\t\t\t\t\tfaceA = new THREE.Face3();\r\n\t\t\t\t\tfaceA.a = faces[ offset ];\r\n\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\r\n\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\r\n\r\n\t\t\t\t\tfaceB = new THREE.Face3();\r\n\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\r\n\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\r\n\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\r\n\r\n\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\tif ( hasMaterial ) {\r\n\r\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\r\n\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// to get face <=> uv index correspondence\r\n\r\n\t\t\t\t\tfi = geometry.faces.length;\r\n\r\n\t\t\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\r\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\r\n\r\n\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\r\n\r\n\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\r\n\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\tfaceA.normal.set(\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t);\r\n\r\n\r\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\r\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\thex = colors[ colorIndex ];\r\n\r\n\t\t\t\t\t\tfaceA.color.setHex( hex );\r\n\t\t\t\t\t\tfaceB.color.setHex( hex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\r\n\r\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\r\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.faces.push( faceA );\r\n\t\t\t\t\tgeometry.faces.push( faceB );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface = new THREE.Face3();\r\n\t\t\t\t\tface.a = faces[ offset ++ ];\r\n\t\t\t\t\tface.b = faces[ offset ++ ];\r\n\t\t\t\t\tface.c = faces[ offset ++ ];\r\n\r\n\t\t\t\t\tif ( hasMaterial ) {\r\n\r\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\tface.materialIndex = materialIndex;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// to get face <=> uv index correspondence\r\n\r\n\t\t\t\t\tfi = geometry.faces.length;\r\n\r\n\t\t\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\r\n\r\n\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\r\n\r\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\tface.normal.set(\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tface.vertexNormals.push( normal );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\tface.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.faces.push( face );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tfunction parseSkin() {\r\n\r\n\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\r\n\r\n\t\t\tif ( json.skinWeights ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\r\n\r\n\t\t\t\t\tvar x =                               json.skinWeights[ i ];\r\n\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\r\n\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\r\n\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\r\n\r\n\t\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.skinIndices ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\r\n\r\n\t\t\t\t\tvar a =                               json.skinIndices[ i ];\r\n\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\r\n\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\r\n\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\r\n\r\n\t\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.bones = json.bones;\r\n\r\n\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\r\n\r\n\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\r\n\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tfunction parseMorphing( scale ) {\r\n\r\n\t\t\tif ( json.morphTargets !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tgeometry.morphTargets[ i ] = {};\r\n\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\r\n\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\r\n\r\n\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\r\n\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\r\n\r\n\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\r\n\r\n\t\t\t\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\r\n\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\r\n\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\r\n\r\n\t\t\t\t\t\tdstVertices.push( vertex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\r\n\r\n\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\r\n\r\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseAnimations() {\r\n\r\n\t\t\tvar outputAnimations = [];\r\n\r\n\t\t\t// parse old style Bone/Hierarchy animations\r\n\t\t\tvar animations = [];\r\n\r\n\t\t\tif ( json.animation !== undefined ) {\r\n\r\n\t\t\t\tanimations.push( json.animation );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.animations !== undefined ) {\r\n\r\n\t\t\t\tif ( json.animations.length ) {\r\n\r\n\t\t\t\t\tanimations = animations.concat( json.animations );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tanimations.push( json.animations );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\r\n\r\n\t\t\t\tvar clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );\r\n\t\t\t\tif ( clip ) outputAnimations.push( clip );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// parse implicit morph animations\r\n\t\t\tif ( geometry.morphTargets ) {\r\n\r\n\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\r\n\t\t\t\tvar morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\r\n\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\r\n\r\n\t\t};\r\n\r\n\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\r\n\r\n\t\t\treturn { geometry: geometry };\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\r\n\r\n\t\t\treturn { geometry: geometry, materials: materials };\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/LoadingManager.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LoadingManager = function ( onLoad, onProgress, onError ) {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\r\n\r\n\tthis.onStart = undefined;\r\n\tthis.onLoad = onLoad;\r\n\tthis.onProgress = onProgress;\r\n\tthis.onError = onError;\r\n\r\n\tthis.itemStart = function ( url ) {\r\n\r\n\t\titemsTotal ++;\r\n\r\n\t\tif ( isLoading === false ) {\r\n\r\n\t\t\tif ( scope.onStart !== undefined ) {\r\n\r\n\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tisLoading = true;\r\n\r\n\t};\r\n\r\n\tthis.itemEnd = function ( url ) {\r\n\r\n\t\titemsLoaded ++;\r\n\r\n\t\tif ( scope.onProgress !== undefined ) {\r\n\r\n\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t}\r\n\r\n\t\tif ( itemsLoaded === itemsTotal ) {\r\n\r\n\t\t\tisLoading = false;\r\n\r\n\t\t\tif ( scope.onLoad !== undefined ) {\r\n\r\n\t\t\t\tscope.onLoad();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.itemError = function ( url ) {\r\n\r\n\t\tif ( scope.onError !== undefined ) {\r\n\r\n\t\t\tscope.onError( url );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.DefaultLoadingManager = new THREE.LoadingManager();\r\n\r\n// File:src/loaders/BufferGeometryLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BufferGeometryLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.BufferGeometryLoader.prototype = {\r\n\r\n\tconstructor: THREE.BufferGeometryLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tparse: function ( json ) {\r\n\r\n\t\tvar geometry = new THREE.BufferGeometry();\r\n\r\n\t\tvar index = json.data.index;\r\n\r\n\t\tvar TYPED_ARRAYS = {\r\n\t\t\t'Int8Array': Int8Array,\r\n\t\t\t'Uint8Array': Uint8Array,\r\n\t\t\t'Uint8ClampedArray': Uint8ClampedArray,\r\n\t\t\t'Int16Array': Int16Array,\r\n\t\t\t'Uint16Array': Uint16Array,\r\n\t\t\t'Int32Array': Int32Array,\r\n\t\t\t'Uint32Array': Uint32Array,\r\n\t\t\t'Float32Array': Float32Array,\r\n\t\t\t'Float64Array': Float64Array\r\n\t\t};\r\n\r\n\t\tif ( index !== undefined ) {\r\n\r\n\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\r\n\t\t\tgeometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = json.data.attributes;\r\n\r\n\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ key ];\r\n\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\r\n\r\n\t\t\tgeometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\r\n\r\n\t\tif ( groups !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar boundingSphere = json.data.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== undefined ) {\r\n\r\n\t\t\tvar center = new THREE.Vector3();\r\n\r\n\t\t\tif ( boundingSphere.center !== undefined ) {\r\n\r\n\t\t\t\tcenter.fromArray( boundingSphere.center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/MaterialLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.MaterialLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\tthis.textures = {};\r\n\r\n};\r\n\r\nTHREE.MaterialLoader.prototype = {\r\n\r\n\tconstructor: THREE.MaterialLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tsetTextures: function ( value ) {\r\n\r\n\t\tthis.textures = value;\r\n\r\n\t},\r\n\r\n\tgetTexture: function ( name ) {\r\n\r\n\t\tvar textures = this.textures;\r\n\r\n\t\tif ( textures[ name ] === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\r\n\r\n\t\t}\r\n\r\n\t\treturn textures[ name ];\r\n\r\n\t},\r\n\r\n\tparse: function ( json ) {\r\n\r\n\t\tvar material = new THREE[ json.type ];\r\n\r\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\r\n\t\tif ( json.name !== undefined ) material.name = json.name;\r\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\r\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\r\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\r\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\r\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\r\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\r\n\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\r\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\r\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\r\n\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\r\n\t\tif ( json.shading !== undefined ) material.shading = json.shading;\r\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\r\n\t\tif ( json.side !== undefined ) material.side = json.side;\r\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\r\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\r\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\r\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\r\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\r\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\r\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\r\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\r\n\r\n\t\t// for PointsMaterial\r\n\t\tif ( json.size !== undefined ) material.size = json.size;\r\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\r\n\r\n\t\t// maps\r\n\r\n\t\tif ( json.map !== undefined ) material.map = this.getTexture( json.map );\r\n\r\n\t\tif ( json.alphaMap !== undefined ) {\r\n\r\n\t\t\tmaterial.alphaMap = this.getTexture( json.alphaMap );\r\n\t\t\tmaterial.transparent = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );\r\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\r\n\r\n\t\tif ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );\r\n\t\tif ( json.normalScale !== undefined ) {\r\n\r\n\t\t\tvar normalScale = json.normalScale;\r\n\r\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\r\n\r\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\r\n\r\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterial.normalScale = new THREE.Vector2().fromArray( normalScale );\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );\r\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\r\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\r\n\r\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = this.getTexture( json.roughnessMap );\r\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = this.getTexture( json.metalnessMap );\r\n\r\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = this.getTexture( json.emissiveMap );\r\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\r\n\r\n\t\tif ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );\r\n\r\n\t\tif ( json.envMap !== undefined ) {\r\n\r\n\t\t\tmaterial.envMap = this.getTexture( json.envMap );\r\n\t\t\tmaterial.combine = THREE.MultiplyOperation;\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.reflectivity ) material.reflectivity = json.reflectivity;\r\n\r\n\t\tif ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );\r\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\r\n\r\n\t\tif ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );\r\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\r\n\r\n\t\t// MultiMaterial\r\n\r\n\t\tif ( json.materials !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/ObjectLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ObjectLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\tthis.texturePath = '';\r\n\r\n};\r\n\r\nTHREE.ObjectLoader.prototype = {\r\n\r\n\tconstructor: THREE.ObjectLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tif ( this.texturePath === '' ) {\r\n\r\n\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tscope.parse( JSON.parse( text ), onLoad );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tsetTexturePath: function ( value ) {\r\n\r\n\t\tthis.texturePath = value;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tparse: function ( json, onLoad ) {\r\n\r\n\t\tvar geometries = this.parseGeometries( json.geometries );\r\n\r\n\t\tvar images = this.parseImages( json.images, function () {\r\n\r\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\r\n\r\n\t\t} );\r\n\r\n\t\tvar textures  = this.parseTextures( json.textures, images );\r\n\t\tvar materials = this.parseMaterials( json.materials, textures );\r\n\r\n\t\tvar object = this.parseObject( json.object, geometries, materials );\r\n\r\n\t\tif ( json.animations ) {\r\n\r\n\t\t\tobject.animations = this.parseAnimations( json.animations );\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.images === undefined || json.images.length === 0 ) {\r\n\r\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\r\n\r\n\t\t}\r\n\r\n\t\treturn object;\r\n\r\n\t},\r\n\r\n\tparseGeometries: function ( json ) {\r\n\r\n\t\tvar geometries = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tvar geometryLoader = new THREE.JSONLoader();\r\n\t\t\tvar bufferGeometryLoader = new THREE.BufferGeometryLoader();\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar geometry;\r\n\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\t\tcase 'PlaneGeometry':\r\n\t\t\t\t\tcase 'PlaneBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'BoxGeometry':\r\n\t\t\t\t\tcase 'BoxBufferGeometry':\r\n\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\tdata.depth,\r\n\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\tdata.depthSegments\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'CircleGeometry':\r\n\t\t\t\t\tcase 'CircleBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'CylinderGeometry':\r\n\t\t\t\t\tcase 'CylinderBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radiusTop,\r\n\t\t\t\t\t\t\tdata.radiusBottom,\r\n\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'SphereGeometry':\r\n\t\t\t\t\tcase 'SphereBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\tdata.phiLength,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'DodecahedronGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.DodecahedronGeometry(\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'IcosahedronGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.IcosahedronGeometry(\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'OctahedronGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.OctahedronGeometry(\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'TetrahedronGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.TetrahedronGeometry(\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'RingGeometry':\r\n\t\t\t\t\tcase 'RingBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.innerRadius,\r\n\t\t\t\t\t\t\tdata.outerRadius,\r\n\t\t\t\t\t\t\tdata.thetaSegments,\r\n\t\t\t\t\t\t\tdata.phiSegments,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'TorusGeometry':\r\n\t\t\t\t\tcase 'TorusBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\tdata.arc\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'TorusKnotGeometry':\r\n\t\t\t\t\tcase 'TorusKnotBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\tdata.p,\r\n\t\t\t\t\t\t\tdata.q\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'LatheGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE.LatheGeometry(\r\n\t\t\t\t\t\t\tdata.points,\r\n\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\tdata.phiLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'BufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'Geometry':\r\n\r\n\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.uuid = data.uuid;\r\n\r\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\r\n\r\n\t\t\t\tgeometries[ data.uuid ] = geometry;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn geometries;\r\n\r\n\t},\r\n\r\n\tparseMaterials: function ( json, textures ) {\r\n\r\n\t\tvar materials = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tvar loader = new THREE.MaterialLoader();\r\n\t\t\tloader.setTextures( textures );\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar material = loader.parse( json[ i ] );\r\n\t\t\t\tmaterials[ material.uuid ] = material;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn materials;\r\n\r\n\t},\r\n\r\n\tparseAnimations: function ( json ) {\r\n\r\n\t\tvar animations = [];\r\n\r\n\t\tfor ( var i = 0; i < json.length; i ++ ) {\r\n\r\n\t\t\tvar clip = THREE.AnimationClip.parse( json[ i ] );\r\n\r\n\t\t\tanimations.push( clip );\r\n\r\n\t\t}\r\n\r\n\t\treturn animations;\r\n\r\n\t},\r\n\r\n\tparseImages: function ( json, onLoad ) {\r\n\r\n\t\tvar scope = this;\r\n\t\tvar images = {};\r\n\r\n\t\tfunction loadImage( url ) {\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\treturn loader.load( url, function () {\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\tif ( json !== undefined && json.length > 0 ) {\r\n\r\n\t\t\tvar manager = new THREE.LoadingManager( onLoad );\r\n\r\n\t\t\tvar loader = new THREE.ImageLoader( manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar image = json[ i ];\r\n\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\r\n\r\n\t\t\t\timages[ image.uuid ] = loadImage( path );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn images;\r\n\r\n\t},\r\n\r\n\tparseTextures: function ( json, images ) {\r\n\r\n\t\tfunction parseConstant( value ) {\r\n\r\n\t\t\tif ( typeof( value ) === 'number' ) return value;\r\n\r\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\r\n\r\n\t\t\treturn THREE[ value ];\r\n\r\n\t\t}\r\n\r\n\t\tvar textures = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\tif ( data.image === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( images[ data.image ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar texture = new THREE.Texture( images[ data.image ] );\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\ttexture.uuid = data.uuid;\r\n\r\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\r\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );\r\n\t\t\t\tif ( data.offset !== undefined ) texture.offset = new THREE.Vector2( data.offset[ 0 ], data.offset[ 1 ] );\r\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat = new THREE.Vector2( data.repeat[ 0 ], data.repeat[ 1 ] );\r\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );\r\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );\r\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\r\n\t\t\t\tif ( Array.isArray( data.wrap ) ) {\r\n\r\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ] );\r\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextures[ data.uuid ] = texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn textures;\r\n\r\n\t},\r\n\r\n\tparseObject: function () {\r\n\r\n\t\tvar matrix = new THREE.Matrix4();\r\n\r\n\t\treturn function ( data, geometries, materials ) {\r\n\r\n\t\t\tvar object;\r\n\r\n\t\t\tfunction getGeometry( name ) {\r\n\r\n\t\t\t\tif ( geometries[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn geometries[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getMaterial( name ) {\r\n\r\n\t\t\t\tif ( name === undefined ) return undefined;\r\n\r\n\t\t\t\tif ( materials[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn materials[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\tcase 'Scene':\r\n\r\n\t\t\t\t\tobject = new THREE.Scene();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PerspectiveCamera':\r\n\r\n\t\t\t\t\tobject = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'OrthographicCamera':\r\n\r\n\t\t\t\t\tobject = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'AmbientLight':\r\n\r\n\t\t\t\t\tobject = new THREE.AmbientLight( data.color, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'DirectionalLight':\r\n\r\n\t\t\t\t\tobject = new THREE.DirectionalLight( data.color, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointLight':\r\n\r\n\t\t\t\t\tobject = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SpotLight':\r\n\r\n\t\t\t\t\tobject = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'HemisphereLight':\r\n\r\n\t\t\t\t\tobject = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Mesh':\r\n\r\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\r\n\t\t\t\t\tvar material = getMaterial( data.material );\r\n\r\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\r\n\r\n\t\t\t\t\t\tobject = new THREE.SkinnedMesh( geometry, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tobject = new THREE.Mesh( geometry, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LOD':\r\n\r\n\t\t\t\t\tobject = new THREE.LOD();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Line':\r\n\r\n\t\t\t\t\tobject = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointCloud':\r\n\t\t\t\tcase 'Points':\r\n\r\n\t\t\t\t\tobject = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Sprite':\r\n\r\n\t\t\t\t\tobject = new THREE.Sprite( getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Group':\r\n\r\n\t\t\t\t\tobject = new THREE.Group();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tobject = new THREE.Object3D();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.uuid = data.uuid;\r\n\r\n\t\t\tif ( data.name !== undefined ) object.name = data.name;\r\n\t\t\tif ( data.matrix !== undefined ) {\r\n\r\n\t\t\t\tmatrix.fromArray( data.matrix );\r\n\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\r\n\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\r\n\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\r\n\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\r\n\r\n\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\r\n\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\r\n\r\n\t\t\tif ( data.children !== undefined ) {\r\n\r\n\t\t\t\tfor ( var child in data.children ) {\r\n\r\n\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.type === 'LOD' ) {\r\n\r\n\t\t\t\tvar levels = data.levels;\r\n\r\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\t\t\tvar level = levels[ l ];\r\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\r\n\r\n\t\t\t\t\tif ( child !== undefined ) {\r\n\r\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t};\r\n\r\n\t}()\r\n\r\n};\r\n\r\n// File:src/loaders/TextureLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.TextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.TextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.TextureLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar texture = new THREE.Texture();\r\n\r\n\t\tvar loader = new THREE.ImageLoader( this.manager );\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.load( url, function ( image ) {\r\n\r\n\t\t\ttexture.image = image;\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad !== undefined ) {\r\n\r\n\t\t\t\tonLoad( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetPath: function ( value ) {\r\n\r\n\t\tthis.path = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/CubeTextureLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CubeTextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.CubeTextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.CubeTextureLoader,\r\n\r\n\tload: function ( urls, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar texture = new THREE.CubeTexture();\r\n\r\n\t\tvar loader = new THREE.ImageLoader( this.manager );\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\tloader.setPath( this.path );\r\n\r\n\t\tvar loaded = 0;\r\n\r\n\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\tloader.load( urls[ i ], function ( image ) {\r\n\r\n\t\t\t\ttexture.images[ i ] = image;\r\n\r\n\t\t\t\tloaded ++;\r\n\r\n\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, undefined, onError );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < urls.length; ++ i ) {\r\n\r\n\t\t\tloadTexture( i );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetPath: function ( value ) {\r\n\r\n\t\tthis.path = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/BinaryTextureLoader.js\r\n\r\n/**\r\n * @author Nikos M. / https://github.com/foo123/\r\n *\r\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\r\n */\r\n\r\nTHREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n\t// override in sub classes\r\n\tthis._parser = null;\r\n\r\n};\r\n\r\nTHREE.BinaryTextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.BinaryTextureLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar texture = new THREE.DataTexture();\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\r\n\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\tvar texData = scope._parser( buffer );\r\n\r\n\t\t\tif ( ! texData ) return;\r\n\r\n\t\t\tif ( undefined !== texData.image ) {\r\n\r\n\t\t\t\ttexture.image = texData.image;\r\n\r\n\t\t\t} else if ( undefined !== texData.data ) {\r\n\r\n\t\t\t\ttexture.image.width = texData.width;\r\n\t\t\t\ttexture.image.height = texData.height;\r\n\t\t\t\ttexture.image.data = texData.data;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;\r\n\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;\r\n\r\n\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;\r\n\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;\r\n\r\n\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\r\n\r\n\t\t\tif ( undefined !== texData.format ) {\r\n\r\n\t\t\t\ttexture.format = texData.format;\r\n\r\n\t\t\t}\r\n\t\t\tif ( undefined !== texData.type ) {\r\n\r\n\t\t\t\ttexture.type = texData.type;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( undefined !== texData.mipmaps ) {\r\n\r\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( 1 === texData.mipmapCount ) {\r\n\r\n\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad ) onLoad( texture, texData );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/CompressedTextureLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * Abstract Base class to block based textures loader (dds, pvr, ...)\r\n */\r\n\r\nTHREE.CompressedTextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n\t// override in sub classes\r\n\tthis._parser = null;\r\n\r\n};\r\n\r\n\r\nTHREE.CompressedTextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.CompressedTextureLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar images = [];\r\n\r\n\t\tvar texture = new THREE.CompressedTexture();\r\n\t\ttexture.image = images;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\r\n\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\tloader.load( url[ i ], function ( buffer ) {\r\n\r\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\r\n\r\n\t\t\t\timages[ i ] = {\r\n\t\t\t\t\twidth: texDatas.width,\r\n\t\t\t\t\theight: texDatas.height,\r\n\t\t\t\t\tformat: texDatas.format,\r\n\t\t\t\t\tmipmaps: texDatas.mipmaps\r\n\t\t\t\t};\r\n\r\n\t\t\t\tloaded += 1;\r\n\r\n\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\r\n\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\r\n\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t}\r\n\r\n\t\tif ( Array.isArray( url ) ) {\r\n\r\n\t\t\tvar loaded = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\r\n\r\n\t\t\t\tloadTexture( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// compressed cubemap texture stored in a single DDS file\r\n\r\n\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\r\n\r\n\t\t\t\tif ( texDatas.isCubemap ) {\r\n\r\n\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\r\n\r\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\r\n\r\n\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\r\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\r\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\r\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttexture.image.width = texDatas.width;\r\n\t\t\t\t\ttexture.image.height = texDatas.height;\r\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\r\n\r\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tsetPath: function ( value ) {\r\n\r\n\t\tthis.path = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/materials/Material.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Material = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'Material';\r\n\r\n\tthis.side = THREE.FrontSide;\r\n\r\n\tthis.opacity = 1;\r\n\tthis.transparent = false;\r\n\r\n\tthis.blending = THREE.NormalBlending;\r\n\r\n\tthis.blendSrc = THREE.SrcAlphaFactor;\r\n\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\r\n\tthis.blendEquation = THREE.AddEquation;\r\n\tthis.blendSrcAlpha = null;\r\n\tthis.blendDstAlpha = null;\r\n\tthis.blendEquationAlpha = null;\r\n\r\n\tthis.depthFunc = THREE.LessEqualDepth;\r\n\tthis.depthTest = true;\r\n\tthis.depthWrite = true;\r\n\r\n\tthis.colorWrite = true;\r\n\r\n\tthis.precision = null; // override the renderer's default precision for this material\r\n\r\n\tthis.polygonOffset = false;\r\n\tthis.polygonOffsetFactor = 0;\r\n\tthis.polygonOffsetUnits = 0;\r\n\r\n\tthis.alphaTest = 0;\r\n\tthis.premultipliedAlpha = false;\r\n\r\n\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\r\n\r\n\tthis.visible = true;\r\n\r\n\tthis._needsUpdate = true;\r\n\r\n};\r\n\r\nTHREE.Material.prototype = {\r\n\r\n\tconstructor: THREE.Material,\r\n\r\n\tget needsUpdate () {\r\n\r\n\t\treturn this._needsUpdate;\r\n\r\n\t},\r\n\r\n\tset needsUpdate ( value ) {\r\n\r\n\t\tif ( value === true ) this.update();\r\n\r\n\t\tthis._needsUpdate = value;\r\n\r\n\t},\r\n\r\n\tsetValues: function ( values ) {\r\n\r\n\t\tif ( values === undefined ) return;\r\n\r\n\t\tfor ( var key in values ) {\r\n\r\n\t\t\tvar newValue = values[ key ];\r\n\r\n\t\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar currentValue = this[ key ];\r\n\r\n\t\t\tif ( currentValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( currentValue instanceof THREE.Color ) {\r\n\r\n\t\t\t\tcurrentValue.set( newValue );\r\n\r\n\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else if ( key === 'overdraw' ) {\r\n\r\n\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\r\n\t\t\t\tthis[ key ] = Number( newValue );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar isRoot = meta === undefined;\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tmeta = {\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Material',\r\n\t\t\t\tgenerator: 'Material.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard Material serialization\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.color instanceof THREE.Color ) data.color = this.color.getHex();\r\n\r\n\t\tif ( this.roughness !== 0.5 ) data.roughness = this.roughness;\r\n\t\tif ( this.metalness !== 0.5 ) data.metalness = this.metalness;\r\n\r\n\t\tif ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();\r\n\t\tif ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();\r\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\r\n\r\n\t\tif ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;\r\n\t\tif ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\r\n\t\tif ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\r\n\t\tif ( this.bumpMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\r\n\t\t\tdata.bumpScale = this.bumpScale;\r\n\r\n\t\t}\r\n\t\tif ( this.normalMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\r\n\t\t\tdata.normalScale = this.normalScale.toArray();\r\n\r\n\t\t}\r\n\t\tif ( this.displacementMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\r\n\t\t\tdata.displacementScale = this.displacementScale;\r\n\t\t\tdata.displacementBias = this.displacementBias;\r\n\r\n\t\t}\r\n\t\tif ( this.roughnessMap instanceof THREE.Texture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\r\n\t\tif ( this.metalnessMap instanceof THREE.Texture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.emissiveMap instanceof THREE.Texture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\r\n\t\tif ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.envMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\r\n\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.size !== undefined ) data.size = this.size;\r\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\r\n\r\n\t\tif ( this.vertexColors !== undefined && this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;\r\n\t\tif ( this.shading !== undefined && this.shading !== THREE.SmoothShading ) data.shading = this.shading;\r\n\t\tif ( this.blending !== undefined && this.blending !== THREE.NormalBlending ) data.blending = this.blending;\r\n\t\tif ( this.side !== undefined && this.side !== THREE.FrontSide ) data.side = this.side;\r\n\r\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\r\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\r\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\r\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\r\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\r\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\r\n\r\n\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\tfunction extractFromCache ( cache ) {\r\n\r\n\t\t\tvar values = [];\r\n\r\n\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\tvar images = extractFromCache( meta.images );\r\n\r\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\tif ( images.length > 0 ) data.images = images;\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.side = source.side;\r\n\r\n\t\tthis.opacity = source.opacity;\r\n\t\tthis.transparent = source.transparent;\r\n\r\n\t\tthis.blending = source.blending;\r\n\r\n\t\tthis.blendSrc = source.blendSrc;\r\n\t\tthis.blendDst = source.blendDst;\r\n\t\tthis.blendEquation = source.blendEquation;\r\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\r\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\r\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\r\n\r\n\t\tthis.depthFunc = source.depthFunc;\r\n\t\tthis.depthTest = source.depthTest;\r\n\t\tthis.depthWrite = source.depthWrite;\r\n\r\n\t\tthis.colorWrite = source.colorWrite;\r\n\r\n\t\tthis.precision = source.precision;\r\n\r\n\t\tthis.polygonOffset = source.polygonOffset;\r\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\r\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\r\n\r\n\t\tthis.alphaTest = source.alphaTest;\r\n\r\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\r\n\r\n\t\tthis.overdraw = source.overdraw;\r\n\r\n\t\tthis.visible = source.visible;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tupdate: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'update' } );\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.Material.prototype );\r\n\r\nTHREE.MaterialIdCount = 0;\r\n\r\n// File:src/materials/LineBasicMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  linewidth: <float>,\r\n *  linecap: \"round\",\r\n *  linejoin: \"round\",\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  vertexColors: <bool>\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.LineBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'LineBasicMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.linewidth = 1;\r\n\tthis.linecap = 'round';\r\n\tthis.linejoin = 'round';\r\n\r\n\tthis.blending = THREE.NormalBlending;\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;\r\n\r\nTHREE.LineBasicMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.linewidth = source.linewidth;\r\n\tthis.linecap = source.linecap;\r\n\tthis.linejoin = source.linejoin;\r\n\r\n\tthis.vertexColors = source.vertexColors;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/LineDashedMaterial.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  linewidth: <float>,\r\n *\r\n *  scale: <float>,\r\n *  dashSize: <float>,\r\n *  gapSize: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.FaceColors / THREE.VertexColors\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.LineDashedMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'LineDashedMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.linewidth = 1;\r\n\r\n\tthis.scale = 1;\r\n\tthis.dashSize = 3;\r\n\tthis.gapSize = 1;\r\n\r\n\tthis.blending = THREE.NormalBlending;\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;\r\n\r\nTHREE.LineDashedMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.linewidth = source.linewidth;\r\n\r\n\tthis.scale = source.scale;\r\n\tthis.dashSize = source.dashSize;\r\n\tthis.gapSize = source.gapSize;\r\n\r\n\tthis.vertexColors = source.vertexColors;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshBasicMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshBasicMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // emissive\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.aoMap = null;\r\n\tthis.aoMapIntensity = 1.0;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\tthis.blending = THREE.NormalBlending;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;\r\n\r\nTHREE.MeshBasicMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.aoMap = source.aoMap;\r\n\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\tthis.specularMap = source.specularMap;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.envMap = source.envMap;\r\n\tthis.combine = source.combine;\r\n\tthis.reflectivity = source.reflectivity;\r\n\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\tthis.shading = source.shading;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\tthis.vertexColors = source.vertexColors;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshLambertMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *  lightMapIntensity: <float>\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  emissive: <hex>,\r\n *  emissiveIntensity: <float>\r\n *  emissiveMap: new THREE.Texture( <Image> ),\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshLambertMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshLambertMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\tthis.lightMapIntensity = 1.0;\r\n\r\n\tthis.aoMap = null;\r\n\tthis.aoMapIntensity = 1.0;\r\n\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\tthis.emissiveIntensity = 1.0;\r\n\tthis.emissiveMap = null;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.blending = THREE.NormalBlending;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;\r\n\r\nTHREE.MeshLambertMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.lightMap = source.lightMap;\r\n\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\tthis.aoMap = source.aoMap;\r\n\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\tthis.emissive.copy( source.emissive );\r\n\tthis.emissiveMap = source.emissiveMap;\r\n\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\tthis.specularMap = source.specularMap;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.envMap = source.envMap;\r\n\tthis.combine = source.combine;\r\n\tthis.reflectivity = source.reflectivity;\r\n\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\tthis.vertexColors = source.vertexColors;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\tthis.morphNormals = source.morphNormals;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshPhongMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  specular: <hex>,\r\n *  shininess: <float>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *  lightMapIntensity: <float>\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  emissive: <hex>,\r\n *  emissiveIntensity: <float>\r\n *  emissiveMap: new THREE.Texture( <Image> ),\r\n *\r\n *  bumpMap: new THREE.Texture( <Image> ),\r\n *  bumpScale: <float>,\r\n *\r\n *  normalMap: new THREE.Texture( <Image> ),\r\n *  normalScale: <Vector2>,\r\n *\r\n *  displacementMap: new THREE.Texture( <Image> ),\r\n *  displacementScale: <float>,\r\n *  displacementBias: <float>,\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshPhongMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshPhongMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\tthis.specular = new THREE.Color( 0x111111 );\r\n\tthis.shininess = 30;\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\tthis.lightMapIntensity = 1.0;\r\n\r\n\tthis.aoMap = null;\r\n\tthis.aoMapIntensity = 1.0;\r\n\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\tthis.emissiveIntensity = 1.0;\r\n\tthis.emissiveMap = null;\r\n\r\n\tthis.bumpMap = null;\r\n\tthis.bumpScale = 1;\r\n\r\n\tthis.normalMap = null;\r\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.displacementMap = null;\r\n\tthis.displacementScale = 1;\r\n\tthis.displacementBias = 0;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\tthis.blending = THREE.NormalBlending;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;\r\n\r\nTHREE.MeshPhongMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\tthis.specular.copy( source.specular );\r\n\tthis.shininess = source.shininess;\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.lightMap = source.lightMap;\r\n\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\tthis.aoMap = source.aoMap;\r\n\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\tthis.emissive.copy( source.emissive );\r\n\tthis.emissiveMap = source.emissiveMap;\r\n\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\tthis.bumpMap = source.bumpMap;\r\n\tthis.bumpScale = source.bumpScale;\r\n\r\n\tthis.normalMap = source.normalMap;\r\n\tthis.normalScale.copy( source.normalScale );\r\n\r\n\tthis.displacementMap = source.displacementMap;\r\n\tthis.displacementScale = source.displacementScale;\r\n\tthis.displacementBias = source.displacementBias;\r\n\r\n\tthis.specularMap = source.specularMap;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.envMap = source.envMap;\r\n\tthis.combine = source.combine;\r\n\tthis.reflectivity = source.reflectivity;\r\n\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\tthis.shading = source.shading;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\tthis.vertexColors = source.vertexColors;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\tthis.morphNormals = source.morphNormals;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshStandardMaterial.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  roughness: <float>,\r\n *  metalness: <float>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *  lightMapIntensity: <float>\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  emissive: <hex>,\r\n *  emissiveIntensity: <float>\r\n *  emissiveMap: new THREE.Texture( <Image> ),\r\n *\r\n *  bumpMap: new THREE.Texture( <Image> ),\r\n *  bumpScale: <float>,\r\n *\r\n *  normalMap: new THREE.Texture( <Image> ),\r\n *  normalScale: <Vector2>,\r\n *\r\n *  displacementMap: new THREE.Texture( <Image> ),\r\n *  displacementScale: <float>,\r\n *  displacementBias: <float>,\r\n *\r\n *  roughnessMap: new THREE.Texture( <Image> ),\r\n *\r\n *  metalnessMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n *  envMapIntensity: <float>\r\n *\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshStandardMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshStandardMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\tthis.roughness = 0.5;\r\n\tthis.metalness = 0.5;\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\tthis.lightMapIntensity = 1.0;\r\n\r\n\tthis.aoMap = null;\r\n\tthis.aoMapIntensity = 1.0;\r\n\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\tthis.emissiveIntensity = 1.0;\r\n\tthis.emissiveMap = null;\r\n\r\n\tthis.bumpMap = null;\r\n\tthis.bumpScale = 1;\r\n\r\n\tthis.normalMap = null;\r\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.displacementMap = null;\r\n\tthis.displacementScale = 1;\r\n\tthis.displacementBias = 0;\r\n\r\n\tthis.roughnessMap = null;\r\n\r\n\tthis.metalnessMap = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.envMapIntensity = 1.0;\r\n\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\tthis.blending = THREE.NormalBlending;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshStandardMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;\r\n\r\nTHREE.MeshStandardMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\tthis.roughness = source.roughness;\r\n\tthis.metalness = source.metalness;\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.lightMap = source.lightMap;\r\n\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\tthis.aoMap = source.aoMap;\r\n\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\tthis.emissive.copy( source.emissive );\r\n\tthis.emissiveMap = source.emissiveMap;\r\n\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\tthis.bumpMap = source.bumpMap;\r\n\tthis.bumpScale = source.bumpScale;\r\n\r\n\tthis.normalMap = source.normalMap;\r\n\tthis.normalScale.copy( source.normalScale );\r\n\r\n\tthis.displacementMap = source.displacementMap;\r\n\tthis.displacementScale = source.displacementScale;\r\n\tthis.displacementBias = source.displacementBias;\r\n\r\n\tthis.roughnessMap = source.roughnessMap;\r\n\r\n\tthis.metalnessMap = source.metalnessMap;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.envMap = source.envMap;\r\n\tthis.envMapIntensity = source.envMapIntensity;\r\n\r\n\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\tthis.shading = source.shading;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\tthis.vertexColors = source.vertexColors;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\tthis.morphNormals = source.morphNormals;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshDepthMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  opacity: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshDepthMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshDepthMaterial';\r\n\r\n\tthis.morphTargets = false;\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;\r\n\r\nTHREE.MeshDepthMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshNormalMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * parameters = {\r\n *  opacity: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshNormalMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this, parameters );\r\n\r\n\tthis.type = 'MeshNormalMaterial';\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.morphTargets = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;\r\n\r\nTHREE.MeshNormalMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MultiMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.MultiMaterial = function ( materials ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.type = 'MultiMaterial';\r\n\r\n\tthis.materials = materials instanceof Array ? materials : [];\r\n\r\n\tthis.visible = true;\r\n\r\n};\r\n\r\nTHREE.MultiMaterial.prototype = {\r\n\r\n\tconstructor: THREE.MultiMaterial,\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar output = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.2,\r\n\t\t\t\ttype: 'material',\r\n\t\t\t\tgenerator: 'MaterialExporter'\r\n\t\t\t},\r\n\t\t\tuuid: this.uuid,\r\n\t\t\ttype: this.type,\r\n\t\t\tmaterials: []\r\n\t\t};\r\n\r\n\t\tvar materials = this.materials;\r\n\r\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar material = materials[ i ].toJSON( meta );\r\n\t\t\tdelete material.metadata;\r\n\r\n\t\t\toutput.materials.push( material );\r\n\r\n\t\t}\r\n\r\n\t\toutput.visible = this.visible;\r\n\r\n\t\treturn output;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar material = new this.constructor();\r\n\r\n\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\r\n\r\n\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tmaterial.visible = this.visible;\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/materials/PointsMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  size: <float>,\r\n *  sizeAttenuation: <bool>,\r\n *\r\n *  blending: THREE.NormalBlending,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  vertexColors: <bool>,\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.PointsMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'PointsMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.size = 1;\r\n\tthis.sizeAttenuation = true;\r\n\r\n\tthis.blending = THREE.NormalBlending;\r\n\r\n\tthis.vertexColors = THREE.NoColors;\r\n\r\n\tthis.fog = true;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;\r\n\r\nTHREE.PointsMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.size = source.size;\r\n\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\tthis.vertexColors = source.vertexColors;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/ShaderMaterial.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  defines: { \"label\" : \"value\" },\r\n *  uniforms: { \"parameter1\": { type: \"f\", value: 1.0 }, \"parameter2\": { type: \"i\" value2: 2 } },\r\n *\r\n *  fragmentShader: <string>,\r\n *  vertexShader: <string>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  lights: <bool>,\r\n *\r\n *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>,\r\n *\r\n *\tfog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.ShaderMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'ShaderMaterial';\r\n\r\n\tthis.defines = {};\r\n\tthis.uniforms = {};\r\n\r\n\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\r\n\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\r\n\r\n\tthis.shading = THREE.SmoothShading;\r\n\r\n\tthis.linewidth = 1;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.fog = false; // set to use scene fog\r\n\r\n\tthis.lights = false; // set to use scene lights\r\n\r\n\tthis.vertexColors = THREE.NoColors; // set to use \"color\" attribute stream\r\n\r\n\tthis.skinning = false; // set to use skinning attribute streams\r\n\r\n\tthis.morphTargets = false; // set to use morph targets\r\n\tthis.morphNormals = false; // set to use morph normals\r\n\r\n\tthis.extensions = {\r\n\t\tderivatives: false, // set to use derivatives\r\n\t\tfragDepth: false, // set to use fragment depth values\r\n\t\tdrawBuffers: false, // set to use draw buffers\r\n\t\tshaderTextureLOD: false // set to use shader texture LOD\r\n\t};\r\n\r\n\t// When rendered geometry doesn't include these attributes but the material does,\r\n\t// use these default values in WebGL. This avoids errors when buffer data is missing.\r\n\tthis.defaultAttributeValues = {\r\n\t\t'color': [ 1, 1, 1 ],\r\n\t\t'uv': [ 0, 0 ],\r\n\t\t'uv2': [ 0, 0 ]\r\n\t};\r\n\r\n\tthis.index0AttributeName = undefined;\r\n\r\n\tif ( parameters !== undefined ) {\r\n\r\n\t\tif ( parameters.attributes !== undefined ) {\r\n\r\n\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;\r\n\r\nTHREE.ShaderMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.fragmentShader = source.fragmentShader;\r\n\tthis.vertexShader = source.vertexShader;\r\n\r\n\tthis.uniforms = THREE.UniformsUtils.clone( source.uniforms );\r\n\r\n\tthis.defines = source.defines;\r\n\r\n\tthis.shading = source.shading;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\tthis.lights = source.lights;\r\n\r\n\tthis.vertexColors = source.vertexColors;\r\n\r\n\tthis.skinning = source.skinning;\r\n\r\n\tthis.morphTargets = source.morphTargets;\r\n\tthis.morphNormals = source.morphNormals;\r\n\r\n\tthis.extensions = source.extensions;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.ShaderMaterial.prototype.toJSON = function ( meta ) {\r\n\r\n\tvar data = THREE.Material.prototype.toJSON.call( this, meta );\r\n\r\n\tdata.uniforms = this.uniforms;\r\n\tdata.vertexShader = this.vertexShader;\r\n\tdata.fragmentShader = this.fragmentShader;\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\n// File:src/materials/RawShaderMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RawShaderMaterial = function ( parameters ) {\r\n\r\n\tTHREE.ShaderMaterial.call( this, parameters );\r\n\r\n\tthis.type = 'RawShaderMaterial';\r\n\r\n};\r\n\r\nTHREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\r\nTHREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;\r\n\r\n// File:src/materials/SpriteMaterial.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *\tuvOffset: new THREE.Vector2(),\r\n *\tuvScale: new THREE.Vector2(),\r\n *\r\n *  fog: <bool>\r\n * }\r\n */\r\n\r\nTHREE.SpriteMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'SpriteMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\tthis.map = null;\r\n\r\n\tthis.rotation = 0;\r\n\r\n\tthis.fog = false;\r\n\r\n\t// set parameters\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;\r\n\r\nTHREE.SpriteMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\tthis.map = source.map;\r\n\r\n\tthis.rotation = source.rotation;\r\n\r\n\tthis.fog = source.fog;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/textures/Texture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n */\r\n\r\nTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.sourceFile = '';\r\n\r\n\tthis.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\r\n\tthis.mipmaps = [];\r\n\r\n\tthis.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\r\n\r\n\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\r\n\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\r\n\r\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\r\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\r\n\r\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\r\n\r\n\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\r\n\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\r\n\r\n\tthis.offset = new THREE.Vector2( 0, 0 );\r\n\tthis.repeat = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.generateMipmaps = true;\r\n\tthis.premultiplyAlpha = false;\r\n\tthis.flipY = true;\r\n\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\r\n\r\n\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\r\n\t//\r\n\t// Also changing the encoding after already used by a Material will not automatically make the Material\r\n\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\r\n\tthis.encoding = THREE.LinearEncoding;\r\n\r\n\tthis.version = 0;\r\n\tthis.onUpdate = null;\r\n\r\n};\r\n\r\nTHREE.Texture.DEFAULT_IMAGE = undefined;\r\nTHREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;\r\n\r\nTHREE.Texture.prototype = {\r\n\r\n\tconstructor: THREE.Texture,\r\n\r\n\tset needsUpdate ( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.image = source.image;\r\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\r\n\r\n\t\tthis.mapping = source.mapping;\r\n\r\n\t\tthis.wrapS = source.wrapS;\r\n\t\tthis.wrapT = source.wrapT;\r\n\r\n\t\tthis.magFilter = source.magFilter;\r\n\t\tthis.minFilter = source.minFilter;\r\n\r\n\t\tthis.anisotropy = source.anisotropy;\r\n\r\n\t\tthis.format = source.format;\r\n\t\tthis.type = source.type;\r\n\r\n\t\tthis.offset.copy( source.offset );\r\n\t\tthis.repeat.copy( source.repeat );\r\n\r\n\t\tthis.generateMipmaps = source.generateMipmaps;\r\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\r\n\t\tthis.flipY = source.flipY;\r\n\t\tthis.unpackAlignment = source.unpackAlignment;\r\n\t\tthis.encoding = source.encoding;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\r\n\r\n\t\t\treturn meta.textures[ this.uuid ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getDataURL( image ) {\r\n\r\n\t\t\tvar canvas;\r\n\r\n\t\t\tif ( image.toDataURL !== undefined ) {\r\n\r\n\t\t\t\tcanvas = image;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcanvas = document.createElement( 'canvas' );\r\n\t\t\t\tcanvas.width = image.width;\r\n\t\t\t\tcanvas.height = image.height;\r\n\r\n\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar output = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Texture',\r\n\t\t\t\tgenerator: 'Texture.toJSON'\r\n\t\t\t},\r\n\r\n\t\t\tuuid: this.uuid,\r\n\t\t\tname: this.name,\r\n\r\n\t\t\tmapping: this.mapping,\r\n\r\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\r\n\t\t\toffset: [ this.offset.x, this.offset.y ],\r\n\t\t\twrap: [ this.wrapS, this.wrapT ],\r\n\r\n\t\t\tminFilter: this.minFilter,\r\n\t\t\tmagFilter: this.magFilter,\r\n\t\t\tanisotropy: this.anisotropy\r\n\t\t};\r\n\r\n\t\tif ( this.image !== undefined ) {\r\n\r\n\t\t\t// TODO: Move to THREE.Image\r\n\r\n\t\t\tvar image = this.image;\r\n\r\n\t\t\tif ( image.uuid === undefined ) {\r\n\r\n\t\t\t\timage.uuid = THREE.Math.generateUUID(); // UGH\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\r\n\r\n\t\t\t\tmeta.images[ image.uuid ] = {\r\n\t\t\t\t\tuuid: image.uuid,\r\n\t\t\t\t\turl: getDataURL( image )\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutput.image = image.uuid;\r\n\r\n\t\t}\r\n\r\n\t\tmeta.textures[ this.uuid ] = output;\r\n\r\n\t\treturn output;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t},\r\n\r\n\ttransformUv: function ( uv ) {\r\n\r\n\t\tif ( this.mapping !== THREE.UVMapping )  return;\r\n\r\n\t\tuv.multiply( this.repeat );\r\n\t\tuv.add( this.offset );\r\n\r\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\r\n\r\n\t\t\tswitch ( this.wrapS ) {\r\n\r\n\t\t\t\tcase THREE.RepeatWrapping:\r\n\r\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\r\n\r\n\t\t\tswitch ( this.wrapT ) {\r\n\r\n\t\t\t\tcase THREE.RepeatWrapping:\r\n\r\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.flipY ) {\r\n\r\n\t\t\tuv.y = 1 - uv.y;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.Texture.prototype );\r\n\r\nTHREE.TextureIdCount = 0;\r\n\r\n// File:src/textures/CanvasTexture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.needsUpdate = true;\r\n\r\n};\r\n\r\nTHREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;\r\n\r\n// File:src/textures/CubeTexture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\timages = images !== undefined ? images : [];\r\n\tmapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;\r\n\r\n\tTHREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.flipY = false;\r\n\r\n};\r\n\r\nTHREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.CubeTexture.prototype.constructor = THREE.CubeTexture;\r\n\r\nObject.defineProperty( THREE.CubeTexture.prototype, 'images', {\r\n\r\n\tget: function () {\r\n\r\n\t\treturn this.image;\r\n\r\n\t},\r\n\r\n\tset: function ( value ) {\r\n\r\n\t\tthis.image = value;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/textures/CompressedTexture.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.image = { width: width, height: height };\r\n\tthis.mipmaps = mipmaps;\r\n\r\n\t// no flipping for cube textures\r\n\t// (also flipping doesn't work for compressed textures )\r\n\r\n\tthis.flipY = false;\r\n\r\n\t// can't generate mipmaps for compressed textures\r\n\t// mips must be embedded in DDS files\r\n\r\n\tthis.generateMipmaps = false;\r\n\r\n};\r\n\r\nTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;\r\n\r\n// File:src/textures/DataTexture.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.image = { data: data, width: width, height: height };\r\n\r\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\r\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\r\n\r\n\tthis.flipY = false;\r\n\tthis.generateMipmaps  = false;\r\n\r\n};\r\n\r\nTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.DataTexture.prototype.constructor = THREE.DataTexture;\r\n\r\n// File:src/textures/VideoTexture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.generateMipmaps = false;\r\n\r\n\tvar scope = this;\r\n\r\n\tfunction update() {\r\n\r\n\t\trequestAnimationFrame( update );\r\n\r\n\t\tif ( video.readyState === video.HAVE_ENOUGH_DATA ) {\r\n\r\n\t\t\tscope.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate();\r\n\r\n};\r\n\r\nTHREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.VideoTexture.prototype.constructor = THREE.VideoTexture;\r\n\r\n// File:src/objects/Group.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Group = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Group';\r\n\r\n};\r\n\r\nTHREE.Group.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Group.prototype.constructor = THREE.Group;\r\n\r\n// File:src/objects/Points.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Points = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Points';\r\n\r\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\r\n\tthis.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n};\r\n\r\nTHREE.Points.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Points.prototype.constructor = THREE.Points;\r\n\r\nTHREE.Points.prototype.raycast = ( function () {\r\n\r\n\tvar inverseMatrix = new THREE.Matrix4();\r\n\tvar ray = new THREE.Ray();\r\n\tvar sphere = new THREE.Sphere();\r\n\r\n\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\tvar object = this;\r\n\t\tvar geometry = this.geometry;\r\n\t\tvar matrixWorld = this.matrixWorld;\r\n\t\tvar threshold = raycaster.params.Points.threshold;\r\n\r\n\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\tsphere.copy( geometry.boundingSphere );\r\n\t\tsphere.applyMatrix4( matrixWorld );\r\n\r\n\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\r\n\r\n\t\t//\r\n\r\n\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\r\n\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\tvar localThresholdSq = localThreshold * localThreshold;\r\n\t\tvar position = new THREE.Vector3();\r\n\r\n\t\tfunction testPoint( point, index ) {\r\n\r\n\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\r\n\r\n\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\r\n\r\n\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\r\n\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\r\n\r\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\r\n\r\n\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\r\n\t\t\t\t\tpoint: intersectPoint.clone(),\r\n\t\t\t\t\tindex: index,\r\n\t\t\t\t\tface: null,\r\n\t\t\t\t\tobject: object\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tvar a = indices[ i ];\r\n\r\n\t\t\t\t\tposition.fromArray( positions, a * 3 );\r\n\r\n\t\t\t\t\ttestPoint( position, a );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tposition.fromArray( positions, i * 3 );\r\n\r\n\t\t\t\t\ttestPoint( position, i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\ttestPoint( vertices[ i ], i );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.Points.prototype.clone = function () {\r\n\r\n\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n};\r\n\r\n// File:src/objects/Line.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Line = function ( geometry, material, mode ) {\r\n\r\n\tif ( mode === 1 ) {\r\n\r\n\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\r\n\t\treturn new THREE.LineSegments( geometry, material );\r\n\r\n\t}\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Line';\r\n\r\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\r\n\tthis.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n};\r\n\r\nTHREE.Line.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Line.prototype.constructor = THREE.Line;\r\n\r\nTHREE.Line.prototype.raycast = ( function () {\r\n\r\n\tvar inverseMatrix = new THREE.Matrix4();\r\n\tvar ray = new THREE.Ray();\r\n\tvar sphere = new THREE.Sphere();\r\n\r\n\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\tvar precision = raycaster.linePrecision;\r\n\t\tvar precisionSq = precision * precision;\r\n\r\n\t\tvar geometry = this.geometry;\r\n\t\tvar matrixWorld = this.matrixWorld;\r\n\r\n\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\tsphere.copy( geometry.boundingSphere );\r\n\t\tsphere.applyMatrix4( matrixWorld );\r\n\r\n\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\r\n\r\n\t\t//\r\n\r\n\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\r\n\t\tvar vStart = new THREE.Vector3();\r\n\t\tvar vEnd = new THREE.Vector3();\r\n\t\tvar interSegment = new THREE.Vector3();\r\n\t\tvar interRay = new THREE.Vector3();\r\n\t\tvar step = this instanceof THREE.LineSegments ? 2 : 1;\r\n\r\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\tvar a = indices[ i ];\r\n\t\t\t\t\tvar b = indices[ i + 1 ];\r\n\r\n\t\t\t\t\tvStart.fromArray( positions, a * 3 );\r\n\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\r\n\r\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\r\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\r\n\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\tvStart.fromArray( positions, 3 * i );\r\n\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\r\n\r\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\r\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\r\n\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\t\tvar nbVertices = vertices.length;\r\n\r\n\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\r\n\r\n\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\r\n\r\n\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\r\n\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\r\n\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\tindex: i,\r\n\t\t\t\t\tface: null,\r\n\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.Line.prototype.clone = function () {\r\n\r\n\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n};\r\n\r\n// DEPRECATED\r\n\r\nTHREE.LineStrip = 0;\r\nTHREE.LinePieces = 1;\r\n\r\n// File:src/objects/LineSegments.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LineSegments = function ( geometry, material ) {\r\n\r\n\tTHREE.Line.call( this, geometry, material );\r\n\r\n\tthis.type = 'LineSegments';\r\n\r\n};\r\n\r\nTHREE.LineSegments.prototype = Object.create( THREE.Line.prototype );\r\nTHREE.LineSegments.prototype.constructor = THREE.LineSegments;\r\n\r\n// File:src/objects/Mesh.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author jonobr1 / http://jonobr1.com/\r\n */\r\n\r\nTHREE.Mesh = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Mesh';\r\n\r\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.Geometry();\r\n\tthis.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\tthis.drawMode = THREE.TrianglesDrawMode;\r\n\r\n\tthis.updateMorphTargets();\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Mesh.prototype.constructor = THREE.Mesh;\r\n\r\nTHREE.Mesh.prototype.setDrawMode = function ( value ) {\r\n\r\n\tthis.drawMode = value;\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype.updateMorphTargets = function () {\r\n\r\n\tif ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {\r\n\r\n\t\tthis.morphTargetBase = - 1;\r\n\t\tthis.morphTargetInfluences = [];\r\n\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\r\n\r\n\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {\r\n\r\n\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\r\n\r\n\t\treturn this.morphTargetDictionary[ name ];\r\n\r\n\t}\r\n\r\n\tconsole.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );\r\n\r\n\treturn 0;\r\n\r\n};\r\n\r\n\r\nTHREE.Mesh.prototype.raycast = ( function () {\r\n\r\n\tvar inverseMatrix = new THREE.Matrix4();\r\n\tvar ray = new THREE.Ray();\r\n\tvar sphere = new THREE.Sphere();\r\n\r\n\tvar vA = new THREE.Vector3();\r\n\tvar vB = new THREE.Vector3();\r\n\tvar vC = new THREE.Vector3();\r\n\r\n\tvar tempA = new THREE.Vector3();\r\n\tvar tempB = new THREE.Vector3();\r\n\tvar tempC = new THREE.Vector3();\r\n\r\n\tvar uvA = new THREE.Vector2();\r\n\tvar uvB = new THREE.Vector2();\r\n\tvar uvC = new THREE.Vector2();\r\n\r\n\tvar barycoord = new THREE.Vector3();\r\n\r\n\tvar intersectionPoint = new THREE.Vector3();\r\n\tvar intersectionPointWorld = new THREE.Vector3();\r\n\r\n\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\r\n\r\n\t\tTHREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\r\n\r\n\t\tuv1.multiplyScalar( barycoord.x );\r\n\t\tuv2.multiplyScalar( barycoord.y );\r\n\t\tuv3.multiplyScalar( barycoord.z );\r\n\r\n\t\tuv1.add( uv2 ).add( uv3 );\r\n\r\n\t\treturn uv1.clone();\r\n\r\n\t}\r\n\r\n\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\r\n\r\n\t\tvar intersect;\r\n\t\tvar material = object.material;\r\n\r\n\t\tif ( material.side === THREE.BackSide ) {\r\n\r\n\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );\r\n\r\n\t\t}\r\n\r\n\t\tif ( intersect === null ) return null;\r\n\r\n\t\tintersectionPointWorld.copy( point );\r\n\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\r\n\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\r\n\r\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\r\n\r\n\t\treturn {\r\n\t\t\tdistance: distance,\r\n\t\t\tpoint: intersectionPointWorld.clone(),\r\n\t\t\tobject: object\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\r\n\r\n\t\tvA.fromArray( positions, a * 3 );\r\n\t\tvB.fromArray( positions, b * 3 );\r\n\t\tvC.fromArray( positions, c * 3 );\r\n\r\n\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\r\n\r\n\t\tif ( intersection ) {\r\n\r\n\t\t\tif ( uvs ) {\r\n\r\n\t\t\t\tuvA.fromArray( uvs, a * 2 );\r\n\t\t\t\tuvB.fromArray( uvs, b * 2 );\r\n\t\t\t\tuvC.fromArray( uvs, c * 2 );\r\n\r\n\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tintersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );\r\n\t\t\tintersection.faceIndex = a;\r\n\r\n\t\t}\r\n\r\n\t\treturn intersection;\r\n\r\n\t}\r\n\r\n\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\tvar geometry = this.geometry;\r\n\t\tvar material = this.material;\r\n\t\tvar matrixWorld = this.matrixWorld;\r\n\r\n\t\tif ( material === undefined ) return;\r\n\r\n\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\tsphere.copy( geometry.boundingSphere );\r\n\t\tsphere.applyMatrix4( matrixWorld );\r\n\r\n\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\r\n\r\n\t\t//\r\n\r\n\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\r\n\t\t// Check boundingBox before continuing\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\r\n\r\n\t\t}\r\n\r\n\t\tvar uvs, intersection;\r\n\r\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tvar a, b, c;\r\n\t\t\tvar index = geometry.index;\r\n\t\t\tvar attributes = geometry.attributes;\r\n\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\tif ( attributes.uv !== undefined ) {\r\n\r\n\t\t\t\tuvs = attributes.uv.array;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\ta = indices[ i ];\r\n\t\t\t\t\tb = indices[ i + 1 ];\r\n\t\t\t\t\tc = indices[ i + 2 ];\r\n\r\n\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\r\n\r\n\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\r\n\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\r\n\r\n\t\t\t\t\ta = i / 3;\r\n\t\t\t\t\tb = a + 1;\r\n\t\t\t\t\tc = a + 2;\r\n\r\n\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\r\n\r\n\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tvar fvA, fvB, fvC;\r\n\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\r\n\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\r\n\r\n\t\t\tvar vertices = geometry.vertices;\r\n\t\t\tvar faces = geometry.faces;\r\n\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\r\n\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\r\n\r\n\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ f ];\r\n\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\r\n\r\n\t\t\t\tif ( faceMaterial === undefined ) continue;\r\n\r\n\t\t\t\tfvA = vertices[ face.a ];\r\n\t\t\t\tfvB = vertices[ face.b ];\r\n\t\t\t\tfvC = vertices[ face.c ];\r\n\r\n\t\t\t\tif ( faceMaterial.morphTargets === true ) {\r\n\r\n\t\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\r\n\r\n\t\t\t\t\tvA.set( 0, 0, 0 );\r\n\t\t\t\t\tvB.set( 0, 0, 0 );\r\n\t\t\t\t\tvC.set( 0, 0, 0 );\r\n\r\n\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\r\n\r\n\t\t\t\t\t\tvar influence = morphInfluences[ t ];\r\n\r\n\t\t\t\t\t\tif ( influence === 0 ) continue;\r\n\r\n\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\r\n\r\n\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\r\n\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\r\n\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvA.add( fvA );\r\n\t\t\t\t\tvB.add( fvB );\r\n\t\t\t\t\tvC.add( fvC );\r\n\r\n\t\t\t\t\tfvA = vA;\r\n\t\t\t\t\tfvB = vB;\r\n\t\t\t\t\tfvC = vC;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\r\n\r\n\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\tif ( uvs ) {\r\n\r\n\t\t\t\t\t\tvar uvs_f = uvs[ f ];\r\n\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\r\n\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\r\n\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\r\n\r\n\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tintersection.face = face;\r\n\t\t\t\t\tintersection.faceIndex = f;\r\n\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.Mesh.prototype.clone = function () {\r\n\r\n\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n};\r\n\r\n// File:src/objects/Bone.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.Bone = function ( skin ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Bone';\r\n\r\n\tthis.skin = skin;\r\n\r\n};\r\n\r\nTHREE.Bone.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Bone.prototype.constructor = THREE.Bone;\r\n\r\nTHREE.Bone.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\tthis.skin = source.skin;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/objects/Skeleton.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author michael guerrero / http://realitymeltdown.com\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {\r\n\r\n\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\r\n\r\n\tthis.identityMatrix = new THREE.Matrix4();\r\n\r\n\t// copy the bone array\r\n\r\n\tbones = bones || [];\r\n\r\n\tthis.bones = bones.slice( 0 );\r\n\r\n\t// create a bone texture or an array of floats\r\n\r\n\tif ( this.useVertexTexture ) {\r\n\r\n\t\t// layout (1 matrix = 4 pixels)\r\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\r\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\r\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\r\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\r\n\r\n\t\t\r\n\t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\r\n\t\tsize = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );\r\n\t\tsize = Math.max( size, 4 );\r\n\r\n\t\tthis.boneTextureWidth = size;\r\n\t\tthis.boneTextureHeight = size;\r\n\r\n\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\r\n\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\r\n\r\n\t} else {\r\n\r\n\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\r\n\r\n\t}\r\n\r\n\t// use the supplied bone inverses or calculate the inverses\r\n\r\n\tif ( boneInverses === undefined ) {\r\n\r\n\t\tthis.calculateInverses();\r\n\r\n\t} else {\r\n\r\n\t\tif ( this.bones.length === boneInverses.length ) {\r\n\r\n\t\t\tthis.boneInverses = boneInverses.slice( 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\r\n\r\n\t\t\tthis.boneInverses = [];\r\n\r\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\t\tthis.boneInverses.push( new THREE.Matrix4() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Skeleton.prototype.calculateInverses = function () {\r\n\r\n\tthis.boneInverses = [];\r\n\r\n\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\tvar inverse = new THREE.Matrix4();\r\n\r\n\t\tif ( this.bones[ b ] ) {\r\n\r\n\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\tthis.boneInverses.push( inverse );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Skeleton.prototype.pose = function () {\r\n\r\n\tvar bone;\r\n\r\n\t// recover the bind-time world matrices\r\n\r\n\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\tbone = this.bones[ b ];\r\n\r\n\t\tif ( bone ) {\r\n\r\n\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// compute the local matrices, positions, rotations and scales\r\n\r\n\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\tbone = this.bones[ b ];\r\n\r\n\t\tif ( bone ) {\r\n\r\n\t\t\tif ( bone.parent ) {\r\n\r\n\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\r\n\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbone.matrix.copy( bone.matrixWorld );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Skeleton.prototype.update = ( function () {\r\n\r\n\tvar offsetMatrix = new THREE.Matrix4();\r\n\r\n\treturn function update() {\r\n\r\n\t\t// flatten bone matrices to array\r\n\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\t// compute the offset between the current and the original transform\r\n\r\n\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\r\n\r\n\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\r\n\t\t\toffsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.useVertexTexture ) {\r\n\r\n\t\t\tthis.boneTexture.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nTHREE.Skeleton.prototype.clone = function () {\r\n\r\n\treturn new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\r\n\r\n};\r\n\r\n// File:src/objects/SkinnedMesh.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\tthis.type = 'SkinnedMesh';\r\n\r\n\tthis.bindMode = \"attached\";\r\n\tthis.bindMatrix = new THREE.Matrix4();\r\n\tthis.bindMatrixInverse = new THREE.Matrix4();\r\n\r\n\t// init bones\r\n\r\n\t// TODO: remove bone creation as there is no reason (other than\r\n\t// convenience) for THREE.SkinnedMesh to do this.\r\n\r\n\tvar bones = [];\r\n\r\n\tif ( this.geometry && this.geometry.bones !== undefined ) {\r\n\r\n\t\tvar bone, gbone;\r\n\r\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\r\n\r\n\t\t\tgbone = this.geometry.bones[ b ];\r\n\r\n\t\t\tbone = new THREE.Bone( this );\r\n\t\t\tbones.push( bone );\r\n\r\n\t\t\tbone.name = gbone.name;\r\n\t\t\tbone.position.fromArray( gbone.pos );\r\n\t\t\tbone.quaternion.fromArray( gbone.rotq );\r\n\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\r\n\r\n\t\t\tgbone = this.geometry.bones[ b ];\r\n\r\n\t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null ) {\r\n\r\n\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.add( bones[ b ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.normalizeSkinWeights();\r\n\r\n\tthis.updateMatrixWorld( true );\r\n\tthis.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\r\n\r\n};\r\n\r\n\r\nTHREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );\r\nTHREE.SkinnedMesh.prototype.constructor = THREE.SkinnedMesh;\r\n\r\nTHREE.SkinnedMesh.prototype.bind = function( skeleton, bindMatrix ) {\r\n\r\n\tthis.skeleton = skeleton;\r\n\r\n\tif ( bindMatrix === undefined ) {\r\n\r\n\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\tthis.skeleton.calculateInverses();\r\n\r\n\t\tbindMatrix = this.matrixWorld;\r\n\r\n\t}\r\n\r\n\tthis.bindMatrix.copy( bindMatrix );\r\n\tthis.bindMatrixInverse.getInverse( bindMatrix );\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.pose = function () {\r\n\r\n\tthis.skeleton.pose();\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {\r\n\r\n\tif ( this.geometry instanceof THREE.Geometry ) {\r\n\r\n\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\r\n\r\n\t\t\tvar sw = this.geometry.skinWeights[ i ];\r\n\r\n\t\t\tvar scale = 1.0 / sw.lengthManhattan();\r\n\r\n\t\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\t\tsw.multiplyScalar( scale );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t} else if ( this.geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\tvar vec = new THREE.Vector4();\r\n\r\n\t\tvar skinWeight = this.geometry.attributes.skinWeight;\r\n\r\n\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\r\n\r\n\t\t\tvec.x = skinWeight.getX( i );\r\n\t\t\tvec.y = skinWeight.getY( i );\r\n\t\t\tvec.z = skinWeight.getZ( i );\r\n\t\t\tvec.w = skinWeight.getW( i );\r\n\r\n\t\t\tvar scale = 1.0 / vec.lengthManhattan();\r\n\r\n\t\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\t\tvec.multiplyScalar( scale );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\r\n\r\n\t\t\t}\r\n\r\n\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.updateMatrixWorld = function( force ) {\r\n\r\n\tTHREE.Mesh.prototype.updateMatrixWorld.call( this, true );\r\n\r\n\tif ( this.bindMode === \"attached\" ) {\r\n\r\n\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\r\n\r\n\t} else if ( this.bindMode === \"detached\" ) {\r\n\r\n\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.SkinnedMesh.prototype.clone = function() {\r\n\r\n\treturn new this.constructor( this.geometry, this.material, this.useVertexTexture ).copy( this );\r\n\r\n};\r\n\r\n// File:src/objects/LOD.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LOD = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'LOD';\r\n\r\n\tObject.defineProperties( this, {\r\n\t\tlevels: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: []\r\n\t\t},\r\n\t\tobjects: {\r\n\t\t\tget: function () {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\r\n\t\t\t\treturn this.levels;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\r\n};\r\n\r\n\r\nTHREE.LOD.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.LOD.prototype.constructor = THREE.LOD;\r\n\r\nTHREE.LOD.prototype.addLevel = function ( object, distance ) {\r\n\r\n\tif ( distance === undefined ) distance = 0;\r\n\r\n\tdistance = Math.abs( distance );\r\n\r\n\tvar levels = this.levels;\r\n\r\n\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\tif ( distance < levels[ l ].distance ) {\r\n\r\n\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tlevels.splice( l, 0, { distance: distance, object: object } );\r\n\r\n\tthis.add( object );\r\n\r\n};\r\n\r\nTHREE.LOD.prototype.getObjectForDistance = function ( distance ) {\r\n\r\n\tvar levels = this.levels;\r\n\r\n\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\tif ( distance < levels[ i ].distance ) {\r\n\r\n\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn levels[ i - 1 ].object;\r\n\r\n};\r\n\r\nTHREE.LOD.prototype.raycast = ( function () {\r\n\r\n\tvar matrixPosition = new THREE.Vector3();\r\n\r\n\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\r\n\r\n\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.LOD.prototype.update = function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\r\n\treturn function update( camera ) {\r\n\r\n\t\tvar levels = this.levels;\r\n\r\n\t\tif ( levels.length > 1 ) {\r\n\r\n\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tvar distance = v1.distanceTo( v2 );\r\n\r\n\t\t\tlevels[ 0 ].object.visible = true;\r\n\r\n\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tif ( distance >= levels[ i ].distance ) {\r\n\r\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\r\n\t\t\t\t\tlevels[ i ].object.visible = true;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( ; i < l; i ++ ) {\r\n\r\n\t\t\t\tlevels[ i ].object.visible = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.LOD.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Object3D.prototype.copy.call( this, source, false );\r\n\r\n\tvar levels = source.levels;\r\n\r\n\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\tvar level = levels[ i ];\r\n\r\n\t\tthis.addLevel( level.object.clone(), level.distance );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.LOD.prototype.toJSON = function ( meta ) {\r\n\r\n\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\tdata.object.levels = [];\r\n\r\n\tvar levels = this.levels;\r\n\r\n\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\tvar level = levels[ i ];\r\n\r\n\t\tdata.object.levels.push( {\r\n\t\t\tobject: level.object.uuid,\r\n\t\t\tdistance: level.distance\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\n// File:src/objects/Sprite.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Sprite = ( function () {\r\n\r\n\tvar indices = new Uint16Array( [ 0, 1, 2,  0, 2, 3 ] );\r\n\tvar vertices = new Float32Array( [ - 0.5, - 0.5, 0,   0.5, - 0.5, 0,   0.5, 0.5, 0,   - 0.5, 0.5, 0 ] );\r\n\tvar uvs = new Float32Array( [ 0, 0,   1, 0,   1, 1,   0, 1 ] );\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tgeometry.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n\treturn function Sprite( material ) {\r\n\r\n\t\tTHREE.Object3D.call( this );\r\n\r\n\t\tthis.type = 'Sprite';\r\n\r\n\t\tthis.geometry = geometry;\r\n\t\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\r\n\r\n\t};\r\n\r\n} )();\r\n\r\nTHREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Sprite.prototype.constructor = THREE.Sprite;\r\n\r\nTHREE.Sprite.prototype.raycast = ( function () {\r\n\r\n\tvar matrixPosition = new THREE.Vector3();\r\n\r\n\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\r\n\t\tvar guessSizeSq = this.scale.x * this.scale.y;\r\n\r\n\t\tif ( distanceSq > guessSizeSq ) {\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tintersects.push( {\r\n\r\n\t\t\tdistance: Math.sqrt( distanceSq ),\r\n\t\t\tpoint: this.position,\r\n\t\t\tface: null,\r\n\t\t\tobject: this\r\n\r\n\t\t} );\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.Sprite.prototype.clone = function () {\r\n\r\n\treturn new this.constructor( this.material ).copy( this );\r\n\r\n};\r\n\r\n// Backwards compatibility\r\n\r\nTHREE.Particle = THREE.Sprite;\r\n\r\n// File:src/objects/LensFlare.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.lensFlares = [];\r\n\r\n\tthis.positionScreen = new THREE.Vector3();\r\n\tthis.customUpdateCallback = undefined;\r\n\r\n\tif ( texture !== undefined ) {\r\n\r\n\t\tthis.add( texture, size, distance, blending, color );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.LensFlare.prototype.constructor = THREE.LensFlare;\r\n\r\n\r\n/*\r\n * Add: adds another flare\r\n */\r\n\r\nTHREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {\r\n\r\n\tif ( size === undefined ) size = - 1;\r\n\tif ( distance === undefined ) distance = 0;\r\n\tif ( opacity === undefined ) opacity = 1;\r\n\tif ( color === undefined ) color = new THREE.Color( 0xffffff );\r\n\tif ( blending === undefined ) blending = THREE.NormalBlending;\r\n\r\n\tdistance = Math.min( distance, Math.max( 0, distance ) );\r\n\r\n\tthis.lensFlares.push( {\r\n\t\ttexture: texture,\t// THREE.Texture\r\n\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\r\n\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\r\n\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\r\n\t\tscale: 1, \t\t// scale\r\n\t\trotation: 0, \t\t// rotation\r\n\t\topacity: opacity,\t// opacity\r\n\t\tcolor: color,\t\t// color\r\n\t\tblending: blending\t// blending\r\n\t} );\r\n\r\n};\r\n\r\n/*\r\n * Update lens flares update positions on all flares based on the screen position\r\n * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\r\n */\r\n\r\nTHREE.LensFlare.prototype.updateLensFlares = function () {\r\n\r\n\tvar f, fl = this.lensFlares.length;\r\n\tvar flare;\r\n\tvar vecX = - this.positionScreen.x * 2;\r\n\tvar vecY = - this.positionScreen.y * 2;\r\n\r\n\tfor ( f = 0; f < fl; f ++ ) {\r\n\r\n\t\tflare = this.lensFlares[ f ];\r\n\r\n\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\r\n\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\r\n\r\n\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\r\n\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LensFlare.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\tthis.positionScreen.copy( source.positionScreen );\r\n\tthis.customUpdateCallback = source.customUpdateCallback;\r\n\r\n\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\r\n\r\n\t\tthis.lensFlares.push( source.lensFlares[ i ] );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/scenes/Scene.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Scene = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Scene';\r\n\r\n\tthis.fog = null;\r\n\tthis.overrideMaterial = null;\r\n\r\n\tthis.autoUpdate = true; // checked by the renderer\r\n\r\n};\r\n\r\nTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Scene.prototype.constructor = THREE.Scene;\r\n\r\nTHREE.Scene.prototype.copy = function ( source, recursive ) {\r\n\r\n\tTHREE.Object3D.prototype.copy.call( this, source, recursive );\r\n\r\n\tif ( source.fog !== null ) this.fog = source.fog.clone();\r\n\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\r\n\r\n\tthis.autoUpdate = source.autoUpdate;\r\n\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/scenes/Fog.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Fog = function ( color, near, far ) {\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.color = new THREE.Color( color );\r\n\r\n\tthis.near = ( near !== undefined ) ? near : 1;\r\n\tthis.far = ( far !== undefined ) ? far : 1000;\r\n\r\n};\r\n\r\nTHREE.Fog.prototype.clone = function () {\r\n\r\n\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\r\n\r\n};\r\n\r\n// File:src/scenes/FogExp2.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.FogExp2 = function ( color, density ) {\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.color = new THREE.Color( color );\r\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\r\n\r\n};\r\n\r\nTHREE.FogExp2.prototype.clone = function () {\r\n\r\n\treturn new THREE.FogExp2( this.color.getHex(), this.density );\r\n\r\n};\r\n\r\n// File:src/renderers/shaders/ShaderChunk.js\r\n\r\nTHREE.ShaderChunk = {};\r\n\r\n// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'alphamap_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'alphamap_pars_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tuniform sampler2D alphaMap;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'alphatest_fragment' ] = \"#ifdef ALPHATEST\\n\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'aomap_fragment' ] = \"#ifdef USE_AOMAP\\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'aomap_pars_fragment' ] = \"#ifdef USE_AOMAP\\n\tuniform sampler2D aoMap;\\n\tuniform float aoMapIntensity;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'begin_vertex' ] = \"\\nvec3 transformed = vec3( position );\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'beginnormal_vertex' ] = \"\\nvec3 objectNormal = vec3( normal );\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/bsdfs.glsl\r\n\r\nTHREE.ShaderChunk[ 'bsdfs' ] = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\t\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\t\t}\\n\t\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\treturn 1.0 / ( gl * gv );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat alpha = pow2( roughness );\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_GGX_Smith( alpha, dotNL, dotNV );\\n\tfloat D = D_GGX( alpha, dotNH );\\n\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\tvec4 r = roughness * c0 + c1;\\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_BlinnPhong_Implicit( );\\n\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'bumpmap_pars_fragment' ] = \"#ifdef USE_BUMPMAP\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\tvec2 dHdxy_fwd() {\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\t\treturn vec2( dBx, dBy );\\n\t}\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_fragment' ] = \"#ifdef USE_COLOR\\n\tdiffuseColor.rgb *= vColor;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_pars_fragment' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_pars_vertex' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_vertex' ] = \"#ifdef USE_COLOR\\n\tvColor.xyz = color.xyz;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/common.glsl\r\n\r\nTHREE.ShaderChunk[ 'common' ] = \"#define PI 3.14159\\n#define PI2 6.28318\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nstruct IncidentLight {\\n\tvec3 color;\\n\tvec3 direction;\\n\tbool visible;\\n};\\nstruct ReflectedLight {\\n\tvec3 directDiffuse;\\n\tvec3 directSpecular;\\n\tvec3 indirectDiffuse;\\n\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\tvec3 position;\\n\tvec3 normal;\\n\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'cube_uv_reflection_fragment' ] = \"#ifdef ENVMAP_TYPE_CUBE_UV\\nconst float cubeUV_textureSize = 1024.0;\\nint getFaceFromDirection(vec3 direction) {\\n    vec3 absDirection = abs(direction);\\n    int face = -1;\\n    if( absDirection.x > absDirection.z ) {\\n        if(absDirection.x > absDirection.y )\\n            face = direction.x > 0.0 ? 0 : 3;\\n        else\\n            face = direction.y > 0.0 ? 1 : 4;\\n    }\\n    else {\\n        if(absDirection.z > absDirection.y )\\n            face = direction.z > 0.0 ? 2 : 5;\\n        else\\n            face = direction.y > 0.0 ? 1 : 4;\\n    }\\n    return face;\\n}\\nconst float cubeUV_maxLods1 = log2(cubeUV_textureSize*0.25) - 1.0;\\nconst float cubeUV_rangeClamp = exp2((6.0 - 1.0) * 2.0);\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n    float scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n    float dxRoughness = dFdx(roughness);\\n    float dyRoughness = dFdy(roughness);\\n    vec3 dx = dFdx( vec * scale * dxRoughness );\\n    vec3 dy = dFdy( vec * scale * dyRoughness );\\n    float d = max( dot( dx, dx ), dot( dy, dy ) );\\n    d = clamp(d, 1.0, cubeUV_rangeClamp);\\n    float mipLevel = 0.5 * log2(d);\\n    return vec2(floor(mipLevel), fract(mipLevel));\\n}\\nconst float cubeUV_maxLods2 = log2(cubeUV_textureSize*0.25) - 2.0;\\nconst float cubeUV_rcpTextureSize = 1.0 / cubeUV_textureSize;\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n    mipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n    float a = 16.0 * cubeUV_rcpTextureSize;\\n    vec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n    vec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n    float powScale = exp2_packed.x * exp2_packed.y;\\n    float scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n    float mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n    bool bRes = mipLevel == 0.0;\\n    scale =  bRes && (scale < a) ? a : scale;\\n    vec3 r;\\n    vec2 offset;\\n    int face = getFaceFromDirection(direction);\\n    float rcpPowScale = 1.0 / powScale;\\n    if( face == 0) {\\n        r = vec3(direction.x, -direction.z, direction.y);\\n        offset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n        offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n    }\\n    else if( face == 1) {\\n        r = vec3(direction.y, direction.x, direction.z);\\n        offset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n        offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n    }\\n    else if( face == 2) {\\n        r = vec3(direction.z, direction.x, direction.y);\\n        offset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n        offset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n    }\\n    else if( face == 3) {\\n        r = vec3(direction.x, direction.z, direction.y);\\n        offset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n        offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n    }\\n    else if( face == 4) {\\n        r = vec3(direction.y, direction.x, -direction.z);\\n        offset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n        offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n    }\\n    else {\\n        r = vec3(direction.z, -direction.x, direction.y);\\n        offset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n        offset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n    }\\n    r = normalize(r);\\n    float texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n    vec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n    vec2 base = offset + vec2( texelOffset );\\n    return base + s * ( scale - 2.0 * texelOffset );\\n}\\nconst float cubeUV_maxLods3 = log2(cubeUV_textureSize*0.25) - 3.0;\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n    float roughnessVal = roughness* cubeUV_maxLods3;\\n    float r1 = floor(roughnessVal);\\n    float r2 = r1 + 1.0;\\n    float t = fract(roughnessVal);\\n    vec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n    float s = mipInfo.y;\\n    float level0 = mipInfo.x;\\n    float level1 = level0 + 1.0;\\n    level1 = level1 > 5.0 ? 5.0 : level1;\\n    level0 += min( floor( s + 0.5 ), 5.0 );\\n    vec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n    vec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n    vec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n    vec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n    vec4 result = mix(color10, color20, t);\\n    return vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'defaultnormal_vertex' ] = \"#ifdef FLIP_SIDED\\n\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'displacementmap_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'displacementmap_pars_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\tuniform sampler2D displacementMap;\\n\tuniform float displacementScale;\\n\tuniform float displacementBias;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'emissivemap_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'emissivemap_pars_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tuniform sampler2D emissiveMap;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'encodings_pars_fragment' ] = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/encodings_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'encodings_fragment' ] = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_fragment' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#else\\n\t\tvec3 reflectVec = vReflect;\\n\t#endif\\n\t#ifdef DOUBLE_SIDED\\n\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t#else\\n\t\tfloat flipNormal = 1.0;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\tvec2 sampleUV;\\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\\n\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\t#endif\\n\tenvColor = envMapTexelToLinear( envColor );\\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_MIX )\\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_ADD )\\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_pars_fragment' ] = \"#if defined( USE_ENVMAP ) || defined( STANDARD )\\n\tuniform float reflectivity;\\n\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tuniform samplerCube envMap;\\n\t#else\\n\t\tuniform sampler2D envMap;\\n\t#endif\\n\tuniform float flipEnvMap;\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( STANDARD )\\n\t\tuniform float refractionRatio;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_pars_vertex' ] = \"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\\n\tvarying vec3 vReflect;\\n\tuniform float refractionRatio;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_vertex' ] = \"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG ) && ! defined( STANDARD )\\n\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\t#else\\n\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'fog_fragment' ] = \"#ifdef USE_FOG\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\t#else\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\t#endif\\n\t#ifdef FOG_EXP2\\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\t#else\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\t#endif\\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'fog_pars_fragment' ] = \"#ifdef USE_FOG\\n\tuniform vec3 fogColor;\\n\t#ifdef FOG_EXP2\\n\t\tuniform float fogDensity;\\n\t#else\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lightmap_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lightmap_pars_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\tuniform sampler2D lightMap;\\n\tuniform float lightMapIntensity;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_lambert_vertex' ] = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tdirectLight = getPointDirectLightIrradiance( pointLights[ i ], geometry );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tdirectLight = getSpotDirectLightIrradiance( spotLights[ i ], geometry );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectLight = getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\t\t#endif\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_pars.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_pars' ] = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\tvec3 irradiance = ambientLightColor;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\tstruct DirectionalLight {\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\tIncidentLight getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry ) {\\n\t\tIncidentLight directLight;\\n\t\tdirectLight.color = directionalLight.color;\\n\t\tdirectLight.direction = directionalLight.direction;\\n\t\tdirectLight.visible = true;\\n\t\treturn directLight;\\n\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\tstruct PointLight {\\n\t\tvec3 position;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\tIncidentLight getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry ) {\\n\t\tIncidentLight directLight;\\n\t\tvec3 lVector = pointLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\t\t\tdirectLight.color = pointLight.color;\\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t\treturn directLight;\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tstruct SpotLight {\\n\t\tvec3 position;\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tfloat coneCos;\\n\t\tfloat penumbraCos;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\tIncidentLight getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry ) {\\n\t\tIncidentLight directLight;\\n\t\tvec3 lVector = spotLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\t\t\tdirectLight.color = spotLight.color;\\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t\treturn directLight;\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tstruct HemisphereLight {\\n\t\tvec3 direction;\\n\t\tvec3 skyColor;\\n\t\tvec3 groundColor;\\n\t};\\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tirradiance *= PI;\\n\t\t#endif\\n\t\treturn irradiance;\\n\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t\t#else\\n\t\t\tfloat flipNormal = 1.0;\\n\t\t#endif\\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#endif\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\t\t#else\\n\t\t\tvec4 envMapColor = vec4( 0.0 );\\n\t\t#endif\\n\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\\n\t}\\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\t}\\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\t\t#endif\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t\t#else\\n\t\t\tfloat flipNormal = 1.0;\\n\t\t#endif\\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#endif\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\t\tvec2 sampleUV;\\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#endif\\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#endif\\n\t\t#endif\\n\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\treturn envMapColor.rgb * envMapIntensity;\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_phong_fragment' ] = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_phong_pars_fragment' ] = \"#ifdef USE_ENVMAP\\n\tvarying vec3 vWorldPosition;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\tvec3\tdiffuseColor;\\n\tvec3\tspecularColor;\\n\tfloat\tspecularShininess;\\n\tfloat\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\t(0)\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_phong_pars_vertex' ] = \"#ifdef USE_ENVMAP\\n\tvarying vec3 vWorldPosition;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_phong_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_phong_vertex' ] = \"#ifdef USE_ENVMAP\\n\tvWorldPosition = worldPosition.xyz;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_standard_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_standard_fragment' ] = \"StandardMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\nmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_standard_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_standard_pars_fragment' ] = \"struct StandardMaterial {\\n\tvec3\tdiffuseColor;\\n\tfloat\tspecularRoughness;\\n\tvec3\tspecularColor;\\n};\\nvoid RE_Direct_Standard( const in IncidentLight directLight, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n}\\nvoid RE_IndirectDiffuse_Standard( const in vec3 irradiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Standard( const in vec3 radiance, const in GeometricContext geometry, const in StandardMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_Standard\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Standard\\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Standard\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_template.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_template' ] = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tdirectLight = getPointDirectLightIrradiance( pointLight, geometry );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tdirectLight = getSpotDirectLightIrradiance( spotLight, geometry );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tdirectLight = getDirectionalDirectLightIrradiance( directionalLight, geometry );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\t#ifdef USE_LIGHTMAP\\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tlightMapIrradiance *= PI;\\n\t\t#endif\\n\t\tirradiance += lightMapIrradiance;\\n\t#endif\\n\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t}\\n\t#endif\\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\t#endif\\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\tRE_IndirectSpecular( radiance, geometry, material, reflectedLight );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_fragment' ] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_pars_fragment' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tuniform float logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_pars_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n\tuniform float logDepthBufFC;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\t#else\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 texelColor = texture2D( map, vUv );\\n\ttexelColor = mapTexelToLinear( texelColor );\\n\tdiffuseColor *= texelColor;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform sampler2D map;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_particle_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_particle_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform vec4 offsetRepeat;\\n\tuniform sampler2D map;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'metalnessmap_fragment' ] = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'metalnessmap_pars_fragment' ] = \"#ifdef USE_METALNESSMAP\\n\tuniform sampler2D metalnessMap;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'morphnormal_vertex' ] = \"#ifdef USE_MORPHNORMALS\\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'morphtarget_pars_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\t#ifndef USE_MORPHNORMALS\\n\tuniform float morphTargetInfluences[ 8 ];\\n\t#else\\n\tuniform float morphTargetInfluences[ 4 ];\\n\t#endif\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'morphtarget_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\t#ifndef USE_MORPHNORMALS\\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'normal_fragment' ] = \"#ifdef FLAT_SHADED\\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\tvec3 normal = normalize( vNormal );\\n\t#ifdef DOUBLE_SIDED\\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\\n\t#endif\\n#endif\\n#ifdef USE_NORMALMAP\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'normalmap_pars_fragment' ] = \"#ifdef USE_NORMALMAP\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'premultiplied_alpha_fragment' ] = \"#ifdef PREMULTIPLIED_ALPHA\\n\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'project_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'roughnessmap_fragment' ] = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'roughnessmap_pars_fragment' ] = \"#ifdef USE_ROUGHNESSMAP\\n\tuniform sampler2D roughnessMap;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmap_pars_fragment' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n\tfloat unpackDepth( const in vec4 rgba_depth ) {\\n\t\tconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\\n\t\treturn dot( rgba_depth, bit_shift );\\n\t}\\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\t\treturn step( compare, unpackDepth( texture2D( depths, uv ) ) );\\n\t}\\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\t\tvec2 f = fract( uv * size + 0.5 );\\n\t\tfloat a = mix( lb, lt, f.y );\\n\t\tfloat b = mix( rb, rt, f.y );\\n\t\tfloat c = mix( a, b, f.x );\\n\t\treturn c;\\n\t}\\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tshadowCoord.xyz /= shadowCoord.w;\\n\t\tshadowCoord.z += shadowBias;\\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\tbool inFrustum = all( inFrustumVec );\\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\t\tbool frustumTest = all( frustumTestVec );\\n\t\tif ( frustumTest ) {\\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\t\t#endif\\n\t\t}\\n\t\treturn 1.0;\\n\t}\\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\t\tvec3 absV = abs( v );\\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\t\tabsV *= scaleToCube;\\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\t\tvec2 planar = v.xy;\\n\t\tfloat almostATexel = 1.5 * texelSizeY;\\n\t\tfloat almostOne = 1.0 - almostATexel;\\n\t\tif ( absV.z >= almostOne ) {\\n\t\t\tif ( v.z > 0.0 )\\n\t\t\t\tplanar.x = 4.0 - v.x;\\n\t\t} else if ( absV.x >= almostOne ) {\\n\t\t\tfloat signX = sign( v.x );\\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\\n\t\t} else if ( absV.y >= almostOne ) {\\n\t\t\tfloat signY = sign( v.y );\\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\t\t\tplanar.y = v.z * signY - 2.0;\\n\t\t}\\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\t}\\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\t\tvec3 lightToPosition = shadowCoord.xyz;\\n\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\t\t#endif\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmap_pars_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmap_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmask_pars_fragment' ] = \"float getShadowMask() {\\n\tfloat shadow = 1.0;\\n\t#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#endif\\n\treturn shadow;\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinbase_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinning_pars_vertex' ] = \"#ifdef USE_SKINNING\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\t#ifdef BONE_TEXTURE\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\t\t\ty = dy * ( y + 0.5 );\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\t\t\treturn bone;\\n\t\t}\\n\t#else\\n\t\tuniform mat4 boneGlobalMatrices[ MAX_BONES ];\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tmat4 bone = boneGlobalMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\t\t}\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinning_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinnormal_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'specularmap_fragment' ] = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n#else\\n\tspecularStrength = 1.0;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'specularmap_pars_fragment' ] = \"#ifdef USE_SPECULARMAP\\n\tuniform sampler2D specularMap;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'tonemapping_fragment' ] = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'tonemapping_pars_fragment' ] = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv2_pars_fragment' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvarying vec2 vUv2;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv2_pars_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tattribute vec2 uv2;\\n\tvarying vec2 vUv2;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv2_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvUv2 = uv2;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv_pars_fragment' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv_pars_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'worldpos_vertex' ] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( STANDARD ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\t#ifdef USE_SKINNING\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\t#else\\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/UniformsUtils.js\r\n\r\n/**\r\n * Uniform Utilities\r\n */\r\n\r\nTHREE.UniformsUtils = {\r\n\r\n\tmerge: function ( uniforms ) {\r\n\r\n\t\tvar merged = {};\r\n\r\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\r\n\r\n\t\t\tvar tmp = this.clone( uniforms[ u ] );\r\n\r\n\t\t\tfor ( var p in tmp ) {\r\n\r\n\t\t\t\tmerged[ p ] = tmp[ p ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn merged;\r\n\r\n\t},\r\n\r\n\tclone: function ( uniforms_src ) {\r\n\r\n\t\tvar uniforms_dst = {};\r\n\r\n\t\tfor ( var u in uniforms_src ) {\r\n\r\n\t\t\tuniforms_dst[ u ] = {};\r\n\r\n\t\t\tfor ( var p in uniforms_src[ u ] ) {\r\n\r\n\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\r\n\r\n\t\t\t\tif ( parameter_src instanceof THREE.Color ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Matrix3 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\r\n\r\n\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn uniforms_dst;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/shaders/UniformsLib.js\r\n\r\n/**\r\n * Uniforms library for shared webgl shaders\r\n */\r\n\r\nTHREE.UniformsLib = {\r\n\r\n\tcommon: {\r\n\r\n\t\t\"diffuse\": { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\"opacity\": { type: \"f\", value: 1.0 },\r\n\r\n\t\t\"map\": { type: \"t\", value: null },\r\n\t\t\"offsetRepeat\": { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) },\r\n\r\n\t\t\"specularMap\": { type: \"t\", value: null },\r\n\t\t\"alphaMap\": { type: \"t\", value: null },\r\n\r\n\t\t\"envMap\": { type: \"t\", value: null },\r\n\t\t\"flipEnvMap\": { type: \"f\", value: - 1 },\r\n\t\t\"reflectivity\": { type: \"f\", value: 1.0 },\r\n\t\t\"refractionRatio\": { type: \"f\", value: 0.98 }\r\n\r\n\t},\r\n\r\n\taomap: {\r\n\r\n\t\t\"aoMap\": { type: \"t\", value: null },\r\n\t\t\"aoMapIntensity\": { type: \"f\", value: 1 }\r\n\r\n\t},\r\n\r\n\tlightmap: {\r\n\r\n\t\t\"lightMap\": { type: \"t\", value: null },\r\n\t\t\"lightMapIntensity\": { type: \"f\", value: 1 }\r\n\r\n\t},\r\n\r\n\temissivemap: {\r\n\r\n\t\t\"emissiveMap\": { type: \"t\", value: null }\r\n\r\n\t},\r\n\r\n\tbumpmap: {\r\n\r\n\t\t\"bumpMap\": { type: \"t\", value: null },\r\n\t\t\"bumpScale\": { type: \"f\", value: 1 }\r\n\r\n\t},\r\n\r\n\tnormalmap: {\r\n\r\n\t\t\"normalMap\": { type: \"t\", value: null },\r\n\t\t\"normalScale\": { type: \"v2\", value: new THREE.Vector2( 1, 1 ) }\r\n\r\n\t},\r\n\r\n\tdisplacementmap: {\r\n\r\n\t\t\"displacementMap\": { type: \"t\", value: null },\r\n\t\t\"displacementScale\": { type: \"f\", value: 1 },\r\n\t\t\"displacementBias\": { type: \"f\", value: 0 }\r\n\r\n\t},\r\n\r\n\troughnessmap: {\r\n\r\n\t\t\"roughnessMap\": { type: \"t\", value: null }\r\n\r\n\t},\r\n\r\n\tmetalnessmap: {\r\n\r\n\t\t\"metalnessMap\": { type: \"t\", value: null }\r\n\r\n\t},\r\n\r\n\tfog: {\r\n\r\n\t\t\"fogDensity\": { type: \"f\", value: 0.00025 },\r\n\t\t\"fogNear\": { type: \"f\", value: 1 },\r\n\t\t\"fogFar\": { type: \"f\", value: 2000 },\r\n\t\t\"fogColor\": { type: \"c\", value: new THREE.Color( 0xffffff ) }\r\n\r\n\t},\r\n\r\n\tlights: {\r\n\r\n\t\t\"ambientLightColor\": { type: \"fv\", value: [] },\r\n\r\n\t\t\"directionalLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\"direction\": { type: \"v3\" },\r\n\t\t\t\"color\": { type: \"c\" },\r\n\r\n\t\t\t\"shadow\": { type: \"i\" },\r\n\t\t\t\"shadowBias\": { type: \"f\" },\r\n\t\t\t\"shadowRadius\": { type: \"f\" },\r\n\t\t\t\"shadowMapSize\": { type: \"v2\" }\r\n\t\t} },\r\n\r\n\t\t\"directionalShadowMap\": { type: \"tv\", value: [] },\r\n\t\t\"directionalShadowMatrix\": { type: \"m4v\", value: [] },\r\n\r\n\t\t\"spotLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\"color\": { type: \"c\" },\r\n\t\t\t\"position\": { type: \"v3\" },\r\n\t\t\t\"direction\": { type: \"v3\" },\r\n\t\t\t\"distance\": { type: \"f\" },\r\n\t\t\t\"coneCos\": { type: \"f\" },\r\n\t\t\t\"penumbraCos\": { type: \"f\" },\r\n\t\t\t\"decay\": { type: \"f\" },\r\n\r\n\t\t\t\"shadow\": { type: \"i\" },\r\n\t\t\t\"shadowBias\": { type: \"f\" },\r\n\t\t\t\"shadowRadius\": { type: \"f\" },\r\n\t\t\t\"shadowMapSize\": { type: \"v2\" }\r\n\t\t} },\r\n\r\n\t\t\"spotShadowMap\": { type: \"tv\", value: [] },\r\n\t\t\"spotShadowMatrix\": { type: \"m4v\", value: [] },\r\n\r\n\t\t\"pointLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\"color\": { type: \"c\" },\r\n\t\t\t\"position\": { type: \"v3\" },\r\n\t\t\t\"decay\": { type: \"f\" },\r\n\t\t\t\"distance\": { type: \"f\" },\r\n\r\n\t\t\t\"shadow\": { type: \"i\" },\r\n\t\t\t\"shadowBias\": { type: \"f\" },\r\n\t\t\t\"shadowRadius\": { type: \"f\" },\r\n\t\t\t\"shadowMapSize\": { type: \"v2\" }\r\n\t\t} },\r\n\r\n\t\t\"pointShadowMap\": { type: \"tv\", value: [] },\r\n\t\t\"pointShadowMatrix\": { type: \"m4v\", value: [] },\r\n\r\n\t\t\"hemisphereLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\"direction\": { type: \"v3\" },\r\n\t\t\t\"skyColor\": { type: \"c\" },\r\n\t\t\t\"groundColor\": { type: \"c\" }\r\n\t\t} }\r\n\r\n\t},\r\n\r\n\tpoints: {\r\n\r\n\t\t\"diffuse\": { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\"opacity\": { type: \"f\", value: 1.0 },\r\n\t\t\"size\": { type: \"f\", value: 1.0 },\r\n\t\t\"scale\": { type: \"f\", value: 1.0 },\r\n\t\t\"map\": { type: \"t\", value: null },\r\n\t\t\"offsetRepeat\": { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) }\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/shaders/ShaderLib/cube_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'cube_frag' ] = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/cube_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'cube_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\t#include <logdepthbuf_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/depth_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'depth_frag' ] = \"uniform float mNear;\\nuniform float mFar;\\nuniform float opacity;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\t#include <logdepthbuf_fragment>\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\t#else\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\t#endif\\n\tfloat color = 1.0 - smoothstep( mNear, mFar, depth );\\n\tgl_FragColor = vec4( vec3( color ), opacity );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/depth_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'depth_vert' ] = \"#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/depthRGBA_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'depthRGBA_frag' ] = \"#include <common>\\n#include <logdepthbuf_pars_fragment>\\nvec4 pack_depth( const in float depth ) {\\n\tconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\\n\tconst vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\\n\tvec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\\n\tres -= res.xxyz * bit_mask;\\n\treturn res;\\n}\\nvoid main() {\\n\t#include <logdepthbuf_fragment>\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );\\n\t#else\\n\t\tgl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\\n\t#endif\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/depthRGBA_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'depthRGBA_vert' ] = \"#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'distanceRGBA_frag' ] = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\nvec4 pack1K ( float depth ) {\\n\tdepth /= 1000.0;\\n\tconst vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\\n\tconst vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\\n\tvec4 res = mod( depth * bitSh * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );\\n\tres -= res.xxyz * bitMsk;\\n\treturn res;\\n}\\nfloat unpack1K ( vec4 color ) {\\n\tconst vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\\n\treturn dot( color, bitSh ) * 1000.0;\\n}\\nvoid main () {\\n\tgl_FragColor = pack1K( length( vWorldPosition.xyz - lightPos.xyz ) );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'distanceRGBA_vert' ] = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\nvoid main() {\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\tvWorldPosition = worldPosition;\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/equirect_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'equirect_frag' ] = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tvec3 direction = normalize( vWorldPosition );\\n\tvec2 sampleUV;\\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/equirect_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'equirect_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n\t#include <logdepthbuf_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/linedashed_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'linedashed_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\t\tdiscard;\\n\t}\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <color_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/linedashed_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'linedashed_vert' ] = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\tvLineDistance = scale * lineDistance;\\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\tgl_Position = projectionMatrix * mvPosition;\\n\t#include <logdepthbuf_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshbasic_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshbasic_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\tReflectedLight reflectedLight;\\n\treflectedLight.directDiffuse = vec3( 0.0 );\\n\treflectedLight.directSpecular = vec3( 0.0 );\\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshbasic_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshbasic_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <skinbase_vertex>\\n\t#ifdef USE_ENVMAP\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#endif\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshlambert_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshlambert_frag' ] = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <emissivemap_fragment>\\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\t#include <lightmap_fragment>\\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\t#ifdef DOUBLE_SIDED\\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\t#else\\n\t\treflectedLight.directDiffuse = vLightFront;\\n\t#endif\\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshlambert_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshlambert_vert' ] = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <lights_lambert_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshphong_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshphong_frag' ] = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_phong_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshphong_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshphong_vert' ] = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <lights_phong_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <lights_phong_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshstandard_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshstandard_frag' ] = \"#define STANDARD\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_standard_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <roughnessmap_fragment>\\n\t#include <metalnessmap_fragment>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_standard_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshstandard_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshstandard_vert' ] = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/normal_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'normal_frag' ] = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tgl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/normal_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'normal_vert' ] = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\tvNormal = normalize( normalMatrix * normal );\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/points_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'points_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\nvoid main() {\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_particle_fragment>\\n\t#include <color_fragment>\\n\t#include <alphatest_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/points_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'points_vert' ] = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#ifdef USE_SIZEATTENUATION\\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\t#else\\n\t\tgl_PointSize = size;\\n\t#endif\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib.js\r\n\r\n/**\r\n * Webgl Shader Library for three.js\r\n *\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n */\r\n\r\n\r\nTHREE.ShaderLib = {\r\n\r\n\t'basic': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"aomap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk['meshbasic_vert'],\r\n\t\tfragmentShader: THREE.ShaderChunk['meshbasic_frag']\r\n\r\n\t},\r\n\r\n\t'lambert': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"aomap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lightmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"emissivemap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk['meshlambert_vert'],\r\n\t\tfragmentShader: THREE.ShaderChunk['meshlambert_frag']\r\n\r\n\t},\r\n\r\n\t'phong': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"aomap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lightmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"emissivemap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"bumpmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"normalmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"displacementmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\"specular\" : { type: \"c\", value: new THREE.Color( 0x111111 ) },\r\n\t\t\t\t\"shininess\": { type: \"f\", value: 30 }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk['meshphong_vert'],\r\n\t\tfragmentShader: THREE.ShaderChunk['meshphong_frag']\r\n\r\n\t},\r\n\r\n\t'standard': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"aomap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lightmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"emissivemap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"bumpmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"normalmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"displacementmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"roughnessmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"metalnessmap\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\"roughness\": { type: \"f\", value: 0.5 },\r\n\t\t\t\t\"metalness\": { type: \"f\", value: 0 },\r\n\t\t\t\t\"envMapIntensity\" : { type: \"f\", value: 1 } // temporary\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk['meshstandard_vert'],\r\n\t\tfragmentShader: THREE.ShaderChunk['meshstandard_frag']\r\n\r\n\t},\r\n\r\n\t'points': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"points\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk['points_vert'],\r\n\t\tfragmentShader: THREE.ShaderChunk['points_frag']\r\n\r\n\t},\r\n\r\n\t'dashed': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ \"common\" ],\r\n\t\t\tTHREE.UniformsLib[ \"fog\" ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"scale\"    : { type: \"f\", value: 1 },\r\n\t\t\t\t\"dashSize\" : { type: \"f\", value: 1 },\r\n\t\t\t\t\"totalSize\": { type: \"f\", value: 2 }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk['linedashed_vert'],\r\n\t\tfragmentShader: THREE.ShaderChunk['linedashed_frag']\r\n\r\n\t},\r\n\r\n\t'depth': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"mNear\": { type: \"f\", value: 1.0 },\r\n\t\t\t\"mFar\" : { type: \"f\", value: 2000.0 },\r\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: THREE.ShaderChunk['depth_vert'],\r\n\t\tfragmentShader: THREE.ShaderChunk['depth_frag']\r\n\r\n\t},\r\n\r\n\t'normal': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"opacity\" : { type: \"f\", value: 1.0 }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: THREE.ShaderChunk['normal_vert'],\r\n\t\tfragmentShader: THREE.ShaderChunk['normal_frag']\r\n\r\n\t},\r\n\r\n\t/* -------------------------------------------------------------------------\r\n\t//\tCube map shader\r\n\t ------------------------------------------------------------------------- */\r\n\r\n\t'cube': {\r\n\r\n\t\tuniforms: {\r\n\t\t\t\"tCube\": { type: \"t\", value: null },\r\n\t\t\t\"tFlip\": { type: \"f\", value: - 1 }\r\n\t\t},\r\n\r\n\t\tvertexShader: THREE.ShaderChunk['cube_vert'],\r\n\t\tfragmentShader: THREE.ShaderChunk['cube_frag']\r\n\r\n\t},\r\n\r\n\t/* -------------------------------------------------------------------------\r\n\t//\tCube map shader\r\n\t ------------------------------------------------------------------------- */\r\n\r\n\t'equirect': {\r\n\r\n\t\tuniforms: {\r\n\t\t\t\"tEquirect\": { type: \"t\", value: null },\r\n\t\t\t\"tFlip\": { type: \"f\", value: - 1 }\r\n\t\t},\r\n\r\n\t\tvertexShader: THREE.ShaderChunk['equirect_vert'],\r\n\t\tfragmentShader: THREE.ShaderChunk['equirect_frag']\r\n\r\n\t},\r\n\r\n\t/* Depth encoding into RGBA texture\r\n\t *\r\n\t * based on SpiderGL shadow map example\r\n\t * http://spidergl.org/example.php?id=6\r\n\t *\r\n\t * originally from\r\n\t * http://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD\r\n\t *\r\n\t * see also\r\n\t * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/\r\n\t */\r\n\r\n\t'depthRGBA': {\r\n\r\n\t\tuniforms: {},\r\n\r\n\t\tvertexShader: THREE.ShaderChunk['depthRGBA_vert'],\r\n\t\tfragmentShader: THREE.ShaderChunk['depthRGBA_frag']\r\n\r\n\t},\r\n\r\n\r\n\t'distanceRGBA': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"lightPos\": { type: \"v3\", value: new THREE.Vector3( 0, 0, 0 ) }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: THREE.ShaderChunk['distanceRGBA_vert'],\r\n\t\tfragmentShader: THREE.ShaderChunk['distanceRGBA_frag']\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/WebGLRenderer.js\r\n\r\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n */\r\n\r\nTHREE.WebGLRenderer = function ( parameters ) {\r\n\r\n\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),\r\n\t_context = parameters.context !== undefined ? parameters.context : null,\r\n\r\n\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\r\n\t_depth = parameters.depth !== undefined ? parameters.depth : true,\r\n\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\r\n\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\r\n\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\r\n\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\r\n\r\n\tvar lights = [];\r\n\r\n\tvar opaqueObjects = [];\r\n\tvar opaqueObjectsLastIndex = - 1;\r\n\tvar transparentObjects = [];\r\n\tvar transparentObjectsLastIndex = - 1;\r\n\r\n\tvar morphInfluences = new Float32Array( 8 );\r\n\r\n\tvar sprites = [];\r\n\tvar lensFlares = [];\r\n\r\n\t// public properties\r\n\r\n\tthis.domElement = _canvas;\r\n\tthis.context = null;\r\n\r\n\t// clearing\r\n\r\n\tthis.autoClear = true;\r\n\tthis.autoClearColor = true;\r\n\tthis.autoClearDepth = true;\r\n\tthis.autoClearStencil = true;\r\n\r\n\t// scene graph\r\n\r\n\tthis.sortObjects = true;\r\n\r\n\t// physically based shading\r\n\r\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\r\n\tthis.gammaInput = false;\r\n\tthis.gammaOutput = false;\r\n\r\n\t// physical lights\r\n\r\n\tthis.physicallyCorrectLights = false;\r\n\r\n\t// tone mapping\r\n\r\n\tthis.toneMapping = THREE.LinearToneMapping;\r\n\tthis.toneMappingExposure = 1.0;\r\n\tthis.toneMappingWhitePoint = 1.0;\r\n\r\n\t// morphs\r\n\r\n\tthis.maxMorphTargets = 8;\r\n\tthis.maxMorphNormals = 4;\r\n\r\n\t// flags\r\n\r\n\tthis.autoScaleCubemaps = true;\r\n\r\n\t// internal properties\r\n\r\n\tvar _this = this,\r\n\r\n\t// internal state cache\r\n\r\n\t_currentProgram = null,\r\n\t_currentRenderTarget = null,\r\n\t_currentFramebuffer = null,\r\n\t_currentMaterialId = - 1,\r\n\t_currentGeometryProgram = '',\r\n\t_currentCamera = null,\r\n\r\n\t_currentScissor = new THREE.Vector4(),\r\n\t_currentScissorTest = null,\r\n\r\n\t_currentViewport = new THREE.Vector4(),\r\n\r\n\t//\r\n\r\n\t_usedTextureUnits = 0,\r\n\r\n\t//\r\n\r\n\t_clearColor = new THREE.Color( 0x000000 ),\r\n\t_clearAlpha = 0,\r\n\r\n\t_width = _canvas.width,\r\n\t_height = _canvas.height,\r\n\r\n\t_pixelRatio = 1,\r\n\r\n\t_scissor = new THREE.Vector4( 0, 0, _width, _height ),\r\n\t_scissorTest = false,\r\n\r\n\t_viewport = new THREE.Vector4( 0, 0, _width, _height ),\r\n\r\n\t// frustum\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\r\n\t// camera matrices cache\r\n\r\n\t_projScreenMatrix = new THREE.Matrix4(),\r\n\r\n\t_vector3 = new THREE.Vector3(),\r\n\r\n\t// light arrays cache\r\n\r\n\t_lights = {\r\n\r\n\t\thash: '',\r\n\r\n\t\tambient: [ 0, 0, 0 ],\r\n\t\tdirectional: [],\r\n\t\tdirectionalShadowMap: [],\r\n\t\tdirectionalShadowMatrix: [],\r\n\t\tspot: [],\r\n\t\tspotShadowMap: [],\r\n\t\tspotShadowMatrix: [],\r\n\t\tpoint: [],\r\n\t\tpointShadowMap: [],\r\n\t\tpointShadowMatrix: [],\r\n\t\themi: [],\r\n\r\n\t\tshadows: [],\r\n\t\tshadowsPointLight: 0\r\n\r\n\t},\r\n\r\n\t// info\r\n\r\n\t_infoMemory = {\r\n\r\n\t\tgeometries: 0,\r\n\t\ttextures: 0\r\n\r\n\t},\r\n\r\n\t_infoRender = {\r\n\r\n\t\tcalls: 0,\r\n\t\tvertices: 0,\r\n\t\tfaces: 0,\r\n\t\tpoints: 0\r\n\r\n\t};\r\n\r\n\tthis.info = {\r\n\r\n\t\trender: _infoRender,\r\n\t\tmemory: _infoMemory,\r\n\t\tprograms: null\r\n\r\n\t};\r\n\r\n\r\n\t// initialize\r\n\r\n\tvar _gl;\r\n\r\n\ttry {\r\n\r\n\t\tvar attributes = {\r\n\t\t\talpha: _alpha,\r\n\t\t\tdepth: _depth,\r\n\t\t\tstencil: _stencil,\r\n\t\t\tantialias: _antialias,\r\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\r\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\r\n\t\t};\r\n\r\n\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\r\n\r\n\t\tif ( _gl === null ) {\r\n\r\n\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\r\n\r\n\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthrow 'Error creating WebGL context.';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\r\n\r\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\r\n\r\n\t\t\t_gl.getShaderPrecisionFormat = function () {\r\n\r\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\r\n\r\n\t} catch ( error ) {\r\n\r\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\r\n\r\n\t}\r\n\r\n\tvar extensions = new THREE.WebGLExtensions( _gl );\r\n\r\n\textensions.get( 'OES_texture_float' );\r\n\textensions.get( 'OES_texture_float_linear' );\r\n\textensions.get( 'OES_texture_half_float' );\r\n\textensions.get( 'OES_texture_half_float_linear' );\r\n\textensions.get( 'OES_standard_derivatives' );\r\n\textensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\tif ( extensions.get( 'OES_element_index_uint' ) ) {\r\n\r\n\t\tTHREE.BufferGeometry.MaxIndex = 4294967296;\r\n\r\n\t}\r\n\r\n\tvar capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );\r\n\r\n\tvar state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );\r\n\tvar properties = new THREE.WebGLProperties();\r\n\tvar objects = new THREE.WebGLObjects( _gl, properties, this.info );\r\n\tvar programCache = new THREE.WebGLPrograms( this, capabilities );\r\n\tvar lightCache = new THREE.WebGLLights();\r\n\r\n\tthis.info.programs = programCache.programs;\r\n\r\n\tvar bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );\r\n\tvar indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\r\n\r\n\t//\r\n\r\n\tfunction getTargetPixelRatio() {\r\n\r\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\r\n\r\n\t}\r\n\r\n\tfunction glClearColor( r, g, b, a ) {\r\n\r\n\t\tif ( _premultipliedAlpha === true ) {\r\n\r\n\t\t\tr *= a; g *= a; b *= a;\r\n\r\n\t\t}\r\n\r\n\t\tstate.clearColor( r, g, b, a );\r\n\r\n\t}\r\n\r\n\tfunction setDefaultGLState() {\r\n\r\n\t\tstate.init();\r\n\r\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\r\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\r\n\r\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t}\r\n\r\n\tfunction resetGLState() {\r\n\r\n\t\t_currentProgram = null;\r\n\t\t_currentCamera = null;\r\n\r\n\t\t_currentGeometryProgram = '';\r\n\t\t_currentMaterialId = - 1;\r\n\r\n\t\tstate.reset();\r\n\r\n\t}\r\n\r\n\tsetDefaultGLState();\r\n\r\n\tthis.context = _gl;\r\n\tthis.capabilities = capabilities;\r\n\tthis.extensions = extensions;\r\n\tthis.properties = properties;\r\n\tthis.state = state;\r\n\r\n\t// shadow map\r\n\r\n\tvar shadowMap = new THREE.WebGLShadowMap( this, _lights, objects );\r\n\r\n\tthis.shadowMap = shadowMap;\r\n\r\n\r\n\t// Plugins\r\n\r\n\tvar spritePlugin = new THREE.SpritePlugin( this, sprites );\r\n\tvar lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );\r\n\r\n\t// API\r\n\r\n\tthis.getContext = function () {\r\n\r\n\t\treturn _gl;\r\n\r\n\t};\r\n\r\n\tthis.getContextAttributes = function () {\r\n\r\n\t\treturn _gl.getContextAttributes();\r\n\r\n\t};\r\n\r\n\tthis.forceContextLoss = function () {\r\n\r\n\t\textensions.get( 'WEBGL_lose_context' ).loseContext();\r\n\r\n\t};\r\n\r\n\tthis.getMaxAnisotropy = ( function () {\r\n\r\n\t\tvar value;\r\n\r\n\t\treturn function getMaxAnisotropy() {\r\n\r\n\t\t\tif ( value !== undefined ) return value;\r\n\r\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tvalue = _gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvalue = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn value;\r\n\r\n\t\t};\r\n\r\n\t} )();\r\n\r\n\tthis.getPrecision = function () {\r\n\r\n\t\treturn capabilities.precision;\r\n\r\n\t};\r\n\r\n\tthis.getPixelRatio = function () {\r\n\r\n\t\treturn _pixelRatio;\r\n\r\n\t};\r\n\r\n\tthis.setPixelRatio = function ( value ) {\r\n\r\n\t\tif ( value === undefined ) return;\r\n\r\n\t\t_pixelRatio = value;\r\n\r\n\t\tthis.setSize( _viewport.z, _viewport.w, false );\r\n\r\n\t};\r\n\r\n\tthis.getSize = function () {\r\n\r\n\t\treturn {\r\n\t\t\twidth: _width,\r\n\t\t\theight: _height\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tthis.setSize = function ( width, height, updateStyle ) {\r\n\r\n\t\t_width = width;\r\n\t\t_height = height;\r\n\r\n\t\t_canvas.width = width * _pixelRatio;\r\n\t\t_canvas.height = height * _pixelRatio;\r\n\r\n\t\tif ( updateStyle !== false ) {\r\n\r\n\t\t\t_canvas.style.width = width + 'px';\r\n\t\t\t_canvas.style.height = height + 'px';\r\n\r\n\t\t}\r\n\r\n\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t};\r\n\r\n\tthis.setViewport = function ( x, y, width, height ) {\r\n\r\n\t\tstate.viewport( _viewport.set( x, y, width, height ) );\r\n\r\n\t};\r\n\r\n\tthis.setScissor = function ( x, y, width, height ) {\r\n\r\n\t\tstate.scissor( _scissor.set( x, y, width, height ) );\r\n\r\n\t};\r\n\r\n\tthis.setScissorTest = function ( boolean ) {\r\n\r\n\t\tstate.setScissorTest( _scissorTest = boolean );\r\n\r\n\t};\r\n\r\n\t// Clearing\r\n\r\n\tthis.getClearColor = function () {\r\n\r\n\t\treturn _clearColor;\r\n\r\n\t};\r\n\r\n\tthis.setClearColor = function ( color, alpha ) {\r\n\r\n\t\t_clearColor.set( color );\r\n\r\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\r\n\r\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\tthis.getClearAlpha = function () {\r\n\r\n\t\treturn _clearAlpha;\r\n\r\n\t};\r\n\r\n\tthis.setClearAlpha = function ( alpha ) {\r\n\r\n\t\t_clearAlpha = alpha;\r\n\r\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\tthis.clear = function ( color, depth, stencil ) {\r\n\r\n\t\tvar bits = 0;\r\n\r\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\r\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\r\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\r\n\r\n\t\t_gl.clear( bits );\r\n\r\n\t};\r\n\r\n\tthis.clearColor = function () {\r\n\r\n\t\tthis.clear( true, false, false );\r\n\r\n\t};\r\n\r\n\tthis.clearDepth = function () {\r\n\r\n\t\tthis.clear( false, true, false );\r\n\r\n\t};\r\n\r\n\tthis.clearStencil = function () {\r\n\r\n\t\tthis.clear( false, false, true );\r\n\r\n\t};\r\n\r\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\r\n\r\n\t\tthis.setRenderTarget( renderTarget );\r\n\t\tthis.clear( color, depth, stencil );\r\n\r\n\t};\r\n\r\n\t// Reset\r\n\r\n\tthis.resetGLState = resetGLState;\r\n\r\n\tthis.dispose = function() {\r\n\r\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\r\n\r\n\t};\r\n\r\n\t// Events\r\n\r\n\tfunction onContextLost( event ) {\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t\tresetGLState();\r\n\t\tsetDefaultGLState();\r\n\r\n\t\tproperties.clear();\r\n\r\n\t}\r\n\r\n\tfunction onTextureDispose( event ) {\r\n\r\n\t\tvar texture = event.target;\r\n\r\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\tdeallocateTexture( texture );\r\n\r\n\t\t_infoMemory.textures --;\r\n\r\n\r\n\t}\r\n\r\n\tfunction onRenderTargetDispose( event ) {\r\n\r\n\t\tvar renderTarget = event.target;\r\n\r\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\tdeallocateRenderTarget( renderTarget );\r\n\r\n\t\t_infoMemory.textures --;\r\n\r\n\t}\r\n\r\n\tfunction onMaterialDispose( event ) {\r\n\r\n\t\tvar material = event.target;\r\n\r\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\tdeallocateMaterial( material );\r\n\r\n\t}\r\n\r\n\t// Buffer deallocation\r\n\r\n\tfunction deallocateTexture( texture ) {\r\n\r\n\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\r\n\r\n\t\t\t// cube texture\r\n\r\n\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// 2D texture\r\n\r\n\t\t\tif ( textureProperties.__webglInit === undefined ) return;\r\n\r\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\t// remove all webgl properties\r\n\t\tproperties.delete( texture );\r\n\r\n\t}\r\n\r\n\tfunction deallocateRenderTarget( renderTarget ) {\r\n\r\n\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\tif ( ! renderTarget || textureProperties.__webglTexture === undefined ) return;\r\n\r\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t_gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\r\n\t\t\t_gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\r\n\r\n\t\t}\r\n\r\n\t\tproperties.delete( renderTarget.texture );\r\n\t\tproperties.delete( renderTarget );\r\n\r\n\t}\r\n\r\n\tfunction deallocateMaterial( material ) {\r\n\r\n\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\tproperties.delete( material );\r\n\r\n\t}\r\n\r\n\r\n\tfunction releaseMaterialProgramReference( material ) {\r\n\r\n\t\tvar programInfo = properties.get( material ).program;\r\n\r\n\t\tmaterial.program = undefined;\r\n\r\n\t\tif ( programInfo !== undefined ) {\r\n\r\n\t\t\tprogramCache.releaseProgram( programInfo );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Buffer rendering\r\n\r\n\tthis.renderBufferImmediate = function ( object, program, material ) {\r\n\r\n\t\tstate.initAttributes();\r\n\r\n\t\tvar buffers = properties.get( object );\r\n\r\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\r\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\r\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\r\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\r\n\r\n\t\tvar attributes = program.getAttributes();\r\n\r\n\t\tif ( object.hasPositions ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.position );\r\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasNormals ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\r\n\r\n\t\t\tif ( material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.shading === THREE.FlatShading ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\r\n\r\n\t\t\t\t\tvar array = object.normalArray;\r\n\r\n\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\r\n\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\r\n\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\r\n\r\n\t\t\t\t\tarray[ i + 0 ] = nx;\r\n\t\t\t\t\tarray[ i + 1 ] = ny;\r\n\t\t\t\t\tarray[ i + 2 ] = nz;\r\n\r\n\t\t\t\t\tarray[ i + 3 ] = nx;\r\n\t\t\t\t\tarray[ i + 4 ] = ny;\r\n\t\t\t\t\tarray[ i + 5 ] = nz;\r\n\r\n\t\t\t\t\tarray[ i + 6 ] = nx;\r\n\t\t\t\t\tarray[ i + 7 ] = ny;\r\n\t\t\t\t\tarray[ i + 8 ] = nz;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.normal );\r\n\r\n\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasUvs && material.map ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.uv );\r\n\r\n\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.color );\r\n\r\n\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\r\n\r\n\t\tobject.count = 0;\r\n\r\n\t};\r\n\r\n\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\r\n\r\n\t\tsetMaterial( material );\r\n\r\n\t\tvar program = setProgram( camera, fog, material, object );\r\n\r\n\t\tvar updateBuffers = false;\r\n\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\r\n\r\n\t\tif ( geometryProgram !== _currentGeometryProgram ) {\r\n\r\n\t\t\t_currentGeometryProgram = geometryProgram;\r\n\t\t\tupdateBuffers = true;\r\n\r\n\t\t}\r\n\r\n\t\t// morph targets\r\n\r\n\t\tvar morphTargetInfluences = object.morphTargetInfluences;\r\n\r\n\t\tif ( morphTargetInfluences !== undefined ) {\r\n\r\n\t\t\tvar activeInfluences = [];\r\n\r\n\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar influence = morphTargetInfluences[ i ];\r\n\t\t\t\tactiveInfluences.push( [ influence, i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tactiveInfluences.sort( absNumericalSort );\r\n\r\n\t\t\tif ( activeInfluences.length > 8 ) {\r\n\r\n\t\t\t\tactiveInfluences.length = 8;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\r\n\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar influence = activeInfluences[ i ];\r\n\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\r\n\r\n\t\t\t\tif ( influence[ 0 ] !== 0 ) {\r\n\r\n\t\t\t\t\tvar index = influence[ 1 ];\r\n\r\n\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\r\n\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\r\n\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar uniforms = program.getUniforms();\r\n\r\n\t\t\tif ( uniforms.morphTargetInfluences !== null ) {\r\n\r\n\t\t\t\t_gl.uniform1fv( uniforms.morphTargetInfluences, morphInfluences );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tupdateBuffers = true;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar index = geometry.index;\r\n\t\tvar position = geometry.attributes.position;\r\n\r\n\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\tindex = objects.getWireframeAttribute( geometry );\r\n\r\n\t\t}\r\n\r\n\t\tvar renderer;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\trenderer = indexedBufferRenderer;\r\n\t\t\trenderer.setIndex( index );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer = bufferRenderer;\r\n\r\n\t\t}\r\n\r\n\t\tif ( updateBuffers ) {\r\n\r\n\t\t\tsetupVertexAttributes( material, program, geometry );\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar dataStart = 0;\r\n\t\tvar dataCount = Infinity;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tdataCount = index.count;\r\n\r\n\t\t} else if ( position !== undefined ) {\r\n\r\n\t\t\tdataCount = position.count;\r\n\r\n\t\t}\r\n\r\n\t\tvar rangeStart = geometry.drawRange.start;\r\n\t\tvar rangeCount = geometry.drawRange.count;\r\n\r\n\t\tvar groupStart = group !== null ? group.start : 0;\r\n\t\tvar groupCount = group !== null ? group.count : Infinity;\r\n\r\n\t\tvar drawStart = Math.max( dataStart, rangeStart, groupStart );\r\n\t\tvar drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\r\n\r\n\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\r\n\r\n\t\t//\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\r\n\t\t\t\trenderer.setMode( _gl.LINES );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tswitch ( object.drawMode ) {\r\n\r\n\t\t\t\t\tcase THREE.TrianglesDrawMode:\r\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.TriangleStripDrawMode:\r\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.TriangleFanDrawMode:\r\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\tvar lineWidth = material.linewidth;\r\n\r\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\r\n\r\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\r\n\r\n\t\t\tif ( object instanceof THREE.LineSegments ) {\r\n\r\n\t\t\t\trenderer.setMode( _gl.LINES );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object instanceof THREE.Points ) {\r\n\r\n\t\t\trenderer.setMode( _gl.POINTS );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\r\n\r\n\t\t\tif ( geometry.maxInstancedCount > 0 ) {\r\n\r\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.render( drawStart, drawCount );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\r\n\r\n\t\tvar extension;\r\n\r\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\r\n\r\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( startIndex === undefined ) startIndex = 0;\r\n\r\n\t\tstate.initAttributes();\r\n\r\n\t\tvar geometryAttributes = geometry.attributes;\r\n\r\n\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\r\n\r\n\t\tfor ( var name in programAttributes ) {\r\n\r\n\t\t\tvar programAttribute = programAttributes[ name ];\r\n\r\n\t\t\tif ( programAttribute >= 0 ) {\r\n\r\n\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\r\n\r\n\t\t\t\tif ( geometryAttribute !== undefined ) {\r\n\r\n\t\t\t\t\tvar size = geometryAttribute.itemSize;\r\n\t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\r\n\r\n\t\t\t\t\tif ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\tvar data = geometryAttribute.data;\r\n\t\t\t\t\t\tvar stride = data.stride;\r\n\t\t\t\t\t\tvar offset = geometryAttribute.offset;\r\n\r\n\t\t\t\t\t\tif ( data instanceof THREE.InstancedInterleavedBuffer ) {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\r\n\r\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\r\n\r\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, 0, startIndex * size * 4 ); // 4 bytes per Float32\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\r\n\r\n\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\tswitch ( value.length ) {\r\n\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t}\r\n\r\n\t// Sorting\r\n\r\n\tfunction absNumericalSort( a, b ) {\r\n\r\n\t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\r\n\r\n\t}\r\n\r\n\tfunction painterSortStable ( a, b ) {\r\n\r\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\r\n\r\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\r\n\r\n\t\t} else if ( a.material.id !== b.material.id ) {\r\n\r\n\t\t\treturn a.material.id - b.material.id;\r\n\r\n\t\t} else if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn a.z - b.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction reversePainterSortStable ( a, b ) {\r\n\r\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\r\n\r\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\r\n\r\n\t\t} if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Rendering\r\n\r\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\r\n\r\n\t\tif ( camera instanceof THREE.Camera === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar fog = scene.fog;\r\n\r\n\t\t// reset caching for this frame\r\n\r\n\t\t_currentGeometryProgram = '';\r\n\t\t_currentMaterialId = - 1;\r\n\t\t_currentCamera = null;\r\n\r\n\t\t// update scene graph\r\n\r\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\r\n\r\n\t\t// update camera matrices and frustum\r\n\r\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\tlights.length = 0;\r\n\r\n\t\topaqueObjectsLastIndex = - 1;\r\n\t\ttransparentObjectsLastIndex = - 1;\r\n\r\n\t\tsprites.length = 0;\r\n\t\tlensFlares.length = 0;\r\n\r\n\t\tprojectObject( scene, camera );\r\n\r\n\t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\r\n\t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\r\n\r\n\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\topaqueObjects.sort( painterSortStable );\r\n\t\t\ttransparentObjects.sort( reversePainterSortStable );\r\n\r\n\t\t}\r\n\r\n\t\tsetupLights( lights, camera );\r\n\r\n\t\t//\r\n\r\n\t\tshadowMap.render( scene, camera );\r\n\r\n\t\t//\r\n\r\n\t\t_infoRender.calls = 0;\r\n\t\t_infoRender.vertices = 0;\r\n\t\t_infoRender.faces = 0;\r\n\t\t_infoRender.points = 0;\r\n\r\n\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\trenderTarget = null;\r\n\r\n\t\t}\r\n\r\n\t\tthis.setRenderTarget( renderTarget );\r\n\r\n\t\tif ( this.autoClear || forceClear ) {\r\n\r\n\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( scene.overrideMaterial ) {\r\n\r\n\t\t\tvar overrideMaterial = scene.overrideMaterial;\r\n\r\n\t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\r\n\t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// opaque pass (front-to-back order)\r\n\r\n\t\t\tstate.setBlending( THREE.NoBlending );\r\n\t\t\trenderObjects( opaqueObjects, camera, fog );\r\n\r\n\t\t\t// transparent pass (back-to-front order)\r\n\r\n\t\t\trenderObjects( transparentObjects, camera, fog );\r\n\r\n\t\t}\r\n\r\n\t\t// custom render plugins (post pass)\r\n\r\n\t\tspritePlugin.render( scene, camera );\r\n\t\tlensFlarePlugin.render( scene, camera, _currentViewport );\r\n\r\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\r\n\r\n\t\tif ( renderTarget ) {\r\n\r\n\t\t\tvar texture = renderTarget.texture;\r\n\r\n\t\t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\r\n\t\t\t\t\ttexture.minFilter !== THREE.NearestFilter &&\r\n\t\t\t\t\ttexture.minFilter !== THREE.LinearFilter ) {\r\n\r\n\t\t\t\tupdateRenderTargetMipmap( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\r\n\r\n\t\tstate.setDepthTest( true );\r\n\t\tstate.setDepthWrite( true );\r\n\t\tstate.setColorWrite( true );\r\n\r\n\t\t// _gl.finish();\r\n\r\n\t};\r\n\r\n\tfunction pushRenderItem( object, geometry, material, z, group ) {\r\n\r\n\t\tvar array, index;\r\n\r\n\t\t// allocate the next position in the appropriate array\r\n\r\n\t\tif ( material.transparent ) {\r\n\r\n\t\t\tarray = transparentObjects;\r\n\t\t\tindex = ++ transparentObjectsLastIndex;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tarray = opaqueObjects;\r\n\t\t\tindex = ++ opaqueObjectsLastIndex;\r\n\r\n\t\t}\r\n\r\n\t\t// recycle existing render item or grow the array\r\n\r\n\t\tvar renderItem = array[ index ];\r\n\r\n\t\tif ( renderItem !== undefined ) {\r\n\r\n\t\t\trenderItem.id = object.id;\r\n\t\t\trenderItem.object = object;\r\n\t\t\trenderItem.geometry = geometry;\r\n\t\t\trenderItem.material = material;\r\n\t\t\trenderItem.z = _vector3.z;\r\n\t\t\trenderItem.group = group;\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderItem = {\r\n\t\t\t\tid: object.id,\r\n\t\t\t\tobject: object,\r\n\t\t\t\tgeometry: geometry,\r\n\t\t\t\tmaterial: material,\r\n\t\t\t\tz: _vector3.z,\r\n\t\t\t\tgroup: group\r\n\t\t\t};\r\n\r\n\t\t\t// assert( index === array.length );\r\n\t\t\tarray.push( renderItem );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction projectObject( object, camera ) {\r\n\r\n\t\tif ( object.visible === false ) return;\r\n\r\n\t\tif ( object.layers.test( camera.layers ) ) {\r\n\r\n\t\t\tif ( object instanceof THREE.Light ) {\r\n\r\n\t\t\t\tlights.push( object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\r\n\r\n\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\r\n\r\n\t\t\t\t\tsprites.push( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.LensFlare ) {\r\n\r\n\t\t\t\tlensFlares.push( object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject ) {\r\n\r\n\t\t\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\r\n\r\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\r\n\r\n\t\t\t\tif ( object instanceof THREE.SkinnedMesh ) {\r\n\r\n\t\t\t\t\tobject.skeleton.update();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {\r\n\r\n\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\tif ( material.visible === true ) {\r\n\r\n\t\t\t\t\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar geometry = objects.update( object );\r\n\r\n\t\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\r\n\r\n\t\t\t\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\t\t\t\tvar materials = material.materials;\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\r\n\r\n\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar children = object.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tprojectObject( children[ i ], camera );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\r\n\r\n\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar renderItem = renderList[ i ];\r\n\r\n\t\t\tvar object = renderItem.object;\r\n\t\t\tvar geometry = renderItem.geometry;\r\n\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\r\n\t\t\tvar group = renderItem.group;\r\n\r\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\r\n\r\n\t\t\tif ( object instanceof THREE.ImmediateRenderObject ) {\r\n\r\n\t\t\t\tsetMaterial( material );\r\n\r\n\t\t\t\tvar program = setProgram( camera, fog, material, object );\r\n\r\n\t\t\t\t_currentGeometryProgram = '';\r\n\r\n\t\t\t\tobject.render( function ( object ) {\r\n\r\n\t\t\t\t\t_this.renderBufferImmediate( object, program, material );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction initMaterial( material, fog, object ) {\r\n\r\n\t\tvar materialProperties = properties.get( material );\r\n\r\n\t\tvar parameters = programCache.getParameters( material, _lights, fog, object );\r\n\t\tvar code = programCache.getProgramCode( material, parameters );\r\n\r\n\t\tvar program = materialProperties.program;\r\n\t\tvar programChange = true;\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\t// new material\r\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t} else if ( program.code !== code ) {\r\n\r\n\t\t\t// changed glsl or parameters\r\n\t\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\t} else if ( parameters.shaderID !== undefined ) {\r\n\r\n\t\t\t// same glsl and uniform list\r\n\t\t\treturn;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// only rebuild uniform list\r\n\t\t\tprogramChange = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( programChange ) {\r\n\r\n\t\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\t\tvar shader = THREE.ShaderLib[ parameters.shaderID ];\r\n\r\n\t\t\t\tmaterialProperties.__webglShader = {\r\n\t\t\t\t\tname: material.type,\r\n\t\t\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\r\n\t\t\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\t\t\tfragmentShader: shader.fragmentShader\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaterialProperties.__webglShader = {\r\n\t\t\t\t\tname: material.type,\r\n\t\t\t\t\tuniforms: material.uniforms,\r\n\t\t\t\t\tvertexShader: material.vertexShader,\r\n\t\t\t\t\tfragmentShader: material.fragmentShader\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterial.__webglShader = materialProperties.__webglShader;\r\n\r\n\t\t\tprogram = programCache.acquireProgram( material, parameters, code );\r\n\r\n\t\t\tmaterialProperties.program = program;\r\n\t\t\tmaterial.program = program;\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = program.getAttributes();\r\n\r\n\t\tif ( material.morphTargets ) {\r\n\r\n\t\t\tmaterial.numSupportedMorphTargets = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\r\n\r\n\t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\tmaterial.numSupportedMorphNormals = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\r\n\r\n\t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tmaterialProperties.uniformsList = [];\r\n\r\n\t\tvar uniforms = materialProperties.__webglShader.uniforms,\r\n\t\t\tuniformLocations = materialProperties.program.getUniforms();\r\n\r\n\t\tfor ( var u in uniforms ) {\r\n\r\n\t\t\tvar location = uniformLocations[ u ];\r\n\r\n\t\t\tif ( location ) {\r\n\r\n\t\t\t\tmaterialProperties.uniformsList.push( [ materialProperties.__webglShader.uniforms[ u ], location ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\tmaterial instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\tmaterial instanceof THREE.MeshStandardMaterial ||\r\n\t\t\t\tmaterial.lights ) {\r\n\r\n\t\t\t// store the light setup it was created for\r\n\r\n\t\t\tmaterialProperties.lightsHash = _lights.hash;\r\n\r\n\t\t\t// wire up the material to this renderer's lighting state\r\n\r\n\t\t\tuniforms.ambientLightColor.value = _lights.ambient;\r\n\t\t\tuniforms.directionalLights.value = _lights.directional;\r\n\t\t\tuniforms.spotLights.value = _lights.spot;\r\n\t\t\tuniforms.pointLights.value = _lights.point;\r\n\t\t\tuniforms.hemisphereLights.value = _lights.hemi;\r\n\r\n\t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\r\n\t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\r\n\t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\r\n\t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\r\n\t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\r\n\t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\r\n\r\n\t\t}\r\n\r\n\t\t// detect dynamic uniforms\r\n\r\n\t\tmaterialProperties.hasDynamicUniforms = false;\r\n\r\n\t\tfor ( var j = 0, jl = materialProperties.uniformsList.length; j < jl; j ++ ) {\r\n\r\n\t\t\tvar uniform = materialProperties.uniformsList[ j ][ 0 ];\r\n\r\n\t\t\tif ( uniform.dynamic === true ) {\r\n\r\n\t\t\t\tmaterialProperties.hasDynamicUniforms = true;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setMaterial( material ) {\r\n\r\n\t\tsetMaterialFaces( material );\r\n\r\n\t\tif ( material.transparent === true ) {\r\n\r\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tstate.setBlending( THREE.NoBlending );\r\n\r\n\t\t}\r\n\r\n\t\tstate.setDepthFunc( material.depthFunc );\r\n\t\tstate.setDepthTest( material.depthTest );\r\n\t\tstate.setDepthWrite( material.depthWrite );\r\n\t\tstate.setColorWrite( material.colorWrite );\r\n\t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t}\r\n\r\n\tfunction setMaterialFaces( material ) {\r\n\r\n\t\tmaterial.side !== THREE.DoubleSide ? state.enable( _gl.CULL_FACE ) : state.disable( _gl.CULL_FACE );\r\n\t\tstate.setFlipSided( material.side === THREE.BackSide );\r\n\r\n\t}\r\n\r\n\tfunction setProgram( camera, fog, material, object ) {\r\n\r\n\t\t_usedTextureUnits = 0;\r\n\r\n\t\tvar materialProperties = properties.get( material );\r\n\r\n\t\tif ( materialProperties.program === undefined ) {\r\n\r\n\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialProperties.lightsHash !== undefined &&\r\n\t\t\tmaterialProperties.lightsHash !== _lights.hash ) {\r\n\r\n\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.needsUpdate ) {\r\n\r\n\t\t\tinitMaterial( material, fog, object );\r\n\t\t\tmaterial.needsUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tvar refreshProgram = false;\r\n\t\tvar refreshMaterial = false;\r\n\t\tvar refreshLights = false;\r\n\r\n\t\tvar program = materialProperties.program,\r\n\t\t\tp_uniforms = program.getUniforms(),\r\n\t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\r\n\r\n\t\tif ( program.id !== _currentProgram ) {\r\n\r\n\t\t\t_gl.useProgram( program.program );\r\n\t\t\t_currentProgram = program.id;\r\n\r\n\t\t\trefreshProgram = true;\r\n\t\t\trefreshMaterial = true;\r\n\t\t\trefreshLights = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.id !== _currentMaterialId ) {\r\n\r\n\t\t\t_currentMaterialId = material.id;\r\n\r\n\t\t\trefreshMaterial = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( refreshProgram || camera !== _currentCamera ) {\r\n\r\n\t\t\t_gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\r\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\r\n\r\n\t\t\t\t_gl.uniform1f( p_uniforms.logDepthBufFC, 2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( camera !== _currentCamera ) {\r\n\r\n\t\t\t\t_currentCamera = camera;\r\n\r\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\r\n\t\t\t\t// now, in case this material supports lights - or later, when\r\n\t\t\t\t// the next material that does gets activated:\r\n\r\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\r\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// load material specific uniforms\r\n\t\t\t// (shader material also gets them for the sake of genericity)\r\n\r\n\t\t\tif ( material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\r\n\t\t\t\t material.envMap ) {\r\n\r\n\t\t\t\tif ( p_uniforms.cameraPosition !== undefined ) {\r\n\r\n\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\t\t_gl.uniform3f( p_uniforms.cameraPosition, _vector3.x, _vector3.y, _vector3.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\r\n\t\t\t\t material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t material.skinning ) {\r\n\r\n\t\t\t\tif ( p_uniforms.viewMatrix !== undefined ) {\r\n\r\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( p_uniforms.toneMappingExposure !== undefined ) {\r\n\r\n\t\t\t\t_gl.uniform1f( p_uniforms.toneMappingExposure, _this.toneMappingExposure );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( p_uniforms.toneMappingWhitePoint !== undefined ) {\r\n\r\n\t\t\t\t_gl.uniform1f( p_uniforms.toneMappingWhitePoint, _this.toneMappingWhitePoint );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// skinning uniforms must be set even if material didn't change\r\n\t\t// auto-setting of texture unit for bone texture must go before other textures\r\n\t\t// not sure why, but otherwise weird things happen\r\n\r\n\t\tif ( material.skinning ) {\r\n\r\n\t\t\tif ( object.bindMatrix && p_uniforms.bindMatrix !== undefined ) {\r\n\r\n\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.bindMatrix, false, object.bindMatrix.elements );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.bindMatrixInverse && p_uniforms.bindMatrixInverse !== undefined ) {\r\n\r\n\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.bindMatrixInverse, false, object.bindMatrixInverse.elements );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( capabilities.floatVertexTextures && object.skeleton && object.skeleton.useVertexTexture ) {\r\n\r\n\t\t\t\tif ( p_uniforms.boneTexture !== undefined ) {\r\n\r\n\t\t\t\t\tvar textureUnit = getTextureUnit();\r\n\r\n\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTexture, textureUnit );\r\n\t\t\t\t\t_this.setTexture( object.skeleton.boneTexture, textureUnit );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( p_uniforms.boneTextureWidth !== undefined ) {\r\n\r\n\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTextureWidth, object.skeleton.boneTextureWidth );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( p_uniforms.boneTextureHeight !== undefined ) {\r\n\r\n\t\t\t\t\t_gl.uniform1i( p_uniforms.boneTextureHeight, object.skeleton.boneTextureHeight );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object.skeleton && object.skeleton.boneMatrices ) {\r\n\r\n\t\t\t\tif ( p_uniforms.boneGlobalMatrices !== undefined ) {\r\n\r\n\t\t\t\t\t_gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.skeleton.boneMatrices );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( refreshMaterial ) {\r\n\r\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\r\n\t\t\t\t material.lights ) {\r\n\r\n\t\t\t\t// the current material requires lighting info\r\n\r\n\t\t\t\t// note: all lighting uniforms are always set correctly\r\n\t\t\t\t// they simply reference the renderer's state for their\r\n\t\t\t\t// values\r\n\t\t\t\t//\r\n\t\t\t\t// use the current material's .needsUpdate flags to set\r\n\t\t\t\t// the GL state when required\r\n\r\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// refresh uniforms common to several materials\r\n\r\n\t\t\tif ( fog && material.fog ) {\r\n\r\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// refresh single material specific uniforms\r\n\r\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\t\t\t\trefreshUniformsDash( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.PointsMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsPoints( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsPhong( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshStandardMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsStandard( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\t\tm_uniforms.mNear.value = camera.near;\r\n\t\t\t\tm_uniforms.mFar.value = camera.far;\r\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// load common uniforms\r\n\r\n\t\t\tloadUniformsGeneric( materialProperties.uniformsList );\r\n\r\n\t\t}\r\n\r\n\t\tloadUniformsMatrices( p_uniforms, object );\r\n\r\n\t\tif ( p_uniforms.modelMatrix !== undefined ) {\r\n\r\n\t\t\t_gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialProperties.hasDynamicUniforms === true ) {\r\n\r\n\t\t\tupdateDynamicUniforms( materialProperties.uniformsList, object, camera );\r\n\r\n\t\t}\r\n\r\n\t\treturn program;\r\n\r\n\t}\r\n\r\n\tfunction updateDynamicUniforms ( uniforms, object, camera ) {\r\n\r\n\t\tvar dynamicUniforms = [];\r\n\r\n\t\tfor ( var j = 0, jl = uniforms.length; j < jl; j ++ ) {\r\n\r\n\t\t\tvar uniform = uniforms[ j ][ 0 ];\r\n\t\t\tvar onUpdateCallback = uniform.onUpdateCallback;\r\n\r\n\t\t\tif ( onUpdateCallback !== undefined ) {\r\n\r\n\t\t\t\tonUpdateCallback.bind( uniform )( object, camera );\r\n\t\t\t\tdynamicUniforms.push( uniforms[ j ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tloadUniformsGeneric( dynamicUniforms );\r\n\r\n\t}\r\n\r\n\t// Uniforms (refresh uniforms objects)\r\n\r\n\tfunction refreshUniformsCommon ( uniforms, material ) {\r\n\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\tuniforms.diffuse.value = material.color;\r\n\r\n\t\tif ( material.emissive ) {\r\n\r\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.map.value = material.map;\r\n\t\tuniforms.specularMap.value = material.specularMap;\r\n\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\tif ( material.aoMap ) {\r\n\r\n\t\t\tuniforms.aoMap.value = material.aoMap;\r\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\t// uv repeat and offset setting priorities\r\n\t\t// 1. color map\r\n\t\t// 2. specular map\r\n\t\t// 3. normal map\r\n\t\t// 4. bump map\r\n\t\t// 5. alpha map\r\n\t\t// 6. emissive map\r\n\r\n\t\tvar uvScaleMap;\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t} else if ( material.specularMap ) {\r\n\r\n\t\t\tuvScaleMap = material.specularMap;\r\n\r\n\t\t} else if ( material.displacementMap ) {\r\n\r\n\t\t\tuvScaleMap = material.displacementMap;\r\n\r\n\t\t} else if ( material.normalMap ) {\r\n\r\n\t\t\tuvScaleMap = material.normalMap;\r\n\r\n\t\t} else if ( material.bumpMap ) {\r\n\r\n\t\t\tuvScaleMap = material.bumpMap;\r\n\r\n\t\t} else if ( material.roughnessMap ) {\r\n\r\n\t\t\tuvScaleMap = material.roughnessMap;\r\n\r\n\t\t} else if ( material.metalnessMap ) {\r\n\r\n\t\t\tuvScaleMap = material.metalnessMap;\r\n\r\n\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t} else if ( material.emissiveMap ) {\r\n\r\n\t\t\tuvScaleMap = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\tif ( uvScaleMap instanceof THREE.WebGLRenderTarget ) {\r\n\r\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar offset = uvScaleMap.offset;\r\n\t\t\tvar repeat = uvScaleMap.repeat;\r\n\r\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.envMap.value = material.envMap;\r\n\t\tuniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : - 1;\r\n\r\n\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\t\tuniforms.refractionRatio.value = material.refractionRatio;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsLine ( uniforms, material ) {\r\n\r\n\t\tuniforms.diffuse.value = material.color;\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsDash ( uniforms, material ) {\r\n\r\n\t\tuniforms.dashSize.value = material.dashSize;\r\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\r\n\t\tuniforms.scale.value = material.scale;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsPoints ( uniforms, material ) {\r\n\r\n\t\tuniforms.diffuse.value = material.color;\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\t\tuniforms.size.value = material.size * _pixelRatio;\r\n\t\tuniforms.scale.value = _canvas.clientHeight / 2.0; // TODO: Cache this.\r\n\r\n\t\tuniforms.map.value = material.map;\r\n\r\n\t\tif ( material.map !== null ) {\r\n\r\n\t\t\tvar offset = material.map.offset;\r\n\t\t\tvar repeat = material.map.repeat;\r\n\r\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsFog ( uniforms, fog ) {\r\n\r\n\t\tuniforms.fogColor.value = fog.color;\r\n\r\n\t\tif ( fog instanceof THREE.Fog ) {\r\n\r\n\t\t\tuniforms.fogNear.value = fog.near;\r\n\t\t\tuniforms.fogFar.value = fog.far;\r\n\r\n\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\r\n\t\t\tuniforms.fogDensity.value = fog.density;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsLambert ( uniforms, material ) {\r\n\r\n\t\tif ( material.lightMap ) {\r\n\r\n\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsPhong ( uniforms, material ) {\r\n\r\n\t\tuniforms.specular.value = material.specular;\r\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\r\n\r\n\t\tif ( material.lightMap ) {\r\n\r\n\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsStandard ( uniforms, material ) {\r\n\r\n\t\tuniforms.roughness.value = material.roughness;\r\n\t\tuniforms.metalness.value = material.metalness;\r\n\r\n\t\tif ( material.roughnessMap ) {\r\n\r\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.metalnessMap ) {\r\n\r\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.lightMap ) {\r\n\r\n\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.envMap ) {\r\n\r\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\r\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\r\n\r\n\tfunction markUniformsLightsNeedsUpdate ( uniforms, value ) {\r\n\r\n\t\tuniforms.ambientLightColor.needsUpdate = value;\r\n\r\n\t\tuniforms.directionalLights.needsUpdate = value;\r\n\t\tuniforms.pointLights.needsUpdate = value;\r\n\t\tuniforms.spotLights.needsUpdate = value;\r\n\t\tuniforms.hemisphereLights.needsUpdate = value;\r\n\r\n\t}\r\n\r\n\t// Uniforms (load to GPU)\r\n\r\n\tfunction loadUniformsMatrices ( uniforms, object ) {\r\n\r\n\t\t_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object.modelViewMatrix.elements );\r\n\r\n\t\tif ( uniforms.normalMatrix ) {\r\n\r\n\t\t\t_gl.uniformMatrix3fv( uniforms.normalMatrix, false, object.normalMatrix.elements );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getTextureUnit() {\r\n\r\n\t\tvar textureUnit = _usedTextureUnits;\r\n\r\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\r\n\r\n\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\r\n\r\n\t\t}\r\n\r\n\t\t_usedTextureUnits += 1;\r\n\r\n\t\treturn textureUnit;\r\n\r\n\t}\r\n\r\n\tfunction loadUniform( uniform, type, location, value ) {\r\n\r\n\t\tvar texture, textureUnit;\r\n\r\n\t\tif ( type === '1i' ) {\r\n\r\n\t\t\t_gl.uniform1i( location, value );\r\n\r\n\t\t} else if ( type === '1f' ) {\r\n\r\n\t\t\t_gl.uniform1f( location, value );\r\n\r\n\t\t} else if ( type === '2f' ) {\r\n\r\n\t\t\t_gl.uniform2f( location, value[ 0 ], value[ 1 ] );\r\n\r\n\t\t} else if ( type === '3f' ) {\r\n\r\n\t\t\t_gl.uniform3f( location, value[ 0 ], value[ 1 ], value[ 2 ] );\r\n\r\n\t\t} else if ( type === '4f' ) {\r\n\r\n\t\t\t_gl.uniform4f( location, value[ 0 ], value[ 1 ], value[ 2 ], value[ 3 ] );\r\n\r\n\t\t} else if ( type === '1iv' ) {\r\n\r\n\t\t\t_gl.uniform1iv( location, value );\r\n\r\n\t\t} else if ( type === '3iv' ) {\r\n\r\n\t\t\t_gl.uniform3iv( location, value );\r\n\r\n\t\t} else if ( type === '1fv' ) {\r\n\r\n\t\t\t_gl.uniform1fv( location, value );\r\n\r\n\t\t} else if ( type === '2fv' ) {\r\n\r\n\t\t\t_gl.uniform2fv( location, value );\r\n\r\n\t\t} else if ( type === '3fv' ) {\r\n\r\n\t\t\t_gl.uniform3fv( location, value );\r\n\r\n\t\t} else if ( type === '4fv' ) {\r\n\r\n\t\t\t_gl.uniform4fv( location, value );\r\n\r\n\t\t} else if ( type === 'Matrix2fv' ) {\r\n\r\n\t\t\t_gl.uniformMatrix2fv( location, false, value );\r\n\r\n\t\t} else if ( type === 'Matrix3fv' ) {\r\n\r\n\t\t\t_gl.uniformMatrix3fv( location, false, value );\r\n\r\n\t\t} else if ( type === 'Matrix4fv' ) {\r\n\r\n\t\t\t_gl.uniformMatrix4fv( location, false, value );\r\n\r\n\t\t//\r\n\r\n\t\t} else if ( type === 'i' ) {\r\n\r\n\t\t\t// single integer\r\n\t\t\t_gl.uniform1i( location, value );\r\n\r\n\t\t} else if ( type === 'f' ) {\r\n\r\n\t\t\t// single float\r\n\t\t\t_gl.uniform1f( location, value );\r\n\r\n\t\t} else if ( type === 'v2' ) {\r\n\r\n\t\t\t// single THREE.Vector2\r\n\t\t\t_gl.uniform2f( location, value.x, value.y );\r\n\r\n\t\t} else if ( type === 'v3' ) {\r\n\r\n\t\t\t// single THREE.Vector3\r\n\t\t\t_gl.uniform3f( location, value.x, value.y, value.z );\r\n\r\n\t\t} else if ( type === 'v4' ) {\r\n\r\n\t\t\t// single THREE.Vector4\r\n\t\t\t_gl.uniform4f( location, value.x, value.y, value.z, value.w );\r\n\r\n\t\t} else if ( type === 'c' ) {\r\n\r\n\t\t\t// single THREE.Color\r\n\t\t\t_gl.uniform3f( location, value.r, value.g, value.b );\r\n\r\n\t\t} else if ( type === 's' ) {\r\n\r\n\t\t\t// TODO: Optimize this\r\n\r\n\t\t\tvar properties = uniform.properties;\r\n\r\n\t\t\tfor ( var name in properties ) {\r\n\r\n\t\t\t\tvar property = properties[ name ];\r\n\t\t\t\tvar locationProperty = location[ name ];\r\n\t\t\t\tvar valueProperty = value[ name ];\r\n\r\n\t\t\t\tloadUniform( property, property.type, locationProperty, valueProperty );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( type === 'sa' ) {\r\n\r\n\t\t\t// TODO: Optimize this\r\n\r\n\t\t\tvar properties = uniform.properties;\r\n\r\n\t\t\tfor ( var i = 0, l = value.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tfor ( var name in properties ) {\r\n\r\n\t\t\t\t\tvar property = properties[ name ];\r\n\t\t\t\t\tvar locationProperty =  location[ i ][ name ];\r\n\t\t\t\t\tvar valueProperty = value[ i ][ name ];\r\n\r\n\t\t\t\t\tloadUniform( property, property.type, locationProperty, valueProperty );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( type === 'iv1' ) {\r\n\r\n\t\t\t// flat array of integers (JS or typed array)\r\n\t\t\t_gl.uniform1iv( location, value );\r\n\r\n\t\t} else if ( type === 'iv' ) {\r\n\r\n\t\t\t// flat array of integers with 3 x N size (JS or typed array)\r\n\t\t\t_gl.uniform3iv( location, value );\r\n\r\n\t\t} else if ( type === 'fv1' ) {\r\n\r\n\t\t\t// flat array of floats (JS or typed array)\r\n\t\t\t_gl.uniform1fv( location, value );\r\n\r\n\t\t} else if ( type === 'fv' ) {\r\n\r\n\t\t\t// flat array of floats with 3 x N size (JS or typed array)\r\n\t\t\t_gl.uniform3fv( location, value );\r\n\r\n\t\t} else if ( type === 'v2v' ) {\r\n\r\n\t\t\t// array of THREE.Vector2\r\n\r\n\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\tuniform._array = new Float32Array( 2 * value.length );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, i2 = 0, il = value.length; i < il; i ++, i2 += 2 ) {\r\n\r\n\t\t\t\tuniform._array[ i2 + 0 ] = value[ i ].x;\r\n\t\t\t\tuniform._array[ i2 + 1 ] = value[ i ].y;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.uniform2fv( location, uniform._array );\r\n\r\n\t\t} else if ( type === 'v3v' ) {\r\n\r\n\t\t\t// array of THREE.Vector3\r\n\r\n\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\tuniform._array = new Float32Array( 3 * value.length );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, i3 = 0, il = value.length; i < il; i ++, i3 += 3 ) {\r\n\r\n\t\t\t\tuniform._array[ i3 + 0 ] = value[ i ].x;\r\n\t\t\t\tuniform._array[ i3 + 1 ] = value[ i ].y;\r\n\t\t\t\tuniform._array[ i3 + 2 ] = value[ i ].z;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.uniform3fv( location, uniform._array );\r\n\r\n\t\t} else if ( type === 'v4v' ) {\r\n\r\n\t\t\t// array of THREE.Vector4\r\n\r\n\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\tuniform._array = new Float32Array( 4 * value.length );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, i4 = 0, il = value.length; i < il; i ++, i4 += 4 ) {\r\n\r\n\t\t\t\tuniform._array[ i4 + 0 ] = value[ i ].x;\r\n\t\t\t\tuniform._array[ i4 + 1 ] = value[ i ].y;\r\n\t\t\t\tuniform._array[ i4 + 2 ] = value[ i ].z;\r\n\t\t\t\tuniform._array[ i4 + 3 ] = value[ i ].w;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.uniform4fv( location, uniform._array );\r\n\r\n\t\t} else if ( type === 'm2' ) {\r\n\r\n\t\t\t// single THREE.Matrix2\r\n\t\t\t_gl.uniformMatrix2fv( location, false, value.elements );\r\n\r\n\t\t} else if ( type === 'm3' ) {\r\n\r\n\t\t\t// single THREE.Matrix3\r\n\t\t\t_gl.uniformMatrix3fv( location, false, value.elements );\r\n\r\n\t\t} else if ( type === 'm3v' ) {\r\n\r\n\t\t\t// array of THREE.Matrix3\r\n\r\n\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\tuniform._array = new Float32Array( 9 * value.length );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvalue[ i ].flattenToArrayOffset( uniform._array, i * 9 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.uniformMatrix3fv( location, false, uniform._array );\r\n\r\n\t\t} else if ( type === 'm4' ) {\r\n\r\n\t\t\t// single THREE.Matrix4\r\n\t\t\t_gl.uniformMatrix4fv( location, false, value.elements );\r\n\r\n\t\t} else if ( type === 'm4v' ) {\r\n\r\n\t\t\t// array of THREE.Matrix4\r\n\r\n\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\tuniform._array = new Float32Array( 16 * value.length );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, il = value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvalue[ i ].flattenToArrayOffset( uniform._array, i * 16 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.uniformMatrix4fv( location, false, uniform._array );\r\n\r\n\t\t} else if ( type === 't' ) {\r\n\r\n\t\t\t// single THREE.Texture (2d or cube)\r\n\r\n\t\t\ttexture = value;\r\n\t\t\ttextureUnit = getTextureUnit();\r\n\r\n\t\t\t_gl.uniform1i( location, textureUnit );\r\n\r\n\t\t\tif ( ! texture ) return;\r\n\r\n\t\t\tif ( texture instanceof THREE.CubeTexture ||\r\n\t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\r\n\r\n\t\t\t\t// CompressedTexture can have Array in image :/\r\n\r\n\t\t\t\tsetCubeTexture( texture, textureUnit );\r\n\r\n\t\t\t} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\t\tsetCubeTextureDynamic( texture.texture, textureUnit );\r\n\r\n\t\t\t} else if ( texture instanceof THREE.WebGLRenderTarget ) {\r\n\r\n\t\t\t\t_this.setTexture( texture.texture, textureUnit );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_this.setTexture( texture, textureUnit );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( type === 'tv' ) {\r\n\r\n\t\t\t// array of THREE.Texture (2d or cube)\r\n\r\n\t\t\tif ( uniform._array === undefined ) {\r\n\r\n\t\t\t\tuniform._array = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, il = uniform.value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tuniform._array[ i ] = getTextureUnit();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.uniform1iv( location, uniform._array );\r\n\r\n\t\t\tfor ( var i = 0, il = uniform.value.length; i < il; i ++ ) {\r\n\r\n\t\t\t\ttexture = uniform.value[ i ];\r\n\t\t\t\ttextureUnit = uniform._array[ i ];\r\n\r\n\t\t\t\tif ( ! texture ) continue;\r\n\r\n\t\t\t\tif ( texture instanceof THREE.CubeTexture ||\r\n\t\t\t\t\t ( texture.image instanceof Array && texture.image.length === 6 ) ) {\r\n\r\n\t\t\t\t\t// CompressedTexture can have Array in image :/\r\n\r\n\t\t\t\t\tsetCubeTexture( texture, textureUnit );\r\n\r\n\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTarget ) {\r\n\r\n\t\t\t\t\t_this.setTexture( texture.texture, textureUnit );\r\n\r\n\t\t\t\t} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\t\t\tsetCubeTextureDynamic( texture.texture, textureUnit );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_this.setTexture( texture, textureUnit );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Unknown uniform type: ' + type );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction loadUniformsGeneric( uniforms ) {\r\n\r\n\t\tfor ( var i = 0, l = uniforms.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar uniform = uniforms[ i ][ 0 ];\r\n\r\n\t\t\t// needsUpdate property is not added to all uniforms.\r\n\t\t\tif ( uniform.needsUpdate === false ) continue;\r\n\r\n\t\t\tvar type = uniform.type;\r\n\t\t\tvar location = uniforms[ i ][ 1 ];\r\n\t\t\tvar value = uniform.value;\r\n\r\n\t\t\tloadUniform( uniform, type, location, value );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setupLights ( lights, camera ) {\r\n\r\n\t\tvar l, ll, light,\r\n\t\tr = 0, g = 0, b = 0,\r\n\t\tcolor,\r\n\t\tintensity,\r\n\t\tdistance,\r\n\r\n\t\tviewMatrix = camera.matrixWorldInverse,\r\n\r\n\t\tdirectionalLength = 0,\r\n\t\tpointLength = 0,\r\n\t\tspotLength = 0,\r\n\t\themiLength = 0,\r\n\r\n\t\tshadowsLength = 0;\r\n\r\n\t\t_lights.shadowsPointLight = 0;\r\n\r\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\tlight = lights[ l ];\r\n\r\n\t\t\tcolor = light.color;\r\n\t\t\tintensity = light.intensity;\r\n\t\t\tdistance = light.distance;\r\n\r\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\r\n\r\n\t\t\t\tr += color.r * intensity;\r\n\t\t\t\tg += color.g * intensity;\r\n\t\t\t\tb += color.b * intensity;\r\n\r\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\tvar uniforms = lightCache.get( light );\r\n\r\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\tuniforms.direction.sub( _vector3 );\r\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\r\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\r\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\r\n\r\n\t\t\t\t\t_lights.shadows[ shadowsLength ++ ] = light;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_lights.directionalShadowMap[ directionalLength ] = light.shadow.map;\r\n\t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\r\n\t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\r\n\r\n\t\t\t} else if ( light instanceof THREE.SpotLight ) {\r\n\r\n\t\t\t\tvar uniforms = lightCache.get( light );\r\n\r\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\r\n\t\t\t\tuniforms.distance = distance;\r\n\r\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\tuniforms.direction.sub( _vector3 );\r\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\r\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\r\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\r\n\r\n\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\r\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\r\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\r\n\r\n\t\t\t\t\t_lights.shadows[ shadowsLength ++ ] = light;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_lights.spotShadowMap[ spotLength ] = light.shadow.map;\r\n\t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\r\n\t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\r\n\r\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\tvar uniforms = lightCache.get( light );\r\n\r\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\tuniforms.distance = light.distance;\r\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\r\n\r\n\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\r\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\r\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\r\n\r\n\t\t\t\t\t_lights.shadows[ shadowsLength ++ ] = light;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_lights.pointShadowMap[ pointLength ] = light.shadow.map;\r\n\r\n\t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\r\n\r\n\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new THREE.Matrix4();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\r\n\t\t\t\t// equal to inverse of the light's position\r\n\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\r\n\t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\r\n\r\n\t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\r\n\r\n\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\r\n\r\n\t\t\t\tvar uniforms = lightCache.get( light );\r\n\r\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\t\t\t\tuniforms.direction.normalize();\r\n\r\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\r\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\r\n\r\n\t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t_lights.ambient[ 0 ] = r;\r\n\t\t_lights.ambient[ 1 ] = g;\r\n\t\t_lights.ambient[ 2 ] = b;\r\n\r\n\t\t_lights.directional.length = directionalLength;\r\n\t\t_lights.spot.length = spotLength;\r\n\t\t_lights.point.length = pointLength;\r\n\t\t_lights.hemi.length = hemiLength;\r\n\r\n\t\t_lights.shadows.length = shadowsLength;\r\n\r\n\t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + shadowsLength;\r\n\r\n\t}\r\n\r\n\t// GL state setting\r\n\r\n\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\r\n\r\n\t\tif ( cullFace === THREE.CullFaceNone ) {\r\n\r\n\t\t\tstate.disable( _gl.CULL_FACE );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CW );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.frontFace( _gl.CCW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( cullFace === THREE.CullFaceBack ) {\r\n\r\n\t\t\t\t_gl.cullFace( _gl.BACK );\r\n\r\n\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\r\n\r\n\t\t\t\t_gl.cullFace( _gl.FRONT );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.cullFace( _gl.FRONT_AND_BACK );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.enable( _gl.CULL_FACE );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Textures\r\n\r\n\tfunction setTextureParameters ( textureType, texture, isPowerOfTwoImage ) {\r\n\r\n\t\tvar extension;\r\n\r\n\t\tif ( isPowerOfTwoImage ) {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\r\n\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\r\n\r\n\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\tif ( extension ) {\r\n\r\n\t\t\tif ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\r\n\t\t\tif ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\r\n\r\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\r\n\r\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _this.getMaxAnisotropy() ) );\r\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction uploadTexture( textureProperties, texture, slot ) {\r\n\r\n\t\tif ( textureProperties.__webglInit === undefined ) {\r\n\r\n\t\t\ttextureProperties.__webglInit = true;\r\n\r\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t_infoMemory.textures ++;\r\n\r\n\t\t}\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\r\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\r\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\r\n\r\n\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\r\n\r\n\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\r\n\r\n\t\t\timage = makePowerOfTwo( image );\r\n\r\n\t\t}\r\n\r\n\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\r\n\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\tglType = paramThreeToGL( texture.type );\r\n\r\n\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\r\n\r\n\t\tvar mipmap, mipmaps = texture.mipmaps;\r\n\r\n\t\tif ( texture instanceof THREE.DataTexture ) {\r\n\r\n\t\t\t// use manually created mipmaps if available\r\n\t\t\t// if there are no manual mipmaps\r\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\r\n\r\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\r\n\r\n\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tmipmap = mipmaps[ i ];\r\n\r\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\r\n\r\n\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\r\n\r\n\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// regular Texture (image, video, canvas)\r\n\r\n\t\t\t// use manually created mipmaps if available\r\n\t\t\t// if there are no manual mipmaps\r\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\r\n\r\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\r\n\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\r\n\t}\r\n\r\n\tthis.setTexture = function ( texture, slot ) {\r\n\r\n\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\tvar image = texture.image;\r\n\r\n\t\t\tif ( image === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( image.complete === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\r\n\t};\r\n\r\n\tfunction clampToMaxSize ( image, maxSize ) {\r\n\r\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\r\n\r\n\t\t\t// Warning: Scaling through the canvas will only work with images that use\r\n\t\t\t// premultiplied alpha.\r\n\r\n\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\r\n\r\n\t\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\tcanvas.width = Math.floor( image.width * scale );\r\n\t\t\tcanvas.height = Math.floor( image.height * scale );\r\n\r\n\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\r\n\r\n\t\t\treturn canvas;\r\n\r\n\t\t}\r\n\r\n\t\treturn image;\r\n\r\n\t}\r\n\r\n\tfunction isPowerOfTwo( image ) {\r\n\r\n\t\treturn THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );\r\n\r\n\t}\r\n\r\n\tfunction textureNeedsPowerOfTwo( texture ) {\r\n\r\n\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;\r\n\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tfunction makePowerOfTwo( image ) {\r\n\r\n\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\r\n\r\n\t\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\tcanvas.width = THREE.Math.nearestPowerOfTwo( image.width );\r\n\t\t\tcanvas.height = THREE.Math.nearestPowerOfTwo( image.height );\r\n\r\n\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\r\n\r\n\t\t\treturn canvas;\r\n\r\n\t\t}\r\n\r\n\t\treturn image;\r\n\r\n\t}\r\n\r\n\tfunction setCubeTexture ( texture, slot ) {\r\n\r\n\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.image.length === 6 ) {\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\r\n\r\n\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\r\n\r\n\t\t\t\t\t_infoMemory.textures ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\r\n\r\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\r\n\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\r\n\t\t\t\tvar isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;\r\n\r\n\t\t\t\tvar cubeImage = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( _this.autoScaleCubemaps && ! isCompressed && ! isDataTexture ) {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar image = cubeImage[ 0 ],\r\n\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\r\n\t\t\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\t\t\tglType = paramThreeToGL( texture.type );\r\n\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( ! isCompressed ) {\r\n\r\n\t\t\t\t\t\tif ( isDataTexture ) {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\r\n\r\n\t\t\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()\" );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\r\n\r\n\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setCubeTextureDynamic ( texture, slot ) {\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\r\n\r\n\t}\r\n\r\n\t// Render targets\r\n\r\n\t// Setup storage for target texture and bind it to correct framebuffer\r\n\tfunction setupFrameBufferTexture ( framebuffer, renderTarget, attachment, textureTarget ) {\r\n\r\n\t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\r\n\t\tvar glType = paramThreeToGL( renderTarget.texture.type );\r\n\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\r\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t}\r\n\r\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\r\n\tfunction setupRenderBufferStorage ( renderbuffer, renderTarget ) {\r\n\r\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// FIXME: We don't support !depth !stencil\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\r\n\r\n\t\t}\r\n\r\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\r\n\r\n\t}\r\n\r\n\t// Setup GL resources for a non-texture depth buffer\r\n\tfunction setupDepthRenderbuffer( renderTarget ) {\r\n\r\n\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\r\n\t\tif ( isCube ) {\r\n\r\n\t\t\trenderTargetProperties.__webglDepthbuffer = [];\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\r\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\r\n\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\r\n\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t}\r\n\r\n\t// Set up GL resources for the render target\r\n\tfunction setupRenderTarget( renderTarget ) {\r\n\r\n\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t_infoMemory.textures ++;\r\n\r\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\t\tvar isTargetPowerOfTwo = THREE.Math.isPowerOfTwo( renderTarget.width ) && THREE.Math.isPowerOfTwo( renderTarget.height );\r\n\r\n\t\t// Setup framebuffer\r\n\r\n\t\tif ( isCube ) {\r\n\r\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\r\n\r\n\t\t}\r\n\r\n\t\t// Setup color buffer\r\n\r\n\t\tif ( isCube ) {\r\n\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\r\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\r\n\r\n\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\r\n\r\n\t\t}\r\n\r\n\t\t// Setup depth and stencil buffers\r\n\r\n\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\tsetupDepthRenderbuffer( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.getCurrentRenderTarget = function() {\r\n\r\n\t\treturn _currentRenderTarget;\r\n\r\n\t}\r\n\r\n\tthis.setRenderTarget = function ( renderTarget ) {\r\n\r\n\t\t_currentRenderTarget = renderTarget;\r\n\r\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\r\n\r\n\t\t\tsetupRenderTarget( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\t\tvar framebuffer;\r\n\r\n\t\tif ( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_currentScissor.copy( renderTarget.scissor );\r\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\r\n\r\n\t\t\t_currentViewport.copy( renderTarget.viewport );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tframebuffer = null;\r\n\r\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\r\n\t\t\t_currentScissorTest = _scissorTest;\r\n\r\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\r\n\r\n\t\t}\r\n\r\n\t\tif ( _currentFramebuffer !== framebuffer ) {\r\n\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t\t_currentFramebuffer = framebuffer;\r\n\r\n\t\t}\r\n\r\n\t\tstate.scissor( _currentScissor );\r\n\t\tstate.setScissorTest( _currentScissorTest );\r\n\r\n\t\tstate.viewport( _currentViewport );\r\n\r\n\t\tif ( isCube ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\r\n\r\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\r\n\t\tif ( framebuffer ) {\r\n\r\n\t\t\tvar restore = false;\r\n\r\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\r\n\r\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\t\t\trestore = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tvar texture = renderTarget.texture;\r\n\r\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat\r\n\t\t\t\t\t&& paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.type !== THREE.UnsignedByteType\r\n\t\t\t\t\t&& paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE )\r\n\t\t\t\t\t&& ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) )\r\n\t\t\t\t\t&& ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\r\n\r\n\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} finally {\r\n\r\n\t\t\t\tif ( restore ) {\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction updateRenderTargetMipmap( renderTarget ) {\r\n\r\n\t\tvar target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\r\n\t\tvar texture = properties.get( renderTarget.texture ).__webglTexture;\r\n\r\n\t\tstate.bindTexture( target, texture );\r\n\t\t_gl.generateMipmap( target );\r\n\t\tstate.bindTexture( target, null );\r\n\r\n\t}\r\n\r\n\t// Fallback filters for non-power-of-2 textures\r\n\r\n\tfunction filterFallback ( f ) {\r\n\r\n\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\r\n\r\n\t\t\treturn _gl.NEAREST;\r\n\r\n\t\t}\r\n\r\n\t\treturn _gl.LINEAR;\r\n\r\n\t}\r\n\r\n\t// Map three.js constants to WebGL constants\r\n\r\n\tfunction paramThreeToGL ( p ) {\r\n\r\n\t\tvar extension;\r\n\r\n\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\r\n\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\r\n\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\r\n\r\n\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\r\n\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\r\n\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\r\n\r\n\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\r\n\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\r\n\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\r\n\r\n\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\r\n\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\r\n\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\r\n\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\r\n\r\n\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\r\n\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\r\n\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\r\n\t\tif ( p === THREE.IntType ) return _gl.INT;\r\n\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\r\n\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\r\n\r\n\t\textension = extensions.get( 'OES_texture_half_float' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;\r\n\r\n\t\t}\r\n\r\n\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\r\n\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\r\n\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\r\n\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\r\n\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\r\n\r\n\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\r\n\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\r\n\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\r\n\r\n\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\r\n\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\r\n\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\r\n\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\r\n\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\r\n\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\r\n\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\r\n\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\r\n\r\n\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\r\n\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\r\n\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\r\n\r\n\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n\r\n\t\t}\r\n\r\n\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n\t\t\tif ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n\t\t\tif ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n\t\t\tif ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n\r\n\t\t}\r\n\r\n\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\r\n\r\n\t\t}\r\n\r\n\t\textension = extensions.get( 'EXT_blend_minmax' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.MinEquation ) return extension.MIN_EXT;\r\n\t\t\tif ( p === THREE.MaxEquation ) return extension.MAX_EXT;\r\n\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/WebGLRenderTarget.js\r\n\r\n/**\r\n * @author szimek / https://github.com/szimek/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author Marius Kintel / https://github.com/kintel\r\n */\r\n\r\n/*\r\n In options, we can specify:\r\n * Texture parameters for an auto-generated target texture\r\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\r\n*/\r\nTHREE.WebGLRenderTarget = function ( width, height, options ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\r\n\tthis.scissor = new THREE.Vector4( 0, 0, width, height );\r\n\tthis.scissorTest = false;\r\n\r\n\tthis.viewport = new THREE.Vector4( 0, 0, width, height );\r\n\r\n\toptions = options || {};\r\n\r\n\tif ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;\r\n\r\n\tthis.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy );\r\n\r\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\r\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\r\n\r\n};\r\n\r\nTHREE.WebGLRenderTarget.prototype = {\r\n\r\n\tconstructor: THREE.WebGLRenderTarget,\r\n\r\n\tsetSize: function ( width, height ) {\r\n\r\n\t\tif ( this.width !== width || this.height !== height ) {\r\n\r\n\t\t\tthis.width = width;\r\n\t\t\tthis.height = height;\r\n\r\n\t\t\tthis.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis.viewport.set( 0, 0, width, height );\r\n\t\tthis.scissor.set( 0, 0, width, height );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.width = source.width;\r\n\t\tthis.height = source.height;\r\n\r\n\t\tthis.viewport.copy( source.viewport );\r\n\r\n\t\tthis.texture = source.texture.clone();\r\n\r\n\t\tthis.depthBuffer = source.depthBuffer;\r\n\t\tthis.stencilBuffer = source.stencilBuffer;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.EventDispatcher.prototype.apply( THREE.WebGLRenderTarget.prototype );\r\n\r\n// File:src/renderers/WebGLRenderTargetCube.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com\r\n */\r\n\r\nTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\r\n\r\n\tTHREE.WebGLRenderTarget.call( this, width, height, options );\r\n\r\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\r\n\tthis.activeMipMapLevel = 0;\r\n\r\n};\r\n\r\nTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\r\nTHREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;\r\n\r\n// File:src/renderers/webgl/WebGLBufferRenderer.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {\r\n\r\n\tvar mode;\r\n\r\n\tfunction setMode( value ) {\r\n\r\n\t\tmode = value;\r\n\r\n\t}\r\n\r\n\tfunction render( start, count ) {\r\n\r\n\t\t_gl.drawArrays( mode, start, count );\r\n\r\n\t\t_infoRender.calls ++;\r\n\t\t_infoRender.vertices += count;\r\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\r\n\r\n\t}\r\n\r\n\tfunction renderInstances( geometry ) {\r\n\r\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\tif ( extension === null ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar position = geometry.attributes.position;\r\n\r\n\t\tvar count = 0;\r\n\r\n\t\tif ( position instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\tcount = position.data.count;\r\n\r\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tcount = position.count;\r\n\r\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\r\n\r\n\t\t}\r\n\r\n\t\t_infoRender.calls ++;\r\n\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\r\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\r\n\r\n\t}\r\n\r\n\tthis.setMode = setMode;\r\n\tthis.render = render;\r\n\tthis.renderInstances = renderInstances;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {\r\n\r\n\tvar mode;\r\n\r\n\tfunction setMode( value ) {\r\n\r\n\t\tmode = value;\r\n\r\n\t}\r\n\r\n\tvar type, size;\r\n\r\n\tfunction setIndex( index ) {\r\n\r\n\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\r\n\r\n\t\t\ttype = _gl.UNSIGNED_INT;\r\n\t\t\tsize = 4;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttype = _gl.UNSIGNED_SHORT;\r\n\t\t\tsize = 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction render( start, count ) {\r\n\r\n\t\t_gl.drawElements( mode, count, type, start * size );\r\n\r\n\t\t_infoRender.calls ++;\r\n\t\t_infoRender.vertices += count;\r\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\r\n\r\n\t}\r\n\r\n\tfunction renderInstances( geometry, start, count ) {\r\n\r\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\tif ( extension === null ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\r\n\r\n\t\t_infoRender.calls ++;\r\n\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\r\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\r\n\t}\r\n\r\n\tthis.setMode = setMode;\r\n\tthis.setIndex = setIndex;\r\n\tthis.render = render;\r\n\tthis.renderInstances = renderInstances;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLExtensions.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLExtensions = function ( gl ) {\r\n\r\n\tvar extensions = {};\r\n\r\n\tthis.get = function ( name ) {\r\n\r\n\t\tif ( extensions[ name ] !== undefined ) {\r\n\r\n\t\t\treturn extensions[ name ];\r\n\r\n\t\t}\r\n\r\n\t\tvar extension;\r\n\r\n\t\tswitch ( name ) {\r\n\r\n\t\t\tcase 'EXT_texture_filter_anisotropic':\r\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'WEBGL_compressed_texture_etc1':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\textension = gl.getExtension( name );\r\n\r\n\t\t}\r\n\r\n\t\tif ( extension === null ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\textensions[ name ] = extension;\r\n\r\n\t\treturn extension;\r\n\r\n\t};\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLCapabilities.js\r\n\r\nTHREE.WebGLCapabilities = function ( gl, extensions, parameters ) {\r\n\r\n\tfunction getMaxPrecision( precision ) {\r\n\r\n\t\tif ( precision === 'highp' ) {\r\n\r\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\r\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\r\n\r\n\t\t\t\treturn 'highp';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprecision = 'mediump';\r\n\r\n\t\t}\r\n\r\n\t\tif ( precision === 'mediump' ) {\r\n\r\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\r\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\r\n\r\n\t\t\t\treturn 'mediump';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn 'lowp';\r\n\r\n\t}\r\n\r\n\tthis.getMaxPrecision = getMaxPrecision;\r\n\r\n\tthis.precision = parameters.precision !== undefined ? parameters.precision : 'highp',\r\n\tthis.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;\r\n\r\n\tthis.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\tthis.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n\tthis.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\r\n\tthis.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n\tthis.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n\tthis.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n\tthis.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\r\n\tthis.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\r\n\r\n\tthis.vertexTextures = this.maxVertexTextures > 0;\r\n\tthis.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\r\n\tthis.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\r\n\r\n\tvar _maxPrecision = getMaxPrecision( this.precision );\r\n\r\n\tif ( _maxPrecision !== this.precision ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );\r\n\t\tthis.precision = _maxPrecision;\r\n\r\n\t}\r\n\r\n\tif ( this.logarithmicDepthBuffer ) {\r\n\r\n\t\tthis.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLGeometries.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLGeometries = function ( gl, properties, info ) {\r\n\r\n\tvar geometries = {};\r\n\r\n\tfunction get( object ) {\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( geometries[ geometry.id ] !== undefined ) {\r\n\r\n\t\t\treturn geometries[ geometry.id ];\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\tvar buffergeometry;\r\n\r\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tbuffergeometry = geometry;\r\n\r\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tif ( geometry._bufferGeometry === undefined ) {\r\n\r\n\t\t\t\tgeometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbuffergeometry = geometry._bufferGeometry;\r\n\r\n\t\t}\r\n\r\n\t\tgeometries[ geometry.id ] = buffergeometry;\r\n\r\n\t\tinfo.memory.geometries ++;\r\n\r\n\t\treturn buffergeometry;\r\n\r\n\t}\r\n\r\n\tfunction onGeometryDispose( event ) {\r\n\r\n\t\tvar geometry = event.target;\r\n\t\tvar buffergeometry = geometries[ geometry.id ];\r\n\r\n\t\tif ( buffergeometry.index !== null ) {\r\n\r\n\t\t\tdeleteAttribute( buffergeometry.index );\r\n\r\n\t\t}\r\n\r\n\t\tdeleteAttributes( buffergeometry.attributes );\r\n\r\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\tdelete geometries[ geometry.id ];\r\n\r\n\t\t// TODO\r\n\r\n\t\tvar property = properties.get( geometry );\r\n\r\n\t\tif ( property.wireframe ) {\r\n\r\n\t\t\tdeleteAttribute( property.wireframe );\r\n\r\n\t\t}\r\n\r\n\t\tproperties.delete( geometry );\r\n\r\n\t\tvar bufferproperty = properties.get( buffergeometry );\r\n\r\n\t\tif ( bufferproperty.wireframe ) {\r\n\r\n\t\t\tdeleteAttribute( bufferproperty.wireframe );\r\n\r\n\t\t}\r\n\r\n\t\tproperties.delete( buffergeometry );\r\n\r\n\t\t//\r\n\r\n\t\tinfo.memory.geometries --;\r\n\r\n\t}\r\n\r\n\tfunction getAttributeBuffer( attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\r\n\r\n\t\t}\r\n\r\n\t\treturn properties.get( attribute ).__webglBuffer;\r\n\r\n\t}\r\n\r\n\tfunction deleteAttribute( attribute ) {\r\n\r\n\t\tvar buffer = getAttributeBuffer( attribute );\r\n\r\n\t\tif ( buffer !== undefined ) {\r\n\r\n\t\t\tgl.deleteBuffer( buffer );\r\n\t\t\tremoveAttributeBuffer( attribute );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction deleteAttributes( attributes ) {\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tdeleteAttribute( attributes[ name ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction removeAttributeBuffer( attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\tproperties.delete( attribute.data );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tproperties.delete( attribute );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.get = get;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLLights.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLLights = function () {\r\n\r\n\tvar lights = {};\r\n\r\n\tthis.get = function ( light ) {\r\n\r\n\t\tif ( lights[ light.id ] !== undefined ) {\r\n\r\n\t\t\treturn lights[ light.id ];\r\n\r\n\t\t}\r\n\r\n\t\tvar uniforms;\r\n\r\n\t\tswitch ( light.type ) {\r\n\r\n\t\t\tcase 'DirectionalLight':\r\n\t\t\t\tuniforms = {\r\n\t\t\t\t\tdirection: new THREE.Vector3(),\r\n\t\t\t\t\tcolor: new THREE.Color(),\r\n\r\n\t\t\t\t\tshadow: false,\r\n\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'SpotLight':\r\n\t\t\t\tuniforms = {\r\n\t\t\t\t\tposition: new THREE.Vector3(),\r\n\t\t\t\t\tdirection: new THREE.Vector3(),\r\n\t\t\t\t\tcolor: new THREE.Color(),\r\n\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\tconeCos: 0,\r\n\t\t\t\t\tpenumbraCos: 0,\r\n\t\t\t\t\tdecay: 0,\r\n\r\n\t\t\t\t\tshadow: false,\r\n\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'PointLight':\r\n\t\t\t\tuniforms = {\r\n\t\t\t\t\tposition: new THREE.Vector3(),\r\n\t\t\t\t\tcolor: new THREE.Color(),\r\n\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\tdecay: 0,\r\n\r\n\t\t\t\t\tshadow: false,\r\n\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'HemisphereLight':\r\n\t\t\t\tuniforms = {\r\n\t\t\t\t\tdirection: new THREE.Vector3(),\r\n\t\t\t\t\tskyColor: new THREE.Color(),\r\n\t\t\t\t\tgroundColor: new THREE.Color()\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tlights[ light.id ] = uniforms;\r\n\r\n\t\treturn uniforms;\r\n\r\n\t};\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLObjects.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLObjects = function ( gl, properties, info ) {\r\n\r\n\tvar geometries = new THREE.WebGLGeometries( gl, properties, info );\r\n\r\n\t//\r\n\r\n\tfunction update( object ) {\r\n\r\n\t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\r\n\r\n\t\tvar geometry = geometries.get( object );\r\n\r\n\t\tif ( object.geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tgeometry.updateFromObject( object );\r\n\r\n\t\t}\r\n\r\n\t\tvar index = geometry.index;\r\n\t\tvar attributes = geometry.attributes;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\r\n\r\n\t\t}\r\n\r\n\t\t// morph targets\r\n\r\n\t\tvar morphAttributes = geometry.morphAttributes;\r\n\r\n\t\tfor ( var name in morphAttributes ) {\r\n\r\n\t\t\tvar array = morphAttributes[ name ];\r\n\r\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\r\n\t}\r\n\r\n\tfunction updateAttribute( attribute, bufferType ) {\r\n\r\n\t\tvar data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;\r\n\r\n\t\tvar attributeProperties = properties.get( data );\r\n\r\n\t\tif ( attributeProperties.__webglBuffer === undefined ) {\r\n\r\n\t\t\tcreateBuffer( attributeProperties, data, bufferType );\r\n\r\n\t\t} else if ( attributeProperties.version !== data.version ) {\r\n\r\n\t\t\tupdateBuffer( attributeProperties, data, bufferType );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction createBuffer( attributeProperties, data, bufferType ) {\r\n\r\n\t\tattributeProperties.__webglBuffer = gl.createBuffer();\r\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\r\n\r\n\t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\r\n\r\n\t\tgl.bufferData( bufferType, data.array, usage );\r\n\r\n\t\tattributeProperties.version = data.version;\r\n\r\n\t}\r\n\r\n\tfunction updateBuffer( attributeProperties, data, bufferType ) {\r\n\r\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\r\n\r\n\t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\r\n\r\n\t\t\t// Not using update ranges\r\n\r\n\t\t\tgl.bufferSubData( bufferType, 0, data.array );\r\n\r\n\t\t} else if ( data.updateRange.count === 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\r\n\t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\r\n\r\n\t\t\tdata.updateRange.count = 0; // reset range\r\n\r\n\t\t}\r\n\r\n\t\tattributeProperties.version = data.version;\r\n\r\n\t}\r\n\r\n\tfunction getAttributeBuffer( attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\r\n\r\n\t\t}\r\n\r\n\t\treturn properties.get( attribute ).__webglBuffer;\r\n\r\n\t}\r\n\r\n\tfunction getWireframeAttribute( geometry ) {\r\n\r\n\t\tvar property = properties.get( geometry );\r\n\r\n\t\tif ( property.wireframe !== undefined ) {\r\n\r\n\t\t\treturn property.wireframe;\r\n\r\n\t\t}\r\n\r\n\t\tvar indices = [];\r\n\r\n\t\tvar index = geometry.index;\r\n\t\tvar attributes = geometry.attributes;\r\n\t\tvar position = attributes.position;\r\n\r\n\t\t// console.time( 'wireframe' );\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tvar edges = {};\r\n\t\t\tvar array = index.array;\r\n\r\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\tvar a = array[ i + 0 ];\r\n\t\t\t\tvar b = array[ i + 1 ];\r\n\t\t\t\tvar c = array[ i + 2 ];\r\n\r\n\t\t\t\tif ( checkEdge( edges, a, b ) ) indices.push( a, b );\r\n\t\t\t\tif ( checkEdge( edges, b, c ) ) indices.push( b, c );\r\n\t\t\t\tif ( checkEdge( edges, c, a ) ) indices.push( c, a );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar array = attributes.position.array;\r\n\r\n\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\r\n\r\n\t\t\t\tvar a = i + 0;\r\n\t\t\t\tvar b = i + 1;\r\n\t\t\t\tvar c = i + 2;\r\n\r\n\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// console.timeEnd( 'wireframe' );\r\n\r\n\t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\r\n\t\tvar attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );\r\n\r\n\t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\r\n\r\n\t\tproperty.wireframe = attribute;\r\n\r\n\t\treturn attribute;\r\n\r\n\t}\r\n\r\n\tfunction checkEdge( edges, a, b ) {\r\n\r\n\t\tif ( a > b ) {\r\n\r\n\t\t\tvar tmp = a;\r\n\t\t\ta = b;\r\n\t\t\tb = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tvar list = edges[ a ];\r\n\r\n\t\tif ( list === undefined ) {\r\n\r\n\t\t\tedges[ a ] = [ b ];\r\n\t\t\treturn true;\r\n\r\n\t\t} else if ( list.indexOf( b ) === -1 ) {\r\n\r\n\t\t\tlist.push( b );\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tthis.getAttributeBuffer = getAttributeBuffer;\r\n\tthis.getWireframeAttribute = getWireframeAttribute;\r\n\r\n\tthis.update = update;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLProgram.js\r\n\r\nTHREE.WebGLProgram = ( function () {\r\n\r\n\tvar programIdCount = 0;\r\n\r\n\t// TODO: Combine the regex\r\n\tvar structRe = /^([\\w\\d_]+)\\.([\\w\\d_]+)$/;\r\n\tvar arrayStructRe = /^([\\w\\d_]+)\\[(\\d+)\\]\\.([\\w\\d_]+)$/;\r\n\tvar arrayRe = /^([\\w\\d_]+)\\[0\\]$/;\r\n\r\n\tfunction getEncodingComponents( encoding ) {\r\n\r\n\t\tswitch ( encoding ) {\r\n\r\n\t\t\tcase THREE.LinearEncoding:\r\n\t\t\t\treturn [ 'Linear','( value )' ];\r\n\t\t\tcase THREE.sRGBEncoding:\r\n\t\t\t\treturn [ 'sRGB','( value )' ];\r\n\t\t\tcase THREE.RGBEEncoding:\r\n\t\t\t\treturn [ 'RGBE','( value )' ];\r\n\t\t\tcase THREE.RGBM7Encoding:\r\n\t\t\t\treturn [ 'RGBM','( value, 7.0 )' ];\r\n\t\t\tcase THREE.RGBM16Encoding:\r\n\t\t\t\treturn [ 'RGBM','( value, 16.0 )' ];\r\n\t\t\tcase THREE.RGBDEncoding:\r\n\t\t\t\treturn [ 'RGBD','( value, 256.0 )' ];\r\n\t\t\tcase THREE.GammaEncoding:\r\n\t\t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\r\n\r\n\t\tvar components = getEncodingComponents( encoding );\r\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\r\n\r\n\t}\r\n\r\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\r\n\r\n\t\tvar components = getEncodingComponents( encoding );\r\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\r\n\r\n\t}\r\n\r\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\r\n\r\n\t\tvar toneMappingName;\r\n\r\n\t\tswitch ( toneMapping ) {\r\n\r\n\t\t\tcase THREE.LinearToneMapping:\r\n\t\t\t\ttoneMappingName = \"Linear\";\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.ReinhardToneMapping:\r\n\t\t\t\ttoneMappingName = \"Reinhard\";\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.Uncharted2ToneMapping:\r\n\t\t\t\ttoneMappingName = \"Uncharted2\";\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.CineonToneMapping:\r\n\t\t\t\ttoneMappingName = \"OptimizedCineon\";\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\r\n\r\n\t\t}\r\n\r\n\t\treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\r\n\r\n\t}\r\n\r\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\r\n\r\n\t\textensions = extensions || {};\r\n\r\n\t\tvar chunks = [\r\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\r\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\r\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\r\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\r\n\t\t];\r\n\r\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction generateDefines( defines ) {\r\n\r\n\t\tvar chunks = [];\r\n\r\n\t\tfor ( var name in defines ) {\r\n\r\n\t\t\tvar value = defines[ name ];\r\n\r\n\t\t\tif ( value === false ) continue;\r\n\r\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction fetchUniformLocations( gl, program, identifiers ) {\r\n\r\n\t\tvar uniforms = {};\r\n\r\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\r\n\r\n\t\tfor ( var i = 0; i < n; i ++ ) {\r\n\r\n\t\t\tvar info = gl.getActiveUniform( program, i );\r\n\t\t\tvar name = info.name;\r\n\t\t\tvar location = gl.getUniformLocation( program, name );\r\n\r\n\t\t\t//console.log(\"THREE.WebGLProgram: ACTIVE UNIFORM:\", name);\r\n\r\n\t\t\tvar matches = structRe.exec( name );\r\n\t\t\tif ( matches ) {\r\n\r\n\t\t\t\tvar structName = matches[ 1 ];\r\n\t\t\t\tvar structProperty = matches[ 2 ];\r\n\r\n\t\t\t\tvar uniformsStruct = uniforms[ structName ];\r\n\r\n\t\t\t\tif ( ! uniformsStruct ) {\r\n\r\n\t\t\t\t\tuniformsStruct = uniforms[ structName ] = {};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniformsStruct[ structProperty ] = location;\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmatches = arrayStructRe.exec( name );\r\n\r\n\t\t\tif ( matches ) {\r\n\r\n\t\t\t\tvar arrayName = matches[ 1 ];\r\n\t\t\t\tvar arrayIndex = matches[ 2 ];\r\n\t\t\t\tvar arrayProperty = matches[ 3 ];\r\n\r\n\t\t\t\tvar uniformsArray = uniforms[ arrayName ];\r\n\r\n\t\t\t\tif ( ! uniformsArray ) {\r\n\r\n\t\t\t\t\tuniformsArray = uniforms[ arrayName ] = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uniformsArrayIndex = uniformsArray[ arrayIndex ];\r\n\r\n\t\t\t\tif ( ! uniformsArrayIndex ) {\r\n\r\n\t\t\t\t\tuniformsArrayIndex = uniformsArray[ arrayIndex ] = {};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tuniformsArrayIndex[ arrayProperty ] = location;\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmatches = arrayRe.exec( name );\r\n\r\n\t\t\tif ( matches ) {\r\n\r\n\t\t\t\tvar arrayName = matches[ 1 ];\r\n\r\n\t\t\t\tuniforms[ arrayName ] = location;\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniforms[ name ] = location;\r\n\r\n\t\t}\r\n\r\n\t\treturn uniforms;\r\n\r\n\t}\r\n\r\n\tfunction fetchAttributeLocations( gl, program, identifiers ) {\r\n\r\n\t\tvar attributes = {};\r\n\r\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\r\n\r\n\t\tfor ( var i = 0; i < n; i ++ ) {\r\n\r\n\t\t\tvar info = gl.getActiveAttrib( program, i );\r\n\t\t\tvar name = info.name;\r\n\r\n\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\r\n\r\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\r\n\r\n\t\t}\r\n\r\n\t\treturn attributes;\r\n\r\n\t}\r\n\r\n\tfunction filterEmptyLine( string ) {\r\n\r\n\t\treturn string !== '';\r\n\r\n\t}\r\n\r\n\tfunction replaceLightNums( string, parameters ) {\r\n\r\n\t\treturn string\r\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\r\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\r\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\r\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\r\n\r\n\t}\r\n\r\n\tfunction parseIncludes( string ) {\r\n\r\n\t\tvar pattern = /#include +<([\\w\\d.]+)>/g;\r\n\r\n\t\tfunction replace( match, include ) {\r\n\r\n\t\t\tvar replace = THREE.ShaderChunk[ include ];\r\n\r\n\t\t\tif ( replace === undefined ) {\r\n\r\n\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn parseIncludes( replace );\r\n\r\n\t\t}\r\n\r\n\t\treturn string.replace( pattern, replace );\r\n\r\n\t}\r\n\r\n\tfunction unrollLoops( string ) {\r\n\r\n\t\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\r\n\r\n\t\tfunction replace( match, start, end, snippet ) {\r\n\r\n\t\t\tvar unroll = '';\r\n\r\n\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\r\n\r\n\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn unroll;\r\n\r\n\t\t}\r\n\r\n\t\treturn string.replace( pattern, replace );\r\n\r\n\t}\r\n\r\n\treturn function WebGLProgram( renderer, code, material, parameters ) {\r\n\r\n\t\tvar gl = renderer.context;\r\n\r\n\t\tvar extensions = material.extensions;\r\n\t\tvar defines = material.defines;\r\n\r\n\t\tvar vertexShader = material.__webglShader.vertexShader;\r\n\t\tvar fragmentShader = material.__webglShader.fragmentShader;\r\n\r\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\r\n\r\n\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\r\n\r\n\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\r\n\r\n\t\t}\r\n\r\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\r\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\r\n\t\tif ( parameters.envMap ) {\r\n\r\n\t\t\tswitch ( material.envMap.mapping ) {\r\n\r\n\t\t\t\tcase THREE.CubeReflectionMapping:\r\n\t\t\t\tcase THREE.CubeRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.CubeUVReflectionMapping:\r\n\t\t\t\tcase THREE.CubeUVRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.EquirectangularReflectionMapping:\r\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.SphericalReflectionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( material.envMap.mapping ) {\r\n\r\n\t\t\t\tcase THREE.CubeRefractionMapping:\r\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( material.combine ) {\r\n\r\n\t\t\t\tcase THREE.MultiplyOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.MixOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.AddOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\r\n\r\n\t\t// console.log( 'building new program ' );\r\n\r\n\t\t//\r\n\r\n\t\tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\r\n\r\n\t\tvar customDefines = generateDefines( defines );\r\n\r\n\t\t//\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar prefixVertex, prefixFragment;\r\n\r\n\t\tif ( material instanceof THREE.RawShaderMaterial ) {\r\n\r\n\t\t\tprefixVertex = '';\r\n\t\t\tprefixFragment = '';\r\n\r\n\t\t} else {\r\n\r\n\t\t\tprefixVertex = [\r\n\r\n\t\t\t\t'precision ' + parameters.precision + ' float;',\r\n\t\t\t\t'precision ' + parameters.precision + ' int;',\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\r\n\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\r\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\r\n\r\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\r\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\t\t\t\tparameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',\r\n\r\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\r\n\t\t\t\t'uniform mat4 modelMatrix;',\r\n\t\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform mat3 normalMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\r\n\t\t\t\t'attribute vec3 position;',\r\n\t\t\t\t'attribute vec3 normal;',\r\n\t\t\t\t'attribute vec2 uv;',\r\n\r\n\t\t\t\t'#ifdef USE_COLOR',\r\n\r\n\t\t\t\t'\tattribute vec3 color;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\r\n\r\n\t\t\t\t'\tattribute vec3 morphTarget0;',\r\n\t\t\t\t'\tattribute vec3 morphTarget1;',\r\n\t\t\t\t'\tattribute vec3 morphTarget2;',\r\n\t\t\t\t'\tattribute vec3 morphTarget3;',\r\n\r\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\r\n\r\n\t\t\t\t'\t#else',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\r\n\r\n\t\t\t\t'\t#endif',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_SKINNING',\r\n\r\n\t\t\t\t'\tattribute vec4 skinIndex;',\r\n\t\t\t\t'\tattribute vec4 skinWeight;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tprefixFragment = [\r\n\r\n\t\t\t\tcustomExtensions,\r\n\r\n\t\t\t\t'precision ' + parameters.precision + ' float;',\r\n\t\t\t\t'precision ' + parameters.precision + ' int;',\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\r\n\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\r\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\t\t\t\tparameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',\r\n\r\n\t\t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\r\n\r\n\t\t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\t\t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\r\n\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\r\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\r\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? THREE.ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\r\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\r\n\r\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? THREE.ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\r\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\r\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\r\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\r\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t}\r\n\r\n\t\tvertexShader = parseIncludes( vertexShader, parameters );\r\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\r\n\r\n\t\tfragmentShader = parseIncludes( fragmentShader, parameters );\r\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\r\n\r\n\t\tif ( material instanceof THREE.ShaderMaterial === false ) {\r\n\r\n\t\t\tvertexShader = unrollLoops( vertexShader );\r\n\t\t\tfragmentShader = unrollLoops( fragmentShader );\r\n\r\n\t\t}\r\n\r\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\r\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\r\n\r\n\t\t// console.log( '*VERTEX*', vertexGlsl );\r\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\r\n\r\n\t\tvar glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\r\n\t\tvar glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\r\n\r\n\t\tgl.attachShader( program, glVertexShader );\r\n\t\tgl.attachShader( program, glFragmentShader );\r\n\r\n\t\t// Force a particular attribute to index 0.\r\n\r\n\t\tif ( material.index0AttributeName !== undefined ) {\r\n\r\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\r\n\r\n\t\t} else if ( parameters.morphTargets === true ) {\r\n\r\n\t\t\t// programs with morphTargets displace position out of attribute 0\r\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\r\n\r\n\t\t}\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\tvar programLog = gl.getProgramInfoLog( program );\r\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\r\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\r\n\r\n\t\tvar runnable = true;\r\n\t\tvar haveDiagnostics = true;\r\n\r\n\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\r\n\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\r\n\r\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\r\n\r\n\t\t\trunnable = false;\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\r\n\r\n\t\t} else if ( programLog !== '' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\r\n\r\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\r\n\r\n\t\t\thaveDiagnostics = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( haveDiagnostics ) {\r\n\r\n\t\t\tthis.diagnostics = {\r\n\r\n\t\t\t\trunnable: runnable,\r\n\t\t\t\tmaterial: material,\r\n\r\n\t\t\t\tprogramLog: programLog,\r\n\r\n\t\t\t\tvertexShader: {\r\n\r\n\t\t\t\t\tlog: vertexLog,\r\n\t\t\t\t\tprefix: prefixVertex\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfragmentShader: {\r\n\r\n\t\t\t\t\tlog: fragmentLog,\r\n\t\t\t\t\tprefix: prefixFragment\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// clean up\r\n\r\n\t\tgl.deleteShader( glVertexShader );\r\n\t\tgl.deleteShader( glFragmentShader );\r\n\r\n\t\t// set up caching for uniform locations\r\n\r\n\t\tvar cachedUniforms;\r\n\r\n\t\tthis.getUniforms = function() {\r\n\r\n\t\t\tif ( cachedUniforms === undefined ) {\r\n\r\n\t\t\t\tcachedUniforms = fetchUniformLocations( gl, program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedUniforms;\r\n\r\n\t\t};\r\n\r\n\t\t// set up caching for attribute locations\r\n\r\n\t\tvar cachedAttributes;\r\n\r\n\t\tthis.getAttributes = function() {\r\n\r\n\t\t\tif ( cachedAttributes === undefined ) {\r\n\r\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedAttributes;\r\n\r\n\t\t};\r\n\r\n\t\t// free resource\r\n\r\n\t\tthis.destroy = function() {\r\n\r\n\t\t\tgl.deleteProgram( program );\r\n\t\t\tthis.program = undefined;\r\n\r\n\t\t};\r\n\r\n\t\t// DEPRECATED\r\n\r\n\t\tObject.defineProperties( this, {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\tget: function() {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\r\n\t\t\t\t\treturn this.getUniforms();\r\n\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tattributes: {\r\n\t\t\t\tget: function() {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\r\n\t\t\t\t\treturn this.getAttributes();\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\r\n\t\t//\r\n\r\n\t\tthis.id = programIdCount ++;\r\n\t\tthis.code = code;\r\n\t\tthis.usedTimes = 1;\r\n\t\tthis.program = program;\r\n\t\tthis.vertexShader = glVertexShader;\r\n\t\tthis.fragmentShader = glFragmentShader;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n// File:src/renderers/webgl/WebGLPrograms.js\r\n\r\nTHREE.WebGLPrograms = function ( renderer, capabilities ) {\r\n\r\n\tvar programs = [];\r\n\r\n\tvar shaderIDs = {\r\n\t\tMeshDepthMaterial: 'depth',\r\n\t\tMeshNormalMaterial: 'normal',\r\n\t\tMeshBasicMaterial: 'basic',\r\n\t\tMeshLambertMaterial: 'lambert',\r\n\t\tMeshPhongMaterial: 'phong',\r\n\t\tMeshStandardMaterial: 'standard',\r\n\t\tLineBasicMaterial: 'basic',\r\n\t\tLineDashedMaterial: 'dashed',\r\n\t\tPointsMaterial: 'points'\r\n\t};\r\n\r\n\tvar parameterNames = [\r\n\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\r\n\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\r\n\t\t\"roughnessMap\", \"metalnessMap\",\r\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\r\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\r\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\r\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\r\n\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\r\n\t\t\"shadowMapEnabled\", \"pointLightShadows\", \"toneMapping\", 'physicallyCorrectLights',\r\n\t\t\"shadowMapType\",\r\n\t\t\"alphaTest\", \"doubleSided\", \"flipSided\"\r\n\t];\r\n\r\n\r\n\tfunction allocateBones ( object ) {\r\n\r\n\t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\r\n\r\n\t\t\treturn 1024;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// default for when object is not specified\r\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\r\n\t\t\t//\r\n\t\t\t//  - leave some extra space for other uniforms\r\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\r\n\t\t\t//    (up to 54 should be safe)\r\n\r\n\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\r\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\r\n\r\n\t\t\tvar maxBones = nVertexMatrices;\r\n\r\n\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\r\n\r\n\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\r\n\r\n\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn maxBones;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\r\n\r\n\t\tvar encoding;\r\n\r\n\t\tif ( ! map ) {\r\n\r\n\t\t\tencoding = THREE.LinearEncoding;\r\n\r\n\t\t} else if ( map instanceof THREE.Texture ) {\r\n\r\n\t\t\tencoding = map.encoding;\r\n\r\n\t\t} else if ( map instanceof THREE.WebGLRenderTarget ) {\r\n\r\n\t\t\tencoding = map.texture.encoding;\r\n\r\n\t\t}\r\n\r\n\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\r\n\t\tif ( encoding === THREE.LinearEncoding && gammaOverrideLinear ) {\r\n\r\n\t\t\tencoding = THREE.GammaEncoding;\r\n\r\n\t\t}\r\n\r\n\t\treturn encoding;\r\n\r\n\t}\r\n\r\n\tthis.getParameters = function ( material, lights, fog, object ) {\r\n\r\n\t\tvar shaderID = shaderIDs[ material.type ];\r\n\r\n\t\t// heuristics to create shader parameters according to lights in the scene\r\n\t\t// (not to blow over maxLights budget)\r\n\r\n\t\tvar maxBones = allocateBones( object );\r\n\t\tvar precision = renderer.getPrecision();\r\n\r\n\t\tif ( material.precision !== null ) {\r\n\r\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\r\n\r\n\t\t\tif ( precision !== material.precision ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar parameters = {\r\n\r\n\t\t\tshaderID: shaderID,\r\n\r\n\t\t\tprecision: precision,\r\n\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\r\n\t\t\toutputEncoding: getTextureEncodingFromMap( renderer.getCurrentRenderTarget(), renderer.gammaOutput ),\r\n\t\t\tmap: !! material.map,\r\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\r\n\t\t\tenvMap: !! material.envMap,\r\n\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\r\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\r\n\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === THREE.CubeUVReflectionMapping ) || ( material.envMap.mapping === THREE.CubeUVRefractionMapping ) ),\r\n\t\t\tlightMap: !! material.lightMap,\r\n\t\t\taoMap: !! material.aoMap,\r\n\t\t\temissiveMap: !! material.emissiveMap,\r\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\r\n\t\t\tbumpMap: !! material.bumpMap,\r\n\t\t\tnormalMap: !! material.normalMap,\r\n\t\t\tdisplacementMap: !! material.displacementMap,\r\n\t\t\troughnessMap: !! material.roughnessMap,\r\n\t\t\tmetalnessMap: !! material.metalnessMap,\r\n\t\t\tspecularMap: !! material.specularMap,\r\n\t\t\talphaMap: !! material.alphaMap,\r\n\r\n\t\t\tcombine: material.combine,\r\n\r\n\t\t\tvertexColors: material.vertexColors,\r\n\r\n\t\t\tfog: fog,\r\n\t\t\tuseFog: material.fog,\r\n\t\t\tfogExp: fog instanceof THREE.FogExp2,\r\n\r\n\t\t\tflatShading: material.shading === THREE.FlatShading,\r\n\r\n\t\t\tsizeAttenuation: material.sizeAttenuation,\r\n\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\r\n\r\n\t\t\tskinning: material.skinning,\r\n\t\t\tmaxBones: maxBones,\r\n\t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\r\n\r\n\t\t\tmorphTargets: material.morphTargets,\r\n\t\t\tmorphNormals: material.morphNormals,\r\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\r\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\r\n\r\n\t\t\tnumDirLights: lights.directional.length,\r\n\t\t\tnumPointLights: lights.point.length,\r\n\t\t\tnumSpotLights: lights.spot.length,\r\n\t\t\tnumHemiLights: lights.hemi.length,\r\n\r\n\t\t\tpointLightShadows: lights.shadowsPointLight,\r\n\r\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\r\n\t\t\tshadowMapType: renderer.shadowMap.type,\r\n\r\n\t\t\ttoneMapping: renderer.toneMapping,\r\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\r\n\r\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\r\n\r\n\t\t\talphaTest: material.alphaTest,\r\n\t\t\tdoubleSided: material.side === THREE.DoubleSide,\r\n\t\t\tflipSided: material.side === THREE.BackSide\r\n\r\n\t\t};\r\n\r\n\t\treturn parameters;\r\n\r\n\t};\r\n\r\n\tthis.getProgramCode = function ( material, parameters ) {\r\n\r\n\t\tvar chunks = [];\r\n\r\n\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\tchunks.push( parameters.shaderID );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tchunks.push( material.fragmentShader );\r\n\t\t\tchunks.push( material.vertexShader );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.defines !== undefined ) {\r\n\r\n\t\t\tfor ( var name in material.defines ) {\r\n\r\n\t\t\t\tchunks.push( name );\r\n\t\t\t\tchunks.push( material.defines[ name ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\r\n\r\n\t\t\tvar parameterName = parameterNames[ i ];\r\n\t\t\tchunks.push( parameterName );\r\n\t\t\tchunks.push( parameters[ parameterName ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join();\r\n\r\n\t};\r\n\r\n\tthis.acquireProgram = function ( material, parameters, code ) {\r\n\r\n\t\tvar program;\r\n\r\n\t\t// Check if code has been already compiled\r\n\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\r\n\r\n\t\t\tvar programInfo = programs[ p ];\r\n\r\n\t\t\tif ( programInfo.code === code ) {\r\n\r\n\t\t\t\tprogram = programInfo;\r\n\t\t\t\t++ program.usedTimes;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\tprogram = new THREE.WebGLProgram( renderer, code, material, parameters );\r\n\t\t\tprograms.push( program );\r\n\r\n\t\t}\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n\tthis.releaseProgram = function( program ) {\r\n\r\n\t\tif ( -- program.usedTimes === 0 ) {\r\n\r\n\t\t\t// Remove from unordered set\r\n\t\t\tvar i = programs.indexOf( program );\r\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\r\n\t\t\tprograms.pop();\r\n\r\n\t\t\t// Free WebGL resources\r\n\t\t\tprogram.destroy();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Exposed for resource monitoring & error feedback via renderer.info:\r\n\tthis.programs = programs;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLProperties.js\r\n\r\n/**\r\n* @author fordacious / fordacious.github.io\r\n*/\r\n\r\nTHREE.WebGLProperties = function () {\r\n\r\n\tvar properties = {};\r\n\r\n\tthis.get = function ( object ) {\r\n\r\n\t\tvar uuid = object.uuid;\r\n\t\tvar map = properties[ uuid ];\r\n\r\n\t\tif ( map === undefined ) {\r\n\r\n\t\t\tmap = {};\r\n\t\t\tproperties[ uuid ] = map;\r\n\r\n\t\t}\r\n\r\n\t\treturn map;\r\n\r\n\t};\r\n\r\n\tthis.delete = function ( object ) {\r\n\r\n\t\tdelete properties[ object.uuid ];\r\n\r\n\t};\r\n\r\n\tthis.clear = function () {\r\n\r\n\t\tproperties = {};\r\n\r\n\t};\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLShader.js\r\n\r\nTHREE.WebGLShader = ( function () {\r\n\r\n\tfunction addLineNumbers( string ) {\r\n\r\n\t\tvar lines = string.split( '\\n' );\r\n\r\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\r\n\r\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn lines.join( '\\n' );\r\n\r\n\t}\r\n\r\n\treturn function WebGLShader( gl, type, string ) {\r\n\r\n\t\tvar shader = gl.createShader( type );\r\n\r\n\t\tgl.shaderSource( shader, string );\r\n\t\tgl.compileShader( shader );\r\n\r\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\r\n\r\n\t\t}\r\n\r\n\t\t// --enable-privileged-webgl-extension\r\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\r\n\r\n\t\treturn shader;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n// File:src/renderers/webgl/WebGLShadowMap.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.WebGLShadowMap = function ( _renderer, _lights, _objects ) {\r\n\r\n\tvar _gl = _renderer.context,\r\n\t_state = _renderer.state,\r\n\t_frustum = new THREE.Frustum(),\r\n\t_projScreenMatrix = new THREE.Matrix4(),\r\n\r\n\t_shadowMapSize = new THREE.Vector2(),\r\n\r\n\t_lookTarget = new THREE.Vector3(),\r\n\t_lightPositionWorld = new THREE.Vector3(),\r\n\r\n\t_renderList = [],\r\n\r\n\t_MorphingFlag = 1,\r\n\t_SkinningFlag = 2,\r\n\r\n\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\r\n\r\n\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\r\n\t_distanceMaterials = new Array( _NumberOfMaterialVariants );\r\n\r\n\tvar cubeDirections = [\r\n\t\tnew THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),\r\n\t\tnew THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )\r\n\t];\r\n\r\n\tvar cubeUps = [\r\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),\r\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),\tnew THREE.Vector3( 0, 0, - 1 )\r\n\t];\r\n\r\n\tvar cube2DViewPorts = [\r\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),\r\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()\r\n\t];\r\n\r\n\t// init\r\n\r\n\tvar depthShader = THREE.ShaderLib[ \"depthRGBA\" ];\r\n\tvar depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );\r\n\r\n\tvar distanceShader = THREE.ShaderLib[ \"distanceRGBA\" ];\r\n\tvar distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );\r\n\r\n\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\r\n\r\n\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\r\n\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\r\n\r\n\t\tvar depthMaterial = new THREE.ShaderMaterial( {\r\n\t\t\tuniforms: depthUniforms,\r\n\t\t\tvertexShader: depthShader.vertexShader,\r\n\t\t\tfragmentShader: depthShader.fragmentShader,\r\n\t\t\tmorphTargets: useMorphing,\r\n\t\t\tskinning: useSkinning\r\n\t\t} );\r\n\r\n\t\t_depthMaterials[ i ] = depthMaterial;\r\n\r\n\t\tvar distanceMaterial = new THREE.ShaderMaterial( {\r\n\t\t\tdefines: {\r\n\t\t\t\t'USE_SHADOWMAP': ''\r\n\t\t\t},\r\n\t\t\tuniforms: distanceUniforms,\r\n\t\t\tvertexShader: distanceShader.vertexShader,\r\n\t\t\tfragmentShader: distanceShader.fragmentShader,\r\n\t\t\tmorphTargets: useMorphing,\r\n\t\t\tskinning: useSkinning\r\n\t\t} );\r\n\r\n\t\t_distanceMaterials[ i ] = distanceMaterial;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.enabled = false;\r\n\r\n\tthis.autoUpdate = true;\r\n\tthis.needsUpdate = false;\r\n\r\n\tthis.type = THREE.PCFShadowMap;\r\n\tthis.cullFace = THREE.CullFaceFront;\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tvar faceCount, isPointLight;\r\n\t\tvar shadows = _lights.shadows;\r\n\r\n\t\tif ( shadows.length === 0 ) return;\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\r\n\r\n\t\t// Set GL state for depth map.\r\n\t\t_state.clearColor( 1, 1, 1, 1 );\r\n\t\t_state.disable( _gl.BLEND );\r\n\t\t_state.enable( _gl.CULL_FACE );\r\n\t\t_gl.frontFace( _gl.CCW );\r\n\t\t_gl.cullFace( scope.cullFace === THREE.CullFaceFront ? _gl.FRONT : _gl.BACK );\r\n\t\t_state.setDepthTest( true );\r\n\t\t_state.setScissorTest( false );\r\n\r\n\t\t// render depth map\r\n\r\n\t\tfor ( var i = 0, il = shadows.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar light = shadows[ i ];\r\n\r\n\t\t\tvar shadow = light.shadow;\r\n\t\t\tvar shadowCamera = shadow.camera;\r\n\r\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\r\n\r\n\t\t\tif ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\tfaceCount = 6;\r\n\t\t\t\tisPointLight = true;\r\n\r\n\t\t\t\tvar vpWidth = _shadowMapSize.x;\r\n\t\t\t\tvar vpHeight = _shadowMapSize.y;\r\n\r\n\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\r\n\t\t\t\t// following orientation:\r\n\t\t\t\t//\r\n\t\t\t\t//  xzXZ\r\n\t\t\t\t//   y Y\r\n\t\t\t\t//\r\n\t\t\t\t// X - Positive x direction\r\n\t\t\t\t// x - Negative x direction\r\n\t\t\t\t// Y - Positive y direction\r\n\t\t\t\t// y - Negative y direction\r\n\t\t\t\t// Z - Positive z direction\r\n\t\t\t\t// z - Negative z direction\r\n\r\n\t\t\t\t// positive X\r\n\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t// negative X\r\n\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t// positive Z\r\n\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t// negative Z\r\n\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t// positive Y\r\n\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\r\n\t\t\t\t// negative Y\r\n\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\r\n\r\n\t\t\t\t_shadowMapSize.x *= 4.0;\r\n\t\t\t\t_shadowMapSize.y *= 2.0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfaceCount = 1;\r\n\t\t\t\tisPointLight = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( shadow.map === null ) {\r\n\r\n\t\t\t\tvar pars = { minFilter: THREE.NearestFilter, magFilter: THREE.NearestFilter, format: THREE.RGBAFormat };\r\n\r\n\t\t\t\tshadow.map = new THREE.WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tif ( light instanceof THREE.SpotLight ) {\r\n\r\n\t\t\t\t\tshadowCamera.aspect = _shadowMapSize.x / _shadowMapSize.y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tshadowCamera.updateProjectionMatrix();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar shadowMap = shadow.map;\r\n\t\t\tvar shadowMatrix = shadow.matrix;\r\n\r\n\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\tshadowCamera.position.copy( _lightPositionWorld );\r\n\r\n\t\t\t_renderer.setRenderTarget( shadowMap );\r\n\t\t\t_renderer.clear();\r\n\r\n\t\t\t// render shadow map for each cube face (if omni-directional) or\r\n\t\t\t// run a single pass if not\r\n\r\n\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\r\n\r\n\t\t\t\tif ( isPointLight ) {\r\n\r\n\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\r\n\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\r\n\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\r\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\r\n\r\n\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\r\n\t\t\t\t\t_state.viewport( vpDimensions );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tshadowCamera.updateMatrixWorld();\r\n\t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\r\n\r\n\t\t\t\t// compute shadow matrix\r\n\r\n\t\t\t\tshadowMatrix.set(\r\n\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t\t\t);\r\n\r\n\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\r\n\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\r\n\r\n\t\t\t\t// update camera matrices and frustum\r\n\r\n\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\r\n\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t\t\t// set object matrices & frustum culling\r\n\r\n\t\t\t\t_renderList.length = 0;\r\n\r\n\t\t\t\tprojectObject( scene, camera, shadowCamera );\r\n\r\n\t\t\t\t// render shadow map\r\n\t\t\t\t// render regular objects\r\n\r\n\t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar object = _renderList[ j ];\r\n\t\t\t\t\tvar geometry = _objects.update( object );\r\n\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\r\n\r\n\t\t\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\t\t\tvar materials = material.materials;\r\n\r\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar group = groups[ k ];\r\n\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\r\n\r\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\r\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\r\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Restore GL state.\r\n\t\tvar clearColor = _renderer.getClearColor(),\r\n\t\tclearAlpha = _renderer.getClearAlpha();\r\n\t\t_renderer.setClearColor( clearColor, clearAlpha );\r\n\r\n\t\t_state.enable( _gl.BLEND );\r\n\r\n\t\tif ( scope.cullFace === THREE.CullFaceFront ) {\r\n\r\n\t\t\t_gl.cullFace( _gl.BACK );\r\n\r\n\t\t}\r\n\r\n\t\tscope.needsUpdate = false;\r\n\r\n\t};\r\n\r\n\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tvar newMaterial = null;\r\n\r\n\t\tvar materialVariants = _depthMaterials;\r\n\t\tvar customMaterial = object.customDepthMaterial;\r\n\r\n\t\tif ( isPointLight ) {\r\n\r\n\t\t\tmaterialVariants = _distanceMaterials;\r\n\t\t\tcustomMaterial = object.customDistanceMaterial;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! customMaterial ) {\r\n\r\n\t\t\tvar useMorphing = geometry.morphTargets !== undefined &&\r\n\t\t\t\t\tgeometry.morphTargets.length > 0 && material.morphTargets;\r\n\r\n\t\t\tvar useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;\r\n\r\n\t\t\tvar variantIndex = 0;\r\n\r\n\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\r\n\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\r\n\r\n\t\t\tnewMaterial = materialVariants[ variantIndex ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnewMaterial = customMaterial;\r\n\r\n\t\t}\r\n\r\n\t\tnewMaterial.visible = material.visible;\r\n\t\tnewMaterial.wireframe = material.wireframe;\r\n\t\tnewMaterial.wireframeLinewidth = material.wireframeLinewidth;\r\n\r\n\t\tif ( isPointLight && newMaterial.uniforms.lightPos !== undefined ) {\r\n\r\n\t\t\tnewMaterial.uniforms.lightPos.value.copy( lightPositionWorld );\r\n\r\n\t\t}\r\n\r\n\t\treturn newMaterial;\r\n\r\n\t}\r\n\r\n\tfunction projectObject( object, camera, shadowCamera ) {\r\n\r\n\t\tif ( object.visible === false ) return;\r\n\r\n\t\tif ( object.layers.test( camera.layers ) && ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) ) {\r\n\r\n\t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\r\n\r\n\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\tif ( material.visible === true ) {\r\n\r\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\t\t\t_renderList.push( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar children = object.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tprojectObject( children[ i ], camera, shadowCamera );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLState.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {\r\n\r\n\tvar _this = this;\r\n\r\n\tvar color = new THREE.Vector4();\r\n\r\n\tvar newAttributes = new Uint8Array( 16 );\r\n\tvar enabledAttributes = new Uint8Array( 16 );\r\n\tvar attributeDivisors = new Uint8Array( 16 );\r\n\r\n\tvar capabilities = {};\r\n\r\n\tvar compressedTextureFormats = null;\r\n\r\n\tvar currentBlending = null;\r\n\tvar currentBlendEquation = null;\r\n\tvar currentBlendSrc = null;\r\n\tvar currentBlendDst = null;\r\n\tvar currentBlendEquationAlpha = null;\r\n\tvar currentBlendSrcAlpha = null;\r\n\tvar currentBlendDstAlpha = null;\r\n\tvar currentPremultipledAlpha = false;\r\n\r\n\tvar currentDepthFunc = null;\r\n\tvar currentDepthWrite = null;\r\n\r\n\tvar currentColorWrite = null;\r\n\r\n\tvar currentStencilWrite = null;\r\n\tvar currentStencilFunc = null;\r\n\tvar currentStencilRef = null;\r\n\tvar currentStencilMask = null;\r\n\tvar currentStencilFail  = null;\r\n\tvar currentStencilZFail = null;\r\n\tvar currentStencilZPass = null;\r\n\r\n\tvar currentFlipSided = null;\r\n\r\n\tvar currentLineWidth = null;\r\n\r\n\tvar currentPolygonOffsetFactor = null;\r\n\tvar currentPolygonOffsetUnits = null;\r\n\r\n\tvar currentScissorTest = null;\r\n\r\n\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\r\n\tvar currentTextureSlot = undefined;\r\n\tvar currentBoundTextures = {};\r\n\r\n\tvar currentClearColor = new THREE.Vector4();\r\n\tvar currentClearDepth = null;\r\n\tvar currentClearStencil = null;\r\n\r\n\tvar currentScissor = new THREE.Vector4();\r\n\tvar currentViewport = new THREE.Vector4();\r\n\r\n\tvar emptyTexture = gl.createTexture();\r\n\tgl.bindTexture( gl.TEXTURE_2D, emptyTexture );\r\n\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR );\r\n\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, new Uint8Array( 3 ) );\r\n\r\n\tthis.init = function () {\r\n\r\n\t\tthis.clearColor( 0, 0, 0, 1 );\r\n\t\tthis.clearDepth( 1 );\r\n\t\tthis.clearStencil( 0 );\r\n\r\n\t\tthis.enable( gl.DEPTH_TEST );\r\n\t\tgl.depthFunc( gl.LEQUAL );\r\n\r\n\t\tgl.frontFace( gl.CCW );\r\n\t\tgl.cullFace( gl.BACK );\r\n\t\tthis.enable( gl.CULL_FACE );\r\n\r\n\t\tthis.enable( gl.BLEND );\r\n\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t};\r\n\r\n\tthis.initAttributes = function () {\r\n\r\n\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\r\n\r\n\t\t\tnewAttributes[ i ] = 0;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.enableAttribute = function ( attribute ) {\r\n\r\n\t\tnewAttributes[ attribute ] = 1;\r\n\r\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\r\n\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\tenabledAttributes[ attribute ] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\r\n\r\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\r\n\t\t\tattributeDivisors[ attribute ] = 0;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {\r\n\r\n\t\tnewAttributes[ attribute ] = 1;\r\n\r\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\r\n\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\tenabledAttributes[ attribute ] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\r\n\r\n\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\r\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.disableUnusedAttributes = function () {\r\n\r\n\t\tfor ( var i = 0, l = enabledAttributes.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\r\n\r\n\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.enable = function ( id ) {\r\n\r\n\t\tif ( capabilities[ id ] !== true ) {\r\n\r\n\t\t\tgl.enable( id );\r\n\t\t\tcapabilities[ id ] = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.disable = function ( id ) {\r\n\r\n\t\tif ( capabilities[ id ] !== false ) {\r\n\r\n\t\t\tgl.disable( id );\r\n\t\t\tcapabilities[ id ] = false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.getCompressedTextureFormats = function () {\r\n\r\n\t\tif ( compressedTextureFormats === null ) {\r\n\r\n\t\t\tcompressedTextureFormats = [];\r\n\r\n\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\r\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\r\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\r\n\r\n\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\r\n\r\n\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\r\n\r\n\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn compressedTextureFormats;\r\n\r\n\t};\r\n\r\n\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\r\n\r\n\t\tif ( blending === THREE.NoBlending ) {\r\n\r\n\t\t\tthis.disable( gl.BLEND );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.enable( gl.BLEND );\r\n\r\n\t\t}\r\n\r\n\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\r\n\r\n\t\t\tif ( blending === THREE.AdditiveBlending ) {\r\n\r\n\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\r\n\r\n\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\r\n\r\n\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.SRC_COLOR, gl.SRC_ALPHA );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentBlending = blending;\r\n\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\r\n\r\n\t\t}\r\n\r\n\t\tif ( blending === THREE.CustomBlending ) {\r\n\r\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\r\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\r\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\r\n\r\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\r\n\r\n\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\r\n\r\n\t\t\t\tcurrentBlendEquation = blendEquation;\r\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\r\n\r\n\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\r\n\r\n\t\t\t\tcurrentBlendSrc = blendSrc;\r\n\t\t\t\tcurrentBlendDst = blendDst;\r\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\r\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tcurrentBlendEquation = null;\r\n\t\t\tcurrentBlendSrc = null;\r\n\t\t\tcurrentBlendDst = null;\r\n\t\t\tcurrentBlendEquationAlpha = null;\r\n\t\t\tcurrentBlendSrcAlpha = null;\r\n\t\t\tcurrentBlendDstAlpha = null;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setDepthFunc = function ( depthFunc ) {\r\n\r\n\t\tif ( currentDepthFunc !== depthFunc ) {\r\n\r\n\t\t\tif ( depthFunc ) {\r\n\r\n\t\t\t\tswitch ( depthFunc ) {\r\n\r\n\t\t\t\t\tcase THREE.NeverDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.AlwaysDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.LessDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.LESS );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.LessEqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.EqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.GreaterEqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.GreaterDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.NotEqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentDepthFunc = depthFunc;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setDepthTest = function ( depthTest ) {\r\n\r\n\t\tif ( depthTest ) {\r\n\r\n\t\t\tthis.enable( gl.DEPTH_TEST );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.disable( gl.DEPTH_TEST );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setDepthWrite = function ( depthWrite ) {\r\n\r\n\t\t// TODO: Rename to setDepthMask\r\n\r\n\t\tif ( currentDepthWrite !== depthWrite ) {\r\n\r\n\t\t\tgl.depthMask( depthWrite );\r\n\t\t\tcurrentDepthWrite = depthWrite;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setColorWrite = function ( colorWrite ) {\r\n\r\n\t\t// TODO: Rename to setColorMask\r\n\r\n\t\tif ( currentColorWrite !== colorWrite ) {\r\n\r\n\t\t\tgl.colorMask( colorWrite, colorWrite, colorWrite, colorWrite );\r\n\t\t\tcurrentColorWrite = colorWrite;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setStencilFunc = function ( stencilFunc, stencilRef, stencilMask ) {\r\n\r\n\t\tif ( currentStencilFunc !== stencilFunc ||\r\n\t\t\t\t currentStencilRef \t!== stencilRef \t||\r\n\t\t\t\t currentStencilMask !== stencilMask ) {\r\n\r\n\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\r\n\r\n\t\t\tcurrentStencilFunc = stencilFunc;\r\n\t\t\tcurrentStencilRef  = stencilRef;\r\n\t\t\tcurrentStencilMask = stencilMask;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setStencilOp = function ( stencilFail, stencilZFail, stencilZPass ) {\r\n\r\n\t\tif ( currentStencilFail\t !== stencilFail \t||\r\n\t\t\t\t currentStencilZFail !== stencilZFail ||\r\n\t\t\t\t currentStencilZPass !== stencilZPass ) {\r\n\r\n\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\r\n\r\n\t\t\tcurrentStencilFail  = stencilFail;\r\n\t\t\tcurrentStencilZFail = stencilZFail;\r\n\t\t\tcurrentStencilZPass = stencilZPass;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setStencilTest = function ( stencilTest ) {\r\n\r\n\t\tif ( stencilTest ) {\r\n\r\n\t\t\tthis.enable( gl.STENCIL_TEST );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.disable( gl.STENCIL_TEST );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setStencilWrite = function ( stencilWrite ) {\r\n\r\n\t\t// TODO: Rename to setStencilMask\r\n\r\n\t\tif ( currentStencilWrite !== stencilWrite ) {\r\n\r\n\t\t\tgl.stencilMask( stencilWrite );\r\n\t\t\tcurrentStencilWrite = stencilWrite;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setFlipSided = function ( flipSided ) {\r\n\r\n\t\tif ( currentFlipSided !== flipSided ) {\r\n\r\n\t\t\tif ( flipSided ) {\r\n\r\n\t\t\t\tgl.frontFace( gl.CW );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.frontFace( gl.CCW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentFlipSided = flipSided;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setLineWidth = function ( width ) {\r\n\r\n\t\tif ( width !== currentLineWidth ) {\r\n\r\n\t\t\tgl.lineWidth( width );\r\n\r\n\t\t\tcurrentLineWidth = width;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setPolygonOffset = function ( polygonOffset, factor, units ) {\r\n\r\n\t\tif ( polygonOffset ) {\r\n\r\n\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t}\r\n\r\n\t\tif ( polygonOffset && ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) ) {\r\n\r\n\t\t\tgl.polygonOffset( factor, units );\r\n\r\n\t\t\tcurrentPolygonOffsetFactor = factor;\r\n\t\t\tcurrentPolygonOffsetUnits = units;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.getScissorTest = function () {\r\n\r\n\t\treturn currentScissorTest;\r\n\r\n\t};\r\n\r\n\tthis.setScissorTest = function ( scissorTest ) {\r\n\r\n\t\tcurrentScissorTest = scissorTest;\r\n\r\n\t\tif ( scissorTest ) {\r\n\r\n\t\t\tthis.enable( gl.SCISSOR_TEST );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.disable( gl.SCISSOR_TEST );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// texture\r\n\r\n\tthis.activeTexture = function ( webglSlot ) {\r\n\r\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\r\n\r\n\t\tif ( currentTextureSlot !== webglSlot ) {\r\n\r\n\t\t\tgl.activeTexture( webglSlot );\r\n\t\t\tcurrentTextureSlot = webglSlot;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.bindTexture = function ( webglType, webglTexture ) {\r\n\r\n\t\tif ( currentTextureSlot === undefined ) {\r\n\r\n\t\t\t_this.activeTexture();\r\n\r\n\t\t}\r\n\r\n\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\r\n\t\tif ( boundTexture === undefined ) {\r\n\r\n\t\t\tboundTexture = { type: undefined, texture: undefined };\r\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\r\n\r\n\t\t}\r\n\r\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\r\n\r\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTexture );\r\n\r\n\t\t\tboundTexture.type = webglType;\r\n\t\t\tboundTexture.texture = webglTexture;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.compressedTexImage2D = function () {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( error );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.texImage2D = function () {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( error );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// clear values\r\n\r\n\tthis.clearColor = function ( r, g, b, a ) {\r\n\r\n\t\tcolor.set( r, g, b, a );\r\n\r\n\t\tif ( currentClearColor.equals( color ) === false ) {\r\n\r\n\t\t\tgl.clearColor( r, g, b, a );\r\n\t\t\tcurrentClearColor.copy( color );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.clearDepth = function ( depth ) {\r\n\r\n\t\tif ( currentClearDepth !== depth ) {\r\n\r\n\t\t\tgl.clearDepth( depth );\r\n\t\t\tcurrentClearDepth = depth;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.clearStencil = function ( stencil ) {\r\n\r\n\t\tif ( currentClearStencil !== stencil ) {\r\n\r\n\t\t\tgl.clearStencil( stencil );\r\n\t\t\tcurrentClearStencil = stencil;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tthis.scissor = function ( scissor ) {\r\n\r\n\t\tif ( currentScissor.equals( scissor ) === false ) {\r\n\r\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\r\n\t\t\tcurrentScissor.copy( scissor );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.viewport = function ( viewport ) {\r\n\r\n\t\tif ( currentViewport.equals( viewport ) === false ) {\r\n\r\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\r\n\t\t\tcurrentViewport.copy( viewport );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tthis.reset = function () {\r\n\r\n\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\r\n\r\n\t\t\tif ( enabledAttributes[ i ] === 1 ) {\r\n\r\n\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tcapabilities = {};\r\n\r\n\t\tcompressedTextureFormats = null;\r\n\r\n\t\tcurrentTextureSlot = undefined;\r\n\t\tcurrentBoundTextures = {};\r\n\r\n\t\tcurrentBlending = null;\r\n\r\n\t\tcurrentColorWrite = null;\r\n\t\tcurrentDepthWrite = null;\r\n\t\tcurrentStencilWrite = null;\r\n\r\n\t\tcurrentFlipSided = null;\r\n\r\n\t};\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/plugins/LensFlarePlugin.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.LensFlarePlugin = function ( renderer, flares ) {\r\n\r\n\tvar gl = renderer.context;\r\n\tvar state = renderer.state;\r\n\r\n\tvar vertexBuffer, elementBuffer;\r\n\tvar program, attributes, uniforms;\r\n\tvar hasVertexTexture;\r\n\r\n\tvar tempTexture, occlusionTexture;\r\n\r\n\tfunction init() {\r\n\r\n\t\tvar vertices = new Float32Array( [\r\n\t\t\t- 1, - 1,  0, 0,\r\n\t\t\t 1, - 1,  1, 0,\r\n\t\t\t 1,  1,  1, 1,\r\n\t\t\t- 1,  1,  0, 1\r\n\t\t] );\r\n\r\n\t\tvar faces = new Uint16Array( [\r\n\t\t\t0, 1, 2,\r\n\t\t\t0, 2, 3\r\n\t\t] );\r\n\r\n\t\t// buffers\r\n\r\n\t\tvertexBuffer     = gl.createBuffer();\r\n\t\telementBuffer    = gl.createBuffer();\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\r\n\r\n\t\t// textures\r\n\r\n\t\ttempTexture      = gl.createTexture();\r\n\t\tocclusionTexture = gl.createTexture();\r\n\r\n\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\r\n\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\r\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\r\n\t\thasVertexTexture = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) > 0;\r\n\r\n\t\tvar shader;\r\n\r\n\t\tif ( hasVertexTexture ) {\r\n\r\n\t\t\tshader = {\r\n\r\n\t\t\t\tvertexShader: [\r\n\r\n\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\t\t\"uniform float rotation;\",\r\n\r\n\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\r\n\t\t\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\t\t\"attribute vec2 uv;\",\r\n\r\n\t\t\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\t\t\"varying float vVisibility;\",\r\n\r\n\t\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\t\t\"vUV = uv;\",\r\n\r\n\t\t\t\t\t\t\"vec2 pos = position;\",\r\n\r\n\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\r\n\r\n\t\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\r\n\r\n\t\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\r\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\r\n\t\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\r\n\t\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\r\n\r\n\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\r\n\t\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\r\n\t\t\t\t\t\"}\"\r\n\r\n\t\t\t\t].join( \"\\n\" ),\r\n\r\n\t\t\t\tfragmentShader: [\r\n\r\n\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\t\t\"uniform float opacity;\",\r\n\t\t\t\t\t\"uniform vec3 color;\",\r\n\r\n\t\t\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\t\t\"varying float vVisibility;\",\r\n\r\n\t\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\t\t// pink square\r\n\r\n\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\r\n\r\n\t\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\r\n\r\n\t\t\t\t\t\t// restore\r\n\r\n\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\r\n\r\n\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\r\n\t\t\t\t\t\t// flare\r\n\r\n\t\t\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\r\n\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\r\n\t\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\"}\"\r\n\r\n\t\t\t\t].join( \"\\n\" )\r\n\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\r\n\t\t\tshader = {\r\n\r\n\t\t\t\tvertexShader: [\r\n\r\n\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\t\t\"uniform float rotation;\",\r\n\r\n\t\t\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\t\t\"attribute vec2 uv;\",\r\n\r\n\t\t\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\t\t\"vUV = uv;\",\r\n\r\n\t\t\t\t\t\t\"vec2 pos = position;\",\r\n\r\n\t\t\t\t\t\t\"if ( renderType == 2 ) {\",\r\n\r\n\t\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\r\n\t\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\r\n\t\t\t\t\t\"}\"\r\n\r\n\t\t\t\t].join( \"\\n\" ),\r\n\r\n\t\t\t\tfragmentShader: [\r\n\r\n\t\t\t\t\t\"precision mediump float;\",\r\n\r\n\t\t\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\t\t\t\t\t\"uniform float opacity;\",\r\n\t\t\t\t\t\"uniform vec3 color;\",\r\n\r\n\t\t\t\t\t\"varying vec2 vUV;\",\r\n\r\n\t\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\t\t// pink square\r\n\r\n\t\t\t\t\t\t\"if ( renderType == 0 ) {\",\r\n\r\n\t\t\t\t\t\t\t\"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\",\r\n\r\n\t\t\t\t\t\t// restore\r\n\r\n\t\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\r\n\r\n\t\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\r\n\t\t\t\t\t\t// flare\r\n\r\n\t\t\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\t\t\"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\",\r\n\t\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\",\r\n\t\t\t\t\t\t\t\"visibility = ( 1.0 - visibility / 4.0 );\",\r\n\r\n\t\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\t\t\"texture.a *= opacity * visibility;\",\r\n\t\t\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\r\n\t\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\"}\"\r\n\r\n\t\t\t\t].join( \"\\n\" )\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tprogram = createProgram( shader );\r\n\r\n\t\tattributes = {\r\n\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\r\n\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\r\n\t\t};\r\n\r\n\t\tuniforms = {\r\n\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\r\n\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\r\n\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\r\n\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\r\n\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\r\n\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\r\n\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\r\n\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Render lens flares\r\n\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\r\n\t *         reads these back and calculates occlusion.\r\n\t */\r\n\r\n\tthis.render = function ( scene, camera, viewport ) {\r\n\r\n\t\tif ( flares.length === 0 ) return;\r\n\r\n\t\tvar tempPosition = new THREE.Vector3();\r\n\r\n\t\tvar invAspect = viewport.w / viewport.z,\r\n\t\t\thalfViewportWidth = viewport.z * 0.5,\r\n\t\t\thalfViewportHeight = viewport.w * 0.5;\r\n\r\n\t\tvar size = 16 / viewport.w,\r\n\t\t\tscale = new THREE.Vector2( size * invAspect, size );\r\n\r\n\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\r\n\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\tinit();\r\n\r\n\t\t}\r\n\r\n\t\tgl.useProgram( program );\r\n\r\n\t\tstate.initAttributes();\r\n\t\tstate.enableAttribute( attributes.vertex );\r\n\t\tstate.enableAttribute( attributes.uv );\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t// loop through all lens flares to update their occlusion and positions\r\n\t\t// setup gl and common used attribs/uniforms\r\n\r\n\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\r\n\t\tgl.uniform1i( uniforms.map, 1 );\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\r\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\r\n\t\tstate.disable( gl.CULL_FACE );\r\n\t\tstate.setDepthWrite( false );\r\n\r\n\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\r\n\r\n\t\t\tsize = 16 / viewport.w;\r\n\t\t\tscale.set( size * invAspect, size );\r\n\r\n\t\t\t// calc object screen position\r\n\r\n\t\t\tvar flare = flares[ i ];\r\n\r\n\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\r\n\r\n\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\r\n\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\r\n\r\n\t\t\t// setup arrays for gl programs\r\n\r\n\t\t\tscreenPosition.copy( tempPosition );\r\n\r\n\t\t\tscreenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;\r\n\t\t\tscreenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;\r\n\r\n\t\t\t// screen cull\r\n\r\n\t\t\tif ( hasVertexTexture || (\r\n\t\t\t\tscreenPositionPixels.x > 0 &&\r\n\t\t\t\tscreenPositionPixels.x < viewport.z &&\r\n\t\t\t\tscreenPositionPixels.y > 0 &&\r\n\t\t\t\tscreenPositionPixels.y < viewport.w ) ) {\r\n\r\n\t\t\t\t// save current RGB to temp texture\r\n\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, viewport.x + screenPositionPixels.x - 8, viewport.y + screenPositionPixels.y - 8, 16, 16, 0 );\r\n\r\n\r\n\t\t\t\t// render pink quad\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\r\n\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\r\n\t\t\t\tstate.disable( gl.BLEND );\r\n\t\t\t\tstate.enable( gl.DEPTH_TEST );\r\n\r\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\r\n\t\t\t\t// copy result to occlusionMap\r\n\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\r\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, viewport.x + screenPositionPixels.x - 8, viewport.y + screenPositionPixels.y - 8, 16, 16, 0 );\r\n\r\n\r\n\t\t\t\t// restore graphics\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\r\n\t\t\t\tstate.disable( gl.DEPTH_TEST );\r\n\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\r\n\t\t\t\t// update object positions\r\n\r\n\t\t\t\tflare.positionScreen.copy( screenPosition );\r\n\r\n\t\t\t\tif ( flare.customUpdateCallback ) {\r\n\r\n\t\t\t\t\tflare.customUpdateCallback( flare );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tflare.updateLensFlares();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render flares\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\r\n\t\t\t\tstate.enable( gl.BLEND );\r\n\r\n\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\r\n\r\n\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\r\n\r\n\t\t\t\t\t\tscreenPosition.x = sprite.x;\r\n\t\t\t\t\t\tscreenPosition.y = sprite.y;\r\n\t\t\t\t\t\tscreenPosition.z = sprite.z;\r\n\r\n\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\r\n\r\n\t\t\t\t\t\tscale.x = size * invAspect;\r\n\t\t\t\t\t\tscale.y = size;\r\n\r\n\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\r\n\r\n\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\r\n\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\r\n\r\n\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\r\n\t\t\t\t\t\trenderer.setTexture( sprite.texture, 1 );\r\n\r\n\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore gl\r\n\r\n\t\tstate.enable( gl.CULL_FACE );\r\n\t\tstate.enable( gl.DEPTH_TEST );\r\n\t\tstate.setDepthWrite( true );\r\n\r\n\t\trenderer.resetGLState();\r\n\r\n\t};\r\n\r\n\tfunction createProgram ( shader ) {\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\r\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\r\n\r\n\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\r\n\r\n\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\r\n\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\r\n\r\n\t\tgl.compileShader( fragmentShader );\r\n\t\tgl.compileShader( vertexShader );\r\n\r\n\t\tgl.attachShader( program, fragmentShader );\r\n\t\tgl.attachShader( program, vertexShader );\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\treturn program;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/plugins/SpritePlugin.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SpritePlugin = function ( renderer, sprites ) {\r\n\r\n\tvar gl = renderer.context;\r\n\tvar state = renderer.state;\r\n\r\n\tvar vertexBuffer, elementBuffer;\r\n\tvar program, attributes, uniforms;\r\n\r\n\tvar texture;\r\n\r\n\t// decompose matrixWorld\r\n\r\n\tvar spritePosition = new THREE.Vector3();\r\n\tvar spriteRotation = new THREE.Quaternion();\r\n\tvar spriteScale = new THREE.Vector3();\r\n\r\n\tfunction init() {\r\n\r\n\t\tvar vertices = new Float32Array( [\r\n\t\t\t- 0.5, - 0.5,  0, 0,\r\n\t\t\t  0.5, - 0.5,  1, 0,\r\n\t\t\t  0.5,   0.5,  1, 1,\r\n\t\t\t- 0.5,   0.5,  0, 1\r\n\t\t] );\r\n\r\n\t\tvar faces = new Uint16Array( [\r\n\t\t\t0, 1, 2,\r\n\t\t\t0, 2, 3\r\n\t\t] );\r\n\r\n\t\tvertexBuffer  = gl.createBuffer();\r\n\t\telementBuffer = gl.createBuffer();\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\r\n\r\n\t\tprogram = createProgram();\r\n\r\n\t\tattributes = {\r\n\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\r\n\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\r\n\t\t};\r\n\r\n\t\tuniforms = {\r\n\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\r\n\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\r\n\r\n\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\r\n\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\r\n\r\n\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\r\n\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\r\n\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\r\n\r\n\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\r\n\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\r\n\r\n\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\r\n\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\r\n\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\r\n\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\r\n\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\r\n\r\n\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\r\n\t\t};\r\n\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\tcanvas.width = 8;\r\n\t\tcanvas.height = 8;\r\n\r\n\t\tvar context = canvas.getContext( '2d' );\r\n\t\tcontext.fillStyle = 'white';\r\n\t\tcontext.fillRect( 0, 0, 8, 8 );\r\n\r\n\t\ttexture = new THREE.Texture( canvas );\r\n\t\ttexture.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( sprites.length === 0 ) return;\r\n\r\n\t\t// setup gl\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\tinit();\r\n\r\n\t\t}\r\n\r\n\t\tgl.useProgram( program );\r\n\r\n\t\tstate.initAttributes();\r\n\t\tstate.enableAttribute( attributes.position );\r\n\t\tstate.enableAttribute( attributes.uv );\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t\tstate.disable( gl.CULL_FACE );\r\n\t\tstate.enable( gl.BLEND );\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\r\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\r\n\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\r\n\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\tgl.uniform1i( uniforms.map, 0 );\r\n\r\n\t\tvar oldFogType = 0;\r\n\t\tvar sceneFogType = 0;\r\n\t\tvar fog = scene.fog;\r\n\r\n\t\tif ( fog ) {\r\n\r\n\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\r\n\r\n\t\t\tif ( fog instanceof THREE.Fog ) {\r\n\r\n\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\r\n\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\r\n\t\t\t\toldFogType = 1;\r\n\t\t\t\tsceneFogType = 1;\r\n\r\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\r\n\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\r\n\t\t\t\toldFogType = 2;\r\n\t\t\t\tsceneFogType = 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgl.uniform1i( uniforms.fogType, 0 );\r\n\t\t\toldFogType = 0;\r\n\t\t\tsceneFogType = 0;\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// update positions and sort\r\n\r\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar sprite = sprites[ i ];\r\n\r\n\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\r\n\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\r\n\r\n\t\t}\r\n\r\n\t\tsprites.sort( painterSortStable );\r\n\r\n\t\t// render all sprites\r\n\r\n\t\tvar scale = [];\r\n\r\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar sprite = sprites[ i ];\r\n\t\t\tvar material = sprite.material;\r\n\r\n\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\r\n\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\r\n\r\n\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\r\n\r\n\t\t\tscale[ 0 ] = spriteScale.x;\r\n\t\t\tscale[ 1 ] = spriteScale.y;\r\n\r\n\t\t\tvar fogType = 0;\r\n\r\n\t\t\tif ( scene.fog && material.fog ) {\r\n\r\n\t\t\t\tfogType = sceneFogType;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( oldFogType !== fogType ) {\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\r\n\t\t\t\toldFogType = fogType;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.map !== null ) {\r\n\r\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\r\n\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\r\n\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\r\n\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\r\n\r\n\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\r\n\t\t\tgl.uniform2fv( uniforms.scale, scale );\r\n\r\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\t\t\tstate.setDepthTest( material.depthTest );\r\n\t\t\tstate.setDepthWrite( material.depthWrite );\r\n\r\n\t\t\tif ( material.map && material.map.image && material.map.image.width ) {\r\n\r\n\t\t\t\trenderer.setTexture( material.map, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.setTexture( texture, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t// restore gl\r\n\r\n\t\tstate.enable( gl.CULL_FACE );\r\n\r\n\t\trenderer.resetGLState();\r\n\r\n\t};\r\n\r\n\tfunction createProgram () {\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\r\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\r\n\r\n\t\tgl.shaderSource( vertexShader, [\r\n\r\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\r\n\r\n\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t'uniform float rotation;',\r\n\t\t\t'uniform vec2 scale;',\r\n\t\t\t'uniform vec2 uvOffset;',\r\n\t\t\t'uniform vec2 uvScale;',\r\n\r\n\t\t\t'attribute vec2 position;',\r\n\t\t\t'attribute vec2 uv;',\r\n\r\n\t\t\t'varying vec2 vUV;',\r\n\r\n\t\t\t'void main() {',\r\n\r\n\t\t\t\t'vUV = uvOffset + uv * uvScale;',\r\n\r\n\t\t\t\t'vec2 alignedPosition = position * scale;',\r\n\r\n\t\t\t\t'vec2 rotatedPosition;',\r\n\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\r\n\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\r\n\r\n\t\t\t\t'vec4 finalPosition;',\r\n\r\n\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\r\n\t\t\t\t'finalPosition.xy += rotatedPosition;',\r\n\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\r\n\r\n\t\t\t\t'gl_Position = finalPosition;',\r\n\r\n\t\t\t'}'\r\n\r\n\t\t].join( '\\n' ) );\r\n\r\n\t\tgl.shaderSource( fragmentShader, [\r\n\r\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\r\n\r\n\t\t\t'uniform vec3 color;',\r\n\t\t\t'uniform sampler2D map;',\r\n\t\t\t'uniform float opacity;',\r\n\r\n\t\t\t'uniform int fogType;',\r\n\t\t\t'uniform vec3 fogColor;',\r\n\t\t\t'uniform float fogDensity;',\r\n\t\t\t'uniform float fogNear;',\r\n\t\t\t'uniform float fogFar;',\r\n\t\t\t'uniform float alphaTest;',\r\n\r\n\t\t\t'varying vec2 vUV;',\r\n\r\n\t\t\t'void main() {',\r\n\r\n\t\t\t\t'vec4 texture = texture2D( map, vUV );',\r\n\r\n\t\t\t\t'if ( texture.a < alphaTest ) discard;',\r\n\r\n\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\r\n\r\n\t\t\t\t'if ( fogType > 0 ) {',\r\n\r\n\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\r\n\t\t\t\t\t'float fogFactor = 0.0;',\r\n\r\n\t\t\t\t\t'if ( fogType == 1 ) {',\r\n\r\n\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\r\n\r\n\t\t\t\t\t'} else {',\r\n\r\n\t\t\t\t\t\t'const float LOG2 = 1.442695;',\r\n\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\r\n\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\r\n\r\n\t\t\t\t\t'}',\r\n\r\n\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\r\n\r\n\t\t\t\t'}',\r\n\r\n\t\t\t'}'\r\n\r\n\t\t].join( '\\n' ) );\r\n\r\n\t\tgl.compileShader( vertexShader );\r\n\t\tgl.compileShader( fragmentShader );\r\n\r\n\t\tgl.attachShader( program, vertexShader );\r\n\t\tgl.attachShader( program, fragmentShader );\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\treturn program;\r\n\r\n\t}\r\n\r\n\tfunction painterSortStable ( a, b ) {\r\n\t\t\r\n\t\tif ( a.renderOrder !== b.renderOrder ) {\r\n\r\n\t\t\treturn a.renderOrder - b.renderOrder;\r\n\r\n\t\t} else if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn b.id - a.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/Three.Legacy.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nObject.defineProperties( THREE.Box2.prototype, {\r\n\tempty: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\r\n\t\t\treturn this.isEmpty();\r\n\t\t}\r\n\t},\r\n\tisIntersectionBox: {\r\n\t\tvalue: function ( box ) {\r\n\t\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\treturn this.intersectsBox( box );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.Box3.prototype, {\r\n\tempty: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\r\n\t\t\treturn this.isEmpty();\r\n\t\t}\r\n\t},\r\n\tisIntersectionBox: {\r\n\t\tvalue: function ( box ) {\r\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\treturn this.intersectsBox( box );\r\n\t\t}\r\n\t},\r\n\tisIntersectionSphere: {\r\n\t\tvalue: function ( sphere ) {\r\n\t\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.Matrix3.prototype, {\r\n\tmultiplyVector3: {\r\n\t\tvalue: function ( vector ) {\r\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix3( this );\r\n\t\t}\r\n\t},\r\n\tmultiplyVector3Array: {\r\n\t\tvalue: function ( a ) {\r\n\t\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\r\n\t\t\treturn this.applyToVector3Array( a );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.Matrix4.prototype, {\r\n\textractPosition: {\r\n\t\tvalue: function ( m ) {\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\r\n\t\t\treturn this.copyPosition( m );\r\n\t\t}\r\n\t},\r\n\tsetRotationFromQuaternion: {\r\n\t\tvalue: function ( q ) {\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\r\n\t\t\treturn this.makeRotationFromQuaternion( q );\r\n\t\t}\r\n\t},\r\n\tmultiplyVector3: {\r\n\t\tvalue: function ( vector ) {\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\r\n\t\t\treturn vector.applyProjection( this );\r\n\t\t}\r\n\t},\r\n\tmultiplyVector4: {\r\n\t\tvalue: function ( vector ) {\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\t\t}\r\n\t},\r\n\tmultiplyVector3Array: {\r\n\t\tvalue: function ( a ) {\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\r\n\t\t\treturn this.applyToVector3Array( a );\r\n\t\t}\r\n\t},\r\n\trotateAxis: {\r\n\t\tvalue: function ( v ) {\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\r\n\t\t\tv.transformDirection( this );\r\n\t\t}\r\n\t},\r\n\tcrossVector: {\r\n\t\tvalue: function ( vector ) {\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\t\treturn vector.applyMatrix4( this );\r\n\t\t}\r\n\t},\r\n\ttranslate: {\r\n\t\tvalue: function ( v ) {\r\n\t\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\r\n\t\t}\r\n\t},\r\n\trotateX: {\r\n\t\tvalue: function ( angle ) {\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\r\n\t\t}\r\n\t},\r\n\trotateY: {\r\n\t\tvalue: function ( angle ) {\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\r\n\t\t}\r\n\t},\r\n\trotateZ: {\r\n\t\tvalue: function ( angle ) {\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\r\n\t\t}\r\n\t},\r\n\trotateByAxis: {\r\n\t\tvalue: function ( axis, angle ) {\r\n\t\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.Plane.prototype, {\r\n\tisIntersectionLine: {\r\n\t\tvalue: function ( line ) {\r\n\t\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\r\n\t\t\treturn this.intersectsLine( line );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.Quaternion.prototype, {\r\n\tmultiplyVector3: {\r\n\t\tvalue: function ( vector ) {\r\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\r\n\t\t\treturn vector.applyQuaternion( this );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.Ray.prototype, {\r\n\tisIntersectionBox: {\r\n\t\tvalue: function ( box ) {\r\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\t\treturn this.intersectsBox( box );\r\n\t\t}\r\n\t},\r\n\tisIntersectionPlane: {\r\n\t\tvalue: function ( plane ) {\r\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\r\n\t\t\treturn this.intersectsPlane( plane );\r\n\t\t}\r\n\t},\r\n\tisIntersectionSphere: {\r\n\t\tvalue: function ( sphere ) {\r\n\t\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.Vector3.prototype, {\r\n\tsetEulerFromRotationMatrix: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\r\n\t\t}\r\n\t},\r\n\tsetEulerFromQuaternion: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\r\n\t\t}\r\n\t},\r\n\tgetPositionFromMatrix: {\r\n\t\tvalue: function ( m ) {\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\r\n\t\t\treturn this.setFromMatrixPosition( m );\r\n\t\t}\r\n\t},\r\n\tgetScaleFromMatrix: {\r\n\t\tvalue: function ( m ) {\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\r\n\t\t\treturn this.setFromMatrixScale( m );\r\n\t\t}\r\n\t},\r\n\tgetColumnFromMatrix: {\r\n\t\tvalue: function ( index, matrix ) {\r\n\t\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\r\n\t\t\treturn this.setFromMatrixColumn( index, matrix );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nTHREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {\r\n\r\n\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\r\n\treturn new THREE.Face3( a, b, c, normal, color, materialIndex );\r\n\r\n};\r\n\r\nTHREE.Vertex = function ( x, y, z ) {\r\n\r\n\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\r\n\treturn new THREE.Vector3( x, y, z );\r\n\r\n};\r\n\r\n//\r\n\r\nObject.defineProperties( THREE.Object3D.prototype, {\r\n\teulerOrder: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\treturn this.rotation.order;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\tthis.rotation.order = value;\r\n\t\t}\r\n\t},\r\n\tgetChildByName: {\r\n\t\tvalue: function ( name ) {\r\n\t\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\r\n\t\t\treturn this.getObjectByName( name );\r\n\t\t}\r\n\t},\r\n\trenderDepth: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\r\n\t\t}\r\n\t},\r\n\ttranslate: {\r\n\t\tvalue: function ( distance, axis ) {\r\n\t\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\r\n\t\t\treturn this.translateOnAxis( axis, distance );\r\n\t\t}\r\n\t},\r\n\tuseQuaternion: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.defineProperties( THREE, {\r\n\tPointCloud: {\r\n\t\tvalue: function ( geometry, material ) {\r\n\t\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\r\n\t\t\treturn new THREE.Points( geometry, material );\r\n\t\t}\r\n\t},\r\n\tParticleSystem: {\r\n\t\tvalue: function ( geometry, material ) {\r\n\t\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\r\n\t\t\treturn new THREE.Points( geometry, material );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.defineProperties( THREE.Light.prototype, {\r\n\tonlyShadow: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\r\n\t\t}\r\n\t},\r\n\tshadowCameraFov: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\r\n\t\t\tthis.shadow.camera.fov = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraLeft: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\r\n\t\t\tthis.shadow.camera.left = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraRight: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\r\n\t\t\tthis.shadow.camera.right = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraTop: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\r\n\t\t\tthis.shadow.camera.top = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraBottom: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\r\n\t\t\tthis.shadow.camera.bottom = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraNear: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\r\n\t\t\tthis.shadow.camera.near = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraFar: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\r\n\t\t\tthis.shadow.camera.far = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraVisible: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\r\n\t\t}\r\n\t},\r\n\tshadowBias: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\r\n\t\t\tthis.shadow.bias = value;\r\n\t\t}\r\n\t},\r\n\tshadowDarkness: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\r\n\t\t}\r\n\t},\r\n\tshadowMapWidth: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\r\n\t\t\tthis.shadow.mapSize.width = value;\r\n\t\t}\r\n\t},\r\n\tshadowMapHeight: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\r\n\t\t\tthis.shadow.mapSize.height = value;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.defineProperties( THREE.BufferAttribute.prototype, {\r\n\tlength: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\r\n\t\t\treturn this.array.length;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.BufferGeometry.prototype, {\r\n\tdrawcalls: {\r\n\t\tget: function () {\r\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\r\n\t\t\treturn this.groups;\r\n\t\t}\r\n\t},\r\n\toffsets: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\r\n\t\t\treturn this.groups;\r\n\t\t}\r\n\t},\r\n\taddIndex: {\r\n\t\tvalue: function ( index ) {\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\r\n\t\t\tthis.setIndex( index );\r\n\t\t}\r\n\t},\r\n\taddDrawCall: {\r\n\t\tvalue: function ( start, count, indexOffset ) {\r\n\t\t\tif ( indexOffset !== undefined ) {\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\r\n\t\t\t}\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\r\n\t\t\tthis.addGroup( start, count );\r\n\t\t}\r\n\t},\r\n\tclearDrawCalls: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\r\n\t\t\tthis.clearGroups();\r\n\t\t}\r\n\t},\r\n\tcomputeTangents: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\r\n\t\t}\r\n\t},\r\n\tcomputeOffsets: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.defineProperties( THREE.Material.prototype, {\r\n\twrapAround: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\r\n\t\t}\r\n\t},\r\n\twrapRGB: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\r\n\t\t\treturn new THREE.Color();\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE, {\r\n\tPointCloudMaterial: {\r\n\t\tvalue: function ( parameters ) {\r\n\t\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\t\treturn new THREE.PointsMaterial( parameters );\r\n\t\t}\r\n\t},\r\n\tParticleBasicMaterial: {\r\n\t\tvalue: function ( parameters ) {\r\n\t\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\t\treturn new THREE.PointsMaterial( parameters );\r\n\t\t}\r\n\t},\r\n\tParticleSystemMaterial:{\r\n\t\tvalue: function ( parameters ) {\r\n\t\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\t\treturn new THREE.PointsMaterial( parameters );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.MeshPhongMaterial.prototype, {\r\n\tmetal: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.ShaderMaterial.prototype, {\r\n\tderivatives: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\treturn this.extensions.derivatives;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\tthis.extensions.derivatives = value;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.defineProperties( THREE.WebGLRenderer.prototype, {\r\n\tsupportsFloatTextures: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\r\n\t\t\treturn this.extensions.get( 'OES_texture_float' );\r\n\t\t}\r\n\t},\r\n\tsupportsHalfFloatTextures: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\r\n\t\t\treturn this.extensions.get( 'OES_texture_half_float' );\r\n\t\t}\r\n\t},\r\n\tsupportsStandardDerivatives: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\r\n\t\t\treturn this.extensions.get( 'OES_standard_derivatives' );\r\n\t\t}\r\n\t},\r\n\tsupportsCompressedTextureS3TC: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\r\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\t\t}\r\n\t},\r\n\tsupportsCompressedTexturePVRTC: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\r\n\t\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\t\t}\r\n\t},\r\n\tsupportsBlendMinMax: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\r\n\t\t\treturn this.extensions.get( 'EXT_blend_minmax' );\r\n\t\t}\r\n\t},\r\n\tsupportsVertexTextures: {\r\n\t\tvalue: function () {\r\n\t\t\treturn this.capabilities.vertexTextures;\r\n\t\t}\r\n\t},\r\n\tsupportsInstancedArrays: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\r\n\t\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\r\n\t\t}\r\n\t},\r\n\tenableScissorTest: {\r\n\t\tvalue: function ( boolean ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\r\n\t\t\tthis.setScissorTest( boolean );\r\n\t\t}\r\n\t},\r\n\tinitMaterial: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\r\n\t\t}\r\n\t},\r\n\taddPrePlugin: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\r\n\t\t}\r\n\t},\r\n\taddPostPlugin: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\r\n\t\t}\r\n\t},\r\n\tupdateShadowMap: {\r\n\t\tvalue: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\r\n\t\t}\r\n\t},\r\n\tshadowMapEnabled: {\r\n\t\tget: function () {\r\n\t\t\treturn this.shadowMap.enabled;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\r\n\t\t\tthis.shadowMap.enabled = value;\r\n\t\t}\r\n\t},\r\n\tshadowMapType: {\r\n\t\tget: function () {\r\n\t\t\treturn this.shadowMap.type;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\r\n\t\t\tthis.shadowMap.type = value;\r\n\t\t}\r\n\t},\r\n\tshadowMapCullFace: {\r\n\t\tget: function () {\r\n\t\t\treturn this.shadowMap.cullFace;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\r\n\t\t\tthis.shadowMap.cullFace = value;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.defineProperties( THREE.WebGLRenderTarget.prototype, {\r\n\twrapS: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\treturn this.texture.wrapS;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\tthis.texture.wrapS = value;\r\n\t\t}\r\n\t},\r\n\twrapT: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\treturn this.texture.wrapT;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\tthis.texture.wrapT = value;\r\n\t\t}\r\n\t},\r\n\tmagFilter: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\treturn this.texture.magFilter;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\tthis.texture.magFilter = value;\r\n\t\t}\r\n\t},\r\n\tminFilter: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\treturn this.texture.minFilter;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\tthis.texture.minFilter = value;\r\n\t\t}\r\n\t},\r\n\tanisotropy: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\treturn this.texture.anisotropy;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\tthis.texture.anisotropy = value;\r\n\t\t}\r\n\t},\r\n\toffset: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\treturn this.texture.offset;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\tthis.texture.offset = value;\r\n\t\t}\r\n\t},\r\n\trepeat: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\treturn this.texture.repeat;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\tthis.texture.repeat = value;\r\n\t\t}\r\n\t},\r\n\tformat: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\treturn this.texture.format;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\tthis.texture.format = value;\r\n\t\t}\r\n\t},\r\n\ttype: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\treturn this.texture.type;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\tthis.texture.type = value;\r\n\t\t}\r\n\t},\r\n\tgenerateMipmaps: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\treturn this.texture.generateMipmaps;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\tthis.texture.generateMipmaps = value;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nTHREE.GeometryUtils = {\r\n\r\n\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\r\n\r\n\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\r\n\r\n\t\tvar matrix;\r\n\r\n\t\tif ( geometry2 instanceof THREE.Mesh ) {\r\n\r\n\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\r\n\r\n\t\t\tmatrix = geometry2.matrix;\r\n\t\t\tgeometry2 = geometry2.geometry;\r\n\r\n\t\t}\r\n\r\n\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\r\n\r\n\t},\r\n\r\n\tcenter: function ( geometry ) {\r\n\r\n\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\r\n\t\treturn geometry.center();\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ImageUtils = {\r\n\r\n\tcrossOrigin: undefined,\r\n\r\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\r\n\r\n\t\tvar loader = new THREE.TextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) texture.mapping = mapping;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\r\n\r\n\t\tvar loader = new THREE.CubeTextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) texture.mapping = mapping;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadCompressedTexture: function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\r\n\r\n\t},\r\n\r\n\tloadCompressedTextureCube: function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\r\n\r\n\t}\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.Projector = function () {\r\n\r\n\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\r\n\r\n\tthis.projectVector = function ( vector, camera ) {\r\n\r\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\r\n\t\tvector.project( camera );\r\n\r\n\t};\r\n\r\n\tthis.unprojectVector = function ( vector, camera ) {\r\n\r\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\r\n\t\tvector.unproject( camera );\r\n\r\n\t};\r\n\r\n\tthis.pickingRay = function ( vector, camera ) {\r\n\r\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\r\n\r\n\t};\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.CanvasRenderer = function () {\r\n\r\n\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\r\n\r\n\tthis.domElement = document.createElement( 'canvas' );\r\n\tthis.clear = function () {};\r\n\tthis.render = function () {};\r\n\tthis.setClearColor = function () {};\r\n\tthis.setSize = function () {};\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.MeshFaceMaterial = THREE.MultiMaterial;\r\n\r\n// File:src/extras/CurveUtils.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.CurveUtils = {\r\n\r\n\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\r\n\r\n\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\r\n\r\n\t},\r\n\r\n\t// Puay Bing, thanks for helping with this derivative!\r\n\r\n\ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\r\n\t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\r\n\t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\r\n\t\t\t3 * t * t * p3;\r\n\r\n\t},\r\n\r\n\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\t// To check if my formulas are correct\r\n\r\n\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\r\n\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\r\n\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\r\n\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\r\n\r\n\t\treturn h00 + h10 + h01 + h11;\r\n\r\n\t},\r\n\r\n\t// Catmull-Rom\r\n\r\n\tinterpolate: function( p0, p1, p2, p3, t ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\r\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t * t2;\r\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/SceneUtils.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SceneUtils = {\r\n\r\n\tcreateMultiMaterialObject: function ( geometry, materials ) {\r\n\r\n\t\tvar group = new THREE.Group();\r\n\r\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\r\n\r\n\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn group;\r\n\r\n\t},\r\n\r\n\tdetach: function ( child, parent, scene ) {\r\n\r\n\t\tchild.applyMatrix( parent.matrixWorld );\r\n\t\tparent.remove( child );\r\n\t\tscene.add( child );\r\n\r\n\t},\r\n\r\n\tattach: function ( child, scene, parent ) {\r\n\r\n\t\tvar matrixWorldInverse = new THREE.Matrix4();\r\n\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\r\n\t\tchild.applyMatrix( matrixWorldInverse );\r\n\r\n\t\tscene.remove( child );\r\n\t\tparent.add( child );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/ShapeUtils.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.ShapeUtils = {\r\n\r\n\t// calculate area of the contour polygon\r\n\r\n\tarea: function ( contour ) {\r\n\r\n\t\tvar n = contour.length;\r\n\t\tvar a = 0.0;\r\n\r\n\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\r\n\r\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\r\n\r\n\t\t}\r\n\r\n\t\treturn a * 0.5;\r\n\r\n\t},\r\n\r\n\ttriangulate: ( function () {\r\n\r\n\t\t/**\r\n\t\t * This code is a quick port of code written in C++ which was submitted to\r\n\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\r\n\t\t * See original code and more information here:\r\n\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\r\n\t\t *\r\n\t\t * ported to actionscript by Zevan Rosser\r\n\t\t * www.actionsnippet.com\r\n\t\t *\r\n\t\t * ported to javascript by Joshua Koo\r\n\t\t * http://www.lab4games.net/zz85/blog\r\n\t\t *\r\n\t\t */\r\n\r\n\t\tfunction snip( contour, u, v, w, n, verts ) {\r\n\r\n\t\t\tvar p;\r\n\t\t\tvar ax, ay, bx, by;\r\n\t\t\tvar cx, cy, px, py;\r\n\r\n\t\t\tax = contour[ verts[ u ] ].x;\r\n\t\t\tay = contour[ verts[ u ] ].y;\r\n\r\n\t\t\tbx = contour[ verts[ v ] ].x;\r\n\t\t\tby = contour[ verts[ v ] ].y;\r\n\r\n\t\t\tcx = contour[ verts[ w ] ].x;\r\n\t\t\tcy = contour[ verts[ w ] ].y;\r\n\r\n\t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\r\n\r\n\t\t\tvar aX, aY, bX, bY, cX, cY;\r\n\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\r\n\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\r\n\r\n\t\t\taX = cx - bx;  aY = cy - by;\r\n\t\t\tbX = ax - cx;  bY = ay - cy;\r\n\t\t\tcX = bx - ax;  cY = by - ay;\r\n\r\n\t\t\tfor ( p = 0; p < n; p ++ ) {\r\n\r\n\t\t\t\tpx = contour[ verts[ p ] ].x;\r\n\t\t\t\tpy = contour[ verts[ p ] ].y;\r\n\r\n\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\r\n\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\r\n\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\r\n\r\n\t\t\t\tapx = px - ax;  apy = py - ay;\r\n\t\t\t\tbpx = px - bx;  bpy = py - by;\r\n\t\t\t\tcpx = px - cx;  cpy = py - cy;\r\n\r\n\t\t\t\t// see if p is inside triangle abc\r\n\r\n\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\r\n\t\t\t\tcCROSSap = cX * apy - cY * apx;\r\n\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\r\n\r\n\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// takes in an contour array and returns\r\n\r\n\t\treturn function ( contour, indices ) {\r\n\r\n\t\t\tvar n = contour.length;\r\n\r\n\t\t\tif ( n < 3 ) return null;\r\n\r\n\t\t\tvar result = [],\r\n\t\t\t\tverts = [],\r\n\t\t\t\tvertIndices = [];\r\n\r\n\t\t\t/* we want a counter-clockwise polygon in verts */\r\n\r\n\t\t\tvar u, v, w;\r\n\r\n\t\t\tif ( THREE.ShapeUtils.area( contour ) > 0.0 ) {\r\n\r\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar nv = n;\r\n\r\n\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\r\n\r\n\t\t\tvar count = 2 * nv;   /* error detection */\r\n\r\n\t\t\tfor ( v = nv - 1; nv > 2; ) {\r\n\r\n\t\t\t\t/* if we loop, it is probably a non-simple polygon */\r\n\r\n\t\t\t\tif ( ( count -- ) <= 0 ) {\r\n\r\n\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\r\n\r\n\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\r\n\t\t\t\t\t//return null;\r\n\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\r\n\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\r\n\r\n\t\t\t\t\tif ( indices ) return vertIndices;\r\n\t\t\t\t\treturn result;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\r\n\r\n\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\r\n\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\r\n\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\r\n\r\n\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\r\n\r\n\t\t\t\t\tvar a, b, c, s, t;\r\n\r\n\t\t\t\t\t/* true names of the vertices */\r\n\r\n\t\t\t\t\ta = verts[ u ];\r\n\t\t\t\t\tb = verts[ v ];\r\n\t\t\t\t\tc = verts[ w ];\r\n\r\n\t\t\t\t\t/* output Triangle */\r\n\r\n\t\t\t\t\tresult.push( [ contour[ a ],\r\n\t\t\t\t\t\tcontour[ b ],\r\n\t\t\t\t\t\tcontour[ c ] ] );\r\n\r\n\r\n\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\r\n\r\n\t\t\t\t\t/* remove v from the remaining polygon */\r\n\r\n\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\r\n\r\n\t\t\t\t\t\tverts[ s ] = verts[ t ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnv --;\r\n\r\n\t\t\t\t\t/* reset error detection counter */\r\n\r\n\t\t\t\t\tcount = 2 * nv;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( indices ) return vertIndices;\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} )(),\r\n\r\n\ttriangulateShape: function ( contour, holes ) {\r\n\r\n\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\r\n\r\n\t\t\t// inOtherPt needs to be collinear to the inSegment\r\n\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\r\n\r\n\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\r\n\r\n\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\r\n\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\r\n\r\n\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\r\n\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\r\n\r\n\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\r\n\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\r\n\r\n\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t// not parallel\r\n\r\n\t\t\t\tvar perpSeg2;\r\n\t\t\t\tif ( limit > 0 ) {\r\n\r\n\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\r\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\r\n\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\r\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\r\n\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// i.e. to reduce rounding errors\r\n\t\t\t\t// intersection at endpoint of segment#1?\r\n\t\t\t\tif ( perpSeg2 === 0 ) {\r\n\r\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\r\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\r\n\t\t\t\t\treturn [ inSeg1Pt1 ];\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( perpSeg2 === limit ) {\r\n\r\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\r\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\r\n\t\t\t\t\treturn [ inSeg1Pt2 ];\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// intersection at endpoint of segment#2?\r\n\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\r\n\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\r\n\r\n\t\t\t\t// return real intersection point\r\n\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\r\n\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\r\n\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// parallel or collinear\r\n\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\r\n\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\r\n\r\n\t\t\t\t// they are collinear or degenerate\r\n\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\r\n\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\r\n\t\t\t\t// both segments are points\r\n\t\t\t\tif ( seg1Pt && seg2Pt ) {\r\n\r\n\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\r\n\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\r\n\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// segment#1  is a single point\r\n\t\t\t\tif ( seg1Pt ) {\r\n\r\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\r\n\t\t\t\t\treturn [ inSeg1Pt1 ];\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// segment#2  is a single point\r\n\t\t\t\tif ( seg2Pt ) {\r\n\r\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\r\n\t\t\t\t\treturn [ inSeg2Pt1 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// they are collinear segments, which might overlap\r\n\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\r\n\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\r\n\t\t\t\tif ( seg1dx !== 0 ) {\r\n\r\n\t\t\t\t\t// the segments are NOT on a vertical line\r\n\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// the segments are on a vertical line\r\n\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( seg1minVal <= seg2minVal ) {\r\n\r\n\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\r\n\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\r\n\r\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\r\n\t\t\t\t\t\treturn [ seg2min ];\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\r\n\t\t\t\t\treturn\t[ seg2min, seg2max ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\r\n\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\r\n\r\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\r\n\t\t\t\t\t\treturn [ seg1min ];\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\r\n\t\t\t\t\treturn\t[ seg1min, seg2max ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\r\n\r\n\t\t\t// The order of legs is important\r\n\r\n\t\t\t// translation of all points, so that Vertex is at (0,0)\r\n\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\r\n\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\r\n\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\r\n\r\n\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\r\n\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\r\n\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\r\n\r\n\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t// angle != 180 deg.\r\n\r\n\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\r\n\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\r\n\r\n\t\t\t\tif ( from2toAngle > 0 ) {\r\n\r\n\t\t\t\t\t// main angle < 180 deg.\r\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// main angle > 180 deg.\r\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// angle == 180 deg.\r\n\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\r\n\t\t\t\treturn\t( from2otherAngle > 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction removeHoles( contour, holes ) {\r\n\r\n\t\t\tvar shape = contour.concat(); // work on this shape\r\n\t\t\tvar hole;\r\n\r\n\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\r\n\r\n\t\t\t\t// Check if hole point lies within angle around shape point\r\n\t\t\t\tvar lastShapeIdx = shape.length - 1;\r\n\r\n\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\r\n\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\r\n\r\n\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\r\n\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\r\n\r\n\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\r\n\t\t\t\tif ( ! insideAngle ) {\r\n\r\n\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\r\n\t\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check if shape point lies within angle around hole point\r\n\t\t\t\tvar lastHoleIdx = hole.length - 1;\r\n\r\n\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\r\n\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\r\n\r\n\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\r\n\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\r\n\r\n\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\r\n\t\t\t\tif ( ! insideAngle ) {\r\n\r\n\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\r\n\t\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn\ttrue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\r\n\r\n\t\t\t\t// checks for intersections with shape edges\r\n\t\t\t\tvar sIdx, nextIdx, intersection;\r\n\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\r\n\r\n\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\r\n\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\r\n\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar indepHoles = [];\r\n\r\n\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\r\n\r\n\t\t\t\t// checks for intersections with hole edges\r\n\t\t\t\tvar ihIdx, chkHole,\r\n\t\t\t\t\thIdx, nextIdx, intersection;\r\n\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\r\n\r\n\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\r\n\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\r\n\r\n\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\r\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\r\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar holeIndex, shapeIndex,\r\n\t\t\t\tshapePt, holePt,\r\n\t\t\t\tholeIdx, cutKey, failedCuts = [],\r\n\t\t\t\ttmpShape1, tmpShape2,\r\n\t\t\t\ttmpHole1, tmpHole2;\r\n\r\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tindepHoles.push( h );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar minShapeIndex = 0;\r\n\t\t\tvar counter = indepHoles.length * 2;\r\n\t\t\twhile ( indepHoles.length > 0 ) {\r\n\r\n\t\t\t\tcounter --;\r\n\t\t\t\tif ( counter < 0 ) {\r\n\r\n\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// search for shape-vertex and hole-vertex,\r\n\t\t\t\t// which can be connected without intersections\r\n\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\r\n\r\n\t\t\t\t\tshapePt = shape[ shapeIndex ];\r\n\t\t\t\t\tholeIndex\t= - 1;\r\n\r\n\t\t\t\t\t// search for hole which can be reached without intersections\r\n\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\r\n\r\n\t\t\t\t\t\tholeIdx = indepHoles[ h ];\r\n\r\n\t\t\t\t\t\t// prevent multiple checks\r\n\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\r\n\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\thole = holes[ holeIdx ];\r\n\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\r\n\r\n\t\t\t\t\t\t\tholePt = hole[ h2 ];\r\n\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\r\n\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\r\n\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\tholeIndex = h2;\r\n\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\r\n\r\n\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\r\n\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\r\n\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\r\n\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\r\n\r\n\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\r\n\r\n\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\r\n\r\n\t\t\t\t\t\t\t// Debug only, to show the selected cuts\r\n\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\r\n\r\n\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn shape; \t\t\t/* shape with no holes */\r\n\r\n\t\t}\r\n\r\n\r\n\t\tvar i, il, f, face,\r\n\t\t\tkey, index,\r\n\t\t\tallPointsMap = {};\r\n\r\n\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\r\n\r\n\t\tvar allpoints = contour.concat();\r\n\r\n\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\r\n\r\n\t\t}\r\n\r\n\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\r\n\r\n\t\t// prepare all points map\r\n\r\n\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\r\n\r\n\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\r\n\r\n\t\t\tif ( allPointsMap[ key ] !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.Shape: Duplicate point\", key );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tallPointsMap[ key ] = i;\r\n\r\n\t\t}\r\n\r\n\t\t// remove holes by cutting paths to holes and adding them to the shape\r\n\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\r\n\r\n\t\tvar triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\r\n\t\t//console.log( \"triangles\",triangles, triangles.length );\r\n\r\n\t\t// check all face vertices against all points map\r\n\r\n\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = triangles[ i ];\r\n\r\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\r\n\r\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\r\n\r\n\t\t\t\tindex = allPointsMap[ key ];\r\n\r\n\t\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\t\tface[ f ] = index;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn triangles.concat();\r\n\r\n\t},\r\n\r\n\tisClockWise: function ( pts ) {\r\n\r\n\t\treturn THREE.ShapeUtils.area( pts ) < 0;\r\n\r\n\t},\r\n\r\n\t// Bezier Curves formulas obtained from\r\n\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\r\n\r\n\t// Quad Bezier Functions\r\n\r\n\tb2: ( function () {\r\n\r\n\t\tfunction b2p0( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn k * k * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b2p1( t, p ) {\r\n\r\n\t\t\treturn 2 * ( 1 - t ) * t * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b2p2( t, p ) {\r\n\r\n\t\t\treturn t * t * p;\r\n\r\n\t\t}\r\n\r\n\t\treturn function ( t, p0, p1, p2 ) {\r\n\r\n\t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\t// Cubic Bezier Functions\r\n\r\n\tb3: ( function () {\r\n\r\n\t\tfunction b3p0( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn k * k * k * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b3p1( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn 3 * k * k * t * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b3p2( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn 3 * k * t * t * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b3p3( t, p ) {\r\n\r\n\t\t\treturn t * t * t * p;\r\n\r\n\t\t}\r\n\r\n\t\treturn function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n};\r\n\r\n// File:src/extras/core/Curve.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Extensible curve object\r\n *\r\n * Some common of Curve methods\r\n * .getPoint(t), getTangent(t)\r\n * .getPointAt(u), getTagentAt(u)\r\n * .getPoints(), .getSpacedPoints()\r\n * .getLength()\r\n * .updateArcLengths()\r\n *\r\n * This following classes subclasses THREE.Curve:\r\n *\r\n * -- 2d classes --\r\n * THREE.LineCurve\r\n * THREE.QuadraticBezierCurve\r\n * THREE.CubicBezierCurve\r\n * THREE.SplineCurve\r\n * THREE.ArcCurve\r\n * THREE.EllipseCurve\r\n *\r\n * -- 3d classes --\r\n * THREE.LineCurve3\r\n * THREE.QuadraticBezierCurve3\r\n * THREE.CubicBezierCurve3\r\n * THREE.SplineCurve3\r\n * THREE.ClosedSplineCurve3\r\n *\r\n * A series of curves can be represented as a THREE.CurvePath\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tAbstract Curve base class\r\n **************************************************************/\r\n\r\nTHREE.Curve = function () {\r\n\r\n};\r\n\r\nTHREE.Curve.prototype = {\r\n\r\n\tconstructor: THREE.Curve,\r\n\r\n\t// Virtual base class method to overwrite and implement in subclasses\r\n\t//\t- t [0 .. 1]\r\n\r\n\tgetPoint: function ( t ) {\r\n\r\n\t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\r\n\t\treturn null;\r\n\r\n\t},\r\n\r\n\t// Get point at relative position in curve according to arc length\r\n\t// - u [0 .. 1]\r\n\r\n\tgetPointAt: function ( u ) {\r\n\r\n\t\tvar t = this.getUtoTmapping( u );\r\n\t\treturn this.getPoint( t );\r\n\r\n\t},\r\n\r\n\t// Get sequence of points using getPoint( t )\r\n\r\n\tgetPoints: function ( divisions ) {\r\n\r\n\t\tif ( ! divisions ) divisions = 5;\r\n\r\n\t\tvar d, pts = [];\r\n\r\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\tpts.push( this.getPoint( d / divisions ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn pts;\r\n\r\n\t},\r\n\r\n\t// Get sequence of points using getPointAt( u )\r\n\r\n\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\tif ( ! divisions ) divisions = 5;\r\n\r\n\t\tvar d, pts = [];\r\n\r\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\tpts.push( this.getPointAt( d / divisions ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn pts;\r\n\r\n\t},\r\n\r\n\t// Get total curve arc length\r\n\r\n\tgetLength: function () {\r\n\r\n\t\tvar lengths = this.getLengths();\r\n\t\treturn lengths[ lengths.length - 1 ];\r\n\r\n\t},\r\n\r\n\t// Get list of cumulative segment lengths\r\n\r\n\tgetLengths: function ( divisions ) {\r\n\r\n\t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\r\n\r\n\t\tif ( this.cacheArcLengths\r\n\t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\r\n\t\t\t&& ! this.needsUpdate ) {\r\n\r\n\t\t\t//console.log( \"cached\", this.cacheArcLengths );\r\n\t\t\treturn this.cacheArcLengths;\r\n\r\n\t\t}\r\n\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t\tvar cache = [];\r\n\t\tvar current, last = this.getPoint( 0 );\r\n\t\tvar p, sum = 0;\r\n\r\n\t\tcache.push( 0 );\r\n\r\n\t\tfor ( p = 1; p <= divisions; p ++ ) {\r\n\r\n\t\t\tcurrent = this.getPoint ( p / divisions );\r\n\t\t\tsum += current.distanceTo( last );\r\n\t\t\tcache.push( sum );\r\n\t\t\tlast = current;\r\n\r\n\t\t}\r\n\r\n\t\tthis.cacheArcLengths = cache;\r\n\r\n\t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\r\n\r\n\t},\r\n\r\n\tupdateArcLengths: function() {\r\n\r\n\t\tthis.needsUpdate = true;\r\n\t\tthis.getLengths();\r\n\r\n\t},\r\n\r\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\r\n\r\n\tgetUtoTmapping: function ( u, distance ) {\r\n\r\n\t\tvar arcLengths = this.getLengths();\r\n\r\n\t\tvar i = 0, il = arcLengths.length;\r\n\r\n\t\tvar targetArcLength; // The targeted u distance value to get\r\n\r\n\t\tif ( distance ) {\r\n\r\n\t\t\ttargetArcLength = distance;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\r\n\r\n\t\t}\r\n\r\n\t\t//var time = Date.now();\r\n\r\n\t\t// binary search for the index with largest value smaller than target u distance\r\n\r\n\t\tvar low = 0, high = il - 1, comparison;\r\n\r\n\t\twhile ( low <= high ) {\r\n\r\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\r\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\r\n\r\n\t\t\tif ( comparison < 0 ) {\r\n\r\n\t\t\t\tlow = i + 1;\r\n\r\n\t\t\t} else if ( comparison > 0 ) {\r\n\r\n\t\t\t\thigh = i - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\thigh = i;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t// DONE\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\ti = high;\r\n\r\n\t\t//console.log('b' , i, low, high, Date.now()- time);\r\n\r\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\r\n\r\n\t\t\tvar t = i / ( il - 1 );\r\n\t\t\treturn t;\r\n\r\n\t\t}\r\n\r\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\r\n\r\n\t\tvar lengthBefore = arcLengths[ i ];\r\n\t\tvar lengthAfter = arcLengths[ i + 1 ];\r\n\r\n\t\tvar segmentLength = lengthAfter - lengthBefore;\r\n\r\n\t\t// determine where we are between the 'before' and 'after' points\r\n\r\n\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\r\n\r\n\t\t// add that fractional amount to t\r\n\r\n\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\r\n\r\n\t\treturn t;\r\n\r\n\t},\r\n\r\n\t// Returns a unit vector tangent at t\r\n\t// In case any sub curve does not implement its tangent derivation,\r\n\t// 2 points a small delta apart will be used to find its gradient\r\n\t// which seems to give a reasonable approximation\r\n\r\n\tgetTangent: function( t ) {\r\n\r\n\t\tvar delta = 0.0001;\r\n\t\tvar t1 = t - delta;\r\n\t\tvar t2 = t + delta;\r\n\r\n\t\t// Capping in case of danger\r\n\r\n\t\tif ( t1 < 0 ) t1 = 0;\r\n\t\tif ( t2 > 1 ) t2 = 1;\r\n\r\n\t\tvar pt1 = this.getPoint( t1 );\r\n\t\tvar pt2 = this.getPoint( t2 );\r\n\r\n\t\tvar vec = pt2.clone().sub( pt1 );\r\n\t\treturn vec.normalize();\r\n\r\n\t},\r\n\r\n\tgetTangentAt: function ( u ) {\r\n\r\n\t\tvar t = this.getUtoTmapping( u );\r\n\t\treturn this.getTangent( t );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// TODO: Transformation for Curves?\r\n\r\n/**************************************************************\r\n *\t3D Curves\r\n **************************************************************/\r\n\r\n// A Factory method for creating new curve subclasses\r\n\r\nTHREE.Curve.create = function ( constructor, getPointFunc ) {\r\n\r\n\tconstructor.prototype = Object.create( THREE.Curve.prototype );\r\n\tconstructor.prototype.constructor = constructor;\r\n\tconstructor.prototype.getPoint = getPointFunc;\r\n\r\n\treturn constructor;\r\n\r\n};\r\n\r\n// File:src/extras/core/CurvePath.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tCurved Path - a curve path is simply a array of connected\r\n *  curves, but retains the api of a curve\r\n **************************************************************/\r\n\r\nTHREE.CurvePath = function () {\r\n\r\n\tthis.curves = [];\r\n\r\n\tthis.autoClose = false; // Automatically closes the path\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.CurvePath.prototype.constructor = THREE.CurvePath;\r\n\r\nTHREE.CurvePath.prototype.add = function ( curve ) {\r\n\r\n\tthis.curves.push( curve );\r\n\r\n};\r\n\r\n/*\r\nTHREE.CurvePath.prototype.checkConnection = function() {\r\n\t// TODO\r\n\t// If the ending of curve is not connected to the starting\r\n\t// or the next curve, then, this is not a real path\r\n};\r\n*/\r\n\r\nTHREE.CurvePath.prototype.closePath = function() {\r\n\r\n\t// TODO Test\r\n\t// and verify for vector3 (needs to implement equals)\r\n\t// Add a line curve if start and end of lines are not connected\r\n\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\r\n\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\r\n\r\n\tif ( ! startPoint.equals( endPoint ) ) {\r\n\r\n\t\tthis.curves.push( new THREE.LineCurve( endPoint, startPoint ) );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// To get accurate point with reference to\r\n// entire path distance at time t,\r\n// following has to be done:\r\n\r\n// 1. Length of each sub path have to be known\r\n// 2. Locate and identify type of curve\r\n// 3. Get t for the curve\r\n// 4. Return curve.getPointAt(t')\r\n\r\nTHREE.CurvePath.prototype.getPoint = function( t ) {\r\n\r\n\tvar d = t * this.getLength();\r\n\tvar curveLengths = this.getCurveLengths();\r\n\tvar i = 0;\r\n\r\n\t// To think about boundaries points.\r\n\r\n\twhile ( i < curveLengths.length ) {\r\n\r\n\t\tif ( curveLengths[ i ] >= d ) {\r\n\r\n\t\t\tvar diff = curveLengths[ i ] - d;\r\n\t\t\tvar curve = this.curves[ i ];\r\n\r\n\t\t\tvar u = 1 - diff / curve.getLength();\r\n\r\n\t\t\treturn curve.getPointAt( u );\r\n\r\n\t\t}\r\n\r\n\t\ti ++;\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n\t// loop where sum != 0, sum > d , sum+1 <d\r\n\r\n};\r\n\r\n/*\r\nTHREE.CurvePath.prototype.getTangent = function( t ) {\r\n};\r\n*/\r\n\r\n// We cannot use the default THREE.Curve getPoint() with getLength() because in\r\n// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\r\n// getPoint() depends on getLength\r\n\r\nTHREE.CurvePath.prototype.getLength = function() {\r\n\r\n\tvar lens = this.getCurveLengths();\r\n\treturn lens[ lens.length - 1 ];\r\n\r\n};\r\n\r\n// Compute lengths and cache them\r\n// We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\r\nTHREE.CurvePath.prototype.getCurveLengths = function() {\r\n\r\n\t// We use cache values if curves and cache array are same length\r\n\r\n\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\r\n\r\n\t\treturn this.cacheLengths;\r\n\r\n\t}\r\n\r\n\t// Get length of sub-curve\r\n\t// Push sums into cached array\r\n\r\n\tvar lengths = [], sums = 0;\r\n\r\n\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\tsums += this.curves[ i ].getLength();\r\n\t\tlengths.push( sums );\r\n\r\n\t}\r\n\r\n\tthis.cacheLengths = lengths;\r\n\r\n\treturn lengths;\r\n\r\n};\r\n\r\n\r\n\r\n/**************************************************************\r\n *\tCreate Geometries Helpers\r\n **************************************************************/\r\n\r\n/// Generate geometry from path points (for Line or Points objects)\r\n\r\nTHREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {\r\n\r\n\tvar pts = this.getPoints( divisions );\r\n\treturn this.createGeometry( pts );\r\n\r\n};\r\n\r\n// Generate geometry from equidistant sampling along the path\r\n\r\nTHREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {\r\n\r\n\tvar pts = this.getSpacedPoints( divisions );\r\n\treturn this.createGeometry( pts );\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype.createGeometry = function( points ) {\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\r\n\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\tvar point = points[ i ];\r\n\t\tgeometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );\r\n\r\n\t}\r\n\r\n\treturn geometry;\r\n\r\n};\r\n\r\n// File:src/extras/core/Font.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Font = function ( data ) {\r\n\r\n\tthis.data = data;\r\n\r\n};\r\n\r\nTHREE.Font.prototype = {\r\n\r\n\tconstructor: THREE.Font,\r\n\r\n\tgenerateShapes: function ( text, size, divisions ) {\r\n\r\n\t\tfunction createPaths( text ) {\r\n\r\n\t\t\tvar chars = String( text ).split( '' );\r\n\t\t\tvar scale = size / data.resolution;\r\n\t\t\tvar offset = 0;\r\n\r\n\t\t\tvar paths = [];\r\n\r\n\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\r\n\r\n\t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\r\n\t\t\t\toffset += ret.offset;\r\n\r\n\t\t\t\tpaths.push( ret.path );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn paths;\r\n\r\n\t\t}\r\n\r\n\t\tfunction createPath( c, scale, offset ) {\r\n\r\n\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\r\n\r\n\t\t\tif ( ! glyph ) return;\r\n\r\n\t\t\tvar path = new THREE.Path();\r\n\r\n\t\t\tvar pts = [], b2 = THREE.ShapeUtils.b2, b3 = THREE.ShapeUtils.b3;\r\n\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\r\n\r\n\t\t\tif ( glyph.o ) {\r\n\r\n\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\r\n\r\n\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\r\n\r\n\t\t\t\t\tvar action = outline[ i ++ ];\r\n\r\n\t\t\t\t\tswitch ( action ) {\r\n\r\n\t\t\t\t\t\tcase 'm': // moveTo\r\n\r\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\r\n\r\n\t\t\t\t\t\t\tpath.moveTo( x, y );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'l': // lineTo\r\n\r\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\r\n\r\n\t\t\t\t\t\t\tpath.lineTo( x, y );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'q': // quadraticCurveTo\r\n\r\n\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\r\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\r\n\r\n\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\r\n\r\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( laste ) {\r\n\r\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\r\n\t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\r\n\t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'b': // bezierCurveTo\r\n\r\n\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\r\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\r\n\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\r\n\r\n\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\r\n\r\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( laste ) {\r\n\r\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\r\n\t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn { offset: glyph.ha * scale, path: path };\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( size === undefined ) size = 100;\r\n\t\tif ( divisions === undefined ) divisions = 4;\r\n\r\n\t\tvar data = this.data;\r\n\r\n\t\tvar paths = createPaths( text );\r\n\t\tvar shapes = [];\r\n\r\n\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\r\n\r\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\r\n\r\n\t\t}\r\n\r\n\t\treturn shapes;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/core/Path.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Creates free form 2d path using series of points, lines or curves.\r\n *\r\n **/\r\n\r\nTHREE.Path = function ( points ) {\r\n\r\n\tTHREE.CurvePath.call( this );\r\n\r\n\tthis.actions = [];\r\n\r\n\tif ( points ) {\r\n\r\n\t\tthis.fromPoints( points );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Path.prototype = Object.create( THREE.CurvePath.prototype );\r\nTHREE.Path.prototype.constructor = THREE.Path;\r\n\r\n// TODO Clean up PATH API\r\n\r\n// Create path using straight lines to connect all points\r\n// - vectors: array of Vector2\r\n\r\nTHREE.Path.prototype.fromPoints = function ( vectors ) {\r\n\r\n\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\r\n\r\n\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// startPath() endPath()?\r\n\r\nTHREE.Path.prototype.moveTo = function ( x, y ) {\r\n\r\n\tthis.actions.push( { action: 'moveTo', args: [ x, y ] } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.lineTo = function ( x, y ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: 'lineTo', args: [ x, y ] } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar curve = new THREE.QuadraticBezierCurve(\r\n\t\tnew THREE.Vector2( x0, y0 ),\r\n\t\tnew THREE.Vector2( aCPx, aCPy ),\r\n\t\tnew THREE.Vector2( aX, aY )\r\n\t);\r\n\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: 'quadraticCurveTo', args: [ aCPx, aCPy, aX, aY ] } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar curve = new THREE.CubicBezierCurve(\r\n\t\tnew THREE.Vector2( x0, y0 ),\r\n\t\tnew THREE.Vector2( aCP1x, aCP1y ),\r\n\t\tnew THREE.Vector2( aCP2x, aCP2y ),\r\n\t\tnew THREE.Vector2( aX, aY )\r\n\t);\r\n\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: 'bezierCurveTo', args: [ aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ] } );\r\n\r\n};\r\n\r\nTHREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {\r\n\r\n\tvar args = Array.prototype.slice.call( arguments );\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tvar npts = [ new THREE.Vector2( x0, y0 ) ];\r\n\tArray.prototype.push.apply( npts, pts );\r\n\r\n\tvar curve = new THREE.SplineCurve( npts );\r\n\tthis.curves.push( curve );\r\n\r\n\tthis.actions.push( { action: 'splineThru', args: args } );\r\n\r\n};\r\n\r\n// FUTURE: Change the API or follow canvas API?\r\n\r\nTHREE.Path.prototype.arc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tthis.absarc( aX + x0, aY + y0, aRadius,\r\n\t\taStartAngle, aEndAngle, aClockwise );\r\n\r\n };\r\n\r\n THREE.Path.prototype.absarc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n };\r\n\r\nTHREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n };\r\n\r\n\r\nTHREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\tvar args = [\r\n\t\taX, aY,\r\n\t\txRadius, yRadius,\r\n\t\taStartAngle, aEndAngle,\r\n\t\taClockwise,\r\n\t\taRotation || 0 // aRotation is optional.\r\n\t];\r\n\r\n\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\tthis.curves.push( curve );\r\n\r\n\tvar lastPoint = curve.getPoint( 1 );\r\n\targs.push( lastPoint.x );\r\n\targs.push( lastPoint.y );\r\n\r\n\tthis.actions.push( { action: 'ellipse', args: args } );\r\n\r\n };\r\n\r\nTHREE.Path.prototype.getSpacedPoints = function ( divisions ) {\r\n\r\n\tif ( ! divisions ) divisions = 40;\r\n\r\n\tvar points = [];\r\n\r\n\tfor ( var i = 0; i < divisions; i ++ ) {\r\n\r\n\t\tpoints.push( this.getPoint( i / divisions ) );\r\n\r\n\t\t//if ( !this.getPoint( i / divisions ) ) throw \"DIE\";\r\n\r\n\t}\r\n\r\n\tif ( this.autoClose ) {\r\n\r\n\t\tpoints.push( points[ 0 ] );\r\n\r\n\t}\r\n\r\n\treturn points;\r\n\r\n};\r\n\r\n/* Return an array of vectors based on contour of the path */\r\n\r\nTHREE.Path.prototype.getPoints = function( divisions ) {\r\n\r\n\tdivisions = divisions || 12;\r\n\r\n\tvar b2 = THREE.ShapeUtils.b2;\r\n\tvar b3 = THREE.ShapeUtils.b3;\r\n\r\n\tvar points = [];\r\n\r\n\tvar cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,\r\n\t\tlaste, tx, ty;\r\n\r\n\tfor ( var i = 0, l = this.actions.length; i < l; i ++ ) {\r\n\r\n\t\tvar item = this.actions[ i ];\r\n\r\n\t\tvar action = item.action;\r\n\t\tvar args = item.args;\r\n\r\n\t\tswitch ( action ) {\r\n\r\n\t\tcase 'moveTo':\r\n\r\n\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'lineTo':\r\n\r\n\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'quadraticCurveTo':\r\n\r\n\t\t\tcpx  = args[ 2 ];\r\n\t\t\tcpy  = args[ 3 ];\r\n\r\n\t\t\tcpx1 = args[ 0 ];\r\n\t\t\tcpy1 = args[ 1 ];\r\n\r\n\t\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\t\tlaste = points[ points.length - 1 ];\r\n\r\n\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\r\n\r\n\t\t\t\tvar t = j / divisions;\r\n\r\n\t\t\t\ttx = b2( t, cpx0, cpx1, cpx );\r\n\t\t\t\tty = b2( t, cpy0, cpy1, cpy );\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'bezierCurveTo':\r\n\r\n\t\t\tcpx  = args[ 4 ];\r\n\t\t\tcpy  = args[ 5 ];\r\n\r\n\t\t\tcpx1 = args[ 0 ];\r\n\t\t\tcpy1 = args[ 1 ];\r\n\r\n\t\t\tcpx2 = args[ 2 ];\r\n\t\t\tcpy2 = args[ 3 ];\r\n\r\n\t\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\t\tlaste = points[ points.length - 1 ];\r\n\r\n\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\r\n\r\n\t\t\t\tvar t = j / divisions;\r\n\r\n\t\t\t\ttx = b3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\tty = b3( t, cpy0, cpy1, cpy2, cpy );\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'splineThru':\r\n\r\n\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\tvar last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );\r\n\t\t\tvar spts = [ last ];\r\n\r\n\t\t\tvar n = divisions * args[ 0 ].length;\r\n\r\n\t\t\tspts = spts.concat( args[ 0 ] );\r\n\r\n\t\t\tvar spline = new THREE.SplineCurve( spts );\r\n\r\n\t\t\tfor ( var j = 1; j <= n; j ++ ) {\r\n\r\n\t\t\t\tpoints.push( spline.getPointAt( j / n ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'arc':\r\n\r\n\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\taRadius = args[ 2 ],\r\n\t\t\t\taStartAngle = args[ 3 ], aEndAngle = args[ 4 ],\r\n\t\t\t\taClockwise = !! args[ 5 ];\r\n\r\n\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\tvar angle;\r\n\t\t\tvar tdivisions = divisions * 2;\r\n\r\n\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\r\n\r\n\t\t\t\tvar t = j / tdivisions;\r\n\r\n\t\t\t\tif ( ! aClockwise ) {\r\n\r\n\t\t\t\t\tt = 1 - t;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\r\n\t\t\t\ttx = aX + aRadius * Math.cos( angle );\r\n\t\t\t\tty = aY + aRadius * Math.sin( angle );\r\n\r\n\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(points);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'ellipse':\r\n\r\n\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\txRadius = args[ 2 ],\r\n\t\t\t\tyRadius = args[ 3 ],\r\n\t\t\t\taStartAngle = args[ 4 ], aEndAngle = args[ 5 ],\r\n\t\t\t\taClockwise = !! args[ 6 ],\r\n\t\t\t\taRotation = args[ 7 ];\r\n\r\n\r\n\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\tvar angle;\r\n\t\t\tvar tdivisions = divisions * 2;\r\n\r\n\t\t\tvar cos, sin;\r\n\t\t\tif ( aRotation !== 0 ) {\r\n\r\n\t\t\t\tcos = Math.cos( aRotation );\r\n\t\t\t\tsin = Math.sin( aRotation );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\r\n\r\n\t\t\t\tvar t = j / tdivisions;\r\n\r\n\t\t\t\tif ( ! aClockwise ) {\r\n\r\n\t\t\t\t\tt = 1 - t;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\r\n\t\t\t\ttx = aX + xRadius * Math.cos( angle );\r\n\t\t\t\tty = aY + yRadius * Math.sin( angle );\r\n\r\n\t\t\t\tif ( aRotation !== 0 ) {\r\n\r\n\t\t\t\t\tvar x = tx, y = ty;\r\n\r\n\t\t\t\t\t// Rotate the point about the center of the ellipse.\r\n\t\t\t\t\ttx = ( x - aX ) * cos - ( y - aY ) * sin + aX;\r\n\t\t\t\t\tty = ( x - aX ) * sin + ( y - aY ) * cos + aY;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(points);\r\n\r\n\t\t\tbreak;\r\n\r\n\t\t} // end switch\r\n\r\n\t}\r\n\r\n\r\n\r\n\t// Normalize to remove the closing point by default.\r\n\tvar lastPoint = points[ points.length - 1 ];\r\n\tif ( Math.abs( lastPoint.x - points[ 0 ].x ) < Number.EPSILON &&\r\n\t\t\t Math.abs( lastPoint.y - points[ 0 ].y ) < Number.EPSILON )\r\n\t\tpoints.splice( points.length - 1, 1 );\r\n\r\n\tif ( this.autoClose ) {\r\n\r\n\t\tpoints.push( points[ 0 ] );\r\n\r\n\t}\r\n\r\n\treturn points;\r\n\r\n};\r\n\r\n//\r\n// Breaks path into shapes\r\n//\r\n//\tAssumptions (if parameter isCCW==true the opposite holds):\r\n//\t- solid shapes are defined clockwise (CW)\r\n//\t- holes are defined counterclockwise (CCW)\r\n//\r\n//\tIf parameter noHoles==true:\r\n//  - all subPaths are regarded as solid shapes\r\n//  - definition order CW/CCW has no relevance\r\n//\r\n\r\nTHREE.Path.prototype.toShapes = function( isCCW, noHoles ) {\r\n\r\n\tfunction extractSubpaths( inActions ) {\r\n\r\n\t\tvar subPaths = [], lastPath = new THREE.Path();\r\n\r\n\t\tfor ( var i = 0, l = inActions.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar item = inActions[ i ];\r\n\r\n\t\t\tvar args = item.args;\r\n\t\t\tvar action = item.action;\r\n\r\n\t\t\tif ( action === 'moveTo' ) {\r\n\r\n\t\t\t\tif ( lastPath.actions.length !== 0 ) {\r\n\r\n\t\t\t\t\tsubPaths.push( lastPath );\r\n\t\t\t\t\tlastPath = new THREE.Path();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlastPath[ action ].apply( lastPath, args );\r\n\r\n\t\t}\r\n\r\n\t\tif ( lastPath.actions.length !== 0 ) {\r\n\r\n\t\t\tsubPaths.push( lastPath );\r\n\r\n\t\t}\r\n\r\n\t\t// console.log(subPaths);\r\n\r\n\t\treturn\tsubPaths;\r\n\r\n\t}\r\n\r\n\tfunction toShapesNoHoles( inSubpaths ) {\r\n\r\n\t\tvar shapes = [];\r\n\r\n\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar tmpPath = inSubpaths[ i ];\r\n\r\n\t\t\tvar tmpShape = new THREE.Shape();\r\n\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\ttmpShape.curves = tmpPath.curves;\r\n\r\n\t\t\tshapes.push( tmpShape );\r\n\r\n\t\t}\r\n\r\n\t\t//console.log(\"shape\", shapes);\r\n\r\n\t\treturn shapes;\r\n\r\n\t}\r\n\r\n\tfunction isPointInsidePolygon( inPt, inPolygon ) {\r\n\r\n\t\tvar polyLen = inPolygon.length;\r\n\r\n\t\t// inPt on polygon contour => immediate success    or\r\n\t\t// toggling of inside/outside at every single! intersection point of an edge\r\n\t\t//  with the horizontal line through inPt, left of inPt\r\n\t\t//  not counting lowerY endpoints of edges and whole edges on that line\r\n\t\tvar inside = false;\r\n\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\r\n\r\n\t\t\tvar edgeLowPt  = inPolygon[ p ];\r\n\t\t\tvar edgeHighPt = inPolygon[ q ];\r\n\r\n\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\r\n\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\r\n\r\n\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t// not parallel\r\n\t\t\t\tif ( edgeDy < 0 ) {\r\n\r\n\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\r\n\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\r\n\r\n\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\r\n\r\n\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\r\n\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\r\n\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// parallel or collinear\r\n\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\r\n\t\t\t\t// edge lies on the same horizontal line as inPt\r\n\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\r\n\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\r\n\t\t\t\t// continue;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn\tinside;\r\n\r\n\t}\r\n\r\n\tvar isClockWise = THREE.ShapeUtils.isClockWise;\r\n\r\n\tvar subPaths = extractSubpaths( this.actions );\r\n\tif ( subPaths.length === 0 ) return [];\r\n\r\n\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\r\n\r\n\r\n\tvar solid, tmpPath, tmpShape, shapes = [];\r\n\r\n\tif ( subPaths.length === 1 ) {\r\n\r\n\t\ttmpPath = subPaths[ 0 ];\r\n\t\ttmpShape = new THREE.Shape();\r\n\t\ttmpShape.actions = tmpPath.actions;\r\n\t\ttmpShape.curves = tmpPath.curves;\r\n\t\tshapes.push( tmpShape );\r\n\t\treturn shapes;\r\n\r\n\t}\r\n\r\n\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\r\n\tholesFirst = isCCW ? ! holesFirst : holesFirst;\r\n\r\n\t// console.log(\"Holes first\", holesFirst);\r\n\r\n\tvar betterShapeHoles = [];\r\n\tvar newShapes = [];\r\n\tvar newShapeHoles = [];\r\n\tvar mainIdx = 0;\r\n\tvar tmpPoints;\r\n\r\n\tnewShapes[ mainIdx ] = undefined;\r\n\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\r\n\r\n\t\ttmpPath = subPaths[ i ];\r\n\t\ttmpPoints = tmpPath.getPoints();\r\n\t\tsolid = isClockWise( tmpPoints );\r\n\t\tsolid = isCCW ? ! solid : solid;\r\n\r\n\t\tif ( solid ) {\r\n\r\n\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\r\n\r\n\t\t\tnewShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };\r\n\t\t\tnewShapes[ mainIdx ].s.actions = tmpPath.actions;\r\n\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\r\n\r\n\t\t\tif ( holesFirst )\tmainIdx ++;\r\n\t\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\t\t//console.log('cw', i);\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\r\n\r\n\t\t\t//console.log('ccw', i);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// only Holes? -> probably all Shapes with wrong orientation\r\n\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\r\n\r\n\r\n\tif ( newShapes.length > 1 ) {\r\n\r\n\t\tvar ambiguous = false;\r\n\t\tvar toChange = [];\r\n\r\n\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\tbetterShapeHoles[ sIdx ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\tvar sho = newShapeHoles[ sIdx ];\r\n\r\n\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\r\n\r\n\t\t\t\tvar ho = sho[ hIdx ];\r\n\t\t\t\tvar hole_unassigned = true;\r\n\r\n\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\r\n\r\n\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\r\n\r\n\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\r\n\t\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\t\thole_unassigned = false;\r\n\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tambiguous = true;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\t// console.log(\"ambiguous: \", ambiguous);\r\n\t\tif ( toChange.length > 0 ) {\r\n\r\n\t\t\t// console.log(\"to change: \", toChange);\r\n\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar tmpHoles;\r\n\r\n\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\r\n\r\n\t\ttmpShape = newShapes[ i ].s;\r\n\t\tshapes.push( tmpShape );\r\n\t\ttmpHoles = newShapeHoles[ i ];\r\n\r\n\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\r\n\r\n\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//console.log(\"shape\", shapes);\r\n\r\n\treturn shapes;\r\n\r\n};\r\n\r\n// File:src/extras/core/Shape.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Defines a 2d shape plane using paths.\r\n **/\r\n\r\n// STEP 1 Create a path.\r\n// STEP 2 Turn path into shape.\r\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\r\n// STEP 3a - Extract points from each shape, turn to vertices\r\n// STEP 3b - Triangulate each shape, add faces.\r\n\r\nTHREE.Shape = function () {\r\n\r\n\tTHREE.Path.apply( this, arguments );\r\n\r\n\tthis.holes = [];\r\n\r\n};\r\n\r\nTHREE.Shape.prototype = Object.create( THREE.Path.prototype );\r\nTHREE.Shape.prototype.constructor = THREE.Shape;\r\n\r\n// Convenience method to return ExtrudeGeometry\r\n\r\nTHREE.Shape.prototype.extrude = function ( options ) {\r\n\r\n\treturn new THREE.ExtrudeGeometry( this, options );\r\n\r\n};\r\n\r\n// Convenience method to return ShapeGeometry\r\n\r\nTHREE.Shape.prototype.makeGeometry = function ( options ) {\r\n\r\n\treturn new THREE.ShapeGeometry( this, options );\r\n\r\n};\r\n\r\n// Get points of holes\r\n\r\nTHREE.Shape.prototype.getPointsHoles = function ( divisions ) {\r\n\r\n\tvar holesPts = [];\r\n\r\n\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\r\n\r\n\t}\r\n\r\n\treturn holesPts;\r\n\r\n};\r\n\r\n\r\n// Get points of shape and holes (keypoints based on segments parameter)\r\n\r\nTHREE.Shape.prototype.extractAllPoints = function ( divisions ) {\r\n\r\n\treturn {\r\n\r\n\t\tshape: this.getPoints( divisions ),\r\n\t\tholes: this.getPointsHoles( divisions )\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.Shape.prototype.extractPoints = function ( divisions ) {\r\n\r\n\treturn this.extractAllPoints( divisions );\r\n\r\n};\r\n\r\n// File:src/extras/curves/LineCurve.js\r\n\r\n/**************************************************************\r\n *\tLine\r\n **************************************************************/\r\n\r\nTHREE.LineCurve = function ( v1, v2 ) {\r\n\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\r\n};\r\n\r\nTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.LineCurve.prototype.constructor = THREE.LineCurve;\r\n\r\nTHREE.LineCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar point = this.v2.clone().sub( this.v1 );\r\n\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\treturn point;\r\n\r\n};\r\n\r\n// Line curve is linear, so we can overwrite default getPointAt\r\n\r\nTHREE.LineCurve.prototype.getPointAt = function ( u ) {\r\n\r\n\treturn this.getPoint( u );\r\n\r\n};\r\n\r\nTHREE.LineCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tangent = this.v2.clone().sub( this.v1 );\r\n\r\n\treturn tangent.normalize();\r\n\r\n};\r\n\r\n// File:src/extras/curves/QuadraticBezierCurve.js\r\n\r\n/**************************************************************\r\n *\tQuadratic Bezier curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\r\n\r\n\tthis.v0 = v0;\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\r\n};\r\n\r\nTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;\r\n\r\n\r\nTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar b2 = THREE.ShapeUtils.b2;\r\n\r\n\treturn new THREE.Vector2(\r\n\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\r\n\t);\r\n\r\n};\r\n\r\n\r\nTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;\r\n\r\n\treturn new THREE.Vector2(\r\n\t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\r\n\t).normalize();\r\n\r\n};\r\n\r\n// File:src/extras/curves/CubicBezierCurve.js\r\n\r\n/**************************************************************\r\n *\tCubic Bezier curve\r\n **************************************************************/\r\n\r\nTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\r\n\r\n\tthis.v0 = v0;\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\tthis.v3 = v3;\r\n\r\n};\r\n\r\nTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;\r\n\r\nTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar b3 = THREE.ShapeUtils.b3;\r\n\r\n\treturn new THREE.Vector2( \r\n\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\r\n\t);\r\n\r\n};\r\n\r\nTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;\r\n\r\n\treturn new THREE.Vector2( \r\n\t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\r\n\t).normalize();\r\n\r\n};\r\n\r\n// File:src/extras/curves/SplineCurve.js\r\n\r\n/**************************************************************\r\n *\tSpline curve\r\n **************************************************************/\r\n\r\nTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\r\n\r\n\tthis.points = ( points == undefined ) ? [] : points;\r\n\r\n};\r\n\r\nTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.SplineCurve.prototype.constructor = THREE.SplineCurve;\r\n\r\nTHREE.SplineCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar points = this.points;\r\n\tvar point = ( points.length - 1 ) * t;\r\n\r\n\tvar intPoint = Math.floor( point );\r\n\tvar weight = point - intPoint;\r\n\r\n\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\r\n\tvar point1 = points[ intPoint ];\r\n\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\r\n\tvar interpolate = THREE.CurveUtils.interpolate;\r\n\r\n\treturn new THREE.Vector2(\r\n\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\r\n\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/curves/EllipseCurve.js\r\n\r\n/**************************************************************\r\n *\tEllipse curve\r\n **************************************************************/\r\n\r\nTHREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\tthis.aX = aX;\r\n\tthis.aY = aY;\r\n\r\n\tthis.xRadius = xRadius;\r\n\tthis.yRadius = yRadius;\r\n\r\n\tthis.aStartAngle = aStartAngle;\r\n\tthis.aEndAngle = aEndAngle;\r\n\r\n\tthis.aClockwise = aClockwise;\r\n\t\r\n\tthis.aRotation = aRotation || 0;\r\n\r\n};\r\n\r\nTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;\r\n\r\nTHREE.EllipseCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\r\n\tif ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;\r\n\tif ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;\r\n\r\n\tvar angle;\r\n\r\n\tif ( this.aClockwise === true ) {\r\n\r\n\t\tangle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );\r\n\r\n\t} else {\r\n\r\n\t\tangle = this.aStartAngle + t * deltaAngle;\r\n\r\n\t}\r\n\t\r\n\tvar x = this.aX + this.xRadius * Math.cos( angle );\r\n\tvar y = this.aY + this.yRadius * Math.sin( angle );\r\n\r\n\tif ( this.aRotation !== 0 ) {\r\n\r\n\t\tvar cos = Math.cos( this.aRotation );\r\n\t\tvar sin = Math.sin( this.aRotation );\r\n\r\n\t\tvar tx = x, ty = y;\r\n\r\n\t\t// Rotate the point about the center of the ellipse.\r\n\t\tx = ( tx - this.aX ) * cos - ( ty - this.aY ) * sin + this.aX;\r\n\t\ty = ( tx - this.aX ) * sin + ( ty - this.aY ) * cos + this.aY;\r\n\r\n\t}\r\n\r\n\treturn new THREE.Vector2( x, y );\r\n\r\n};\r\n\r\n// File:src/extras/curves/ArcCurve.js\r\n\r\n/**************************************************************\r\n *\tArc curve\r\n **************************************************************/\r\n\r\nTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n};\r\n\r\nTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\r\nTHREE.ArcCurve.prototype.constructor = THREE.ArcCurve;\r\n\r\n// File:src/extras/curves/LineCurve3.js\r\n\r\n/**************************************************************\r\n *\tLine3D\r\n **************************************************************/\r\n\r\nTHREE.LineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v1, v2 ) {\r\n\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar vector = new THREE.Vector3();\r\n\r\n\t\tvector.subVectors( this.v2, this.v1 ); // diff\r\n\t\tvector.multiplyScalar( t );\r\n\t\tvector.add( this.v1 );\r\n\r\n\t\treturn vector;\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/QuadraticBezierCurve3.js\r\n\r\n/**************************************************************\r\n *\tQuadratic Bezier 3D curve\r\n **************************************************************/\r\n\r\nTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v0, v1, v2 ) {\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar b2 = THREE.ShapeUtils.b2;\t\t\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\r\n\t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\r\n\t\t);\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/CubicBezierCurve3.js\r\n\r\n/**************************************************************\r\n *\tCubic Bezier 3D curve\r\n **************************************************************/\r\n\r\nTHREE.CubicBezierCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v0, v1, v2, v3 ) {\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\t\tthis.v3 = v3;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar b3 = THREE.ShapeUtils.b3;\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\r\n\t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\r\n\t\t);\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/SplineCurve3.js\r\n\r\n/**************************************************************\r\n *\tSpline 3D curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.SplineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( points /* array of Vector3 */ ) {\r\n\r\n\t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\r\n\t\tthis.points = ( points == undefined ) ? [] : points;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar points = this.points;\r\n\t\tvar point = ( points.length - 1 ) * t;\r\n\r\n\t\tvar intPoint = Math.floor( point );\r\n\t\tvar weight = point - intPoint;\r\n\r\n\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\r\n\t\tvar point1 = points[ intPoint ];\r\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\r\n\t\tvar interpolate = THREE.CurveUtils.interpolate;\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\r\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\r\n\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\r\n\t\t);\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/CatmullRomCurve3.js\r\n\r\n/**\r\n * @author zz85 https://github.com/zz85\r\n *\r\n * Centripetal CatmullRom Curve - which is useful for avoiding\r\n * cusps and self-intersections in non-uniform catmull rom curves.\r\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n *\r\n * curve.type accepts centripetal(default), chordal and catmullrom\r\n * curve.tension is used for catmullrom which defaults to 0.5\r\n */\r\n\r\nTHREE.CatmullRomCurve3 = ( function() {\r\n\r\n\tvar\r\n\t\ttmp = new THREE.Vector3(),\r\n\t\tpx = new CubicPoly(),\r\n\t\tpy = new CubicPoly(),\r\n\t\tpz = new CubicPoly();\r\n\r\n\t/*\r\n\tBased on an optimized c++ solution in\r\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n\t - http://ideone.com/NoEbVM\r\n\r\n\tThis CubicPoly class could be used for reusing some variables and calculations,\r\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\r\n\twhich can be placed in CurveUtils.\r\n\t*/\r\n\r\n\tfunction CubicPoly() {\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Compute coefficients for a cubic polynomial\r\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n\t * such that\r\n\t *   p(0) = x0, p(1) = x1\r\n\t *  and\r\n\t *   p'(0) = t0, p'(1) = t1.\r\n\t */\r\n\tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\r\n\r\n\t\tthis.c0 = x0;\r\n\t\tthis.c1 = t0;\r\n\t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n\t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n\r\n\t};\r\n\r\n\tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\r\n\r\n\t\t// compute tangents when parameterized in [t1,t2]\r\n\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\r\n\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\r\n\r\n\t\t// rescale tangents for parametrization in [0,1]\r\n\t\tt1 *= dt1;\r\n\t\tt2 *= dt1;\r\n\r\n\t\t// initCubicPoly\r\n\t\tthis.init( x1, x2, t1, t2 );\r\n\r\n\t};\r\n\r\n\t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\r\n\tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\r\n\r\n\t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\r\n\r\n\t};\r\n\r\n\tCubicPoly.prototype.calc = function( t ) {\r\n\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t2 * t;\r\n\t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\r\n\r\n\t};\r\n\r\n\t// Subclass Three.js curve\r\n\treturn THREE.Curve.create(\r\n\r\n\t\tfunction ( p /* array of Vector3 */ ) {\r\n\r\n\t\t\tthis.points = p || [];\r\n\t\t\tthis.closed = false;\r\n\r\n\t\t},\r\n\r\n\t\tfunction ( t ) {\r\n\r\n\t\t\tvar points = this.points,\r\n\t\t\t\tpoint, intPoint, weight, l;\r\n\r\n\t\t\tl = points.length;\r\n\r\n\t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\r\n\r\n\t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\r\n\t\t\tintPoint = Math.floor( point );\r\n\t\t\tweight = point - intPoint;\r\n\r\n\t\t\tif ( this.closed ) {\r\n\r\n\t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\r\n\r\n\t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\r\n\r\n\t\t\t\tintPoint = l - 2;\r\n\t\t\t\tweight = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar p0, p1, p2, p3; // 4 points\r\n\r\n\t\t\tif ( this.closed || intPoint > 0 ) {\r\n\r\n\t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// extrapolate first point\r\n\t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\r\n\t\t\t\tp0 = tmp;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp1 = points[ intPoint % l ];\r\n\t\t\tp2 = points[ ( intPoint + 1 ) % l ];\r\n\r\n\t\t\tif ( this.closed || intPoint + 2 < l ) {\r\n\r\n\t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// extrapolate last point\r\n\t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\r\n\t\t\t\tp3 = tmp;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\r\n\r\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\r\n\t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\r\n\t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\r\n\t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\r\n\t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\r\n\r\n\t\t\t\t// safety check for repeated points\r\n\t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\r\n\t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\r\n\t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\r\n\r\n\t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\r\n\t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\r\n\t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\r\n\r\n\t\t\t} else if ( this.type === 'catmullrom' ) {\r\n\r\n\t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\r\n\t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\r\n\t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\r\n\t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar v = new THREE.Vector3(\r\n\t\t\t\tpx.calc( weight ),\r\n\t\t\t\tpy.calc( weight ),\r\n\t\t\t\tpz.calc( weight )\r\n\t\t\t);\r\n\r\n\t\t\treturn v;\r\n\r\n\t\t}\r\n\r\n\t);\r\n\r\n} )();\r\n\r\n// File:src/extras/curves/ClosedSplineCurve3.js\r\n\r\n/**************************************************************\r\n *\tClosed Spline 3D curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.ClosedSplineCurve3 = function ( points ) {\r\n\r\n\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\r\n\r\n\tTHREE.CatmullRomCurve3.call( this, points );\r\n\tthis.type = 'catmullrom';\r\n\tthis.closed = true;\r\n\r\n};\r\n\r\nTHREE.ClosedSplineCurve3.prototype = Object.create( THREE.CatmullRomCurve3.prototype );\r\n\r\n// File:src/extras/geometries/BoxGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\r\n */\r\n\r\nTHREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'BoxGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\tdepth: depth,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tdepthSegments: depthSegments\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;\r\n\r\nTHREE.CubeGeometry = THREE.BoxGeometry;\r\n\r\n// File:src/extras/geometries/BoxBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\nTHREE.BoxBufferGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'BoxBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\tdepth: depth,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tdepthSegments: depthSegments\r\n\t};\r\n\r\n\tvar scope = this;\r\n\r\n\t// segments\r\n\twidthSegments = Math.floor( widthSegments ) || 1;\r\n\theightSegments = Math.floor( heightSegments ) || 1;\r\n\tdepthSegments = Math.floor( depthSegments ) || 1;\r\n\r\n\t// these are used to calculate buffer length\r\n\tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\r\n\tvar indexCount = ( vertexCount / 4 ) * 6;\r\n\r\n\t// buffers\r\n\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\r\n\tvar vertices = new Float32Array( vertexCount * 3 );\r\n\tvar normals = new Float32Array( vertexCount * 3 );\r\n\tvar uvs = new Float32Array( vertexCount * 2 );\r\n\r\n\t// offset variables\r\n\tvar vertexBufferOffset = 0;\r\n\tvar uvBufferOffset = 0;\r\n\tvar indexBufferOffset = 0;\r\n\tvar numberOfVertices = 0;\r\n\r\n\t// group variables\r\n\tvar groupStart = 0;\r\n\r\n\t// build each side of the box geometry\r\n\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\r\n\tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\r\n\tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\r\n\tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\r\n\tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\r\n\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\r\n\r\n\t// build geometry\r\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n\t// helper functions\r\n\r\n\tfunction calculateVertexCount ( w, h, d ) {\r\n\r\n\t\tvar segments = 0;\r\n\r\n\t\t// calculate the amount of segments for each side\r\n\t\tsegments += w * h * 2; // xy\r\n\t\tsegments += w * d * 2; // xz\r\n\t\tsegments += d * h * 2; // zy\r\n\r\n\t\treturn segments * 4; // four vertices per segments\r\n\r\n\t}\r\n\r\n\tfunction buildPlane ( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\r\n\r\n\t\tvar segmentWidth\t= width / gridX;\r\n\t\tvar segmentHeight = height / gridY;\r\n\r\n\t\tvar widthHalf = width / 2;\r\n\t\tvar heightHalf = height / 2;\r\n\t\tvar depthHalf = depth / 2;\r\n\r\n\t\tvar gridX1 = gridX + 1;\r\n\t\tvar gridY1 = gridY + 1;\r\n\r\n\t\tvar vertexCounter = 0;\r\n\t\tvar groupCount = 0;\r\n\r\n\t\tvar vector = new THREE.Vector3();\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\tvar y = iy * segmentHeight - heightHalf;\r\n\r\n\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\tvar x = ix * segmentWidth - widthHalf;\r\n\r\n\t\t\t\t// set values to correct vector component\r\n\t\t\t\tvector[ u ] = x * udir;\r\n\t\t\t\tvector[ v ] = y * vdir;\r\n\t\t\t\tvector[ w ] = depthHalf;\r\n\r\n\t\t\t\t// now apply vector to vertex buffer\r\n\t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\r\n\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\r\n\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\r\n\r\n\t\t\t\t// set values to correct vector component\r\n\t\t\t\tvector[ u ] = 0;\r\n\t\t\t\tvector[ v ] = 0;\r\n\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\r\n\r\n\t\t\t\t// now apply vector to normal buffer\r\n\t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\r\n\t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\r\n\t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\r\n\r\n\t\t\t\t// uvs\r\n\t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\r\n\t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\r\n\r\n\t\t\t\t// update offsets and counters\r\n\t\t\t\tvertexBufferOffset += 3;\r\n\t\t\t\tuvBufferOffset += 2;\r\n\t\t\t\tvertexCounter += 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// 1. you need three indices to draw a single face\r\n\t\t// 2. a single segment consists of two faces\r\n\t\t// 3. so we need to generate six (2*3) indices per segment\r\n\r\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\t// indices\r\n\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\r\n\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\t// face one\r\n\t\t\t\tindices[ indexBufferOffset ] = a;\r\n\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\r\n\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\r\n\r\n\t\t\t\t// face two\r\n\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\r\n\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\r\n\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\r\n\r\n\t\t\t\t// update offsets and counters\r\n\t\t\t\tindexBufferOffset += 6;\r\n\t\t\t\tgroupCount += 6;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// add a group to the geometry. this will ensure multi material support\r\n\t\tscope.addGroup( groupStart, groupCount, materialIndex );\r\n\r\n\t\t// calculate new start value for groups\r\n\t\tgroupStart += groupCount;\r\n\r\n\t\t// update total number of vertices\r\n\t\tnumberOfVertices += vertexCounter;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.BoxBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.BoxBufferGeometry.prototype.constructor = THREE.BoxBufferGeometry;\r\n\r\n// File:src/extras/geometries/CircleGeometry.js\r\n\r\n/**\r\n * @author hughes\r\n */\r\n\r\nTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'CircleGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tsegments: segments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\r\n\r\n};\r\n\r\nTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;\r\n\r\n// File:src/extras/geometries/CircleBufferGeometry.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'CircleBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tsegments: segments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tradius = radius || 50;\r\n\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\r\n\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\tvar vertices = segments + 2;\r\n\r\n\tvar positions = new Float32Array( vertices * 3 );\r\n\tvar normals = new Float32Array( vertices * 3 );\r\n\tvar uvs = new Float32Array( vertices * 2 );\r\n\r\n\t// center data is already zero, but need to set a few extras\r\n\tnormals[ 2 ] = 1.0;\r\n\tuvs[ 0 ] = 0.5;\r\n\tuvs[ 1 ] = 0.5;\r\n\r\n\tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\r\n\r\n\t\tvar segment = thetaStart + s / segments * thetaLength;\r\n\r\n\t\tpositions[ i ] = radius * Math.cos( segment );\r\n\t\tpositions[ i + 1 ] = radius * Math.sin( segment );\r\n\r\n\t\tnormals[ i + 2 ] = 1; // normal z\r\n\r\n\t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\r\n\t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\r\n\r\n\t}\r\n\r\n\tvar indices = [];\r\n\r\n\tfor ( var i = 1; i <= segments; i ++ ) {\r\n\r\n\t\tindices.push( i, i + 1, 0 );\r\n\r\n\t}\r\n\r\n\tthis.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\r\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;\r\n\r\n// File:src/extras/geometries/CylinderBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\nTHREE.CylinderBufferGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'CylinderBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradiusTop: radiusTop,\r\n\t\tradiusBottom: radiusBottom,\r\n\t\theight: height,\r\n\t\tradialSegments: radialSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\topenEnded: openEnded,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\r\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\r\n\theight = height !== undefined ? height : 100;\r\n\r\n\tradialSegments = Math.floor( radialSegments )  || 8;\r\n\theightSegments = Math.floor( heightSegments ) || 1;\r\n\r\n\topenEnded = openEnded !== undefined ? openEnded : false;\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : 2 * Math.PI;\r\n\r\n\t// used to calculate buffer length\r\n\r\n\tvar vertexCount = calculateVertexCount();\r\n\tvar indexCount = calculateIndexCount();\r\n\r\n\t// buffers\r\n\r\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\r\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\t// helper variables\r\n\r\n\tvar index = 0, indexOffset = 0, indexArray = [], halfHeight = height / 2;\r\n\r\n\t// generate geometry\r\n\r\n\tgenerateTorso();\r\n\r\n\tif( openEnded === false ) {\r\n\r\n\t\tif( radiusTop > 0 ) {\r\n\r\n\t\t\tgenerateCap( true );\r\n\r\n\t\t}\r\n\r\n\t\tif( radiusBottom > 0 ) {\r\n\r\n\t\t\tgenerateCap( false );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\r\n\tthis.setIndex( indices );\r\n\tthis.addAttribute( 'position', vertices );\r\n\tthis.addAttribute( 'normal', normals );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n\t// helper functions\r\n\r\n\tfunction calculateVertexCount () {\r\n\r\n\t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\r\n\r\n\t\tif ( openEnded === false ) {\r\n\r\n\t\t\tcount += ( ( radialSegments + 1 ) * 2 ) + ( radialSegments * 2 );\r\n\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\r\n\t}\r\n\r\n\tfunction calculateIndexCount () {\r\n\r\n\t\tvar count = radialSegments * heightSegments * 2 * 3;\r\n\r\n\t\tif ( openEnded === false ) {\r\n\r\n\t\t\tcount += radialSegments * 2 * 3;\r\n\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\r\n\t}\r\n\r\n\tfunction generateTorso () {\r\n\r\n\t\tvar x, y;\r\n\t\tvar normal = new THREE.Vector3();\r\n\t\tvar vertex = new THREE.Vector3();\r\n\r\n\t\t// this will be used to calculate the normal\r\n\t\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\r\n\r\n\t\t\tvar indexRow = [];\r\n\r\n\t\t\tvar v = y / heightSegments;\r\n\r\n\t\t\t// calculate the radius of the current row\r\n\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\r\n\r\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\tvar u = x / radialSegments;\r\n\r\n\t\t\t\t// vertex\r\n\t\t\t\tvertex.x = radius * Math.sin( u * thetaLength + thetaStart );\r\n\t\t\t\tvertex.y = - v * height + halfHeight;\r\n\t\t\t\tvertex.z = radius * Math.cos( u * thetaLength + thetaStart );\r\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\t\t\t\tnormal.copy( vertex );\r\n\r\n\t\t\t\t// handle special case if radiusTop/radiusBottom is zero\r\n\t\t\t\tif( ( radiusTop === 0  && y === 0 ) || ( radiusBottom === 0  && y === heightSegments ) ) {\r\n\r\n\t\t\t\t\tnormal.x = Math.sin( u * thetaLength + thetaStart );\r\n\t\t\t\t\tnormal.z = Math.cos( u * thetaLength + thetaStart );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnormal.setY( Math.sqrt( normal.x * normal.x + normal.z * normal.z ) * tanTheta ).normalize();\r\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\t\t\t\tuvs.setXY( index, u, 1 - v );\r\n\r\n\t\t\t\t// save index of vertex in respective row\r\n\t\t\t\tindexRow.push( index );\r\n\r\n\t\t\t\t// increase index\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// now save vertices of the row in our index array\r\n\t\t\tindexArray.push( indexRow );\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\r\n\r\n\t\t\t\t// we use the index array to access the correct indices\r\n\t\t\t\tvar i1 = indexArray[ y ][ x ];\r\n\t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\r\n\t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\r\n\t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\r\n\r\n\t\t\t\t// face one\r\n\t\t\t\tindices.setX( indexOffset, i1 ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset++;\r\n\r\n\t\t\t\t// face two\r\n\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, i3 ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction generateCap ( top ) {\r\n\r\n\t\tvar x, centerIndexStart, centerIndexEnd;\r\n\t\tvar uv = new THREE.Vector2();\r\n\t\tvar vertex = new THREE.Vector3();\r\n\r\n\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\r\n\t\tvar sign = ( top === true ) ? 1 : - 1;\r\n\r\n\t\t// save the index of the first center vertex\r\n\t\tcenterIndexStart = index;\r\n\r\n\t\t// first we generate the center vertex data of the cap.\r\n\t\t// because the geometry needs one set of uvs per face,\r\n\t\t// we must generate a center vertex per face/segment\r\n\r\n\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\r\n\r\n\t\t\t// normal\r\n\t\t\tnormals.setXYZ( index, 0, sign, 0 );\r\n\r\n\t\t\t// uv\r\n\t\t\tif( top === true ) {\r\n\r\n\t\t\t\tuv.x = x / radialSegments;\r\n\t\t\t\tuv.y = 0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tuv.x = ( x - 1 ) / radialSegments;\r\n\t\t\t\tuv.y = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\r\n\t\t\t// increase index\r\n\t\t\tindex++;\r\n\r\n\t\t}\r\n\r\n\t\t// save the index of the last center vertex\r\n\t\tcenterIndexEnd = index;\r\n\r\n\t\t// now we generate the surrounding vertices, normals and uvs\r\n\r\n\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\tvar u = x / radialSegments;\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertex.x = radius * Math.sin( u * thetaLength + thetaStart );\r\n\t\t\tvertex.y = halfHeight * sign;\r\n\t\t\tvertex.z = radius * Math.cos( u * thetaLength + thetaStart );\r\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// normal\r\n\t\t\tnormals.setXYZ( index, 0, sign, 0 );\r\n\r\n\t\t\t// uv\r\n\t\t\tuvs.setXY( index, u, ( top === true ) ? 1 : 0 );\r\n\r\n\t\t\t// increase index\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\tvar c = centerIndexStart + x;\r\n\t\t\tvar i = centerIndexEnd + x;\r\n\r\n\t\t\tif( top === true ) {\r\n\r\n\t\t\t\t// face top\r\n\t\t\t\tindices.setX( indexOffset, i ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// face bottom\r\n\t\t\t\tindices.setX( indexOffset, i + 1); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, i ); indexOffset++;\r\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.CylinderBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.CylinderBufferGeometry.prototype.constructor = THREE.CylinderBufferGeometry;\r\n\r\n// File:src/extras/geometries/CylinderGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'CylinderGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradiusTop: radiusTop,\r\n\t\tradiusBottom: radiusBottom,\r\n\t\theight: height,\r\n\t\tradialSegments: radialSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\topenEnded: openEnded,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;\r\n\r\n// File:src/extras/geometries/EdgesGeometry.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.EdgesGeometry = function ( geometry, thresholdAngle ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\r\n\r\n\tvar thresholdDot = Math.cos( THREE.Math.degToRad( thresholdAngle ) );\r\n\r\n\tvar edge = [ 0, 0 ], hash = {};\r\n\r\n\tfunction sortFunction( a, b ) {\r\n\r\n\t\treturn a - b;\r\n\r\n\t}\r\n\r\n\tvar keys = [ 'a', 'b', 'c' ];\r\n\r\n\tvar geometry2;\r\n\r\n\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\tgeometry2 = new THREE.Geometry();\r\n\t\tgeometry2.fromBufferGeometry( geometry );\r\n\r\n\t} else {\r\n\r\n\t\tgeometry2 = geometry.clone();\r\n\r\n\t}\r\n\r\n\tgeometry2.mergeVertices();\r\n\tgeometry2.computeFaceNormals();\r\n\r\n\tvar vertices = geometry2.vertices;\r\n\tvar faces = geometry2.faces;\r\n\r\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\tvar face = faces[ i ];\r\n\r\n\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\tedge[ 0 ] = face[ keys[ j ] ];\r\n\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\tedge.sort( sortFunction );\r\n\r\n\t\t\tvar key = edge.toString();\r\n\r\n\t\t\tif ( hash[ key ] === undefined ) {\r\n\r\n\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\thash[ key ].face2 = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar coords = [];\r\n\r\n\tfor ( var key in hash ) {\r\n\r\n\t\tvar h = hash[ key ];\r\n\r\n\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\r\n\r\n\t\t\tvar vertex = vertices[ h.vert1 ];\r\n\t\t\tcoords.push( vertex.x );\r\n\t\t\tcoords.push( vertex.y );\r\n\t\t\tcoords.push( vertex.z );\r\n\r\n\t\t\tvertex = vertices[ h.vert2 ];\r\n\t\t\tcoords.push( vertex.x );\r\n\t\t\tcoords.push( vertex.y );\r\n\t\t\tcoords.push( vertex.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );\r\n\r\n};\r\n\r\nTHREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;\r\n\r\n// File:src/extras/geometries/ExtrudeGeometry.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n * Creates extruded geometry from a path shape.\r\n *\r\n * parameters = {\r\n *\r\n *  curveSegments: <int>, // number of points on the curves\r\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\r\n *  amount: <int>, // Depth to extrude the shape\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\r\n *  bevelSize: <float>, // how far from shape outline is bevel\r\n *  bevelSegments: <int>, // number of bevel layers\r\n *\r\n *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\r\n *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\r\n *\r\n *  uvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\r\n\r\nTHREE.ExtrudeGeometry = function ( shapes, options ) {\r\n\r\n\tif ( typeof( shapes ) === \"undefined\" ) {\r\n\r\n\t\tshapes = [];\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'ExtrudeGeometry';\r\n\r\n\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\r\n\r\n\tthis.addShapeList( shapes, options );\r\n\r\n\tthis.computeFaceNormals();\r\n\r\n\t// can't really use automatic vertex normals\r\n\t// as then front and back sides get smoothed too\r\n\t// should do separate smoothing just for sides\r\n\r\n\t//this.computeVertexNormals();\r\n\r\n\t//console.log( \"took\", ( Date.now() - startTime ) );\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;\r\n\r\nTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\r\n\tvar sl = shapes.length;\r\n\r\n\tfor ( var s = 0; s < sl; s ++ ) {\r\n\r\n\t\tvar shape = shapes[ s ];\r\n\t\tthis.addShape( shape, options );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\r\n\r\n\tvar amount = options.amount !== undefined ? options.amount : 100;\r\n\r\n\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\r\n\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\r\n\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n\r\n\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\r\n\r\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\r\n\tvar steps = options.steps !== undefined ? options.steps : 1;\r\n\r\n\tvar extrudePath = options.extrudePath;\r\n\tvar extrudePts, extrudeByPath = false;\r\n\r\n\t// Use default WorldUVGenerator if no UV generators are specified.\r\n\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\r\n\r\n\tvar splineTube, binormal, normal, position2;\r\n\tif ( extrudePath ) {\r\n\r\n\t\textrudePts = extrudePath.getSpacedPoints( steps );\r\n\r\n\t\textrudeByPath = true;\r\n\t\tbevelEnabled = false; // bevels not supported for path extrusion\r\n\r\n\t\t// SETUP TNB variables\r\n\r\n\t\t// Reuse TNB from TubeGeomtry for now.\r\n\t\t// TODO1 - have a .isClosed in spline?\r\n\r\n\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );\r\n\r\n\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\r\n\t\tbinormal = new THREE.Vector3();\r\n\t\tnormal = new THREE.Vector3();\r\n\t\tposition2 = new THREE.Vector3();\r\n\r\n\t}\r\n\r\n\t// Safeguards if bevels are not enabled\r\n\r\n\tif ( ! bevelEnabled ) {\r\n\r\n\t\tbevelSegments = 0;\r\n\t\tbevelThickness = 0;\r\n\t\tbevelSize = 0;\r\n\r\n\t}\r\n\r\n\t// Variables initialization\r\n\r\n\tvar ahole, h, hl; // looping of holes\r\n\tvar scope = this;\r\n\r\n\tvar shapesOffset = this.vertices.length;\r\n\r\n\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\tvar vertices = shapePoints.shape;\r\n\tvar holes = shapePoints.holes;\r\n\r\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\r\n\r\n\tif ( reverse ) {\r\n\r\n\t\tvertices = vertices.reverse();\r\n\r\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\r\n\t\t\tif ( THREE.ShapeUtils.isClockWise( ahole ) ) {\r\n\r\n\t\t\t\tholes[ h ] = ahole.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\r\n\r\n\t}\r\n\r\n\r\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\r\n\r\n\t/* Vertices */\r\n\r\n\tvar contour = vertices; // vertices has all points but contour has only points of circumference\r\n\r\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\tahole = holes[ h ];\r\n\r\n\t\tvertices = vertices.concat( ahole );\r\n\r\n\t}\r\n\r\n\r\n\tfunction scalePt2 ( pt, vec, size ) {\r\n\r\n\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\r\n\r\n\t\treturn vec.clone().multiplyScalar( size ).add( pt );\r\n\r\n\t}\r\n\r\n\tvar b, bs, t, z,\r\n\t\tvert, vlen = vertices.length,\r\n\t\tface, flen = faces.length;\r\n\r\n\r\n\t// Find directions for point movement\r\n\r\n\r\n\tfunction getBevelVec( inPt, inPrev, inNext ) {\r\n\r\n\t\t// computes for inPt the corresponding point inPt' on a new contour\r\n\t\t//   shifted by 1 unit (length of normalized vector) to the left\r\n\t\t// if we walk along contour clockwise, this new contour is outside the old one\r\n\t\t//\r\n\t\t// inPt' is the intersection of the two lines parallel to the two\r\n\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\r\n\r\n\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\r\n\r\n\t\t// good reading for geometry algorithms (here: line-line intersection)\r\n\t\t// http://geomalgorithms.com/a05-_intersect-1.html\r\n\r\n\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\r\n\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\r\n\r\n\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\r\n\r\n\t\t// check for collinear edges\r\n\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\r\n\r\n\t\t\t// not collinear\r\n\r\n\t\t\t// length of vectors for normalizing\r\n\r\n\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\r\n\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\r\n\r\n\t\t\t// shift adjacent points by unit vectors to the left\r\n\r\n\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\r\n\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\r\n\r\n\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\r\n\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\r\n\r\n\t\t\t// scaling factor for v_prev to intersection point\r\n\r\n\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\r\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\r\n\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\t// vector from inPt to intersection point\r\n\r\n\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\r\n\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\r\n\r\n\t\t\t// Don't normalize!, otherwise sharp corners become ugly\r\n\t\t\t//  but prevent crazy spikes\r\n\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\r\n\t\t\tif ( v_trans_lensq <= 2 ) {\r\n\r\n\t\t\t\treturn\tnew THREE.Vector2( v_trans_x, v_trans_y );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// handle special case of collinear edges\r\n\r\n\t\t\tvar direction_eq = false;\t\t// assumes: opposite\r\n\t\t\tif ( v_prev_x > Number.EPSILON ) {\r\n\r\n\t\t\t\tif ( v_next_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\r\n\r\n\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( direction_eq ) {\r\n\r\n\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\r\n\t\t\t\tv_trans_x = - v_prev_y;\r\n\t\t\t\tv_trans_y =  v_prev_x;\r\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\r\n\t\t\t\tv_trans_x = v_prev_x;\r\n\t\t\t\tv_trans_y = v_prev_y;\r\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn\tnew THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\r\n\r\n\t}\r\n\r\n\r\n\tvar contourMovements = [];\r\n\r\n\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\tif ( j === il ) j = 0;\r\n\t\tif ( k === il ) k = 0;\r\n\r\n\t\t//  (j)---(i)---(k)\r\n\t\t// console.log('i,j,k', i, j , k)\r\n\r\n\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\r\n\r\n\t}\r\n\r\n\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\r\n\r\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\tahole = holes[ h ];\r\n\r\n\t\toneHoleMovements = [];\r\n\r\n\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\tif ( j === il ) j = 0;\r\n\t\t\tif ( k === il ) k = 0;\r\n\r\n\t\t\t//  (j)---(i)---(k)\r\n\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\r\n\r\n\t\t}\r\n\r\n\t\tholesMovements.push( oneHoleMovements );\r\n\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\r\n\r\n\t}\r\n\r\n\r\n\t// Loop bevelSegments, 1 for the front, 1 for the back\r\n\r\n\tfor ( b = 0; b < bevelSegments; b ++ ) {\r\n\r\n\t\t//for ( b = bevelSegments; b > 0; b -- ) {\r\n\r\n\t\tt = b / bevelSegments;\r\n\t\tz = bevelThickness * ( 1 - t );\r\n\r\n\t\t//z = bevelThickness * t;\r\n\t\tbs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved\r\n\t\t//bs = bevelSize * t; // linear\r\n\r\n\t\t// contract shape\r\n\r\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\r\n\t\t\tv( vert.x, vert.y,  - z );\r\n\r\n\t\t}\r\n\r\n\t\t// expand holes\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\tv( vert.x, vert.y,  - z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tbs = bevelSize;\r\n\r\n\t// Back facing vertices\r\n\r\n\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\tv( vert.x, vert.y, 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n\r\n\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\r\n\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\r\n\r\n\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Add stepped vertices...\r\n\t// Including front facing vertices\r\n\r\n\tvar s;\r\n\r\n\tfor ( s = 1; s <= steps; s ++ ) {\r\n\r\n\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\tv( vert.x, vert.y, amount / steps * s );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n\r\n\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\r\n\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Add bevel segments planes\r\n\r\n\t//for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\r\n\r\n\t\tt = b / bevelSegments;\r\n\t\tz = bevelThickness * ( 1 - t );\r\n\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\r\n\t\tbs = bevelSize * Math.sin ( t * Math.PI / 2 );\r\n\r\n\t\t// contract shape\r\n\r\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\tv( vert.x, vert.y,  amount + z );\r\n\r\n\t\t}\r\n\r\n\t\t// expand holes\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y,  amount + z );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* Faces */\r\n\r\n\t// Top and bottom faces\r\n\r\n\tbuildLidFaces();\r\n\r\n\t// Sides faces\r\n\r\n\tbuildSideFaces();\r\n\r\n\r\n\t/////  Internal functions\r\n\r\n\tfunction buildLidFaces() {\r\n\r\n\t\tif ( bevelEnabled ) {\r\n\r\n\t\t\tvar layer = 0; // steps + 1\r\n\t\t\tvar offset = vlen * layer;\r\n\r\n\t\t\t// Bottom faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlayer = steps + bevelSegments * 2;\r\n\t\t\toffset = vlen * layer;\r\n\r\n\t\t\t// Top faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Bottom faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Top faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Create faces for the z-sides of the shape\r\n\r\n\tfunction buildSideFaces() {\r\n\r\n\t\tvar layeroffset = 0;\r\n\t\tsidewalls( contour, layeroffset );\r\n\t\tlayeroffset += contour.length;\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\tsidewalls( ahole, layeroffset );\r\n\r\n\t\t\t//, true\r\n\t\t\tlayeroffset += ahole.length;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction sidewalls( contour, layeroffset ) {\r\n\r\n\t\tvar j, k;\r\n\t\ti = contour.length;\r\n\r\n\t\twhile ( -- i >= 0 ) {\r\n\r\n\t\t\tj = i;\r\n\t\t\tk = i - 1;\r\n\t\t\tif ( k < 0 ) k = contour.length - 1;\r\n\r\n\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\r\n\r\n\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\r\n\r\n\t\t\tfor ( s = 0; s < sl; s ++ ) {\r\n\r\n\t\t\t\tvar slen1 = vlen * s;\r\n\t\t\t\tvar slen2 = vlen * ( s + 1 );\r\n\r\n\t\t\t\tvar a = layeroffset + j + slen1,\r\n\t\t\t\t\tb = layeroffset + k + slen1,\r\n\t\t\t\t\tc = layeroffset + k + slen2,\r\n\t\t\t\t\td = layeroffset + j + slen2;\r\n\r\n\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tfunction v( x, y, z ) {\r\n\r\n\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\r\n\r\n\t}\r\n\r\n\tfunction f3( a, b, c ) {\r\n\r\n\t\ta += shapesOffset;\r\n\t\tb += shapesOffset;\r\n\t\tc += shapesOffset;\r\n\r\n\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );\r\n\r\n\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\r\n\r\n\t\tscope.faceVertexUvs[ 0 ].push( uvs );\r\n\r\n\t}\r\n\r\n\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\r\n\r\n\t\ta += shapesOffset;\r\n\t\tb += shapesOffset;\r\n\t\tc += shapesOffset;\r\n\t\td += shapesOffset;\r\n\r\n\t\tscope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );\r\n\t\tscope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );\r\n\r\n\t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\r\n\r\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\r\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.WorldUVGenerator = {\r\n\r\n\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\r\n\r\n\t\tvar vertices = geometry.vertices;\r\n\r\n\t\tvar a = vertices[ indexA ];\r\n\t\tvar b = vertices[ indexB ];\r\n\t\tvar c = vertices[ indexC ];\r\n\r\n\t\treturn [\r\n\t\t\tnew THREE.Vector2( a.x, a.y ),\r\n\t\t\tnew THREE.Vector2( b.x, b.y ),\r\n\t\t\tnew THREE.Vector2( c.x, c.y )\r\n\t\t];\r\n\r\n\t},\r\n\r\n\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\r\n\r\n\t\tvar vertices = geometry.vertices;\r\n\r\n\t\tvar a = vertices[ indexA ];\r\n\t\tvar b = vertices[ indexB ];\r\n\t\tvar c = vertices[ indexC ];\r\n\t\tvar d = vertices[ indexD ];\r\n\r\n\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( a.x, 1 - a.z ),\r\n\t\t\t\tnew THREE.Vector2( b.x, 1 - b.z ),\r\n\t\t\t\tnew THREE.Vector2( c.x, 1 - c.z ),\r\n\t\t\t\tnew THREE.Vector2( d.x, 1 - d.z )\r\n\t\t\t];\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( a.y, 1 - a.z ),\r\n\t\t\t\tnew THREE.Vector2( b.y, 1 - b.z ),\r\n\t\t\t\tnew THREE.Vector2( c.y, 1 - c.z ),\r\n\t\t\t\tnew THREE.Vector2( d.y, 1 - d.z )\r\n\t\t\t];\r\n\r\n\t\t}\r\n\r\n\t}\r\n};\r\n\r\n// File:src/extras/geometries/ShapeGeometry.js\r\n\r\n/**\r\n * @author jonobr1 / http://jonobr1.com\r\n *\r\n * Creates a one-sided polygonal geometry from a path shape. Similar to\r\n * ExtrudeGeometry.\r\n *\r\n * parameters = {\r\n *\r\n *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\r\n *\r\n *\tmaterial: <int> // material index for front and back faces\r\n *\tuvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\r\n\r\nTHREE.ShapeGeometry = function ( shapes, options ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'ShapeGeometry';\r\n\r\n\tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\r\n\r\n\tthis.addShapeList( shapes, options );\r\n\r\n\tthis.computeFaceNormals();\r\n\r\n};\r\n\r\nTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;\r\n\r\n/**\r\n * Add an array of shapes to THREE.ShapeGeometry.\r\n */\r\nTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\r\n\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\tthis.addShape( shapes[ i ], options );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n/**\r\n * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\r\n */\r\nTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\r\n\r\n\tif ( options === undefined ) options = {};\r\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\r\n\tvar material = options.material;\r\n\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\r\n\r\n\t//\r\n\r\n\tvar i, l, hole;\r\n\r\n\tvar shapesOffset = this.vertices.length;\r\n\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\tvar vertices = shapePoints.shape;\r\n\tvar holes = shapePoints.holes;\r\n\r\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\r\n\r\n\tif ( reverse ) {\r\n\r\n\t\tvertices = vertices.reverse();\r\n\r\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\r\n\r\n\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\r\n\r\n\t\t\thole = holes[ i ];\r\n\r\n\t\t\tif ( THREE.ShapeUtils.isClockWise( hole ) ) {\r\n\r\n\t\t\t\tholes[ i ] = hole.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treverse = false;\r\n\r\n\t}\r\n\r\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\r\n\r\n\t// Vertices\r\n\r\n\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\r\n\r\n\t\thole = holes[ i ];\r\n\t\tvertices = vertices.concat( hole );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar vert, vlen = vertices.length;\r\n\tvar face, flen = faces.length;\r\n\r\n\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\tvert = vertices[ i ];\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\r\n\r\n\t}\r\n\r\n\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\tface = faces[ i ];\r\n\r\n\t\tvar a = face[ 0 ] + shapesOffset;\r\n\t\tvar b = face[ 1 ] + shapesOffset;\r\n\t\tvar c = face[ 2 ] + shapesOffset;\r\n\r\n\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\r\n\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/geometries/LatheBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\n // points - to create a closed torus, one must use a set of points\r\n //    like so: [ a, b, c, d, a ], see first is the same as last.\r\n // segments - the number of circumference segments to create\r\n // phiStart - the starting radian\r\n // phiLength - the radian (0 to 2PI) range of the lathed section\r\n //    2PI is a closed lathe, less than 2PI is a portion.\r\n\r\nTHREE.LatheBufferGeometry = function ( points, segments, phiStart, phiLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'LatheBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tpoints: points,\r\n\t\tsegments: segments,\r\n\t\tphiStart: phiStart,\r\n\t\tphiLength: phiLength\r\n\t};\r\n\r\n\tsegments = Math.floor( segments ) || 12;\r\n\tphiStart = phiStart || 0;\r\n\tphiLength = phiLength || Math.PI * 2;\r\n\r\n\t// clamp phiLength so it's in range of [ 0, 2PI ]\r\n\tphiLength = THREE.Math.clamp( phiLength, 0, Math.PI * 2 );\r\n\r\n\t// these are used to calculate buffer length\r\n\tvar vertexCount = ( segments + 1 ) * points.length;\r\n\tvar indexCount = segments * points.length * 2 * 3;\r\n\r\n\t// buffers\r\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\r\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\t// helper variables\r\n\tvar index = 0, indexOffset = 0, base;\r\n\tvar inversePointLength = 1.0 / ( points.length - 1 );\r\n\tvar inverseSegments = 1.0 / segments;\r\n\tvar vertex = new THREE.Vector3();\r\n\tvar uv = new THREE.Vector2();\r\n\tvar i, j;\r\n\r\n\t// generate vertices and uvs\r\n\r\n\tfor ( i = 0; i <= segments; i ++ ) {\r\n\r\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\r\n\r\n\t\tvar sin = Math.sin( phi );\r\n\t\tvar cos = Math.cos( phi );\r\n\r\n\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertex.x = points[ j ].x * sin;\r\n\t\t\tvertex.y = points[ j ].y;\r\n\t\t\tvertex.z = points[ j ].x * cos;\r\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// uv\r\n\t\t\tuv.x = i / segments;\r\n\t\t\tuv.y = j / ( points.length - 1 );\r\n\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\r\n\t\t\t// increase index\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// generate indices\r\n\r\n\tfor ( i = 0; i < segments; i ++ ) {\r\n\r\n\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\tbase = j + i * points.length;\r\n\r\n\t\t\t// indices\r\n\t\t\tvar a = base;\r\n\t\t\tvar b = base + points.length;\r\n\t\t\tvar c = base + points.length + 1;\r\n\t\t\tvar d = base + 1;\r\n\r\n\t\t\t// face one\r\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\r\n\t\t\t// face two\r\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\r\n\tthis.setIndex( indices );\r\n\tthis.addAttribute( 'position', vertices );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n\t// generate normals\r\n\r\n\tthis.computeVertexNormals();\r\n\r\n\t// if the geometry is closed, we need to average the normals along the seam.\r\n\t// because the corresponding vertices are identical (but still have different UVs).\r\n\r\n\tif( phiLength === Math.PI * 2 ) {\r\n\r\n\t\tvar normals = this.attributes.normal.array;\r\n\t\tvar n1 = new THREE.Vector3();\r\n\t\tvar n2 = new THREE.Vector3();\r\n\t\tvar n = new THREE.Vector3();\r\n\r\n\t\t// this is the buffer offset for the last line of vertices\r\n\t\tbase = segments * points.length * 3;\r\n\r\n\t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\r\n\r\n\t\t\t// select the normal of the vertex in the first line\r\n\t\t\tn1.x = normals[ j + 0 ];\r\n\t\t\tn1.y = normals[ j + 1 ];\r\n\t\t\tn1.z = normals[ j + 2 ];\r\n\r\n\t\t\t// select the normal of the vertex in the last line\r\n\t\t\tn2.x = normals[ base + j + 0 ];\r\n\t\t\tn2.y = normals[ base + j + 1 ];\r\n\t\t\tn2.z = normals[ base + j + 2 ];\r\n\r\n\t\t\t// average normals\r\n\t\t\tn.addVectors( n1, n2 ).normalize();\r\n\r\n\t\t\t// assign the new values to both normals\r\n\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\r\n\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\r\n\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\r\n\r\n\t\t} // next row\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LatheBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.LatheBufferGeometry.prototype.constructor = THREE.LatheBufferGeometry;\r\n\r\n// File:src/extras/geometries/LatheGeometry.js\r\n\r\n/**\r\n * @author astrodud / http://astrodud.isgreat.org/\r\n * @author zz85 / https://github.com/zz85\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\n// points - to create a closed torus, one must use a set of points\r\n//    like so: [ a, b, c, d, a ], see first is the same as last.\r\n// segments - the number of circumference segments to create\r\n// phiStart - the starting radian\r\n// phiLength - the radian (0 to 2PI) range of the lathed section\r\n//    2PI is a closed lathe, less than 2PI is a portion.\r\n\r\nTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'LatheGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tpoints: points,\r\n\t\tsegments: segments,\r\n\t\tphiStart: phiStart,\r\n\t\tphiLength: phiLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.LatheBufferGeometry( points, segments, phiStart, phiLength ) );\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;\r\n\r\n// File:src/extras/geometries/PlaneGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n */\r\n\r\nTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'PlaneGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\r\n\r\n};\r\n\r\nTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;\r\n\r\n// File:src/extras/geometries/PlaneBufferGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n */\r\n\r\nTHREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'PlaneBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments\r\n\t};\r\n\r\n\tvar width_half = width / 2;\r\n\tvar height_half = height / 2;\r\n\r\n\tvar gridX = Math.floor( widthSegments ) || 1;\r\n\tvar gridY = Math.floor( heightSegments ) || 1;\r\n\r\n\tvar gridX1 = gridX + 1;\r\n\tvar gridY1 = gridY + 1;\r\n\r\n\tvar segment_width = width / gridX;\r\n\tvar segment_height = height / gridY;\r\n\r\n\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\r\n\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\r\n\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\r\n\r\n\tvar offset = 0;\r\n\tvar offset2 = 0;\r\n\r\n\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\tvar y = iy * segment_height - height_half;\r\n\r\n\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\tvar x = ix * segment_width - width_half;\r\n\r\n\t\t\tvertices[ offset ] = x;\r\n\t\t\tvertices[ offset + 1 ] = - y;\r\n\r\n\t\t\tnormals[ offset + 2 ] = 1;\r\n\r\n\t\t\tuvs[ offset2 ] = ix / gridX;\r\n\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\r\n\r\n\t\t\toffset += 3;\r\n\t\t\toffset2 += 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\toffset = 0;\r\n\r\n\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\r\n\r\n\tfor ( var iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\tvar a = ix + gridX1 * iy;\r\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\r\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\tindices[ offset ] = a;\r\n\t\t\tindices[ offset + 1 ] = b;\r\n\t\t\tindices[ offset + 2 ] = d;\r\n\r\n\t\t\tindices[ offset + 3 ] = b;\r\n\t\t\tindices[ offset + 4 ] = c;\r\n\t\t\tindices[ offset + 5 ] = d;\r\n\r\n\t\t\toffset += 6;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n};\r\n\r\nTHREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;\r\n\r\n// File:src/extras/geometries/RingBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\nTHREE.RingBufferGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'RingBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tinnerRadius: innerRadius,\r\n\t\touterRadius: outerRadius,\r\n\t\tthetaSegments: thetaSegments,\r\n\t\tphiSegments: phiSegments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tinnerRadius = innerRadius || 20;\r\n\touterRadius = outerRadius || 50;\r\n\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\r\n\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\r\n\r\n\t// these are used to calculate buffer length\r\n\tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\r\n\tvar indexCount = thetaSegments * phiSegments * 2 * 3;\r\n\r\n\t// buffers\r\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\r\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\t// some helper variables\r\n\tvar index = 0, indexOffset = 0, segment;\r\n\tvar radius = innerRadius;\r\n\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\r\n\tvar vertex = new THREE.Vector3();\r\n\tvar uv = new THREE.Vector2();\r\n\tvar j, i;\r\n\r\n\t// generate vertices, normals and uvs\r\n\r\n\t// values are generate from the inside of the ring to the outside\r\n\r\n\tfor ( j = 0; j <= phiSegments; j ++ ) {\r\n\r\n\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\r\n\r\n\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\tvertex.y = radius * Math.sin( segment );\r\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// normal\r\n\t\t\tnormals.setXYZ( index, 0, 0, 1 );\r\n\r\n\t\t\t// uv\r\n\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\r\n\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\r\n\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\r\n\t\t\t// increase index\r\n\t\t\tindex++;\r\n\r\n\t\t}\r\n\r\n\t\t// increase the radius for next row of vertices\r\n\t\tradius += radiusStep;\r\n\r\n\t}\r\n\r\n\t// generate indices\r\n\r\n\tfor ( j = 0; j < phiSegments; j ++ ) {\r\n\r\n\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\r\n\r\n\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\r\n\r\n\t\t\tsegment = i + thetaSegmentLevel;\r\n\r\n\t\t\t// indices\r\n\t\t\tvar a = segment;\r\n\t\t\tvar b = segment + thetaSegments + 1;\r\n\t\t\tvar c = segment + thetaSegments + 2;\r\n\t\t\tvar d = segment + 1;\r\n\r\n\t\t\t// face one\r\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\r\n\t\t\t// face two\r\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\r\n\tthis.setIndex( indices );\r\n\tthis.addAttribute( 'position', vertices );\r\n\tthis.addAttribute( 'normal', normals );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n};\r\n\r\nTHREE.RingBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.RingBufferGeometry.prototype.constructor = THREE.RingBufferGeometry;\r\n\r\n// File:src/extras/geometries/RingGeometry.js\r\n\r\n/**\r\n * @author Kaleb Murphy\r\n */\r\n\r\nTHREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'RingGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tinnerRadius: innerRadius,\r\n\t\touterRadius: outerRadius,\r\n\t\tthetaSegments: thetaSegments,\r\n\t\tphiSegments: phiSegments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\r\n\r\n};\r\n\r\nTHREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.RingGeometry.prototype.constructor = THREE.RingGeometry;\r\n\r\n// File:src/extras/geometries/SphereGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'SphereGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tphiStart: phiStart,\r\n\t\tphiLength: phiLength,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\r\n\r\n};\r\n\r\nTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;\r\n\r\n// File:src/extras/geometries/SphereBufferGeometry.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n * based on THREE.SphereGeometry\r\n */\r\n\r\nTHREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'SphereBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tphiStart: phiStart,\r\n\t\tphiLength: phiLength,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tradius = radius || 50;\r\n\r\n\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\r\n\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\r\n\r\n\tphiStart = phiStart !== undefined ? phiStart : 0;\r\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\r\n\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\r\n\r\n\tvar thetaEnd = thetaStart + thetaLength;\r\n\r\n\tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\r\n\r\n\tvar positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\tvar index = 0, vertices = [], normal = new THREE.Vector3();\r\n\r\n\tfor ( var y = 0; y <= heightSegments; y ++ ) {\r\n\r\n\t\tvar verticesRow = [];\r\n\r\n\t\tvar v = y / heightSegments;\r\n\r\n\t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\r\n\r\n\t\t\tvar u = x / widthSegments;\r\n\r\n\t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\r\n\t\t\tnormal.set( px, py, pz ).normalize();\r\n\r\n\t\t\tpositions.setXYZ( index, px, py, pz );\r\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\t\t\tuvs.setXY( index, u, 1 - v );\r\n\r\n\t\t\tverticesRow.push( index );\r\n\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t\tvertices.push( verticesRow );\r\n\r\n\t}\r\n\r\n\tvar indices = [];\r\n\r\n\tfor ( var y = 0; y < heightSegments; y ++ ) {\r\n\r\n\t\tfor ( var x = 0; x < widthSegments; x ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\r\n\t\t\tvar v2 = vertices[ y ][ x ];\r\n\t\t\tvar v3 = vertices[ y + 1 ][ x ];\r\n\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\r\n\r\n\t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\r\n\t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );\r\n\tthis.addAttribute( 'position', positions );\r\n\tthis.addAttribute( 'normal', normals );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;\r\n\r\n// File:src/extras/geometries/TextGeometry.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Text = 3D Text\r\n *\r\n * parameters = {\r\n *  font: <THREE.Font>, // font\r\n *\r\n *  size: <float>, // size of the text\r\n *  height: <float>, // thickness to extrude text\r\n *  curveSegments: <int>, // number of points on the curves\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into text bevel goes\r\n *  bevelSize: <float> // how far from text outline is bevel\r\n * }\r\n */\r\n\r\nTHREE.TextGeometry = function ( text, parameters ) {\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar font = parameters.font;\r\n\r\n\tif ( font instanceof THREE.Font === false ) {\r\n\r\n\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\r\n\t\treturn new THREE.Geometry();\r\n\r\n\t}\r\n\r\n\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\r\n\r\n\t// translate parameters to ExtrudeGeometry API\r\n\r\n\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\r\n\r\n\t// defaults\r\n\r\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\r\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\r\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\r\n\r\n\tTHREE.ExtrudeGeometry.call( this, shapes, parameters );\r\n\r\n\tthis.type = 'TextGeometry';\r\n\r\n};\r\n\r\nTHREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );\r\nTHREE.TextGeometry.prototype.constructor = THREE.TextGeometry;\r\n\r\n// File:src/extras/geometries/TorusBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\nTHREE.TorusBufferGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'TorusBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\ttube: tube,\r\n\t\tradialSegments: radialSegments,\r\n\t\ttubularSegments: tubularSegments,\r\n\t\tarc: arc\r\n\t};\r\n\r\n\tradius = radius || 100;\r\n\ttube = tube || 40;\r\n\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\ttubularSegments = Math.floor( tubularSegments ) || 6;\r\n\tarc = arc || Math.PI * 2;\r\n\r\n\t// used to calculate buffer length\r\n\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\r\n\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\r\n\r\n\t// buffers\r\n\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\r\n\tvar vertices = new Float32Array( vertexCount * 3 );\r\n\tvar normals = new Float32Array( vertexCount * 3 );\r\n\tvar uvs = new Float32Array( vertexCount * 2 );\r\n\r\n\t// offset variables\r\n\tvar vertexBufferOffset = 0;\r\n\tvar uvBufferOffset = 0;\r\n\tvar indexBufferOffset = 0;\r\n\r\n\t// helper variables\r\n\tvar center = new THREE.Vector3();\r\n\tvar vertex = new THREE.Vector3();\r\n\tvar normal = new THREE.Vector3();\r\n\r\n\tvar j, i;\r\n\r\n\t// generate vertices, normals and uvs\r\n\r\n\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\tvar u = i / tubularSegments * arc;\r\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\r\n\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\r\n\t\t\tvertex.z = tube * Math.sin( v );\r\n\r\n\t\t\tvertices[ vertexBufferOffset ] = vertex.x;\r\n\t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\r\n\t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\r\n\r\n\t\t\t// this vector is used to calculate the normal\r\n\t\t\tcenter.x = radius * Math.cos( u );\r\n\t\t\tcenter.y = radius * Math.sin( u );\r\n\r\n\t\t\t// normal\r\n\t\t\tnormal.subVectors( vertex, center ).normalize();\r\n\r\n\t\t\tnormals[ vertexBufferOffset ] = normal.x;\r\n\t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\r\n\t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\r\n\r\n\t\t\t// uv\r\n\t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\r\n\t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\r\n\r\n\t\t\t// update offsets\r\n\t\t\tvertexBufferOffset += 3;\r\n\t\t\tuvBufferOffset += 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// generate indices\r\n\r\n\tfor ( j = 1; j <= radialSegments; j ++ ) {\r\n\r\n\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t// indices\r\n\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\r\n\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\r\n\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\r\n\r\n\t\t\t// face one\r\n\t\t\tindices[ indexBufferOffset ] = a;\r\n\t\t\tindices[ indexBufferOffset + 1 ] = b;\r\n\t\t\tindices[ indexBufferOffset + 2 ] = d;\r\n\r\n\t\t\t// face two\r\n\t\t\tindices[ indexBufferOffset + 3 ] = b;\r\n\t\t\tindices[ indexBufferOffset + 4 ] = c;\r\n\t\t\tindices[ indexBufferOffset + 5 ] = d;\r\n\r\n\t\t\t// update offset\r\n\t\t\tindexBufferOffset += 6;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n};\r\n\r\nTHREE.TorusBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.TorusBufferGeometry.prototype.constructor = THREE.TorusBufferGeometry;\r\n\r\n// File:src/extras/geometries/TorusGeometry.js\r\n\r\n/**\r\n * @author oosmoxiecode\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\r\n */\r\n\r\nTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'TorusGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\ttube: tube,\r\n\t\tradialSegments: radialSegments,\r\n\t\ttubularSegments: tubularSegments,\r\n\t\tarc: arc\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\r\n\r\n};\r\n\r\nTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;\r\n\r\n// File:src/extras/geometries/TorusKnotBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n *\r\n * see: http://www.blackpawn.com/texts/pqtorus/\r\n */\r\nTHREE.TorusKnotBufferGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'TorusKnotBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\ttube: tube,\r\n\t\ttubularSegments: tubularSegments,\r\n\t\tradialSegments: radialSegments,\r\n\t\tp: p,\r\n\t\tq: q\r\n\t};\r\n\r\n\tradius = radius || 100;\r\n\ttube = tube || 40;\r\n\ttubularSegments = Math.floor( tubularSegments ) || 64;\r\n\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\tp = p || 2;\r\n\tq = q || 3;\r\n\r\n\t// used to calculate buffer length\r\n\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\r\n\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\r\n\r\n\t// buffers\r\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\r\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\t// helper variables\r\n\tvar i, j, index = 0, indexOffset = 0;\r\n\r\n\tvar vertex = new THREE.Vector3();\r\n\tvar normal = new THREE.Vector3();\r\n\tvar uv = new THREE.Vector2();\r\n\r\n\tvar P1 = new THREE.Vector3();\r\n\tvar P2 = new THREE.Vector3();\r\n\r\n\tvar B = new THREE.Vector3();\r\n\tvar T = new THREE.Vector3();\r\n\tvar N = new THREE.Vector3();\r\n\r\n\t// generate vertices, normals and uvs\r\n\r\n\tfor ( i = 0; i <= tubularSegments; ++ i ) {\r\n\r\n\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\r\n\r\n\t\tvar u = i / tubularSegments * p * Math.PI * 2;\r\n\r\n\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\r\n\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\r\n\r\n\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\r\n\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\r\n\r\n\t\t// calculate orthonormal basis\r\n\r\n\t\tT.subVectors( P2, P1 );\r\n\t\tN.addVectors( P2, P1 );\r\n\t\tB.crossVectors( T, N );\r\n\t\tN.crossVectors( B, T );\r\n\r\n\t\t// normalize B, N. T can be ignored, we don't use it\r\n\r\n\t\tB.normalize();\r\n\t\tN.normalize();\r\n\r\n\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\r\n\r\n\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\r\n\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\r\n\r\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\t\t\tvar cx = - tube * Math.cos( v );\r\n\t\t\tvar cy = tube * Math.sin( v );\r\n\r\n\t\t\t// now calculate the final vertex position.\r\n\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\r\n\r\n\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\r\n\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\r\n\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\r\n\t\t\tnormal.subVectors( vertex, P1 ).normalize();\r\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\r\n\t\t\t// uv\r\n\t\t\tuv.x = i / tubularSegments;\r\n\t\t\tuv.y = j / radialSegments;\r\n\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\r\n\t\t\t// increase index\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// generate indices\r\n\r\n\tfor ( j = 1; j <= tubularSegments; j ++ ) {\r\n\r\n\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\r\n\r\n\t\t\t// indices\r\n\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\r\n\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\r\n\t\t\tvar c = ( radialSegments + 1 ) * j + i;\r\n\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\r\n\r\n\t\t\t// face one\r\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\r\n\t\t\t// face two\r\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\r\n\tthis.setIndex( indices );\r\n\tthis.addAttribute( 'position', vertices );\r\n\tthis.addAttribute( 'normal', normals );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n\t// this function calculates the current position on the torus curve\r\n\r\n\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\r\n\r\n\t\tvar cu = Math.cos( u );\r\n\t\tvar su = Math.sin( u );\r\n\t\tvar quOverP = q / p * u;\r\n\t\tvar cs = Math.cos( quOverP );\r\n\r\n\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\r\n\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\r\n\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.TorusKnotBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.TorusKnotBufferGeometry.prototype.constructor = THREE.TorusKnotBufferGeometry;\r\n\r\n// File:src/extras/geometries/TorusKnotGeometry.js\r\n\r\n/**\r\n * @author oosmoxiecode\r\n */\r\n\r\nTHREE.TorusKnotGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'TorusKnotGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\ttube: tube,\r\n\t\ttubularSegments: tubularSegments,\r\n\t\tradialSegments: radialSegments,\r\n\t\tp: p,\r\n\t\tq: q\r\n\t};\r\n\r\n\tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\r\n\r\n\tthis.fromBufferGeometry( new THREE.TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;\r\n\r\n// File:src/extras/geometries/TubeGeometry.js\r\n\r\n/**\r\n * @author WestLangley / https://github.com/WestLangley\r\n * @author zz85 / https://github.com/zz85\r\n * @author miningold / https://github.com/miningold\r\n * @author jonobr1 / https://github.com/jonobr1\r\n *\r\n * Modified from the TorusKnotGeometry by @oosmoxiecode\r\n *\r\n * Creates a tube which extrudes along a 3d spline\r\n *\r\n * Uses parallel transport frames as described in\r\n * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n */\r\n\r\nTHREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'TubeGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tpath: path,\r\n\t\tsegments: segments,\r\n\t\tradius: radius,\r\n\t\tradialSegments: radialSegments,\r\n\t\tclosed: closed,\r\n\t\ttaper: taper\r\n\t};\r\n\r\n\tsegments = segments || 64;\r\n\tradius = radius || 1;\r\n\tradialSegments = radialSegments || 8;\r\n\tclosed = closed || false;\r\n\ttaper = taper || THREE.TubeGeometry.NoTaper;\r\n\r\n\tvar grid = [];\r\n\r\n\tvar scope = this,\r\n\r\n\t\ttangent,\r\n\t\tnormal,\r\n\t\tbinormal,\r\n\r\n\t\tnumpoints = segments + 1,\r\n\r\n\t\tu, v, r,\r\n\r\n\t\tcx, cy,\r\n\t\tpos, pos2 = new THREE.Vector3(),\r\n\t\ti, j,\r\n\t\tip, jp,\r\n\t\ta, b, c, d,\r\n\t\tuva, uvb, uvc, uvd;\r\n\r\n\tvar frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),\r\n\t\ttangents = frames.tangents,\r\n\t\tnormals = frames.normals,\r\n\t\tbinormals = frames.binormals;\r\n\r\n\t// proxy internals\r\n\tthis.tangents = tangents;\r\n\tthis.normals = normals;\r\n\tthis.binormals = binormals;\r\n\r\n\tfunction vert( x, y, z ) {\r\n\r\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\r\n\r\n\t}\r\n\r\n\t// construct the grid\r\n\r\n\tfor ( i = 0; i < numpoints; i ++ ) {\r\n\r\n\t\tgrid[ i ] = [];\r\n\r\n\t\tu = i / ( numpoints - 1 );\r\n\r\n\t\tpos = path.getPointAt( u );\r\n\r\n\t\ttangent = tangents[ i ];\r\n\t\tnormal = normals[ i ];\r\n\t\tbinormal = binormals[ i ];\r\n\r\n\t\tr = radius * taper( u );\r\n\r\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\r\n\r\n\t\t\tv = j / radialSegments * 2 * Math.PI;\r\n\r\n\t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\r\n\t\t\tcy = r * Math.sin( v );\r\n\r\n\t\t\tpos2.copy( pos );\r\n\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\r\n\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\r\n\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\r\n\r\n\t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// construct the mesh\r\n\r\n\tfor ( i = 0; i < segments; i ++ ) {\r\n\r\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\r\n\r\n\t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\r\n\t\t\tjp = ( j + 1 ) % radialSegments;\r\n\r\n\t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\r\n\t\t\tb = grid[ ip ][ j ];\r\n\t\t\tc = grid[ ip ][ jp ];\r\n\t\t\td = grid[ i ][ jp ];\r\n\r\n\t\t\tuva = new THREE.Vector2( i / segments, j / radialSegments );\r\n\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );\r\n\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\r\n\t\t\tuvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;\r\n\r\nTHREE.TubeGeometry.NoTaper = function ( u ) {\r\n\r\n\treturn 1;\r\n\r\n};\r\n\r\nTHREE.TubeGeometry.SinusoidalTaper = function ( u ) {\r\n\r\n\treturn Math.sin( Math.PI * u );\r\n\r\n};\r\n\r\n// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\r\nTHREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\r\n\r\n\tvar\tnormal = new THREE.Vector3(),\r\n\r\n\t\ttangents = [],\r\n\t\tnormals = [],\r\n\t\tbinormals = [],\r\n\r\n\t\tvec = new THREE.Vector3(),\r\n\t\tmat = new THREE.Matrix4(),\r\n\r\n\t\tnumpoints = segments + 1,\r\n\t\ttheta,\r\n\t\tsmallest,\r\n\r\n\t\ttx, ty, tz,\r\n\t\ti, u;\r\n\r\n\r\n\t// expose internals\r\n\tthis.tangents = tangents;\r\n\tthis.normals = normals;\r\n\tthis.binormals = binormals;\r\n\r\n\t// compute the tangent vectors for each segment on the path\r\n\r\n\tfor ( i = 0; i < numpoints; i ++ ) {\r\n\r\n\t\tu = i / ( numpoints - 1 );\r\n\r\n\t\ttangents[ i ] = path.getTangentAt( u );\r\n\t\ttangents[ i ].normalize();\r\n\r\n\t}\r\n\r\n\tinitialNormal3();\r\n\r\n\t/*\r\n\tfunction initialNormal1(lastBinormal) {\r\n\t\t// fixed start binormal. Has dangers of 0 vectors\r\n\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\r\n\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\t}\r\n\r\n\tfunction initialNormal2() {\r\n\r\n\t\t// This uses the Frenet-Serret formula for deriving binormal\r\n\t\tvar t2 = path.getTangentAt( epsilon );\r\n\r\n\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\r\n\t}\r\n\t*/\r\n\r\n\tfunction initialNormal3() {\r\n\r\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\r\n\t\t// and in the direction of the smallest tangent xyz component\r\n\r\n\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\tsmallest = Number.MAX_VALUE;\r\n\t\ttx = Math.abs( tangents[ 0 ].x );\r\n\t\tty = Math.abs( tangents[ 0 ].y );\r\n\t\ttz = Math.abs( tangents[ 0 ].z );\r\n\r\n\t\tif ( tx <= smallest ) {\r\n\r\n\t\t\tsmallest = tx;\r\n\t\t\tnormal.set( 1, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ty <= smallest ) {\r\n\r\n\t\t\tsmallest = ty;\r\n\t\t\tnormal.set( 0, 1, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( tz <= smallest ) {\r\n\r\n\t\t\tnormal.set( 0, 0, 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\r\n\r\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\t}\r\n\r\n\r\n\t// compute the slowly-varying normal and binormal vectors for each segment on the path\r\n\r\n\tfor ( i = 1; i < numpoints; i ++ ) {\r\n\r\n\t\tnormals[ i ] = normals[ i - 1 ].clone();\r\n\r\n\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\r\n\r\n\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\r\n\r\n\t\tif ( vec.length() > Number.EPSILON ) {\r\n\r\n\t\t\tvec.normalize();\r\n\r\n\t\t\ttheta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\r\n\r\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\r\n\r\n\t\t}\r\n\r\n\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t}\r\n\r\n\r\n\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\r\n\tif ( closed ) {\r\n\r\n\t\ttheta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\r\n\t\ttheta /= ( numpoints - 1 );\r\n\r\n\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\r\n\r\n\t\t\ttheta = - theta;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 1; i < numpoints; i ++ ) {\r\n\r\n\t\t\t// twist a little...\r\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\r\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/geometries/PolyhedronGeometry.js\r\n\r\n/**\r\n * @author clockworkgeek / https://github.com/clockworkgeek\r\n * @author timothypratley / https://github.com/timothypratley\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'PolyhedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tvertices: vertices,\r\n\t\tindices: indices,\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n\tradius = radius || 1;\r\n\tdetail = detail || 0;\r\n\r\n\tvar that = this;\r\n\r\n\tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\r\n\r\n\t\tprepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\r\n\r\n\t}\r\n\r\n\tvar p = this.vertices;\r\n\r\n\tvar faces = [];\r\n\r\n\tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\r\n\r\n\t\tvar v1 = p[ indices[ i ] ];\r\n\t\tvar v2 = p[ indices[ i + 1 ] ];\r\n\t\tvar v3 = p[ indices[ i + 2 ] ];\r\n\r\n\t\tfaces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, j );\r\n\r\n\t}\r\n\r\n\tvar centroid = new THREE.Vector3();\r\n\r\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\tsubdivide( faces[ i ], detail );\r\n\r\n\t}\r\n\r\n\r\n\t// Handle case when face straddles the seam\r\n\r\n\tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\r\n\r\n\t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\tvar x0 = uvs[ 0 ].x;\r\n\t\tvar x1 = uvs[ 1 ].x;\r\n\t\tvar x2 = uvs[ 2 ].x;\r\n\r\n\t\tvar max = Math.max( x0, x1, x2 );\r\n\t\tvar min = Math.min( x0, x1, x2 );\r\n\r\n\t\tif ( max > 0.9 && min < 0.1 ) {\r\n\r\n\t\t\t// 0.9 is somewhat arbitrary\r\n\r\n\t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\r\n\t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\r\n\t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Apply radius\r\n\r\n\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\r\n\t\tthis.vertices[ i ].multiplyScalar( radius );\r\n\r\n\t}\r\n\r\n\r\n\t// Merge vertices\r\n\r\n\tthis.mergeVertices();\r\n\r\n\tthis.computeFaceNormals();\r\n\r\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n\r\n\t// Project vector onto sphere's surface\r\n\r\n\tfunction prepare( vector ) {\r\n\r\n\t\tvar vertex = vector.normalize().clone();\r\n\t\tvertex.index = that.vertices.push( vertex ) - 1;\r\n\r\n\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\r\n\r\n\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\r\n\t\tvar v = inclination( vector ) / Math.PI + 0.5;\r\n\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\r\n\r\n\t\treturn vertex;\r\n\r\n\t}\r\n\r\n\r\n\t// Approximate a curved face with recursively sub-divided triangles.\r\n\r\n\tfunction make( v1, v2, v3, materialIndex ) {\r\n\r\n\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, materialIndex );\r\n\t\tthat.faces.push( face );\r\n\r\n\t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\r\n\r\n\t\tvar azi = azimuth( centroid );\r\n\r\n\t\tthat.faceVertexUvs[ 0 ].push( [\r\n\t\t\tcorrectUV( v1.uv, v1, azi ),\r\n\t\t\tcorrectUV( v2.uv, v2, azi ),\r\n\t\t\tcorrectUV( v3.uv, v3, azi )\r\n\t\t] );\r\n\r\n\t}\r\n\r\n\r\n\t// Analytically subdivide a face to the required detail level.\r\n\r\n\tfunction subdivide( face, detail ) {\r\n\r\n\t\tvar cols = Math.pow( 2, detail );\r\n\t\tvar a = prepare( that.vertices[ face.a ] );\r\n\t\tvar b = prepare( that.vertices[ face.b ] );\r\n\t\tvar c = prepare( that.vertices[ face.c ] );\r\n\t\tvar v = [];\r\n\r\n\t\tvar materialIndex = face.materialIndex;\r\n\r\n\t\t// Construct all of the vertices for this subdivision.\r\n\r\n\t\tfor ( var i = 0 ; i <= cols; i ++ ) {\r\n\r\n\t\t\tv[ i ] = [];\r\n\r\n\t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\r\n\t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\r\n\t\t\tvar rows = cols - i;\r\n\r\n\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\r\n\r\n\t\t\t\tif ( j === 0 && i === cols ) {\r\n\r\n\t\t\t\t\tv[ i ][ j ] = aj;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Construct all of the faces.\r\n\r\n\t\tfor ( var i = 0; i < cols ; i ++ ) {\r\n\r\n\t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\r\n\r\n\t\t\t\tvar k = Math.floor( j / 2 );\r\n\r\n\t\t\t\tif ( j % 2 === 0 ) {\r\n\r\n\t\t\t\t\tmake(\r\n\t\t\t\t\t\tv[ i ][ k + 1 ],\r\n\t\t\t\t\t\tv[ i + 1 ][ k ],\r\n\t\t\t\t\t\tv[ i ][ k ],\r\n\t\t\t\t\t\tmaterialIndex\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmake(\r\n\t\t\t\t\t\tv[ i ][ k + 1 ],\r\n\t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\r\n\t\t\t\t\t\tv[ i + 1 ][ k ],\r\n\t\t\t\t\t\tmaterialIndex\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Angle around the Y axis, counter-clockwise when looking from above.\r\n\r\n\tfunction azimuth( vector ) {\r\n\r\n\t\treturn Math.atan2( vector.z, - vector.x );\r\n\r\n\t}\r\n\r\n\r\n\t// Angle above the XZ plane.\r\n\r\n\tfunction inclination( vector ) {\r\n\r\n\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\r\n\r\n\t}\r\n\r\n\r\n\t// Texture fixing helper. Spheres have some odd behaviours.\r\n\r\n\tfunction correctUV( uv, vector, azimuth ) {\r\n\r\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\r\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\r\n\t\treturn uv.clone();\r\n\r\n\t}\r\n\r\n\r\n};\r\n\r\nTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;\r\n\r\n// File:src/extras/geometries/DodecahedronGeometry.js\r\n\r\n/**\r\n * @author Abe Pazos / https://hamoid.com\r\n */\r\n\r\nTHREE.DodecahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\tvar r = 1 / t;\r\n\r\n\tvar vertices = [\r\n\r\n\t\t// (±1, ±1, ±1)\r\n\t\t- 1, - 1, - 1,    - 1, - 1,  1,\r\n\t\t- 1,  1, - 1,    - 1,  1,  1,\r\n\t\t 1, - 1, - 1,     1, - 1,  1,\r\n\t\t 1,  1, - 1,     1,  1,  1,\r\n\r\n\t\t// (0, ±1/φ, ±φ)\r\n\t\t 0, - r, - t,     0, - r,  t,\r\n\t\t 0,  r, - t,     0,  r,  t,\r\n\r\n\t\t// (±1/φ, ±φ, 0)\r\n\t\t- r, - t,  0,    - r,  t,  0,\r\n\t\t r, - t,  0,     r,  t,  0,\r\n\r\n\t\t// (±φ, 0, ±1/φ)\r\n\t\t- t,  0, - r,     t,  0, - r,\r\n\t\t- t,  0,  r,     t,  0,  r\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\r\n\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\r\n\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\r\n\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\r\n\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\r\n\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\r\n\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\r\n\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\r\n\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\r\n\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\r\n\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\r\n\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'DodecahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;\r\n\r\n// File:src/extras/geometries/IcosahedronGeometry.js\r\n\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.IcosahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\r\n\tvar vertices = [\r\n\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\r\n\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\r\n\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\r\n\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\r\n\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\r\n\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'IcosahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;\r\n\r\n// File:src/extras/geometries/OctahedronGeometry.js\r\n\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.OctahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar vertices = [\r\n\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'OctahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;\r\n\r\n// File:src/extras/geometries/TetrahedronGeometry.js\r\n\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.TetrahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar vertices = [\r\n\t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'TetrahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;\r\n\r\n// File:src/extras/geometries/ParametricGeometry.js\r\n\r\n/**\r\n * @author zz85 / https://github.com/zz85\r\n * Parametric Surfaces Geometry\r\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\r\n *\r\n * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\r\n *\r\n */\r\n\r\nTHREE.ParametricGeometry = function ( func, slices, stacks ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'ParametricGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tfunc: func,\r\n\t\tslices: slices,\r\n\t\tstacks: stacks\r\n\t};\r\n\r\n\tvar verts = this.vertices;\r\n\tvar faces = this.faces;\r\n\tvar uvs = this.faceVertexUvs[ 0 ];\r\n\r\n\tvar i, j, p;\r\n\tvar u, v;\r\n\r\n\tvar sliceCount = slices + 1;\r\n\r\n\tfor ( i = 0; i <= stacks; i ++ ) {\r\n\r\n\t\tv = i / stacks;\r\n\r\n\t\tfor ( j = 0; j <= slices; j ++ ) {\r\n\r\n\t\t\tu = j / slices;\r\n\r\n\t\t\tp = func( u, v );\r\n\t\t\tverts.push( p );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar a, b, c, d;\r\n\tvar uva, uvb, uvc, uvd;\r\n\r\n\tfor ( i = 0; i < stacks; i ++ ) {\r\n\r\n\t\tfor ( j = 0; j < slices; j ++ ) {\r\n\r\n\t\t\ta = i * sliceCount + j;\r\n\t\t\tb = i * sliceCount + j + 1;\r\n\t\t\tc = ( i + 1 ) * sliceCount + j + 1;\r\n\t\t\td = ( i + 1 ) * sliceCount + j;\r\n\r\n\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\r\n\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\r\n\t\t\tuvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\r\n\t\t\tuvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\r\n\r\n\t\t\tfaces.push( new THREE.Face3( a, b, d ) );\r\n\t\t\tuvs.push( [ uva, uvb, uvd ] );\r\n\r\n\t\t\tfaces.push( new THREE.Face3( b, c, d ) );\r\n\t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// console.log(this);\r\n\r\n\t// magic bullet\r\n\t// var diff = this.mergeVertices();\r\n\t// console.log('removed ', diff, ' vertices by merging');\r\n\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;\r\n\r\n// File:src/extras/geometries/WireframeGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.WireframeGeometry = function ( geometry ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tvar edge = [ 0, 0 ], hash = {};\r\n\r\n\tfunction sortFunction( a, b ) {\r\n\r\n\t\treturn a - b;\r\n\r\n\t}\r\n\r\n\tvar keys = [ 'a', 'b', 'c' ];\r\n\r\n\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\tvar vertices = geometry.vertices;\r\n\t\tvar faces = geometry.faces;\r\n\t\tvar numEdges = 0;\r\n\r\n\t\t// allocate maximal size\r\n\t\tvar edges = new Uint32Array( 6 * faces.length );\r\n\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\r\n\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\tedge.sort( sortFunction );\r\n\r\n\t\t\t\tvar key = edge.toString();\r\n\r\n\t\t\t\tif ( hash[ key ] === undefined ) {\r\n\r\n\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\r\n\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\r\n\t\t\t\t\thash[ key ] = true;\r\n\t\t\t\t\tnumEdges ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\r\n\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\r\n\r\n\t\t\tfor ( var j = 0; j < 2; j ++ ) {\r\n\r\n\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\r\n\r\n\t\t\t\tvar index = 6 * i + 3 * j;\r\n\t\t\t\tcoords[ index + 0 ] = vertex.x;\r\n\t\t\t\tcoords[ index + 1 ] = vertex.y;\r\n\t\t\t\tcoords[ index + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\r\n\t} else if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\t// Indexed BufferGeometry\r\n\r\n\t\t\tvar indices = geometry.index.array;\r\n\t\t\tvar vertices = geometry.attributes.position;\r\n\t\t\tvar groups = geometry.groups;\r\n\t\t\tvar numEdges = 0;\r\n\r\n\t\t\tif ( groups.length === 0 ) {\r\n\r\n\t\t\t\tgeometry.addGroup( 0, indices.length );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// allocate maximal size\r\n\t\t\tvar edges = new Uint32Array( 2 * indices.length );\r\n\r\n\t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\r\n\r\n\t\t\t\tvar group = groups[ o ];\r\n\r\n\t\t\t\tvar start = group.start;\r\n\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\r\n\t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\r\n\t\t\t\t\t\tedge.sort( sortFunction );\r\n\r\n\t\t\t\t\t\tvar key = edge.toString();\r\n\r\n\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\r\n\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\r\n\t\t\t\t\t\t\thash[ key ] = true;\r\n\t\t\t\t\t\t\tnumEdges ++;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\r\n\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\r\n\r\n\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\r\n\r\n\t\t\t\t\tvar index = 6 * i + 3 * j;\r\n\t\t\t\t\tvar index2 = edges[ 2 * i + j ];\r\n\r\n\t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\r\n\t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\r\n\t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// non-indexed BufferGeometry\r\n\r\n\t\t\tvar vertices = geometry.attributes.position.array;\r\n\t\t\tvar numEdges = vertices.length / 3;\r\n\t\t\tvar numTris = numEdges / 3;\r\n\r\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\r\n\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\r\n\r\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\tvar index = 18 * i + 6 * j;\r\n\r\n\t\t\t\t\tvar index1 = 9 * i + 3 * j;\r\n\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\r\n\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\r\n\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\r\n\r\n\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\r\n\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\r\n\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\r\n\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;\r\n\r\n// File:src/extras/helpers/AxisHelper.js\r\n\r\n/**\r\n * @author sroucheray / http://sroucheray.org/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AxisHelper = function ( size ) {\r\n\r\n\tsize = size || 1;\r\n\r\n\tvar vertices = new Float32Array( [\r\n\t\t0, 0, 0,  size, 0, 0,\r\n\t\t0, 0, 0,  0, size, 0,\r\n\t\t0, 0, 0,  0, 0, size\r\n\t] );\r\n\r\n\tvar colors = new Float32Array( [\r\n\t\t1, 0, 0,  1, 0.6, 0,\r\n\t\t0, 1, 0,  0.6, 1, 0,\r\n\t\t0, 0, 1,  0, 0.6, 1\r\n\t] );\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tgeometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n};\r\n\r\nTHREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.AxisHelper.prototype.constructor = THREE.AxisHelper;\r\n\r\n// File:src/extras/helpers/ArrowHelper.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author zz85 / http://github.com/zz85\r\n * @author bhouston / http://clara.io\r\n *\r\n * Creates an arrow for visualizing directions\r\n *\r\n * Parameters:\r\n *  dir - Vector3\r\n *  origin - Vector3\r\n *  length - Number\r\n *  color - color in hex value\r\n *  headLength - Number\r\n *  headWidth - Number\r\n */\r\n\r\nTHREE.ArrowHelper = ( function () {\r\n\r\n\tvar lineGeometry = new THREE.Geometry();\r\n\tlineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 1, 0 ) );\r\n\r\n\tvar coneGeometry = new THREE.CylinderGeometry( 0, 0.5, 1, 5, 1 );\r\n\tconeGeometry.translate( 0, - 0.5, 0 );\r\n\r\n\treturn function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tTHREE.Object3D.call( this );\r\n\r\n\t\tif ( color === undefined ) color = 0xffff00;\r\n\t\tif ( length === undefined ) length = 1;\r\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\r\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\r\n\r\n\t\tthis.position.copy( origin );\r\n\t\t\r\n\t\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );\r\n\t\tthis.line.matrixAutoUpdate = false;\r\n\t\tthis.add( this.line );\r\n\r\n\t\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );\r\n\t\tthis.cone.matrixAutoUpdate = false;\r\n\t\tthis.add( this.cone );\r\n\r\n\t\tthis.setDirection( dir );\r\n\t\tthis.setLength( length, headLength, headWidth );\r\n\r\n\t}\r\n\r\n}() );\r\n\r\nTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;\r\n\r\nTHREE.ArrowHelper.prototype.setDirection = ( function () {\r\n\r\n\tvar axis = new THREE.Vector3();\r\n\tvar radians;\r\n\r\n\treturn function setDirection( dir ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tif ( dir.y > 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\r\n\r\n\t\t} else if ( dir.y < - 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\r\n\r\n\t\t\tradians = Math.acos( dir.y );\r\n\r\n\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\r\n\r\n\tif ( headLength === undefined ) headLength = 0.2 * length;\r\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\r\n\r\n\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\r\n\tthis.line.updateMatrix();\r\n\r\n\tthis.cone.scale.set( headWidth, headLength, headWidth );\r\n\tthis.cone.position.y = length;\r\n\tthis.cone.updateMatrix();\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.prototype.setColor = function ( color ) {\r\n\r\n\tthis.line.material.color.set( color );\r\n\tthis.cone.material.color.set( color );\r\n\r\n};\r\n\r\n// File:src/extras/helpers/BoxHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BoxHelper = function ( object ) {\r\n\r\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\tvar positions = new Float32Array( 8 * 3 );\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ) );\r\n\r\n\tif ( object !== undefined ) {\r\n\r\n\t\tthis.update( object );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.BoxHelper.prototype.constructor = THREE.BoxHelper;\r\n\r\nTHREE.BoxHelper.prototype.update = ( function () {\r\n\r\n\tvar box = new THREE.Box3();\r\n\r\n\treturn function ( object ) {\r\n\r\n\t\tbox.setFromObject( object );\r\n\r\n\t\tif ( box.isEmpty() ) return;\r\n\r\n\t\tvar min = box.min;\r\n\t\tvar max = box.max;\r\n\r\n\t\t/*\r\n\t\t  5____4\r\n\t\t1/___0/|\r\n\t\t| 6__|_7\r\n\t\t2/___3/\r\n\r\n\t\t0: max.x, max.y, max.z\r\n\t\t1: min.x, max.y, max.z\r\n\t\t2: min.x, min.y, max.z\r\n\t\t3: max.x, min.y, max.z\r\n\t\t4: max.x, max.y, min.z\r\n\t\t5: min.x, max.y, min.z\r\n\t\t6: min.x, min.y, min.z\r\n\t\t7: max.x, min.y, min.z\r\n\t\t*/\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\t\tvar array = position.array;\r\n\r\n\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\r\n\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\r\n\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\r\n\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\r\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\r\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\r\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\r\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n// File:src/extras/helpers/BoundingBoxHelper.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\n// a helper to show the world-axis-aligned bounding box for an object\r\n\r\nTHREE.BoundingBoxHelper = function ( object, hex ) {\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0x888888;\r\n\r\n\tthis.object = object;\r\n\r\n\tthis.box = new THREE.Box3();\r\n\r\n\tTHREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );\r\n\r\n};\r\n\r\nTHREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );\r\nTHREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;\r\n\r\nTHREE.BoundingBoxHelper.prototype.update = function () {\r\n\r\n\tthis.box.setFromObject( this.object );\r\n\r\n\tthis.box.size( this.scale );\r\n\r\n\tthis.box.center( this.position );\r\n\r\n};\r\n\r\n// File:src/extras/helpers/CameraHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows frustum, line of sight and up of the camera\r\n *\t- suitable for fast updates\r\n * \t- based on frustum visualization in lightgl.js shadowmap example\r\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\r\n */\r\n\r\nTHREE.CameraHelper = function ( camera ) {\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\tvar material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\r\n\r\n\tvar pointMap = {};\r\n\r\n\t// colors\r\n\r\n\tvar hexFrustum = 0xffaa00;\r\n\tvar hexCone = 0xff0000;\r\n\tvar hexUp = 0x00aaff;\r\n\tvar hexTarget = 0xffffff;\r\n\tvar hexCross = 0x333333;\r\n\r\n\t// near\r\n\r\n\taddLine( \"n1\", \"n2\", hexFrustum );\r\n\taddLine( \"n2\", \"n4\", hexFrustum );\r\n\taddLine( \"n4\", \"n3\", hexFrustum );\r\n\taddLine( \"n3\", \"n1\", hexFrustum );\r\n\r\n\t// far\r\n\r\n\taddLine( \"f1\", \"f2\", hexFrustum );\r\n\taddLine( \"f2\", \"f4\", hexFrustum );\r\n\taddLine( \"f4\", \"f3\", hexFrustum );\r\n\taddLine( \"f3\", \"f1\", hexFrustum );\r\n\r\n\t// sides\r\n\r\n\taddLine( \"n1\", \"f1\", hexFrustum );\r\n\taddLine( \"n2\", \"f2\", hexFrustum );\r\n\taddLine( \"n3\", \"f3\", hexFrustum );\r\n\taddLine( \"n4\", \"f4\", hexFrustum );\r\n\r\n\t// cone\r\n\r\n\taddLine( \"p\", \"n1\", hexCone );\r\n\taddLine( \"p\", \"n2\", hexCone );\r\n\taddLine( \"p\", \"n3\", hexCone );\r\n\taddLine( \"p\", \"n4\", hexCone );\r\n\r\n\t// up\r\n\r\n\taddLine( \"u1\", \"u2\", hexUp );\r\n\taddLine( \"u2\", \"u3\", hexUp );\r\n\taddLine( \"u3\", \"u1\", hexUp );\r\n\r\n\t// target\r\n\r\n\taddLine( \"c\", \"t\", hexTarget );\r\n\taddLine( \"p\", \"c\", hexCross );\r\n\r\n\t// cross\r\n\r\n\taddLine( \"cn1\", \"cn2\", hexCross );\r\n\taddLine( \"cn3\", \"cn4\", hexCross );\r\n\r\n\taddLine( \"cf1\", \"cf2\", hexCross );\r\n\taddLine( \"cf3\", \"cf4\", hexCross );\r\n\r\n\tfunction addLine( a, b, hex ) {\r\n\r\n\t\taddPoint( a, hex );\r\n\t\taddPoint( b, hex );\r\n\r\n\t}\r\n\r\n\tfunction addPoint( id, hex ) {\r\n\r\n\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\tgeometry.colors.push( new THREE.Color( hex ) );\r\n\r\n\t\tif ( pointMap[ id ] === undefined ) {\r\n\r\n\t\t\tpointMap[ id ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\r\n\r\n\t}\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n\tthis.camera = camera;\r\n\tthis.camera.updateProjectionMatrix();\r\n\r\n\tthis.matrix = camera.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.pointMap = pointMap;\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.CameraHelper.prototype.constructor = THREE.CameraHelper;\r\n\r\nTHREE.CameraHelper.prototype.update = function () {\r\n\r\n\tvar geometry, pointMap;\r\n\r\n\tvar vector = new THREE.Vector3();\r\n\tvar camera = new THREE.Camera();\r\n\r\n\tfunction setPoint( point, x, y, z ) {\r\n\r\n\t\tvector.set( x, y, z ).unproject( camera );\r\n\r\n\t\tvar points = pointMap[ point ];\r\n\r\n\t\tif ( points !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn function () {\r\n\r\n\t\tgeometry = this.geometry;\r\n\t\tpointMap = this.pointMap;\r\n\r\n\t\tvar w = 1, h = 1;\r\n\r\n\t\t// we need just camera projection matrix\r\n\t\t// world matrix must be identity\r\n\r\n\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\r\n\r\n\t\t// center / target\r\n\r\n\t\tsetPoint( \"c\", 0, 0, - 1 );\r\n\t\tsetPoint( \"t\", 0, 0,  1 );\r\n\r\n\t\t// near\r\n\r\n\t\tsetPoint( \"n1\", - w, - h, - 1 );\r\n\t\tsetPoint( \"n2\",   w, - h, - 1 );\r\n\t\tsetPoint( \"n3\", - w,   h, - 1 );\r\n\t\tsetPoint( \"n4\",   w,   h, - 1 );\r\n\r\n\t\t// far\r\n\r\n\t\tsetPoint( \"f1\", - w, - h, 1 );\r\n\t\tsetPoint( \"f2\",   w, - h, 1 );\r\n\t\tsetPoint( \"f3\", - w,   h, 1 );\r\n\t\tsetPoint( \"f4\",   w,   h, 1 );\r\n\r\n\t\t// up\r\n\r\n\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\r\n\r\n\t\t// cross\r\n\r\n\t\tsetPoint( \"cf1\", - w,   0, 1 );\r\n\t\tsetPoint( \"cf2\",   w,   0, 1 );\r\n\t\tsetPoint( \"cf3\",   0, - h, 1 );\r\n\t\tsetPoint( \"cf4\",   0,   h, 1 );\r\n\r\n\t\tsetPoint( \"cn1\", - w,   0, - 1 );\r\n\t\tsetPoint( \"cn2\",   w,   0, - 1 );\r\n\t\tsetPoint( \"cn3\",   0, - h, - 1 );\r\n\t\tsetPoint( \"cn4\",   0,   h, - 1 );\r\n\r\n\t\tgeometry.verticesNeedUpdate = true;\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/DirectionalLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.DirectionalLightHelper = function ( light, size ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tthis.matrix = light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tsize = size || 1;\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\tgeometry.vertices.push(\r\n\t\tnew THREE.Vector3( - size,   size, 0 ),\r\n\t\tnew THREE.Vector3(   size,   size, 0 ),\r\n\t\tnew THREE.Vector3(   size, - size, 0 ),\r\n\t\tnew THREE.Vector3( - size, - size, 0 ),\r\n\t\tnew THREE.Vector3( - size,   size, 0 )\r\n\t);\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\r\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\tthis.lightPlane = new THREE.Line( geometry, material );\r\n\tthis.add( this.lightPlane );\r\n\r\n\tgeometry = new THREE.Geometry();\r\n\tgeometry.vertices.push(\r\n\t\tnew THREE.Vector3(),\r\n\t\tnew THREE.Vector3()\r\n\t);\r\n\r\n\tmaterial = new THREE.LineBasicMaterial( { fog: false } );\r\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\tthis.targetLine = new THREE.Line( geometry, material );\r\n\tthis.add( this.targetLine );\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;\r\n\r\nTHREE.DirectionalLightHelper.prototype.dispose = function () {\r\n\r\n\tthis.lightPlane.geometry.dispose();\r\n\tthis.lightPlane.material.dispose();\r\n\tthis.targetLine.geometry.dispose();\r\n\tthis.targetLine.material.dispose();\r\n\r\n};\r\n\r\nTHREE.DirectionalLightHelper.prototype.update = function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\tvar v3 = new THREE.Vector3();\r\n\r\n\treturn function () {\r\n\r\n\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\t\tv3.subVectors( v2, v1 );\r\n\r\n\t\tthis.lightPlane.lookAt( v3 );\r\n\t\tthis.lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t\tthis.targetLine.geometry.vertices[ 1 ].copy( v3 );\r\n\t\tthis.targetLine.geometry.verticesNeedUpdate = true;\r\n\t\tthis.targetLine.material.color.copy( this.lightPlane.material.color );\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/EdgesHelper.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @param object THREE.Mesh whose geometry will be used\r\n * @param hex line color\r\n * @param thresholdAngle the minimum angle (in degrees),\r\n * between the face normals of adjacent faces,\r\n * that is required to render an edge. A value of 10 means\r\n * an edge is only rendered if the angle is at least 10 degrees.\r\n */\r\n\r\nTHREE.EdgesHelper = function ( object, hex, thresholdAngle ) {\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\r\n\r\n\tTHREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );\r\n\r\n\tthis.matrix = object.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;\r\n\r\n// File:src/extras/helpers/FaceNormalsHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {\r\n\r\n\t// FaceNormalsHelper only supports THREE.Geometry\r\n\r\n\tthis.object = object;\r\n\r\n\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\r\n\r\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t//\r\n\r\n\tvar nNormals = 0;\r\n\r\n\tvar objGeometry = this.object.geometry;\r\n\r\n\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\r\n\t\tnNormals = objGeometry.faces.length;\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\r\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\r\n\r\n\tgeometry.addAttribute( 'position', positions );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t//\r\n\r\n\tthis.matrixAutoUpdate = false;\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;\r\n\r\nTHREE.FaceNormalsHelper.prototype.update = ( function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\tvar normalMatrix = new THREE.Matrix3();\r\n\r\n\treturn function update() {\r\n\r\n\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t//\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\tvar faces = objGeometry.faces;\r\n\r\n\t\tvar idx = 0;\r\n\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tvar normal = face.normal;\r\n\r\n\t\t\tv1.copy( vertices[ face.a ] )\r\n\t\t\t\t.add( vertices[ face.b ] )\r\n\t\t\t\t.add( vertices[ face.c ] )\r\n\t\t\t\t.divideScalar( 3 )\r\n\t\t\t\t.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\r\n\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\r\n\t\t\tidx = idx + 1;\r\n\r\n\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\r\n\t\t\tidx = idx + 1;\r\n\r\n\t\t}\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}() );\r\n\r\n// File:src/extras/helpers/GridHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.GridHelper = function ( size, step ) {\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\r\n\r\n\tthis.color1 = new THREE.Color( 0x444444 );\r\n\tthis.color2 = new THREE.Color( 0x888888 );\r\n\r\n\tfor ( var i = - size; i <= size; i += step ) {\r\n\r\n\t\tgeometry.vertices.push(\r\n\t\t\tnew THREE.Vector3( - size, 0, i ), new THREE.Vector3( size, 0, i ),\r\n\t\t\tnew THREE.Vector3( i, 0, - size ), new THREE.Vector3( i, 0, size )\r\n\t\t);\r\n\r\n\t\tvar color = i === 0 ? this.color1 : this.color2;\r\n\r\n\t\tgeometry.colors.push( color, color, color, color );\r\n\r\n\t}\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n};\r\n\r\nTHREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.GridHelper.prototype.constructor = THREE.GridHelper;\r\n\r\nTHREE.GridHelper.prototype.setColors = function( colorCenterLine, colorGrid ) {\r\n\r\n\tthis.color1.set( colorCenterLine );\r\n\tthis.color2.set( colorGrid );\r\n\r\n\tthis.geometry.colorsNeedUpdate = true;\r\n\r\n};\r\n\r\n// File:src/extras/helpers/HemisphereLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.HemisphereLightHelper = function ( light, sphereSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tthis.matrix = light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.colors = [ new THREE.Color(), new THREE.Color() ];\r\n\r\n\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\r\n\tgeometry.rotateX( - Math.PI / 2 );\r\n\r\n\tfor ( var i = 0, il = 8; i < il; i ++ ) {\r\n\r\n\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\r\n\r\n\t}\r\n\r\n\tvar material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( geometry, material );\r\n\tthis.add( this.lightSphere );\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;\r\n\r\nTHREE.HemisphereLightHelper.prototype.dispose = function () {\r\n\r\n\tthis.lightSphere.geometry.dispose();\r\n\tthis.lightSphere.material.dispose();\r\n\r\n};\r\n\r\nTHREE.HemisphereLightHelper.prototype.update = function () {\r\n\r\n\tvar vector = new THREE.Vector3();\r\n\r\n\treturn function () {\r\n\r\n\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\r\n\r\n\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\r\n\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\r\n\r\n\t}\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/PointLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.PointLightHelper = function ( light, sphereSize ) {\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\r\n\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\tthis.matrix = this.light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\t/*\r\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\r\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n\r\n\tvar d = light.distance;\r\n\r\n\tif ( d === 0.0 ) {\r\n\r\n\t\tthis.lightDistance.visible = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t}\r\n\r\n\tthis.add( this.lightDistance );\r\n\t*/\r\n\r\n};\r\n\r\nTHREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );\r\nTHREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;\r\n\r\nTHREE.PointLightHelper.prototype.dispose = function () {\r\n\r\n\tthis.geometry.dispose();\r\n\tthis.material.dispose();\r\n\r\n};\r\n\r\nTHREE.PointLightHelper.prototype.update = function () {\r\n\r\n\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t/*\r\n\tvar d = this.light.distance;\r\n\r\n\tif ( d === 0.0 ) {\r\n\r\n\t\tthis.lightDistance.visible = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.lightDistance.visible = true;\r\n\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t}\r\n\t*/\r\n\r\n};\r\n\r\n// File:src/extras/helpers/SkeletonHelper.js\r\n\r\n/**\r\n * @author Sean Griffin / http://twitter.com/sgrif\r\n * @author Michael Guerrero / http://realitymeltdown.com\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.SkeletonHelper = function ( object ) {\r\n\r\n\tthis.bones = this.getBoneList( object );\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\r\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\r\n\r\n\t\tvar bone = this.bones[ i ];\r\n\r\n\t\tif ( bone.parent instanceof THREE.Bone ) {\r\n\r\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 0, 1 ) );\r\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 1, 0 ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgeometry.dynamic = true;\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n\tthis.root = object;\r\n\r\n\tthis.matrix = object.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\n\r\nTHREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;\r\n\r\nTHREE.SkeletonHelper.prototype.getBoneList = function( object ) {\r\n\r\n\tvar boneList = [];\r\n\r\n\tif ( object instanceof THREE.Bone ) {\r\n\r\n\t\tboneList.push( object );\r\n\r\n\t}\r\n\r\n\tfor ( var i = 0; i < object.children.length; i ++ ) {\r\n\r\n\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\r\n\r\n\t}\r\n\r\n\treturn boneList;\r\n\r\n};\r\n\r\nTHREE.SkeletonHelper.prototype.update = function () {\r\n\r\n\tvar geometry = this.geometry;\r\n\r\n\tvar matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );\r\n\r\n\tvar boneMatrix = new THREE.Matrix4();\r\n\r\n\tvar j = 0;\r\n\r\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\r\n\r\n\t\tvar bone = this.bones[ i ];\r\n\r\n\t\tif ( bone.parent instanceof THREE.Bone ) {\r\n\r\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\r\n\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\r\n\r\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\r\n\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\r\n\r\n\t\t\tj += 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgeometry.verticesNeedUpdate = true;\r\n\r\n\tgeometry.computeBoundingSphere();\r\n\r\n};\r\n\r\n// File:src/extras/helpers/SpotLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.SpotLightHelper = function ( light ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tthis.matrix = light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tvar geometry = new THREE.CylinderGeometry( 0, 1, 1, 8, 1, true );\r\n\r\n\tgeometry.translate( 0, - 0.5, 0 );\r\n\tgeometry.rotateX( - Math.PI / 2 );\r\n\r\n\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\r\n\tthis.cone = new THREE.Mesh( geometry, material );\r\n\tthis.add( this.cone );\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;\r\n\r\nTHREE.SpotLightHelper.prototype.dispose = function () {\r\n\r\n\tthis.cone.geometry.dispose();\r\n\tthis.cone.material.dispose();\r\n\r\n};\r\n\r\nTHREE.SpotLightHelper.prototype.update = function () {\r\n\r\n\tvar vector = new THREE.Vector3();\r\n\tvar vector2 = new THREE.Vector3();\r\n\r\n\treturn function () {\r\n\r\n\t\tvar coneLength = this.light.distance ? this.light.distance : 10000;\r\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\r\n\r\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\r\n\r\n\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\r\n\t\tthis.cone.lookAt( vector2.sub( vector ) );\r\n\r\n\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/VertexNormalsHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {\r\n\r\n\tthis.object = object;\r\n\r\n\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\r\n\r\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t//\r\n\r\n\tvar nNormals = 0;\r\n\r\n\tvar objGeometry = this.object.geometry;\r\n\r\n\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\r\n\t\tnNormals = objGeometry.faces.length * 3;\r\n\r\n\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\tnNormals = objGeometry.attributes.normal.count\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\r\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\r\n\r\n\tgeometry.addAttribute( 'position', positions );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t//\r\n\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;\r\n\r\nTHREE.VertexNormalsHelper.prototype.update = ( function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\tvar normalMatrix = new THREE.Matrix3();\r\n\r\n\treturn function update() {\r\n\r\n\t\tvar keys = [ 'a', 'b', 'c' ];\r\n\r\n\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t//\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\t\tvar faces = objGeometry.faces;\r\n\r\n\t\t\tvar idx = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\r\n\r\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\r\n\r\n\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tvar objPos = objGeometry.attributes.position;\r\n\r\n\t\t\tvar objNorm = objGeometry.attributes.normal;\r\n\r\n\t\t\tvar idx = 0;\r\n\r\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\r\n\r\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\r\n\r\n\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\r\n\r\n\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\r\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}() );\r\n\r\n// File:src/extras/helpers/WireframeHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.WireframeHelper = function ( object, hex ) {\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\r\n\r\n\tTHREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );\r\n\r\n\tthis.matrix = object.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;\r\n\r\n// File:src/extras/objects/ImmediateRenderObject.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ImmediateRenderObject = function ( material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.material = material;\r\n\tthis.render = function ( renderCallback ) {};\r\n\r\n};\r\n\r\nTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;\r\n\r\n// File:src/extras/objects/MorphBlendMesh.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.MorphBlendMesh = function( geometry, material ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\tthis.animationsMap = {};\r\n\tthis.animationsList = [];\r\n\r\n\t// prepare default animation\r\n\t// (all frames played together in 1 second)\r\n\r\n\tvar numFrames = this.geometry.morphTargets.length;\r\n\r\n\tvar name = \"__default\";\r\n\r\n\tvar startFrame = 0;\r\n\tvar endFrame = numFrames - 1;\r\n\r\n\tvar fps = numFrames / 1;\r\n\r\n\tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\tthis.setAnimationWeight( name, 1 );\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\r\nTHREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;\r\n\r\nTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\r\n\tvar animation = {\r\n\r\n\t\tstart: start,\r\n\t\tend: end,\r\n\r\n\t\tlength: end - start + 1,\r\n\r\n\t\tfps: fps,\r\n\t\tduration: ( end - start ) / fps,\r\n\r\n\t\tlastFrame: 0,\r\n\t\tcurrentFrame: 0,\r\n\r\n\t\tactive: false,\r\n\r\n\t\ttime: 0,\r\n\t\tdirection: 1,\r\n\t\tweight: 1,\r\n\r\n\t\tdirectionBackwards: false,\r\n\t\tmirroredLoop: false\r\n\r\n\t};\r\n\r\n\tthis.animationsMap[ name ] = animation;\r\n\tthis.animationsList.push( animation );\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\r\n\tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\r\n\tvar firstAnimation, frameRanges = {};\r\n\r\n\tvar geometry = this.geometry;\r\n\r\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\tvar chunks = morph.name.match( pattern );\r\n\r\n\t\tif ( chunks && chunks.length > 1 ) {\r\n\r\n\t\t\tvar name = chunks[ 1 ];\r\n\r\n\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\r\n\t\t\tvar range = frameRanges[ name ];\r\n\r\n\t\t\tif ( i < range.start ) range.start = i;\r\n\t\t\tif ( i > range.end ) range.end = i;\r\n\r\n\t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var name in frameRanges ) {\r\n\r\n\t\tvar range = frameRanges[ name ];\r\n\t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\r\n\t}\r\n\r\n\tthis.firstAnimation = firstAnimation;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.direction = 1;\r\n\t\tanimation.directionBackwards = false;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.direction = - 1;\r\n\t\tanimation.directionBackwards = true;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.fps = fps;\r\n\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.duration = duration;\r\n\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.weight = weight;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.time = time;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\r\n\tvar time = 0;\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\ttime = animation.time;\r\n\r\n\t}\r\n\r\n\treturn time;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\r\n\tvar duration = - 1;\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tduration = animation.duration;\r\n\r\n\t}\r\n\r\n\treturn duration;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.time = 0;\r\n\t\tanimation.active = true;\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.active = false;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\r\n\r\n\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\r\n\t\tvar animation = this.animationsList[ i ];\r\n\r\n\t\tif ( ! animation.active ) continue;\r\n\r\n\t\tvar frameTime = animation.duration / animation.length;\r\n\r\n\t\tanimation.time += animation.direction * delta;\r\n\r\n\t\tif ( animation.mirroredLoop ) {\r\n\r\n\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\r\n\t\t\t\tanimation.direction *= - 1;\r\n\r\n\t\t\t\tif ( animation.time > animation.duration ) {\r\n\r\n\t\t\t\t\tanimation.time = animation.duration;\r\n\t\t\t\t\tanimation.directionBackwards = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( animation.time < 0 ) {\r\n\r\n\t\t\t\t\tanimation.time = 0;\r\n\t\t\t\t\tanimation.directionBackwards = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tanimation.time = animation.time % animation.duration;\r\n\r\n\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\r\n\t\t}\r\n\r\n\t\tvar keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t\tvar weight = animation.weight;\r\n\r\n\t\tif ( keyframe !== animation.currentFrame ) {\r\n\r\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\r\n\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n\t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t\t\tanimation.currentFrame = keyframe;\r\n\r\n\t\t}\r\n\r\n\t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\r\n\t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\r\n\t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\r\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// Export the THREE object for **Node.js**, with\r\n// backwards-compatibility for the old `require()` API. If we're in\r\n// the browser, add `_` as a global object via a string identifier,\r\n// for Closure Compiler \"advanced\" mode.\r\nif (typeof exports !== 'undefined') {\r\n  if (typeof module !== 'undefined' && module.exports) {\r\n    exports = module.exports = THREE;\r\n  }\r\n  exports.THREE = THREE;\r\n} else {\r\n  this['THREE'] = THREE;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/three/three.js\n ** module id = 6\n ** module chunks = 0\n **/"],"sourceRoot":""}